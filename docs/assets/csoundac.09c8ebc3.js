import{l as r,r as c,C as g}from"./index.92507074.js";let a,i,l;async function d(){a?r("[CsoundAC] CsoundAC already loaded.","warning"):(r("[CsoundAC] Loading the CsoundAC library...","warning"),a=await createCsoundAC(),new a.Conversions,l=new a.PITV)}async function h(e,n,s=1,o=!1){r("[CsoundAC] Creating PITV group...","warning"),await d(),l.initialize(e,n,s,o)}async function w(e){return r("[CsoundAC] Creating Scale...","warning"),await d(),i=await a.scaleForName(e),i}async function m(e){return r("[CsoundAC] Creating Chord...","warning"),await d(),chord=await a.chordForName(e),chord}const f=c("scaleS",(e,n)=>(init(),n.onTrigger((s,o)=>{chord=i.chord(e,chord.voices()),r("[CsoundAC] scaleS: {chord}","warning")}))),A=c("scaleT",(e,n)=>(init(),n.onTrigger((s,o)=>{chord=i.transpose_degrees(chord,e),r("[CsoundAC] scaleS: {chord}","warning")}))),y=c("scaleM",(e,n)=>(init(),n.onTrigger((s,o)=>{let t=i.modulations_for_voices(chord,e);if(t.length>0){let C=Math.floor(t.length*Math.random());i=t[C]}}))),T=c("scaleN",(e,n)=>(init(),n.onTrigger((s,o)=>{let t=getMidiKey(g(o))+e;t=a.conformToPitchClassSet(t,i)})));export{m as csacChord,d as csacCreate,h as csacPitv,w as csacScale,y as scaleM,T as scaleN,f as scaleS,A as scaleT};
//# sourceMappingURL=csoundac.09c8ebc3.js.map
