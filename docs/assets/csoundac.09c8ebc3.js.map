{"version":3,"file":"csoundac.09c8ebc3.js","sources":["../../packages/csoundac/csoundac.mjs"],"sourcesContent":["import { getFrequency, logger, register } from '@strudel.cycles/core';\n\nlet CsoundAC;\nlet conversions;\nlet scale;\nlet pitv;\n\n\nexport async function csacCreate() {\n  if (!CsoundAC) {\n    logger('[CsoundAC] Loading the CsoundAC library...', 'warning');\n    CsoundAC = await createCsoundAC(); \n    conversions = new CsoundAC.Conversions();\n    pitv = new CsoundAC.PITV();\n  } else {\n    logger('[CsoundAC] CsoundAC already loaded.', 'warning');\n  }\n}\n\nexport async function csacPitv(voices, range, g=1., printme=false) {\n  logger('[CsoundAC] Creating PITV group...', 'warning');\n  await csacCreate();\n  pitv.initialize(voices, range, g, printme);\n}\n\nexport async function csacScale(name) {\n  logger('[CsoundAC] Creating Scale...', 'warning');\n  await csacCreate();\n  scale = await CsoundAC.scaleForName(name);\n  return scale;\n}\n\nexport async function csacChord(name) {\n  logger('[CsoundAC] Creating Chord...', 'warning');\n  await csacCreate();\n  chord = await CsoundAC.chordForName(name);\n  return chord;\n}\n\n/** \n * Global scope, to be called before invoking any Patterns:\n *   csacCreate -- Initializes the CsoundAC library.\n *   csacPitv -- Creates and initializes a global PITV group.\n *   csacScale -- Creates and initializes a global CsoundAC Scale.\n *   csacChord -- Creates and initializes a global CsoundAC Chord.\n * \n * Pattern scope:\n *   pitvP -- Sets the P index in the PITV.\n *   pitvI -- Sets the I index in the PITV.\n *   pitvT -- Sets the T index in the PITV.\n *   pitvV -- Sets the V index in the PITV.\n *   pitvN -- Conforms the hap pitch to the PITV.\n *   chordT -- Transposes the chord.\n *   chordI -- Inverts the chord.\n *   chordK -- Applies the K transformation to the chord.\n *   chordQ -- Applies the Q transformation to the chord.\n *   chordN -- Conforms the hap pitch to the chord.\n *   scaleS -- Sets the chord from the scale step.\n *   scaleT -- Transposes the chord by scale step.\n *   scaleM -- Modulates to a new Scale from the chord, if it's a pivot chord.\n *   scaleN -- Conforms the hap pitch to the scale.\n */\nexport const scaleS = register('scaleS', (scale_step, pat) => {\n    init(); \n    return pat.onTrigger((tidal_time, hap) => {\n      chord = scale.chord(scale_step, chord.voices());\n      logger(`[CsoundAC] scaleS: {chord}`, 'warning');\n  });\n})\n\nexport const scaleT = register('scaleT', (scale_steps, pat) => {\n    init(); \n    return pat.onTrigger((tidal_time, hap) => {\n      chord = scale.transpose_degrees(chord, scale_steps);\n      logger(`[CsoundAC] scaleS: {chord}`, 'warning');\n  });\n})\n\nexport const scaleM = register('scaleM', (voices, pat) => {\n    init(); \n    return pat.onTrigger((tidal_time, hap) => {\n      let modulations = scale.modulations_for_voices(chord, voices);\n      if (modulations.length > 0) {\n        let index = Math.floor(modulations.length * Math.random())\n        scale = modulations[index];\n      }\n  });\n})\n\nexport const scaleN = register('scaleN', (semitones, pat) => {\n    init(); \n    return pat.onTrigger((tidal_time, hap) => {\n      let {value, context} = hap;\n      let midi_key = getMidiKey(getFrequency(hap)) + semitones; \n      // Conform to Scale.\n      midi_key = CsoundAC.conformToPitchClassSet(midi_key, scale);\n      value = midi_key;\n   });\n})\n\n"],"names":["CsoundAC","scale","pitv","csacCreate","logger","csacPitv","voices","range","g","printme","csacScale","name","csacChord","scaleS","register","scale_step","pat","tidal_time","hap","scaleT","scale_steps","scaleM","modulations","index","scaleN","semitones","midi_key","getFrequency"],"mappings":"sDAEA,IAAIA,EAEAC,EACAC,EAGG,eAAeC,GAAa,CAC5BH,EAMHI,EAAO,sCAAuC,SAAS,GALvDA,EAAO,6CAA8C,SAAS,EAC9DJ,EAAW,MAAM,iBACH,IAAIA,EAAS,YAC3BE,EAAO,IAAIF,EAAS,KAIxB,CAEO,eAAeK,EAASC,EAAQC,EAAOC,EAAE,EAAIC,EAAQ,GAAO,CACjEL,EAAO,oCAAqC,SAAS,EACrD,MAAMD,EAAU,EAChBD,EAAK,WAAWI,EAAQC,EAAOC,EAAGC,CAAO,CAC3C,CAEO,eAAeC,EAAUC,EAAM,CACpC,OAAAP,EAAO,+BAAgC,SAAS,EAChD,MAAMD,EAAU,EAChBF,EAAQ,MAAMD,EAAS,aAAaW,CAAI,EACjCV,CACT,CAEO,eAAeW,EAAUD,EAAM,CACpC,OAAAP,EAAO,+BAAgC,SAAS,EAChD,MAAMD,EAAU,EAChB,MAAQ,MAAMH,EAAS,aAAaW,CAAI,EACjC,KACT,CAyBY,MAACE,EAASC,EAAS,SAAU,CAACC,EAAYC,KAClD,OACOA,EAAI,UAAU,CAACC,EAAYC,IAAQ,CACxC,MAAQjB,EAAM,MAAMc,EAAY,MAAM,OAAM,CAAE,EAC9CX,EAAO,6BAA8B,SAAS,CACpD,CAAG,EACF,EAEYe,EAASL,EAAS,SAAU,CAACM,EAAaJ,KACnD,OACOA,EAAI,UAAU,CAACC,EAAYC,IAAQ,CACxC,MAAQjB,EAAM,kBAAkB,MAAOmB,CAAW,EAClDhB,EAAO,6BAA8B,SAAS,CACpD,CAAG,EACF,EAEYiB,EAASP,EAAS,SAAU,CAACR,EAAQU,KAC9C,OACOA,EAAI,UAAU,CAACC,EAAYC,IAAQ,CACxC,IAAII,EAAcrB,EAAM,uBAAuB,MAAOK,CAAM,EAC5D,GAAIgB,EAAY,OAAS,EAAG,CAC1B,IAAIC,EAAQ,KAAK,MAAMD,EAAY,OAAS,KAAK,QAAQ,EACzDrB,EAAQqB,EAAYC,EACrB,CACP,CAAG,EACF,EAEYC,EAASV,EAAS,SAAU,CAACW,EAAWT,KACjD,OACOA,EAAI,UAAU,CAACC,EAAYC,IAAQ,CAExC,IAAIQ,EAAW,WAAWC,EAAaT,CAAG,CAAC,EAAIO,EAE/CC,EAAW1B,EAAS,uBAAuB0B,EAAUzB,CAAK,CAEhE,CAAI,EACH"}