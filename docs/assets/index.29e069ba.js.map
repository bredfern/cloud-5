{"version":3,"file":"index.29e069ba.js","sources":["../../node_modules/@tonaljs/core/dist/index.es.js","../../node_modules/@tonaljs/abc-notation/dist/index.es.js","../../node_modules/@tonaljs/array/dist/index.es.js","../../node_modules/@tonaljs/collection/dist/index.es.js","../../node_modules/@tonaljs/pcset/dist/index.es.js","../../node_modules/@tonaljs/chord-type/dist/index.es.js","../../node_modules/@tonaljs/chord-detect/dist/index.es.js","../../node_modules/@tonaljs/scale-type/dist/index.es.js","../../node_modules/@tonaljs/chord/dist/index.es.js","../../node_modules/@tonaljs/duration-value/dist/index.es.js","../../node_modules/@tonaljs/interval/dist/index.es.js","../../node_modules/@tonaljs/midi/dist/index.es.js","../../node_modules/@tonaljs/note/dist/index.es.js","../../node_modules/@tonaljs/roman-numeral/dist/index.es.js","../../node_modules/@tonaljs/key/dist/index.es.js","../../node_modules/@tonaljs/mode/dist/index.es.js","../../node_modules/@tonaljs/progression/dist/index.es.js","../../node_modules/@tonaljs/range/dist/index.es.js","../../node_modules/@tonaljs/scale/dist/index.es.js","../../node_modules/@tonaljs/time-signature/dist/index.es.js","../../node_modules/@tonaljs/tonal/dist/index.es.js","../../packages/tonal/tonal.mjs","../../node_modules/chord-voicings/dist/getBestVoicing.js","../../node_modules/chord-voicings/dist/tokenizeChord.js","../../node_modules/chord-voicings/dist/voicingsInRange.js","../../node_modules/chord-voicings/dist/dictionaryVoicing.js","../../node_modules/chord-voicings/dist/minTopNoteDiff.js","../../node_modules/chord-voicings/dist/index.js","../../packages/tonal/voicings.mjs"],"sourcesContent":["/**\r\n * Fill a string with a repeated character\r\n *\r\n * @param character\r\n * @param repetition\r\n */\r\nconst fillStr = (s, n) => Array(Math.abs(n) + 1).join(s);\r\nfunction deprecate(original, alternative, fn) {\r\n    return function (...args) {\r\n        // tslint:disable-next-line\r\n        console.warn(`${original} is deprecated. Use ${alternative}.`);\r\n        return fn.apply(this, args);\r\n    };\r\n}\n\nfunction isNamed(src) {\r\n    return src !== null && typeof src === \"object\" && typeof src.name === \"string\"\r\n        ? true\r\n        : false;\r\n}\n\nfunction isPitch(pitch) {\r\n    return pitch !== null &&\r\n        typeof pitch === \"object\" &&\r\n        typeof pitch.step === \"number\" &&\r\n        typeof pitch.alt === \"number\"\r\n        ? true\r\n        : false;\r\n}\r\n// The number of fifths of [C, D, E, F, G, A, B]\r\nconst FIFTHS = [0, 2, 4, -1, 1, 3, 5];\r\n// The number of octaves it span each step\r\nconst STEPS_TO_OCTS = FIFTHS.map((fifths) => Math.floor((fifths * 7) / 12));\r\nfunction encode(pitch) {\r\n    const { step, alt, oct, dir = 1 } = pitch;\r\n    const f = FIFTHS[step] + 7 * alt;\r\n    if (oct === undefined) {\r\n        return [dir * f];\r\n    }\r\n    const o = oct - STEPS_TO_OCTS[step] - 4 * alt;\r\n    return [dir * f, dir * o];\r\n}\r\n// We need to get the steps from fifths\r\n// Fifths for CDEFGAB are [ 0, 2, 4, -1, 1, 3, 5 ]\r\n// We add 1 to fifths to avoid negative numbers, so:\r\n// for [\"F\", \"C\", \"G\", \"D\", \"A\", \"E\", \"B\"] we have:\r\nconst FIFTHS_TO_STEPS = [3, 0, 4, 1, 5, 2, 6];\r\nfunction decode(coord) {\r\n    const [f, o, dir] = coord;\r\n    const step = FIFTHS_TO_STEPS[unaltered(f)];\r\n    const alt = Math.floor((f + 1) / 7);\r\n    if (o === undefined) {\r\n        return { step, alt, dir };\r\n    }\r\n    const oct = o + 4 * alt + STEPS_TO_OCTS[step];\r\n    return { step, alt, oct, dir };\r\n}\r\n// Return the number of fifths as if it were unaltered\r\nfunction unaltered(f) {\r\n    const i = (f + 1) % 7;\r\n    return i < 0 ? 7 + i : i;\r\n}\n\nconst NoNote = { empty: true, name: \"\", pc: \"\", acc: \"\" };\r\nconst cache$1 = new Map();\r\nconst stepToLetter = (step) => \"CDEFGAB\".charAt(step);\r\nconst altToAcc = (alt) => alt < 0 ? fillStr(\"b\", -alt) : fillStr(\"#\", alt);\r\nconst accToAlt = (acc) => acc[0] === \"b\" ? -acc.length : acc.length;\r\n/**\r\n * Given a note literal (a note name or a note object), returns the Note object\r\n * @example\r\n * note('Bb4') // => { name: \"Bb4\", midi: 70, chroma: 10, ... }\r\n */\r\nfunction note(src) {\r\n    const cached = cache$1.get(src);\r\n    if (cached) {\r\n        return cached;\r\n    }\r\n    const value = typeof src === \"string\"\r\n        ? parse$1(src)\r\n        : isPitch(src)\r\n            ? note(pitchName$1(src))\r\n            : isNamed(src)\r\n                ? note(src.name)\r\n                : NoNote;\r\n    cache$1.set(src, value);\r\n    return value;\r\n}\r\nconst REGEX$1 = /^([a-gA-G]?)(#{1,}|b{1,}|x{1,}|)(-?\\d*)\\s*(.*)$/;\r\n/**\r\n * @private\r\n */\r\nfunction tokenizeNote(str) {\r\n    const m = REGEX$1.exec(str);\r\n    return [m[1].toUpperCase(), m[2].replace(/x/g, \"##\"), m[3], m[4]];\r\n}\r\n/**\r\n * @private\r\n */\r\nfunction coordToNote(noteCoord) {\r\n    return note(decode(noteCoord));\r\n}\r\nconst mod = (n, m) => ((n % m) + m) % m;\r\nconst SEMI = [0, 2, 4, 5, 7, 9, 11];\r\nfunction parse$1(noteName) {\r\n    const tokens = tokenizeNote(noteName);\r\n    if (tokens[0] === \"\" || tokens[3] !== \"\") {\r\n        return NoNote;\r\n    }\r\n    const letter = tokens[0];\r\n    const acc = tokens[1];\r\n    const octStr = tokens[2];\r\n    const step = (letter.charCodeAt(0) + 3) % 7;\r\n    const alt = accToAlt(acc);\r\n    const oct = octStr.length ? +octStr : undefined;\r\n    const coord = encode({ step, alt, oct });\r\n    const name = letter + acc + octStr;\r\n    const pc = letter + acc;\r\n    const chroma = (SEMI[step] + alt + 120) % 12;\r\n    const height = oct === undefined\r\n        ? mod(SEMI[step] + alt, 12) - 12 * 99\r\n        : SEMI[step] + alt + 12 * (oct + 1);\r\n    const midi = height >= 0 && height <= 127 ? height : null;\r\n    const freq = oct === undefined ? null : Math.pow(2, (height - 69) / 12) * 440;\r\n    return {\r\n        empty: false,\r\n        acc,\r\n        alt,\r\n        chroma,\r\n        coord,\r\n        freq,\r\n        height,\r\n        letter,\r\n        midi,\r\n        name,\r\n        oct,\r\n        pc,\r\n        step,\r\n    };\r\n}\r\nfunction pitchName$1(props) {\r\n    const { step, alt, oct } = props;\r\n    const letter = stepToLetter(step);\r\n    if (!letter) {\r\n        return \"\";\r\n    }\r\n    const pc = letter + altToAcc(alt);\r\n    return oct || oct === 0 ? pc + oct : pc;\r\n}\n\nconst NoInterval = { empty: true, name: \"\", acc: \"\" };\r\n// shorthand tonal notation (with quality after number)\r\nconst INTERVAL_TONAL_REGEX = \"([-+]?\\\\d+)(d{1,4}|m|M|P|A{1,4})\";\r\n// standard shorthand notation (with quality before number)\r\nconst INTERVAL_SHORTHAND_REGEX = \"(AA|A|P|M|m|d|dd)([-+]?\\\\d+)\";\r\nconst REGEX = new RegExp(\"^\" + INTERVAL_TONAL_REGEX + \"|\" + INTERVAL_SHORTHAND_REGEX + \"$\");\r\n/**\r\n * @private\r\n */\r\nfunction tokenizeInterval(str) {\r\n    const m = REGEX.exec(`${str}`);\r\n    if (m === null) {\r\n        return [\"\", \"\"];\r\n    }\r\n    return m[1] ? [m[1], m[2]] : [m[4], m[3]];\r\n}\r\nconst cache = {};\r\n/**\r\n * Get interval properties. It returns an object with:\r\n *\r\n * - name: the interval name\r\n * - num: the interval number\r\n * - type: 'perfectable' or 'majorable'\r\n * - q: the interval quality (d, m, M, A)\r\n * - dir: interval direction (1 ascending, -1 descending)\r\n * - simple: the simplified number\r\n * - semitones: the size in semitones\r\n * - chroma: the interval chroma\r\n *\r\n * @param {string} interval - the interval name\r\n * @return {Object} the interval properties\r\n *\r\n * @example\r\n * import { interval } from '@tonaljs/core'\r\n * interval('P5').semitones // => 7\r\n * interval('m3').type // => 'majorable'\r\n */\r\nfunction interval(src) {\r\n    return typeof src === \"string\"\r\n        ? cache[src] || (cache[src] = parse(src))\r\n        : isPitch(src)\r\n            ? interval(pitchName(src))\r\n            : isNamed(src)\r\n                ? interval(src.name)\r\n                : NoInterval;\r\n}\r\nconst SIZES = [0, 2, 4, 5, 7, 9, 11];\r\nconst TYPES = \"PMMPPMM\";\r\nfunction parse(str) {\r\n    const tokens = tokenizeInterval(str);\r\n    if (tokens[0] === \"\") {\r\n        return NoInterval;\r\n    }\r\n    const num = +tokens[0];\r\n    const q = tokens[1];\r\n    const step = (Math.abs(num) - 1) % 7;\r\n    const t = TYPES[step];\r\n    if (t === \"M\" && q === \"P\") {\r\n        return NoInterval;\r\n    }\r\n    const type = t === \"M\" ? \"majorable\" : \"perfectable\";\r\n    const name = \"\" + num + q;\r\n    const dir = num < 0 ? -1 : 1;\r\n    const simple = num === 8 || num === -8 ? num : dir * (step + 1);\r\n    const alt = qToAlt(type, q);\r\n    const oct = Math.floor((Math.abs(num) - 1) / 7);\r\n    const semitones = dir * (SIZES[step] + alt + 12 * oct);\r\n    const chroma = (((dir * (SIZES[step] + alt)) % 12) + 12) % 12;\r\n    const coord = encode({ step, alt, oct, dir });\r\n    return {\r\n        empty: false,\r\n        name,\r\n        num,\r\n        q,\r\n        step,\r\n        alt,\r\n        dir,\r\n        type,\r\n        simple,\r\n        semitones,\r\n        chroma,\r\n        coord,\r\n        oct,\r\n    };\r\n}\r\n/**\r\n * @private\r\n *\r\n * forceDescending is used in the case of unison (#243)\r\n */\r\nfunction coordToInterval(coord, forceDescending) {\r\n    const [f, o = 0] = coord;\r\n    const isDescending = f * 7 + o * 12 < 0;\r\n    const ivl = forceDescending || isDescending ? [-f, -o, -1] : [f, o, 1];\r\n    return interval(decode(ivl));\r\n}\r\nfunction qToAlt(type, q) {\r\n    return (q === \"M\" && type === \"majorable\") ||\r\n        (q === \"P\" && type === \"perfectable\")\r\n        ? 0\r\n        : q === \"m\" && type === \"majorable\"\r\n            ? -1\r\n            : /^A+$/.test(q)\r\n                ? q.length\r\n                : /^d+$/.test(q)\r\n                    ? -1 * (type === \"perfectable\" ? q.length : q.length + 1)\r\n                    : 0;\r\n}\r\n// return the interval name of a pitch\r\nfunction pitchName(props) {\r\n    const { step, alt, oct = 0, dir } = props;\r\n    if (!dir) {\r\n        return \"\";\r\n    }\r\n    const calcNum = step + 1 + 7 * oct;\r\n    // this is an edge case: descending pitch class unison (see #243)\r\n    const num = calcNum === 0 ? step + 1 : calcNum;\r\n    const d = dir < 0 ? \"-\" : \"\";\r\n    const type = TYPES[step] === \"M\" ? \"majorable\" : \"perfectable\";\r\n    const name = d + num + altToQ(type, alt);\r\n    return name;\r\n}\r\nfunction altToQ(type, alt) {\r\n    if (alt === 0) {\r\n        return type === \"majorable\" ? \"M\" : \"P\";\r\n    }\r\n    else if (alt === -1 && type === \"majorable\") {\r\n        return \"m\";\r\n    }\r\n    else if (alt > 0) {\r\n        return fillStr(\"A\", alt);\r\n    }\r\n    else {\r\n        return fillStr(\"d\", type === \"perfectable\" ? alt : alt + 1);\r\n    }\r\n}\n\n/**\r\n * Transpose a note by an interval.\r\n *\r\n * @param {string} note - the note or note name\r\n * @param {string} interval - the interval or interval name\r\n * @return {string} the transposed note name or empty string if not valid notes\r\n * @example\r\n * import { tranpose } from \"@tonaljs/core\"\r\n * transpose(\"d3\", \"3M\") // => \"F#3\"\r\n * transpose(\"D\", \"3M\") // => \"F#\"\r\n * [\"C\", \"D\", \"E\", \"F\", \"G\"].map(pc => transpose(pc, \"M3)) // => [\"E\", \"F#\", \"G#\", \"A\", \"B\"]\r\n */\r\nfunction transpose(noteName, intervalName) {\r\n    const note$1 = note(noteName);\r\n    const interval$1 = interval(intervalName);\r\n    if (note$1.empty || interval$1.empty) {\r\n        return \"\";\r\n    }\r\n    const noteCoord = note$1.coord;\r\n    const intervalCoord = interval$1.coord;\r\n    const tr = noteCoord.length === 1\r\n        ? [noteCoord[0] + intervalCoord[0]]\r\n        : [noteCoord[0] + intervalCoord[0], noteCoord[1] + intervalCoord[1]];\r\n    return coordToNote(tr).name;\r\n}\r\n/**\r\n * Find the interval distance between two notes or coord classes.\r\n *\r\n * To find distance between coord classes, both notes must be coord classes and\r\n * the interval is always ascending\r\n *\r\n * @param {Note|string} from - the note or note name to calculate distance from\r\n * @param {Note|string} to - the note or note name to calculate distance to\r\n * @return {string} the interval name or empty string if not valid notes\r\n *\r\n */\r\nfunction distance(fromNote, toNote) {\r\n    const from = note(fromNote);\r\n    const to = note(toNote);\r\n    if (from.empty || to.empty) {\r\n        return \"\";\r\n    }\r\n    const fcoord = from.coord;\r\n    const tcoord = to.coord;\r\n    const fifths = tcoord[0] - fcoord[0];\r\n    const octs = fcoord.length === 2 && tcoord.length === 2\r\n        ? tcoord[1] - fcoord[1]\r\n        : -Math.floor((fifths * 7) / 12);\r\n    // If it's unison and not pitch class, it can be descending interval (#243)\r\n    const forceDescending = to.height === from.height &&\r\n        to.midi !== null &&\r\n        from.midi !== null &&\r\n        from.step > to.step;\r\n    return coordToInterval([fifths, octs], forceDescending).name;\r\n}\n\nexport { accToAlt, altToAcc, coordToInterval, coordToNote, decode, deprecate, distance, encode, fillStr, interval, isNamed, isPitch, note, stepToLetter, tokenizeInterval, tokenizeNote, transpose };\n//# sourceMappingURL=index.es.js.map\n","import { note, transpose as transpose$1, distance as distance$1 } from '@tonaljs/core';\n\nconst fillStr = (character, times) => Array(times + 1).join(character);\r\nconst REGEX = /^(_{1,}|=|\\^{1,}|)([abcdefgABCDEFG])([,']*)$/;\r\nfunction tokenize(str) {\r\n    const m = REGEX.exec(str);\r\n    if (!m) {\r\n        return [\"\", \"\", \"\"];\r\n    }\r\n    return [m[1], m[2], m[3]];\r\n}\r\n/**\r\n * Convert a (string) note in ABC notation into a (string) note in scientific notation\r\n *\r\n * @example\r\n * abcToScientificNotation(\"c\") // => \"C5\"\r\n */\r\nfunction abcToScientificNotation(str) {\r\n    const [acc, letter, oct] = tokenize(str);\r\n    if (letter === \"\") {\r\n        return \"\";\r\n    }\r\n    let o = 4;\r\n    for (let i = 0; i < oct.length; i++) {\r\n        o += oct.charAt(i) === \",\" ? -1 : 1;\r\n    }\r\n    const a = acc[0] === \"_\"\r\n        ? acc.replace(/_/g, \"b\")\r\n        : acc[0] === \"^\"\r\n            ? acc.replace(/\\^/g, \"#\")\r\n            : \"\";\r\n    return letter.charCodeAt(0) > 96\r\n        ? letter.toUpperCase() + a + (o + 1)\r\n        : letter + a + o;\r\n}\r\n/**\r\n * Convert a (string) note in scientific notation into a (string) note in ABC notation\r\n *\r\n * @example\r\n * scientificToAbcNotation(\"C#4\") // => \"^C\"\r\n */\r\nfunction scientificToAbcNotation(str) {\r\n    const n = note(str);\r\n    if (n.empty || (!n.oct && n.oct !== 0)) {\r\n        return \"\";\r\n    }\r\n    const { letter, acc, oct } = n;\r\n    const a = acc[0] === \"b\" ? acc.replace(/b/g, \"_\") : acc.replace(/#/g, \"^\");\r\n    const l = oct > 4 ? letter.toLowerCase() : letter;\r\n    const o = oct === 5 ? \"\" : oct > 4 ? fillStr(\"'\", oct - 5) : fillStr(\",\", 4 - oct);\r\n    return a + l + o;\r\n}\r\nfunction transpose(note, interval) {\r\n    return scientificToAbcNotation(transpose$1(abcToScientificNotation(note), interval));\r\n}\r\nfunction distance(from, to) {\r\n    return distance$1(abcToScientificNotation(from), abcToScientificNotation(to));\r\n}\r\nvar index = {\r\n    abcToScientificNotation,\r\n    scientificToAbcNotation,\r\n    tokenize,\r\n    transpose,\r\n    distance,\r\n};\n\nexport { abcToScientificNotation, index as default, distance, scientificToAbcNotation, tokenize, transpose };\n//# sourceMappingURL=index.es.js.map\n","import { note } from '@tonaljs/core';\n\n// ascending range\r\nfunction ascR(b, n) {\r\n    const a = [];\r\n    // tslint:disable-next-line:curly\r\n    for (; n--; a[n] = n + b)\r\n        ;\r\n    return a;\r\n}\r\n// descending range\r\nfunction descR(b, n) {\r\n    const a = [];\r\n    // tslint:disable-next-line:curly\r\n    for (; n--; a[n] = b - n)\r\n        ;\r\n    return a;\r\n}\r\n/**\r\n * Creates a numeric range\r\n *\r\n * @param {number} from\r\n * @param {number} to\r\n * @return {Array<number>}\r\n *\r\n * @example\r\n * range(-2, 2) // => [-2, -1, 0, 1, 2]\r\n * range(2, -2) // => [2, 1, 0, -1, -2]\r\n */\r\nfunction range(from, to) {\r\n    return from < to ? ascR(from, to - from + 1) : descR(from, from - to + 1);\r\n}\r\n/**\r\n * Rotates a list a number of times. It\"s completly agnostic about the\r\n * contents of the list.\r\n *\r\n * @param {Integer} times - the number of rotations\r\n * @param {Array} array\r\n * @return {Array} the rotated array\r\n *\r\n * @example\r\n * rotate(1, [1, 2, 3]) // => [2, 3, 1]\r\n */\r\nfunction rotate(times, arr) {\r\n    const len = arr.length;\r\n    const n = ((times % len) + len) % len;\r\n    return arr.slice(n, len).concat(arr.slice(0, n));\r\n}\r\n/**\r\n * Return a copy of the array with the null values removed\r\n * @function\r\n * @param {Array} array\r\n * @return {Array}\r\n *\r\n * @example\r\n * compact([\"a\", \"b\", null, \"c\"]) // => [\"a\", \"b\", \"c\"]\r\n */\r\nfunction compact(arr) {\r\n    return arr.filter((n) => n === 0 || n);\r\n}\r\n/**\r\n * Sort an array of notes in ascending order. Pitch classes are listed\r\n * before notes. Any string that is not a note is removed.\r\n *\r\n * @param {string[]} notes\r\n * @return {string[]} sorted array of notes\r\n *\r\n * @example\r\n * sortedNoteNames(['c2', 'c5', 'c1', 'c0', 'c6', 'c'])\r\n * // => ['C', 'C0', 'C1', 'C2', 'C5', 'C6']\r\n * sortedNoteNames(['c', 'F', 'G', 'a', 'b', 'h', 'J'])\r\n * // => ['C', 'F', 'G', 'A', 'B']\r\n */\r\nfunction sortedNoteNames(notes) {\r\n    const valid = notes.map((n) => note(n)).filter((n) => !n.empty);\r\n    return valid.sort((a, b) => a.height - b.height).map((n) => n.name);\r\n}\r\n/**\r\n * Get sorted notes with duplicates removed. Pitch classes are listed\r\n * before notes.\r\n *\r\n * @function\r\n * @param {string[]} array\r\n * @return {string[]} unique sorted notes\r\n *\r\n * @example\r\n * Array.sortedUniqNoteNames(['a', 'b', 'c2', '1p', 'p2', 'c2', 'b', 'c', 'c3' ])\r\n * // => [ 'C', 'A', 'B', 'C2', 'C3' ]\r\n */\r\nfunction sortedUniqNoteNames(arr) {\r\n    return sortedNoteNames(arr).filter((n, i, a) => i === 0 || n !== a[i - 1]);\r\n}\r\n/**\r\n * Randomizes the order of the specified array in-place, using the Fisher–Yates shuffle.\r\n *\r\n * @function\r\n * @param {Array} array\r\n * @return {Array} the array shuffled\r\n *\r\n * @example\r\n * shuffle([\"C\", \"D\", \"E\", \"F\"]) // => [...]\r\n */\r\nfunction shuffle(arr, rnd = Math.random) {\r\n    let i;\r\n    let t;\r\n    let m = arr.length;\r\n    while (m) {\r\n        i = Math.floor(rnd() * m--);\r\n        t = arr[m];\r\n        arr[m] = arr[i];\r\n        arr[i] = t;\r\n    }\r\n    return arr;\r\n}\r\n/**\r\n * Get all permutations of an array\r\n *\r\n * @param {Array} array - the array\r\n * @return {Array<Array>} an array with all the permutations\r\n * @example\r\n * permutations([\"a\", \"b\", \"c\"])) // =>\r\n * [\r\n *   [\"a\", \"b\", \"c\"],\r\n *   [\"b\", \"a\", \"c\"],\r\n *   [\"b\", \"c\", \"a\"],\r\n *   [\"a\", \"c\", \"b\"],\r\n *   [\"c\", \"a\", \"b\"],\r\n *   [\"c\", \"b\", \"a\"]\r\n * ]\r\n */\r\nfunction permutations(arr) {\r\n    if (arr.length === 0) {\r\n        return [[]];\r\n    }\r\n    return permutations(arr.slice(1)).reduce((acc, perm) => {\r\n        return acc.concat(arr.map((e, pos) => {\r\n            const newPerm = perm.slice();\r\n            newPerm.splice(pos, 0, arr[0]);\r\n            return newPerm;\r\n        }));\r\n    }, []);\r\n}\n\nexport { compact, permutations, range, rotate, shuffle, sortedNoteNames, sortedUniqNoteNames };\n//# sourceMappingURL=index.es.js.map\n","// ascending range\r\nfunction ascR(b, n) {\r\n    const a = [];\r\n    // tslint:disable-next-line:curly\r\n    for (; n--; a[n] = n + b)\r\n        ;\r\n    return a;\r\n}\r\n// descending range\r\nfunction descR(b, n) {\r\n    const a = [];\r\n    // tslint:disable-next-line:curly\r\n    for (; n--; a[n] = b - n)\r\n        ;\r\n    return a;\r\n}\r\n/**\r\n * Creates a numeric range\r\n *\r\n * @param {number} from\r\n * @param {number} to\r\n * @return {Array<number>}\r\n *\r\n * @example\r\n * range(-2, 2) // => [-2, -1, 0, 1, 2]\r\n * range(2, -2) // => [2, 1, 0, -1, -2]\r\n */\r\nfunction range(from, to) {\r\n    return from < to ? ascR(from, to - from + 1) : descR(from, from - to + 1);\r\n}\r\n/**\r\n * Rotates a list a number of times. It\"s completly agnostic about the\r\n * contents of the list.\r\n *\r\n * @param {Integer} times - the number of rotations\r\n * @param {Array} collection\r\n * @return {Array} the rotated collection\r\n *\r\n * @example\r\n * rotate(1, [1, 2, 3]) // => [2, 3, 1]\r\n */\r\nfunction rotate(times, arr) {\r\n    const len = arr.length;\r\n    const n = ((times % len) + len) % len;\r\n    return arr.slice(n, len).concat(arr.slice(0, n));\r\n}\r\n/**\r\n * Return a copy of the collection with the null values removed\r\n * @function\r\n * @param {Array} collection\r\n * @return {Array}\r\n *\r\n * @example\r\n * compact([\"a\", \"b\", null, \"c\"]) // => [\"a\", \"b\", \"c\"]\r\n */\r\nfunction compact(arr) {\r\n    return arr.filter((n) => n === 0 || n);\r\n}\r\n/**\r\n * Randomizes the order of the specified collection in-place, using the Fisher–Yates shuffle.\r\n *\r\n * @function\r\n * @param {Array} collection\r\n * @return {Array} the collection shuffled\r\n *\r\n * @example\r\n * shuffle([\"C\", \"D\", \"E\", \"F\"]) // => [...]\r\n */\r\nfunction shuffle(arr, rnd = Math.random) {\r\n    let i;\r\n    let t;\r\n    let m = arr.length;\r\n    while (m) {\r\n        i = Math.floor(rnd() * m--);\r\n        t = arr[m];\r\n        arr[m] = arr[i];\r\n        arr[i] = t;\r\n    }\r\n    return arr;\r\n}\r\n/**\r\n * Get all permutations of an collection\r\n *\r\n * @param {Array} collection - the collection\r\n * @return {Array<Array>} an collection with all the permutations\r\n * @example\r\n * permutations([\"a\", \"b\", \"c\"])) // =>\r\n * [\r\n *   [\"a\", \"b\", \"c\"],\r\n *   [\"b\", \"a\", \"c\"],\r\n *   [\"b\", \"c\", \"a\"],\r\n *   [\"a\", \"c\", \"b\"],\r\n *   [\"c\", \"a\", \"b\"],\r\n *   [\"c\", \"b\", \"a\"]\r\n * ]\r\n */\r\nfunction permutations(arr) {\r\n    if (arr.length === 0) {\r\n        return [[]];\r\n    }\r\n    return permutations(arr.slice(1)).reduce((acc, perm) => {\r\n        return acc.concat(arr.map((e, pos) => {\r\n            const newPerm = perm.slice();\r\n            newPerm.splice(pos, 0, arr[0]);\r\n            return newPerm;\r\n        }));\r\n    }, []);\r\n}\r\nvar index = {\r\n    compact,\r\n    permutations,\r\n    range,\r\n    rotate,\r\n    shuffle,\r\n};\n\nexport default index;\nexport { compact, permutations, range, rotate, shuffle };\n//# sourceMappingURL=index.es.js.map\n","import { range, compact, rotate } from '@tonaljs/collection';\nimport { deprecate, note, interval } from '@tonaljs/core';\n\nconst EmptyPcset = {\r\n    empty: true,\r\n    name: \"\",\r\n    setNum: 0,\r\n    chroma: \"000000000000\",\r\n    normalized: \"000000000000\",\r\n    intervals: [],\r\n};\r\n// UTILITIES\r\nconst setNumToChroma = (num) => Number(num).toString(2);\r\nconst chromaToNumber = (chroma) => parseInt(chroma, 2);\r\nconst REGEX = /^[01]{12}$/;\r\nfunction isChroma(set) {\r\n    return REGEX.test(set);\r\n}\r\nconst isPcsetNum = (set) => typeof set === \"number\" && set >= 0 && set <= 4095;\r\nconst isPcset = (set) => set && isChroma(set.chroma);\r\nconst cache = { [EmptyPcset.chroma]: EmptyPcset };\r\n/**\r\n * Get the pitch class set of a collection of notes or set number or chroma\r\n */\r\nfunction get(src) {\r\n    const chroma = isChroma(src)\r\n        ? src\r\n        : isPcsetNum(src)\r\n            ? setNumToChroma(src)\r\n            : Array.isArray(src)\r\n                ? listToChroma(src)\r\n                : isPcset(src)\r\n                    ? src.chroma\r\n                    : EmptyPcset.chroma;\r\n    return (cache[chroma] = cache[chroma] || chromaToPcset(chroma));\r\n}\r\n/**\r\n * Use Pcset.properties\r\n * @function\r\n * @deprecated\r\n */\r\nconst pcset = deprecate(\"Pcset.pcset\", \"Pcset.get\", get);\r\n/**\r\n * Get pitch class set chroma\r\n * @function\r\n * @example\r\n * Pcset.chroma([\"c\", \"d\", \"e\"]); //=> \"101010000000\"\r\n */\r\nconst chroma = (set) => get(set).chroma;\r\n/**\r\n * Get intervals (from C) of a set\r\n * @function\r\n * @example\r\n * Pcset.intervals([\"c\", \"d\", \"e\"]); //=>\r\n */\r\nconst intervals = (set) => get(set).intervals;\r\n/**\r\n * Get pitch class set number\r\n * @function\r\n * @example\r\n * Pcset.num([\"c\", \"d\", \"e\"]); //=> 2192\r\n */\r\nconst num = (set) => get(set).setNum;\r\nconst IVLS = [\r\n    \"1P\",\r\n    \"2m\",\r\n    \"2M\",\r\n    \"3m\",\r\n    \"3M\",\r\n    \"4P\",\r\n    \"5d\",\r\n    \"5P\",\r\n    \"6m\",\r\n    \"6M\",\r\n    \"7m\",\r\n    \"7M\",\r\n];\r\n/**\r\n * @private\r\n * Get the intervals of a pcset *starting from C*\r\n * @param {Set} set - the pitch class set\r\n * @return {IntervalName[]} an array of interval names or an empty array\r\n * if not a valid pitch class set\r\n */\r\nfunction chromaToIntervals(chroma) {\r\n    const intervals = [];\r\n    for (let i = 0; i < 12; i++) {\r\n        // tslint:disable-next-line:curly\r\n        if (chroma.charAt(i) === \"1\")\r\n            intervals.push(IVLS[i]);\r\n    }\r\n    return intervals;\r\n}\r\n/**\r\n * Get a list of all possible pitch class sets (all possible chromas) *having\r\n * C as root*. There are 2048 different chromas. If you want them with another\r\n * note you have to transpose it\r\n *\r\n * @see http://allthescales.org/\r\n * @return {Array<PcsetChroma>} an array of possible chromas from '10000000000' to '11111111111'\r\n */\r\nfunction chromas() {\r\n    return range(2048, 4095).map(setNumToChroma);\r\n}\r\n/**\r\n * Given a a list of notes or a pcset chroma, produce the rotations\r\n * of the chroma discarding the ones that starts with \"0\"\r\n *\r\n * This is used, for example, to get all the modes of a scale.\r\n *\r\n * @param {Array|string} set - the list of notes or pitchChr of the set\r\n * @param {boolean} normalize - (Optional, true by default) remove all\r\n * the rotations that starts with \"0\"\r\n * @return {Array<string>} an array with all the modes of the chroma\r\n *\r\n * @example\r\n * Pcset.modes([\"C\", \"D\", \"E\"]).map(Pcset.intervals)\r\n */\r\nfunction modes(set, normalize = true) {\r\n    const pcs = get(set);\r\n    const binary = pcs.chroma.split(\"\");\r\n    return compact(binary.map((_, i) => {\r\n        const r = rotate(i, binary);\r\n        return normalize && r[0] === \"0\" ? null : r.join(\"\");\r\n    }));\r\n}\r\n/**\r\n * Test if two pitch class sets are numentical\r\n *\r\n * @param {Array|string} set1 - one of the pitch class sets\r\n * @param {Array|string} set2 - the other pitch class set\r\n * @return {boolean} true if they are equal\r\n * @example\r\n * Pcset.isEqual([\"c2\", \"d3\"], [\"c5\", \"d2\"]) // => true\r\n */\r\nfunction isEqual(s1, s2) {\r\n    return get(s1).setNum === get(s2).setNum;\r\n}\r\n/**\r\n * Create a function that test if a collection of notes is a\r\n * subset of a given set\r\n *\r\n * The function is curryfied.\r\n *\r\n * @param {PcsetChroma|NoteName[]} set - the superset to test against (chroma or\r\n * list of notes)\r\n * @return{function(PcsetChroma|NoteNames[]): boolean} a function accepting a set\r\n * to test against (chroma or list of notes)\r\n * @example\r\n * const inCMajor = Pcset.isSubsetOf([\"C\", \"E\", \"G\"])\r\n * inCMajor([\"e6\", \"c4\"]) // => true\r\n * inCMajor([\"e6\", \"c4\", \"d3\"]) // => false\r\n */\r\nfunction isSubsetOf(set) {\r\n    const s = get(set).setNum;\r\n    return (notes) => {\r\n        const o = get(notes).setNum;\r\n        // tslint:disable-next-line: no-bitwise\r\n        return s && s !== o && (o & s) === o;\r\n    };\r\n}\r\n/**\r\n * Create a function that test if a collection of notes is a\r\n * superset of a given set (it contains all notes and at least one more)\r\n *\r\n * @param {Set} set - an array of notes or a chroma set string to test against\r\n * @return {(subset: Set): boolean} a function that given a set\r\n * returns true if is a subset of the first one\r\n * @example\r\n * const extendsCMajor = Pcset.isSupersetOf([\"C\", \"E\", \"G\"])\r\n * extendsCMajor([\"e6\", \"a\", \"c4\", \"g2\"]) // => true\r\n * extendsCMajor([\"c6\", \"e4\", \"g3\"]) // => false\r\n */\r\nfunction isSupersetOf(set) {\r\n    const s = get(set).setNum;\r\n    return (notes) => {\r\n        const o = get(notes).setNum;\r\n        // tslint:disable-next-line: no-bitwise\r\n        return s && s !== o && (o | s) === o;\r\n    };\r\n}\r\n/**\r\n * Test if a given pitch class set includes a note\r\n *\r\n * @param {Array<string>} set - the base set to test against\r\n * @param {string} note - the note to test\r\n * @return {boolean} true if the note is included in the pcset\r\n *\r\n * Can be partially applied\r\n *\r\n * @example\r\n * const isNoteInCMajor = isNoteIncludedIn(['C', 'E', 'G'])\r\n * isNoteInCMajor('C4') // => true\r\n * isNoteInCMajor('C#4') // => false\r\n */\r\nfunction isNoteIncludedIn(set) {\r\n    const s = get(set);\r\n    return (noteName) => {\r\n        const n = note(noteName);\r\n        return s && !n.empty && s.chroma.charAt(n.chroma) === \"1\";\r\n    };\r\n}\r\n/** @deprecated use: isNoteIncludedIn */\r\nconst includes = isNoteIncludedIn;\r\n/**\r\n * Filter a list with a pitch class set\r\n *\r\n * @param {Array|string} set - the pitch class set notes\r\n * @param {Array|string} notes - the note list to be filtered\r\n * @return {Array} the filtered notes\r\n *\r\n * @example\r\n * Pcset.filter([\"C\", \"D\", \"E\"], [\"c2\", \"c#2\", \"d2\", \"c3\", \"c#3\", \"d3\"]) // => [ \"c2\", \"d2\", \"c3\", \"d3\" ])\r\n * Pcset.filter([\"C2\"], [\"c2\", \"c#2\", \"d2\", \"c3\", \"c#3\", \"d3\"]) // => [ \"c2\", \"c3\" ])\r\n */\r\nfunction filter(set) {\r\n    const isIncluded = isNoteIncludedIn(set);\r\n    return (notes) => {\r\n        return notes.filter(isIncluded);\r\n    };\r\n}\r\nvar index = {\r\n    get,\r\n    chroma,\r\n    num,\r\n    intervals,\r\n    chromas,\r\n    isSupersetOf,\r\n    isSubsetOf,\r\n    isNoteIncludedIn,\r\n    isEqual,\r\n    filter,\r\n    modes,\r\n    // deprecated\r\n    pcset,\r\n};\r\n//// PRIVATE ////\r\nfunction chromaRotations(chroma) {\r\n    const binary = chroma.split(\"\");\r\n    return binary.map((_, i) => rotate(i, binary).join(\"\"));\r\n}\r\nfunction chromaToPcset(chroma) {\r\n    const setNum = chromaToNumber(chroma);\r\n    const normalizedNum = chromaRotations(chroma)\r\n        .map(chromaToNumber)\r\n        .filter((n) => n >= 2048)\r\n        .sort()[0];\r\n    const normalized = setNumToChroma(normalizedNum);\r\n    const intervals = chromaToIntervals(chroma);\r\n    return {\r\n        empty: false,\r\n        name: \"\",\r\n        setNum,\r\n        chroma,\r\n        normalized,\r\n        intervals,\r\n    };\r\n}\r\nfunction listToChroma(set) {\r\n    if (set.length === 0) {\r\n        return EmptyPcset.chroma;\r\n    }\r\n    let pitch;\r\n    const binary = [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0];\r\n    // tslint:disable-next-line:prefer-for-of\r\n    for (let i = 0; i < set.length; i++) {\r\n        pitch = note(set[i]);\r\n        // tslint:disable-next-line: curly\r\n        if (pitch.empty)\r\n            pitch = interval(set[i]);\r\n        // tslint:disable-next-line: curly\r\n        if (!pitch.empty)\r\n            binary[pitch.chroma] = 1;\r\n    }\r\n    return binary.join(\"\");\r\n}\n\nexport { EmptyPcset, chromaToIntervals, chromas, index as default, filter, get, includes, isEqual, isNoteIncludedIn, isSubsetOf, isSupersetOf, modes, pcset };\n//# sourceMappingURL=index.es.js.map\n","import { deprecate } from '@tonaljs/core';\nimport { EmptyPcset, get as get$1 } from '@tonaljs/pcset';\n\n/**\r\n * @private\r\n * Chord List\r\n * Source: https://en.wikibooks.org/wiki/Music_Theory/Complete_List_of_Chord_Patterns\r\n * Format: [\"intervals\", \"full name\", \"abrv1 abrv2\"]\r\n */\r\nconst CHORDS = [\r\n    // ==Major==\r\n    [\"1P 3M 5P\", \"major\", \"M ^ \"],\r\n    [\"1P 3M 5P 7M\", \"major seventh\", \"maj7 Δ ma7 M7 Maj7 ^7\"],\r\n    [\"1P 3M 5P 7M 9M\", \"major ninth\", \"maj9 Δ9 ^9\"],\r\n    [\"1P 3M 5P 7M 9M 13M\", \"major thirteenth\", \"maj13 Maj13 ^13\"],\r\n    [\"1P 3M 5P 6M\", \"sixth\", \"6 add6 add13 M6\"],\r\n    [\"1P 3M 5P 6M 9M\", \"sixth/ninth\", \"6/9 69 M69\"],\r\n    [\"1P 3M 6m 7M\", \"major seventh flat sixth\", \"M7b6 ^7b6\"],\r\n    [\r\n        \"1P 3M 5P 7M 11A\",\r\n        \"major seventh sharp eleventh\",\r\n        \"maj#4 Δ#4 Δ#11 M7#11 ^7#11 maj7#11\",\r\n    ],\r\n    // ==Minor==\r\n    // '''Normal'''\r\n    [\"1P 3m 5P\", \"minor\", \"m min -\"],\r\n    [\"1P 3m 5P 7m\", \"minor seventh\", \"m7 min7 mi7 -7\"],\r\n    [\r\n        \"1P 3m 5P 7M\",\r\n        \"minor/major seventh\",\r\n        \"m/ma7 m/maj7 mM7 mMaj7 m/M7 -Δ7 mΔ -^7\",\r\n    ],\r\n    [\"1P 3m 5P 6M\", \"minor sixth\", \"m6 -6\"],\r\n    [\"1P 3m 5P 7m 9M\", \"minor ninth\", \"m9 -9\"],\r\n    [\"1P 3m 5P 7M 9M\", \"minor/major ninth\", \"mM9 mMaj9 -^9\"],\r\n    [\"1P 3m 5P 7m 9M 11P\", \"minor eleventh\", \"m11 -11\"],\r\n    [\"1P 3m 5P 7m 9M 13M\", \"minor thirteenth\", \"m13 -13\"],\r\n    // '''Diminished'''\r\n    [\"1P 3m 5d\", \"diminished\", \"dim ° o\"],\r\n    [\"1P 3m 5d 7d\", \"diminished seventh\", \"dim7 °7 o7\"],\r\n    [\"1P 3m 5d 7m\", \"half-diminished\", \"m7b5 ø -7b5 h7 h\"],\r\n    // ==Dominant/Seventh==\r\n    // '''Normal'''\r\n    [\"1P 3M 5P 7m\", \"dominant seventh\", \"7 dom\"],\r\n    [\"1P 3M 5P 7m 9M\", \"dominant ninth\", \"9\"],\r\n    [\"1P 3M 5P 7m 9M 13M\", \"dominant thirteenth\", \"13\"],\r\n    [\"1P 3M 5P 7m 11A\", \"lydian dominant seventh\", \"7#11 7#4\"],\r\n    // '''Altered'''\r\n    [\"1P 3M 5P 7m 9m\", \"dominant flat ninth\", \"7b9\"],\r\n    [\"1P 3M 5P 7m 9A\", \"dominant sharp ninth\", \"7#9\"],\r\n    [\"1P 3M 7m 9m\", \"altered\", \"alt7\"],\r\n    // '''Suspended'''\r\n    [\"1P 4P 5P\", \"suspended fourth\", \"sus4 sus\"],\r\n    [\"1P 2M 5P\", \"suspended second\", \"sus2\"],\r\n    [\"1P 4P 5P 7m\", \"suspended fourth seventh\", \"7sus4 7sus\"],\r\n    [\"1P 5P 7m 9M 11P\", \"eleventh\", \"11\"],\r\n    [\r\n        \"1P 4P 5P 7m 9m\",\r\n        \"suspended fourth flat ninth\",\r\n        \"b9sus phryg 7b9sus 7b9sus4\",\r\n    ],\r\n    // ==Other==\r\n    [\"1P 5P\", \"fifth\", \"5\"],\r\n    [\"1P 3M 5A\", \"augmented\", \"aug + +5 ^#5\"],\r\n    [\"1P 3m 5A\", \"minor augmented\", \"m#5 -#5 m+\"],\r\n    [\"1P 3M 5A 7M\", \"augmented seventh\", \"maj7#5 maj7+5 +maj7 ^7#5\"],\r\n    [\r\n        \"1P 3M 5P 7M 9M 11A\",\r\n        \"major sharp eleventh (lydian)\",\r\n        \"maj9#11 Δ9#11 ^9#11\",\r\n    ],\r\n    // ==Legacy==\r\n    [\"1P 2M 4P 5P\", \"\", \"sus24 sus4add9\"],\r\n    [\"1P 3M 5A 7M 9M\", \"\", \"maj9#5 Maj9#5\"],\r\n    [\"1P 3M 5A 7m\", \"\", \"7#5 +7 7+ 7aug aug7\"],\r\n    [\"1P 3M 5A 7m 9A\", \"\", \"7#5#9 7#9#5 7alt\"],\r\n    [\"1P 3M 5A 7m 9M\", \"\", \"9#5 9+\"],\r\n    [\"1P 3M 5A 7m 9M 11A\", \"\", \"9#5#11\"],\r\n    [\"1P 3M 5A 7m 9m\", \"\", \"7#5b9 7b9#5\"],\r\n    [\"1P 3M 5A 7m 9m 11A\", \"\", \"7#5b9#11\"],\r\n    [\"1P 3M 5A 9A\", \"\", \"+add#9\"],\r\n    [\"1P 3M 5A 9M\", \"\", \"M#5add9 +add9\"],\r\n    [\"1P 3M 5P 6M 11A\", \"\", \"M6#11 M6b5 6#11 6b5\"],\r\n    [\"1P 3M 5P 6M 7M 9M\", \"\", \"M7add13\"],\r\n    [\"1P 3M 5P 6M 9M 11A\", \"\", \"69#11\"],\r\n    [\"1P 3m 5P 6M 9M\", \"\", \"m69 -69\"],\r\n    [\"1P 3M 5P 6m 7m\", \"\", \"7b6\"],\r\n    [\"1P 3M 5P 7M 9A 11A\", \"\", \"maj7#9#11\"],\r\n    [\"1P 3M 5P 7M 9M 11A 13M\", \"\", \"M13#11 maj13#11 M13+4 M13#4\"],\r\n    [\"1P 3M 5P 7M 9m\", \"\", \"M7b9\"],\r\n    [\"1P 3M 5P 7m 11A 13m\", \"\", \"7#11b13 7b5b13\"],\r\n    [\"1P 3M 5P 7m 13M\", \"\", \"7add6 67 7add13\"],\r\n    [\"1P 3M 5P 7m 9A 11A\", \"\", \"7#9#11 7b5#9 7#9b5\"],\r\n    [\"1P 3M 5P 7m 9A 11A 13M\", \"\", \"13#9#11\"],\r\n    [\"1P 3M 5P 7m 9A 11A 13m\", \"\", \"7#9#11b13\"],\r\n    [\"1P 3M 5P 7m 9A 13M\", \"\", \"13#9\"],\r\n    [\"1P 3M 5P 7m 9A 13m\", \"\", \"7#9b13\"],\r\n    [\"1P 3M 5P 7m 9M 11A\", \"\", \"9#11 9+4 9#4\"],\r\n    [\"1P 3M 5P 7m 9M 11A 13M\", \"\", \"13#11 13+4 13#4\"],\r\n    [\"1P 3M 5P 7m 9M 11A 13m\", \"\", \"9#11b13 9b5b13\"],\r\n    [\"1P 3M 5P 7m 9m 11A\", \"\", \"7b9#11 7b5b9 7b9b5\"],\r\n    [\"1P 3M 5P 7m 9m 11A 13M\", \"\", \"13b9#11\"],\r\n    [\"1P 3M 5P 7m 9m 11A 13m\", \"\", \"7b9b13#11 7b9#11b13 7b5b9b13\"],\r\n    [\"1P 3M 5P 7m 9m 13M\", \"\", \"13b9\"],\r\n    [\"1P 3M 5P 7m 9m 13m\", \"\", \"7b9b13\"],\r\n    [\"1P 3M 5P 7m 9m 9A\", \"\", \"7b9#9\"],\r\n    [\"1P 3M 5P 9M\", \"\", \"Madd9 2 add9 add2\"],\r\n    [\"1P 3M 5P 9m\", \"\", \"Maddb9\"],\r\n    [\"1P 3M 5d\", \"\", \"Mb5\"],\r\n    [\"1P 3M 5d 6M 7m 9M\", \"\", \"13b5\"],\r\n    [\"1P 3M 5d 7M\", \"\", \"M7b5\"],\r\n    [\"1P 3M 5d 7M 9M\", \"\", \"M9b5\"],\r\n    [\"1P 3M 5d 7m\", \"\", \"7b5\"],\r\n    [\"1P 3M 5d 7m 9M\", \"\", \"9b5\"],\r\n    [\"1P 3M 7m\", \"\", \"7no5\"],\r\n    [\"1P 3M 7m 13m\", \"\", \"7b13\"],\r\n    [\"1P 3M 7m 9M\", \"\", \"9no5\"],\r\n    [\"1P 3M 7m 9M 13M\", \"\", \"13no5\"],\r\n    [\"1P 3M 7m 9M 13m\", \"\", \"9b13\"],\r\n    [\"1P 3m 4P 5P\", \"\", \"madd4\"],\r\n    [\"1P 3m 5P 6m 7M\", \"\", \"mMaj7b6\"],\r\n    [\"1P 3m 5P 6m 7M 9M\", \"\", \"mMaj9b6\"],\r\n    [\"1P 3m 5P 7m 11P\", \"\", \"m7add11 m7add4\"],\r\n    [\"1P 3m 5P 9M\", \"\", \"madd9\"],\r\n    [\"1P 3m 5d 6M 7M\", \"\", \"o7M7\"],\r\n    [\"1P 3m 5d 7M\", \"\", \"oM7\"],\r\n    [\"1P 3m 6m 7M\", \"\", \"mb6M7\"],\r\n    [\"1P 3m 6m 7m\", \"\", \"m7#5\"],\r\n    [\"1P 3m 6m 7m 9M\", \"\", \"m9#5\"],\r\n    [\"1P 3m 5A 7m 9M 11P\", \"\", \"m11A\"],\r\n    [\"1P 3m 6m 9m\", \"\", \"mb6b9\"],\r\n    [\"1P 2M 3m 5d 7m\", \"\", \"m9b5\"],\r\n    [\"1P 4P 5A 7M\", \"\", \"M7#5sus4\"],\r\n    [\"1P 4P 5A 7M 9M\", \"\", \"M9#5sus4\"],\r\n    [\"1P 4P 5A 7m\", \"\", \"7#5sus4\"],\r\n    [\"1P 4P 5P 7M\", \"\", \"M7sus4\"],\r\n    [\"1P 4P 5P 7M 9M\", \"\", \"M9sus4\"],\r\n    [\"1P 4P 5P 7m 9M\", \"\", \"9sus4 9sus\"],\r\n    [\"1P 4P 5P 7m 9M 13M\", \"\", \"13sus4 13sus\"],\r\n    [\"1P 4P 5P 7m 9m 13m\", \"\", \"7sus4b9b13 7b9b13sus4\"],\r\n    [\"1P 4P 7m 10m\", \"\", \"4 quartal\"],\r\n    [\"1P 5P 7m 9m 11P\", \"\", \"11b9\"],\r\n];\n\nconst NoChordType = {\r\n    ...EmptyPcset,\r\n    name: \"\",\r\n    quality: \"Unknown\",\r\n    intervals: [],\r\n    aliases: [],\r\n};\r\nlet dictionary = [];\r\nlet index = {};\r\n/**\r\n * Given a chord name or chroma, return the chord properties\r\n * @param {string} source - chord name or pitch class set chroma\r\n * @example\r\n * import { get } from 'tonaljs/chord-type'\r\n * get('major') // => { name: 'major', ... }\r\n */\r\nfunction get(type) {\r\n    return index[type] || NoChordType;\r\n}\r\nconst chordType = deprecate(\"ChordType.chordType\", \"ChordType.get\", get);\r\n/**\r\n * Get all chord (long) names\r\n */\r\nfunction names() {\r\n    return dictionary.map((chord) => chord.name).filter((x) => x);\r\n}\r\n/**\r\n * Get all chord symbols\r\n */\r\nfunction symbols() {\r\n    return dictionary.map((chord) => chord.aliases[0]).filter((x) => x);\r\n}\r\n/**\r\n * Keys used to reference chord types\r\n */\r\nfunction keys() {\r\n    return Object.keys(index);\r\n}\r\n/**\r\n * Return a list of all chord types\r\n */\r\nfunction all() {\r\n    return dictionary.slice();\r\n}\r\nconst entries = deprecate(\"ChordType.entries\", \"ChordType.all\", all);\r\n/**\r\n * Clear the dictionary\r\n */\r\nfunction removeAll() {\r\n    dictionary = [];\r\n    index = {};\r\n}\r\n/**\r\n * Add a chord to the dictionary.\r\n * @param intervals\r\n * @param aliases\r\n * @param [fullName]\r\n */\r\nfunction add(intervals, aliases, fullName) {\r\n    const quality = getQuality(intervals);\r\n    const chord = {\r\n        ...get$1(intervals),\r\n        name: fullName || \"\",\r\n        quality,\r\n        intervals,\r\n        aliases,\r\n    };\r\n    dictionary.push(chord);\r\n    if (chord.name) {\r\n        index[chord.name] = chord;\r\n    }\r\n    index[chord.setNum] = chord;\r\n    index[chord.chroma] = chord;\r\n    chord.aliases.forEach((alias) => addAlias(chord, alias));\r\n}\r\nfunction addAlias(chord, alias) {\r\n    index[alias] = chord;\r\n}\r\nfunction getQuality(intervals) {\r\n    const has = (interval) => intervals.indexOf(interval) !== -1;\r\n    return has(\"5A\")\r\n        ? \"Augmented\"\r\n        : has(\"3M\")\r\n            ? \"Major\"\r\n            : has(\"5d\")\r\n                ? \"Diminished\"\r\n                : has(\"3m\")\r\n                    ? \"Minor\"\r\n                    : \"Unknown\";\r\n}\r\nCHORDS.forEach(([ivls, fullName, names]) => add(ivls.split(\" \"), names.split(\" \"), fullName));\r\ndictionary.sort((a, b) => a.setNum - b.setNum);\r\nvar index$1 = {\r\n    names,\r\n    symbols,\r\n    get,\r\n    all,\r\n    add,\r\n    removeAll,\r\n    keys,\r\n    // deprecated\r\n    entries,\r\n    chordType,\r\n};\n\nexport { add, addAlias, all, chordType, index$1 as default, entries, get, keys, names, removeAll, symbols };\n//# sourceMappingURL=index.es.js.map\n","import { all } from '@tonaljs/chord-type';\nimport { note } from '@tonaljs/core';\nimport { modes } from '@tonaljs/pcset';\n\nconst namedSet = (notes) => {\r\n    const pcToName = notes.reduce((record, n) => {\r\n        const chroma = note(n).chroma;\r\n        if (chroma !== undefined) {\r\n            record[chroma] = record[chroma] || note(n).name;\r\n        }\r\n        return record;\r\n    }, {});\r\n    return (chroma) => pcToName[chroma];\r\n};\r\nfunction detect(source) {\r\n    const notes = source.map((n) => note(n).pc).filter((x) => x);\r\n    if (note.length === 0) {\r\n        return [];\r\n    }\r\n    const found = findExactMatches(notes, 1);\r\n    return found\r\n        .filter((chord) => chord.weight)\r\n        .sort((a, b) => b.weight - a.weight)\r\n        .map((chord) => chord.name);\r\n}\r\nfunction findExactMatches(notes, weight) {\r\n    const tonic = notes[0];\r\n    const tonicChroma = note(tonic).chroma;\r\n    const noteName = namedSet(notes);\r\n    // we need to test all chormas to get the correct baseNote\r\n    const allModes = modes(notes, false);\r\n    const found = [];\r\n    allModes.forEach((mode, index) => {\r\n        // some chords could have the same chroma but different interval spelling\r\n        const chordTypes = all().filter((chordType) => chordType.chroma === mode);\r\n        chordTypes.forEach((chordType) => {\r\n            const chordName = chordType.aliases[0];\r\n            const baseNote = noteName(index);\r\n            const isInversion = index !== tonicChroma;\r\n            if (isInversion) {\r\n                found.push({\r\n                    weight: 0.5 * weight,\r\n                    name: `${baseNote}${chordName}/${tonic}`,\r\n                });\r\n            }\r\n            else {\r\n                found.push({ weight: 1 * weight, name: `${baseNote}${chordName}` });\r\n            }\r\n        });\r\n    });\r\n    return found;\r\n}\r\nvar index = { detect };\n\nexport { index as default, detect };\n//# sourceMappingURL=index.es.js.map\n","import { deprecate } from '@tonaljs/core';\nimport { EmptyPcset, get as get$1 } from '@tonaljs/pcset';\n\n// SCALES\r\n// Format: [\"intervals\", \"name\", \"alias1\", \"alias2\", ...]\r\nconst SCALES = [\r\n    // 5-note scales\r\n    [\"1P 2M 3M 5P 6M\", \"major pentatonic\", \"pentatonic\"],\r\n    [\"1P 3M 4P 5P 7M\", \"ionian pentatonic\"],\r\n    [\"1P 3M 4P 5P 7m\", \"mixolydian pentatonic\", \"indian\"],\r\n    [\"1P 2M 4P 5P 6M\", \"ritusen\"],\r\n    [\"1P 2M 4P 5P 7m\", \"egyptian\"],\r\n    [\"1P 3M 4P 5d 7m\", \"neopolitan major pentatonic\"],\r\n    [\"1P 3m 4P 5P 6m\", \"vietnamese 1\"],\r\n    [\"1P 2m 3m 5P 6m\", \"pelog\"],\r\n    [\"1P 2m 4P 5P 6m\", \"kumoijoshi\"],\r\n    [\"1P 2M 3m 5P 6m\", \"hirajoshi\"],\r\n    [\"1P 2m 4P 5d 7m\", \"iwato\"],\r\n    [\"1P 2m 4P 5P 7m\", \"in-sen\"],\r\n    [\"1P 3M 4A 5P 7M\", \"lydian pentatonic\", \"chinese\"],\r\n    [\"1P 3m 4P 6m 7m\", \"malkos raga\"],\r\n    [\"1P 3m 4P 5d 7m\", \"locrian pentatonic\", \"minor seven flat five pentatonic\"],\r\n    [\"1P 3m 4P 5P 7m\", \"minor pentatonic\", \"vietnamese 2\"],\r\n    [\"1P 3m 4P 5P 6M\", \"minor six pentatonic\"],\r\n    [\"1P 2M 3m 5P 6M\", \"flat three pentatonic\", \"kumoi\"],\r\n    [\"1P 2M 3M 5P 6m\", \"flat six pentatonic\"],\r\n    [\"1P 2m 3M 5P 6M\", \"scriabin\"],\r\n    [\"1P 3M 5d 6m 7m\", \"whole tone pentatonic\"],\r\n    [\"1P 3M 4A 5A 7M\", \"lydian #5P pentatonic\"],\r\n    [\"1P 3M 4A 5P 7m\", \"lydian dominant pentatonic\"],\r\n    [\"1P 3m 4P 5P 7M\", \"minor #7M pentatonic\"],\r\n    [\"1P 3m 4d 5d 7m\", \"super locrian pentatonic\"],\r\n    // 6-note scales\r\n    [\"1P 2M 3m 4P 5P 7M\", \"minor hexatonic\"],\r\n    [\"1P 2A 3M 5P 5A 7M\", \"augmented\"],\r\n    [\"1P 2M 3m 3M 5P 6M\", \"major blues\"],\r\n    [\"1P 2M 4P 5P 6M 7m\", \"piongio\"],\r\n    [\"1P 2m 3M 4A 6M 7m\", \"prometheus neopolitan\"],\r\n    [\"1P 2M 3M 4A 6M 7m\", \"prometheus\"],\r\n    [\"1P 2m 3M 5d 6m 7m\", \"mystery #1\"],\r\n    [\"1P 2m 3M 4P 5A 6M\", \"six tone symmetric\"],\r\n    [\"1P 2M 3M 4A 5A 7m\", \"whole tone\", \"messiaen's mode #1\"],\r\n    [\"1P 2m 4P 4A 5P 7M\", \"messiaen's mode #5\"],\r\n    [\"1P 3m 4P 5d 5P 7m\", \"minor blues\", \"blues\"],\r\n    // 7-note scales\r\n    [\"1P 2M 3M 4P 5d 6m 7m\", \"locrian major\", \"arabian\"],\r\n    [\"1P 2m 3M 4A 5P 6m 7M\", \"double harmonic lydian\"],\r\n    [\"1P 2M 3m 4P 5P 6m 7M\", \"harmonic minor\"],\r\n    [\r\n        \"1P 2m 2A 3M 4A 6m 7m\",\r\n        \"altered\",\r\n        \"super locrian\",\r\n        \"diminished whole tone\",\r\n        \"pomeroy\",\r\n    ],\r\n    [\"1P 2M 3m 4P 5d 6m 7m\", \"locrian #2\", \"half-diminished\", \"aeolian b5\"],\r\n    [\r\n        \"1P 2M 3M 4P 5P 6m 7m\",\r\n        \"mixolydian b6\",\r\n        \"melodic minor fifth mode\",\r\n        \"hindu\",\r\n    ],\r\n    [\"1P 2M 3M 4A 5P 6M 7m\", \"lydian dominant\", \"lydian b7\", \"overtone\"],\r\n    [\"1P 2M 3M 4A 5P 6M 7M\", \"lydian\"],\r\n    [\"1P 2M 3M 4A 5A 6M 7M\", \"lydian augmented\"],\r\n    [\r\n        \"1P 2m 3m 4P 5P 6M 7m\",\r\n        \"dorian b2\",\r\n        \"phrygian #6\",\r\n        \"melodic minor second mode\",\r\n    ],\r\n    [\"1P 2M 3m 4P 5P 6M 7M\", \"melodic minor\"],\r\n    [\"1P 2m 3m 4P 5d 6m 7m\", \"locrian\"],\r\n    [\r\n        \"1P 2m 3m 4d 5d 6m 7d\",\r\n        \"ultralocrian\",\r\n        \"superlocrian bb7\",\r\n        \"superlocrian diminished\",\r\n    ],\r\n    [\"1P 2m 3m 4P 5d 6M 7m\", \"locrian 6\", \"locrian natural 6\", \"locrian sharp 6\"],\r\n    [\"1P 2A 3M 4P 5P 5A 7M\", \"augmented heptatonic\"],\r\n    // Source https://en.wikipedia.org/wiki/Ukrainian_Dorian_scale\r\n    [\r\n        \"1P 2M 3m 4A 5P 6M 7m\",\r\n        \"dorian #4\",\r\n        \"ukrainian dorian\",\r\n        \"romanian minor\",\r\n        \"altered dorian\",\r\n    ],\r\n    [\"1P 2M 3m 4A 5P 6M 7M\", \"lydian diminished\"],\r\n    [\"1P 2m 3m 4P 5P 6m 7m\", \"phrygian\"],\r\n    [\"1P 2M 3M 4A 5A 7m 7M\", \"leading whole tone\"],\r\n    [\"1P 2M 3M 4A 5P 6m 7m\", \"lydian minor\"],\r\n    [\"1P 2m 3M 4P 5P 6m 7m\", \"phrygian dominant\", \"spanish\", \"phrygian major\"],\r\n    [\"1P 2m 3m 4P 5P 6m 7M\", \"balinese\"],\r\n    [\"1P 2m 3m 4P 5P 6M 7M\", \"neopolitan major\"],\r\n    [\"1P 2M 3m 4P 5P 6m 7m\", \"aeolian\", \"minor\"],\r\n    [\"1P 2M 3M 4P 5P 6m 7M\", \"harmonic major\"],\r\n    [\"1P 2m 3M 4P 5P 6m 7M\", \"double harmonic major\", \"gypsy\"],\r\n    [\"1P 2M 3m 4P 5P 6M 7m\", \"dorian\"],\r\n    [\"1P 2M 3m 4A 5P 6m 7M\", \"hungarian minor\"],\r\n    [\"1P 2A 3M 4A 5P 6M 7m\", \"hungarian major\"],\r\n    [\"1P 2m 3M 4P 5d 6M 7m\", \"oriental\"],\r\n    [\"1P 2m 3m 3M 4A 5P 7m\", \"flamenco\"],\r\n    [\"1P 2m 3m 4A 5P 6m 7M\", \"todi raga\"],\r\n    [\"1P 2M 3M 4P 5P 6M 7m\", \"mixolydian\", \"dominant\"],\r\n    [\"1P 2m 3M 4P 5d 6m 7M\", \"persian\"],\r\n    [\"1P 2M 3M 4P 5P 6M 7M\", \"major\", \"ionian\"],\r\n    [\"1P 2m 3M 5d 6m 7m 7M\", \"enigmatic\"],\r\n    [\r\n        \"1P 2M 3M 4P 5A 6M 7M\",\r\n        \"major augmented\",\r\n        \"major #5\",\r\n        \"ionian augmented\",\r\n        \"ionian #5\",\r\n    ],\r\n    [\"1P 2A 3M 4A 5P 6M 7M\", \"lydian #9\"],\r\n    // 8-note scales\r\n    [\"1P 2m 2M 4P 4A 5P 6m 7M\", \"messiaen's mode #4\"],\r\n    [\"1P 2m 3M 4P 4A 5P 6m 7M\", \"purvi raga\"],\r\n    [\"1P 2m 3m 3M 4P 5P 6m 7m\", \"spanish heptatonic\"],\r\n    [\"1P 2M 3M 4P 5P 6M 7m 7M\", \"bebop\"],\r\n    [\"1P 2M 3m 3M 4P 5P 6M 7m\", \"bebop minor\"],\r\n    [\"1P 2M 3M 4P 5P 5A 6M 7M\", \"bebop major\"],\r\n    [\"1P 2m 3m 4P 5d 5P 6m 7m\", \"bebop locrian\"],\r\n    [\"1P 2M 3m 4P 5P 6m 7m 7M\", \"minor bebop\"],\r\n    [\"1P 2M 3m 4P 5d 6m 6M 7M\", \"diminished\", \"whole-half diminished\"],\r\n    [\"1P 2M 3M 4P 5d 5P 6M 7M\", \"ichikosucho\"],\r\n    [\"1P 2M 3m 4P 5P 6m 6M 7M\", \"minor six diminished\"],\r\n    [\r\n        \"1P 2m 3m 3M 4A 5P 6M 7m\",\r\n        \"half-whole diminished\",\r\n        \"dominant diminished\",\r\n        \"messiaen's mode #2\",\r\n    ],\r\n    [\"1P 3m 3M 4P 5P 6M 7m 7M\", \"kafi raga\"],\r\n    [\"1P 2M 3M 4P 4A 5A 6A 7M\", \"messiaen's mode #6\"],\r\n    // 9-note scales\r\n    [\"1P 2M 3m 3M 4P 5d 5P 6M 7m\", \"composite blues\"],\r\n    [\"1P 2M 3m 3M 4A 5P 6m 7m 7M\", \"messiaen's mode #3\"],\r\n    // 10-note scales\r\n    [\"1P 2m 2M 3m 4P 4A 5P 6m 6M 7M\", \"messiaen's mode #7\"],\r\n    // 12-note scales\r\n    [\"1P 2m 2M 3m 3M 4P 5d 5P 6m 6M 7m 7M\", \"chromatic\"],\r\n];\n\nconst NoScaleType = {\r\n    ...EmptyPcset,\r\n    intervals: [],\r\n    aliases: [],\r\n};\r\nlet dictionary = [];\r\nlet index = {};\r\nfunction names() {\r\n    return dictionary.map((scale) => scale.name);\r\n}\r\n/**\r\n * Given a scale name or chroma, return the scale properties\r\n *\r\n * @param {string} type - scale name or pitch class set chroma\r\n * @example\r\n * import { get } from 'tonaljs/scale-type'\r\n * get('major') // => { name: 'major', ... }\r\n */\r\nfunction get(type) {\r\n    return index[type] || NoScaleType;\r\n}\r\nconst scaleType = deprecate(\"ScaleDictionary.scaleType\", \"ScaleType.get\", get);\r\n/**\r\n * Return a list of all scale types\r\n */\r\nfunction all() {\r\n    return dictionary.slice();\r\n}\r\nconst entries = deprecate(\"ScaleDictionary.entries\", \"ScaleType.all\", all);\r\n/**\r\n * Keys used to reference scale types\r\n */\r\nfunction keys() {\r\n    return Object.keys(index);\r\n}\r\n/**\r\n * Clear the dictionary\r\n */\r\nfunction removeAll() {\r\n    dictionary = [];\r\n    index = {};\r\n}\r\n/**\r\n * Add a scale into dictionary\r\n * @param intervals\r\n * @param name\r\n * @param aliases\r\n */\r\nfunction add(intervals, name, aliases = []) {\r\n    const scale = { ...get$1(intervals), name, intervals, aliases };\r\n    dictionary.push(scale);\r\n    index[scale.name] = scale;\r\n    index[scale.setNum] = scale;\r\n    index[scale.chroma] = scale;\r\n    scale.aliases.forEach((alias) => addAlias(scale, alias));\r\n    return scale;\r\n}\r\nfunction addAlias(scale, alias) {\r\n    index[alias] = scale;\r\n}\r\nSCALES.forEach(([ivls, name, ...aliases]) => add(ivls.split(\" \"), name, aliases));\r\nvar index$1 = {\r\n    names,\r\n    get,\r\n    all,\r\n    add,\r\n    removeAll,\r\n    keys,\r\n    // deprecated\r\n    entries,\r\n    scaleType,\r\n};\n\nexport { NoScaleType, add, addAlias, all, index$1 as default, entries, get, keys, names, removeAll, scaleType };\n//# sourceMappingURL=index.es.js.map\n","import { detect } from '@tonaljs/chord-detect';\nexport { detect } from '@tonaljs/chord-detect';\nimport { get as get$1, all as all$1 } from '@tonaljs/chord-type';\nimport { deprecate, tokenizeNote, note, distance, transpose as transpose$1 } from '@tonaljs/core';\nimport { isSupersetOf, isSubsetOf } from '@tonaljs/pcset';\nimport { all } from '@tonaljs/scale-type';\n\nconst NoChord = {\r\n    empty: true,\r\n    name: \"\",\r\n    symbol: \"\",\r\n    root: \"\",\r\n    rootDegree: 0,\r\n    type: \"\",\r\n    tonic: null,\r\n    setNum: NaN,\r\n    quality: \"Unknown\",\r\n    chroma: \"\",\r\n    normalized: \"\",\r\n    aliases: [],\r\n    notes: [],\r\n    intervals: [],\r\n};\r\n// 6, 64, 7, 9, 11 and 13 are consider part of the chord\r\n// (see https://github.com/danigb/tonal/issues/55)\r\nconst NUM_TYPES = /^(6|64|7|9|11|13)$/;\r\n/**\r\n * Tokenize a chord name. It returns an array with the tonic and chord type\r\n * If not tonic is found, all the name is considered the chord name.\r\n *\r\n * This function does NOT check if the chord type exists or not. It only tries\r\n * to split the tonic and chord type.\r\n *\r\n * @function\r\n * @param {string} name - the chord name\r\n * @return {Array} an array with [tonic, type]\r\n * @example\r\n * tokenize(\"Cmaj7\") // => [ \"C\", \"maj7\" ]\r\n * tokenize(\"C7\") // => [ \"C\", \"7\" ]\r\n * tokenize(\"mMaj7\") // => [ null, \"mMaj7\" ]\r\n * tokenize(\"Cnonsense\") // => [ null, \"nonsense\" ]\r\n */\r\nfunction tokenize(name) {\r\n    const [letter, acc, oct, type] = tokenizeNote(name);\r\n    if (letter === \"\") {\r\n        return [\"\", name];\r\n    }\r\n    // aug is augmented (see https://github.com/danigb/tonal/issues/55)\r\n    if (letter === \"A\" && type === \"ug\") {\r\n        return [\"\", \"aug\"];\r\n    }\r\n    // see: https://github.com/tonaljs/tonal/issues/70\r\n    if (!type && (oct === \"4\" || oct === \"5\")) {\r\n        return [letter + acc, oct];\r\n    }\r\n    if (NUM_TYPES.test(oct)) {\r\n        return [letter + acc, oct + type];\r\n    }\r\n    else {\r\n        return [letter + acc + oct, type];\r\n    }\r\n}\r\n/**\r\n * Get a Chord from a chord name.\r\n */\r\nfunction get(src) {\r\n    if (src === \"\") {\r\n        return NoChord;\r\n    }\r\n    if (Array.isArray(src) && src.length === 2) {\r\n        return getChord(src[1], src[0]);\r\n    }\r\n    else {\r\n        const [tonic, type] = tokenize(src);\r\n        const chord = getChord(type, tonic);\r\n        return chord.empty ? getChord(src) : chord;\r\n    }\r\n}\r\n/**\r\n * Get chord properties\r\n *\r\n * @param typeName - the chord type name\r\n * @param [tonic] - Optional tonic\r\n * @param [root]  - Optional root (requires a tonic)\r\n */\r\nfunction getChord(typeName, optionalTonic, optionalRoot) {\r\n    const type = get$1(typeName);\r\n    const tonic = note(optionalTonic || \"\");\r\n    const root = note(optionalRoot || \"\");\r\n    if (type.empty ||\r\n        (optionalTonic && tonic.empty) ||\r\n        (optionalRoot && root.empty)) {\r\n        return NoChord;\r\n    }\r\n    const rootInterval = distance(tonic.pc, root.pc);\r\n    const rootDegree = type.intervals.indexOf(rootInterval) + 1;\r\n    if (!root.empty && !rootDegree) {\r\n        return NoChord;\r\n    }\r\n    const intervals = Array.from(type.intervals);\r\n    for (let i = 1; i < rootDegree; i++) {\r\n        const num = intervals[0][0];\r\n        const quality = intervals[0][1];\r\n        const newNum = parseInt(num, 10) + 7;\r\n        intervals.push(`${newNum}${quality}`);\r\n        intervals.shift();\r\n    }\r\n    const notes = tonic.empty\r\n        ? []\r\n        : intervals.map((i) => transpose$1(tonic, i));\r\n    typeName = type.aliases.indexOf(typeName) !== -1 ? typeName : type.aliases[0];\r\n    const symbol = `${tonic.empty ? \"\" : tonic.pc}${typeName}${root.empty || rootDegree <= 1 ? \"\" : \"/\" + root.pc}`;\r\n    const name = `${optionalTonic ? tonic.pc + \" \" : \"\"}${type.name}${rootDegree > 1 && optionalRoot ? \" over \" + root.pc : \"\"}`;\r\n    return {\r\n        ...type,\r\n        name,\r\n        symbol,\r\n        type: type.name,\r\n        root: root.name,\r\n        intervals,\r\n        rootDegree,\r\n        tonic: tonic.name,\r\n        notes,\r\n    };\r\n}\r\nconst chord = deprecate(\"Chord.chord\", \"Chord.get\", get);\r\n/**\r\n * Transpose a chord name\r\n *\r\n * @param {string} chordName - the chord name\r\n * @return {string} the transposed chord\r\n *\r\n * @example\r\n * transpose('Dm7', 'P4') // => 'Gm7\r\n */\r\nfunction transpose(chordName, interval) {\r\n    const [tonic, type] = tokenize(chordName);\r\n    if (!tonic) {\r\n        return chordName;\r\n    }\r\n    return transpose$1(tonic, interval) + type;\r\n}\r\n/**\r\n * Get all scales where the given chord fits\r\n *\r\n * @example\r\n * chordScales('C7b9')\r\n * // => [\"phrygian dominant\", \"flamenco\", \"spanish heptatonic\", \"half-whole diminished\", \"chromatic\"]\r\n */\r\nfunction chordScales(name) {\r\n    const s = get(name);\r\n    const isChordIncluded = isSupersetOf(s.chroma);\r\n    return all()\r\n        .filter((scale) => isChordIncluded(scale.chroma))\r\n        .map((scale) => scale.name);\r\n}\r\n/**\r\n * Get all chords names that are a superset of the given one\r\n * (has the same notes and at least one more)\r\n *\r\n * @function\r\n * @example\r\n * extended(\"CMaj7\")\r\n * // => [ 'Cmaj#4', 'Cmaj7#9#11', 'Cmaj9', 'CM7add13', 'Cmaj13', 'Cmaj9#11', 'CM13#11', 'CM7b9' ]\r\n */\r\nfunction extended(chordName) {\r\n    const s = get(chordName);\r\n    const isSuperset = isSupersetOf(s.chroma);\r\n    return all$1()\r\n        .filter((chord) => isSuperset(chord.chroma))\r\n        .map((chord) => s.tonic + chord.aliases[0]);\r\n}\r\n/**\r\n * Find all chords names that are a subset of the given one\r\n * (has less notes but all from the given chord)\r\n *\r\n * @example\r\n */\r\nfunction reduced(chordName) {\r\n    const s = get(chordName);\r\n    const isSubset = isSubsetOf(s.chroma);\r\n    return all$1()\r\n        .filter((chord) => isSubset(chord.chroma))\r\n        .map((chord) => s.tonic + chord.aliases[0]);\r\n}\r\nvar index = {\r\n    getChord,\r\n    get,\r\n    detect,\r\n    chordScales,\r\n    extended,\r\n    reduced,\r\n    tokenize,\r\n    transpose,\r\n    // deprecate\r\n    chord,\r\n};\n\nexport { chord, chordScales, index as default, extended, get, getChord, reduced, tokenize, transpose };\n//# sourceMappingURL=index.es.js.map\n","// source: https://en.wikipedia.org/wiki/Note_value\r\nconst DATA = [\r\n    [\r\n        0.125,\r\n        \"dl\",\r\n        [\"large\", \"duplex longa\", \"maxima\", \"octuple\", \"octuple whole\"],\r\n    ],\r\n    [0.25, \"l\", [\"long\", \"longa\"]],\r\n    [0.5, \"d\", [\"double whole\", \"double\", \"breve\"]],\r\n    [1, \"w\", [\"whole\", \"semibreve\"]],\r\n    [2, \"h\", [\"half\", \"minim\"]],\r\n    [4, \"q\", [\"quarter\", \"crotchet\"]],\r\n    [8, \"e\", [\"eighth\", \"quaver\"]],\r\n    [16, \"s\", [\"sixteenth\", \"semiquaver\"]],\r\n    [32, \"t\", [\"thirty-second\", \"demisemiquaver\"]],\r\n    [64, \"sf\", [\"sixty-fourth\", \"hemidemisemiquaver\"]],\r\n    [128, \"h\", [\"hundred twenty-eighth\"]],\r\n    [256, \"th\", [\"two hundred fifty-sixth\"]],\r\n];\n\nconst VALUES = [];\r\nDATA.forEach(([denominator, shorthand, names]) => add(denominator, shorthand, names));\r\nconst NoDuration = {\r\n    empty: true,\r\n    name: \"\",\r\n    value: 0,\r\n    fraction: [0, 0],\r\n    shorthand: \"\",\r\n    dots: \"\",\r\n    names: [],\r\n};\r\nfunction names() {\r\n    return VALUES.reduce((names, duration) => {\r\n        duration.names.forEach((name) => names.push(name));\r\n        return names;\r\n    }, []);\r\n}\r\nfunction shorthands() {\r\n    return VALUES.map((dur) => dur.shorthand);\r\n}\r\nconst REGEX = /^([^.]+)(\\.*)$/;\r\nfunction get(name) {\r\n    const [_, simple, dots] = REGEX.exec(name) || [];\r\n    const base = VALUES.find((dur) => dur.shorthand === simple || dur.names.includes(simple));\r\n    if (!base) {\r\n        return NoDuration;\r\n    }\r\n    const fraction = calcDots(base.fraction, dots.length);\r\n    const value = fraction[0] / fraction[1];\r\n    return { ...base, name, dots, value, fraction };\r\n}\r\nconst value = (name) => get(name).value;\r\nconst fraction = (name) => get(name).fraction;\r\nvar index = { names, shorthands, get, value, fraction };\r\n//// PRIVATE ////\r\nfunction add(denominator, shorthand, names) {\r\n    VALUES.push({\r\n        empty: false,\r\n        dots: \"\",\r\n        name: \"\",\r\n        value: 1 / denominator,\r\n        fraction: denominator < 1 ? [1 / denominator, 1] : [1, denominator],\r\n        shorthand,\r\n        names,\r\n    });\r\n}\r\nfunction calcDots(fraction, dots) {\r\n    const pow = Math.pow(2, dots);\r\n    let numerator = fraction[0] * pow;\r\n    let denominator = fraction[1] * pow;\r\n    const base = numerator;\r\n    // add fractions\r\n    for (let i = 0; i < dots; i++) {\r\n        numerator += base / Math.pow(2, i + 1);\r\n    }\r\n    // simplify\r\n    while (numerator % 2 === 0 && denominator % 2 === 0) {\r\n        numerator /= 2;\r\n        denominator /= 2;\r\n    }\r\n    return [numerator, denominator];\r\n}\n\nexport default index;\nexport { fraction, get, names, shorthands, value };\n//# sourceMappingURL=index.es.js.map\n","import { interval, distance as distance$1, coordToInterval } from '@tonaljs/core';\n\n/**\r\n * Get the natural list of names\r\n */\r\nfunction names() {\r\n    return \"1P 2M 3M 4P 5P 6m 7m\".split(\" \");\r\n}\r\n/**\r\n * Get properties of an interval\r\n *\r\n * @function\r\n * @example\r\n * Interval.get('P4') // => {\"alt\": 0,  \"dir\": 1,  \"name\": \"4P\", \"num\": 4, \"oct\": 0, \"q\": \"P\", \"semitones\": 5, \"simple\": 4, \"step\": 3, \"type\": \"perfectable\"}\r\n */\r\nconst get = interval;\r\n/**\r\n * Get name of an interval\r\n *\r\n * @function\r\n * @example\r\n * Interval.name('4P') // => \"4P\"\r\n * Interval.name('P4') // => \"4P\"\r\n * Interval.name('C4') // => \"\"\r\n */\r\nconst name = (name) => interval(name).name;\r\n/**\r\n * Get semitones of an interval\r\n * @function\r\n * @example\r\n * Interval.semitones('P4') // => 5\r\n */\r\nconst semitones = (name) => interval(name).semitones;\r\n/**\r\n * Get quality of an interval\r\n * @function\r\n * @example\r\n * Interval.quality('P4') // => \"P\"\r\n */\r\nconst quality = (name) => interval(name).q;\r\n/**\r\n * Get number of an interval\r\n * @function\r\n * @example\r\n * Interval.num('P4') // => 4\r\n */\r\nconst num = (name) => interval(name).num;\r\n/**\r\n * Get the simplified version of an interval.\r\n *\r\n * @function\r\n * @param {string} interval - the interval to simplify\r\n * @return {string} the simplified interval\r\n *\r\n * @example\r\n * Interval.simplify(\"9M\") // => \"2M\"\r\n * Interval.simplify(\"2M\") // => \"2M\"\r\n * Interval.simplify(\"-2M\") // => \"7m\"\r\n * [\"8P\", \"9M\", \"10M\", \"11P\", \"12P\", \"13M\", \"14M\", \"15P\"].map(Interval.simplify)\r\n * // => [ \"8P\", \"2M\", \"3M\", \"4P\", \"5P\", \"6M\", \"7M\", \"8P\" ]\r\n */\r\nfunction simplify(name) {\r\n    const i = interval(name);\r\n    return i.empty ? \"\" : i.simple + i.q;\r\n}\r\n/**\r\n * Get the inversion (https://en.wikipedia.org/wiki/Inversion_(music)#Intervals)\r\n * of an interval.\r\n *\r\n * @function\r\n * @param {string} interval - the interval to invert in interval shorthand\r\n * notation or interval array notation\r\n * @return {string} the inverted interval\r\n *\r\n * @example\r\n * Interval.invert(\"3m\") // => \"6M\"\r\n * Interval.invert(\"2M\") // => \"7m\"\r\n */\r\nfunction invert(name) {\r\n    const i = interval(name);\r\n    if (i.empty) {\r\n        return \"\";\r\n    }\r\n    const step = (7 - i.step) % 7;\r\n    const alt = i.type === \"perfectable\" ? -i.alt : -(i.alt + 1);\r\n    return interval({ step, alt, oct: i.oct, dir: i.dir }).name;\r\n}\r\n// interval numbers\r\nconst IN = [1, 2, 2, 3, 3, 4, 5, 5, 6, 6, 7, 7];\r\n// interval qualities\r\nconst IQ = \"P m M m M P d P m M m M\".split(\" \");\r\n/**\r\n * Get interval name from semitones number. Since there are several interval\r\n * names for the same number, the name it's arbitrary, but deterministic.\r\n *\r\n * @param {Integer} num - the number of semitones (can be negative)\r\n * @return {string} the interval name\r\n * @example\r\n * Interval.fromSemitones(7) // => \"5P\"\r\n * Interval.fromSemitones(-7) // => \"-5P\"\r\n */\r\nfunction fromSemitones(semitones) {\r\n    const d = semitones < 0 ? -1 : 1;\r\n    const n = Math.abs(semitones);\r\n    const c = n % 12;\r\n    const o = Math.floor(n / 12);\r\n    return d * (IN[c] + 7 * o) + IQ[c];\r\n}\r\n/**\r\n * Find interval between two notes\r\n *\r\n * @example\r\n * Interval.distance(\"C4\", \"G4\"); // => \"5P\"\r\n */\r\nconst distance = distance$1;\r\n/**\r\n * Adds two intervals\r\n *\r\n * @function\r\n * @param {string} interval1\r\n * @param {string} interval2\r\n * @return {string} the added interval name\r\n * @example\r\n * Interval.add(\"3m\", \"5P\") // => \"7m\"\r\n */\r\nconst add = combinator((a, b) => [a[0] + b[0], a[1] + b[1]]);\r\n/**\r\n * Returns a function that adds an interval\r\n *\r\n * @function\r\n * @example\r\n * ['1P', '2M', '3M'].map(Interval.addTo('5P')) // => [\"5P\", \"6M\", \"7M\"]\r\n */\r\nconst addTo = (interval) => (other) => add(interval, other);\r\n/**\r\n * Subtracts two intervals\r\n *\r\n * @function\r\n * @param {string} minuendInterval\r\n * @param {string} subtrahendInterval\r\n * @return {string} the substracted interval name\r\n * @example\r\n * Interval.substract('5P', '3M') // => '3m'\r\n * Interval.substract('3M', '5P') // => '-3m'\r\n */\r\nconst substract = combinator((a, b) => [a[0] - b[0], a[1] - b[1]]);\r\nfunction transposeFifths(interval, fifths) {\r\n    const ivl = get(interval);\r\n    if (ivl.empty)\r\n        return \"\";\r\n    const [nFifths, nOcts, dir] = ivl.coord;\r\n    return coordToInterval([nFifths + fifths, nOcts, dir]).name;\r\n}\r\nvar index = {\r\n    names,\r\n    get,\r\n    name,\r\n    num,\r\n    semitones,\r\n    quality,\r\n    fromSemitones,\r\n    distance,\r\n    invert,\r\n    simplify,\r\n    add,\r\n    addTo,\r\n    substract,\r\n    transposeFifths,\r\n};\r\nfunction combinator(fn) {\r\n    return (a, b) => {\r\n        const coordA = interval(a).coord;\r\n        const coordB = interval(b).coord;\r\n        if (coordA && coordB) {\r\n            const coord = fn(coordA, coordB);\r\n            return coordToInterval(coord).name;\r\n        }\r\n    };\r\n}\n\nexport { add, addTo, index as default, distance, fromSemitones, get, invert, name, names, num, quality, semitones, simplify, substract, transposeFifths };\n//# sourceMappingURL=index.es.js.map\n","import { note } from '@tonaljs/core';\n\nfunction isMidi(arg) {\r\n    return +arg >= 0 && +arg <= 127;\r\n}\r\n/**\r\n * Get the note midi number (a number between 0 and 127)\r\n *\r\n * It returns undefined if not valid note name\r\n *\r\n * @function\r\n * @param {string|number} note - the note name or midi number\r\n * @return {Integer} the midi number or undefined if not valid note\r\n * @example\r\n * import { toMidi } from '@tonaljs/midi'\r\n * toMidi(\"C4\") // => 60\r\n * toMidi(60) // => 60\r\n * toMidi('60') // => 60\r\n */\r\nfunction toMidi(note$1) {\r\n    if (isMidi(note$1)) {\r\n        return +note$1;\r\n    }\r\n    const n = note(note$1);\r\n    return n.empty ? null : n.midi;\r\n}\r\n/**\r\n * Get the frequency in hertzs from midi number\r\n *\r\n * @param {number} midi - the note midi number\r\n * @param {number} [tuning = 440] - A4 tuning frequency in Hz (440 by default)\r\n * @return {number} the frequency or null if not valid note midi\r\n * @example\r\n * import { midiToFreq} from '@tonaljs/midi'\r\n * midiToFreq(69) // => 440\r\n */\r\nfunction midiToFreq(midi, tuning = 440) {\r\n    return Math.pow(2, (midi - 69) / 12) * tuning;\r\n}\r\nconst L2 = Math.log(2);\r\nconst L440 = Math.log(440);\r\n/**\r\n * Get the midi number from a frequency in hertz. The midi number can\r\n * contain decimals (with two digits precission)\r\n *\r\n * @param {number} frequency\r\n * @return {number}\r\n * @example\r\n * import { freqToMidi} from '@tonaljs/midi'\r\n * freqToMidi(220)); //=> 57\r\n * freqToMidi(261.62)); //=> 60\r\n * freqToMidi(261)); //=> 59.96\r\n */\r\nfunction freqToMidi(freq) {\r\n    const v = (12 * (Math.log(freq) - L440)) / L2 + 69;\r\n    return Math.round(v * 100) / 100;\r\n}\r\nconst SHARPS = \"C C# D D# E F F# G G# A A# B\".split(\" \");\r\nconst FLATS = \"C Db D Eb E F Gb G Ab A Bb B\".split(\" \");\r\n/**\r\n * Given a midi number, returns a note name. The altered notes will have\r\n * flats unless explicitly set with the optional `useSharps` parameter.\r\n *\r\n * @function\r\n * @param {number} midi - the midi note number\r\n * @param {Object} options = default: `{ sharps: false, pitchClass: false }`\r\n * @param {boolean} useSharps - (Optional) set to true to use sharps instead of flats\r\n * @return {string} the note name\r\n * @example\r\n * import { midiToNoteName } from '@tonaljs/midi'\r\n * midiToNoteName(61) // => \"Db4\"\r\n * midiToNoteName(61, { pitchClass: true }) // => \"Db\"\r\n * midiToNoteName(61, { sharps: true }) // => \"C#4\"\r\n * midiToNoteName(61, { pitchClass: true, sharps: true }) // => \"C#\"\r\n * // it rounds to nearest note\r\n * midiToNoteName(61.7) // => \"D4\"\r\n */\r\nfunction midiToNoteName(midi, options = {}) {\r\n    if (isNaN(midi) || midi === -Infinity || midi === Infinity)\r\n        return \"\";\r\n    midi = Math.round(midi);\r\n    const pcs = options.sharps === true ? SHARPS : FLATS;\r\n    const pc = pcs[midi % 12];\r\n    if (options.pitchClass) {\r\n        return pc;\r\n    }\r\n    const o = Math.floor(midi / 12) - 1;\r\n    return pc + o;\r\n}\r\nvar index = { isMidi, toMidi, midiToFreq, midiToNoteName, freqToMidi };\n\nexport { index as default, freqToMidi, isMidi, midiToFreq, midiToNoteName, toMidi };\n//# sourceMappingURL=index.es.js.map\n","import { note, transpose as transpose$1, coordToNote } from '@tonaljs/core';\nimport { midiToNoteName, freqToMidi } from '@tonaljs/midi';\n\nconst NAMES = [\"C\", \"D\", \"E\", \"F\", \"G\", \"A\", \"B\"];\r\nconst toName = (n) => n.name;\r\nconst onlyNotes = (array) => array.map(note).filter((n) => !n.empty);\r\n/**\r\n * Return the natural note names without octave\r\n * @function\r\n * @example\r\n * Note.names(); // => [\"C\", \"D\", \"E\", \"F\", \"G\", \"A\", \"B\"]\r\n */\r\nfunction names(array) {\r\n    if (array === undefined) {\r\n        return NAMES.slice();\r\n    }\r\n    else if (!Array.isArray(array)) {\r\n        return [];\r\n    }\r\n    else {\r\n        return onlyNotes(array).map(toName);\r\n    }\r\n}\r\n/**\r\n * Get a note from a note name\r\n *\r\n * @function\r\n * @example\r\n * Note.get('Bb4') // => { name: \"Bb4\", midi: 70, chroma: 10, ... }\r\n */\r\nconst get = note;\r\n/**\r\n * Get the note name\r\n * @function\r\n */\r\nconst name = (note) => get(note).name;\r\n/**\r\n * Get the note pitch class name\r\n * @function\r\n */\r\nconst pitchClass = (note) => get(note).pc;\r\n/**\r\n * Get the note accidentals\r\n * @function\r\n */\r\nconst accidentals = (note) => get(note).acc;\r\n/**\r\n * Get the note octave\r\n * @function\r\n */\r\nconst octave = (note) => get(note).oct;\r\n/**\r\n * Get the note midi\r\n * @function\r\n */\r\nconst midi = (note) => get(note).midi;\r\n/**\r\n * Get the note midi\r\n * @function\r\n */\r\nconst freq = (note) => get(note).freq;\r\n/**\r\n * Get the note chroma\r\n * @function\r\n */\r\nconst chroma = (note) => get(note).chroma;\r\n/**\r\n * Given a midi number, returns a note name. Uses flats for altered notes.\r\n *\r\n * @function\r\n * @param {number} midi - the midi note number\r\n * @return {string} the note name\r\n * @example\r\n * Note.fromMidi(61) // => \"Db4\"\r\n * Note.fromMidi(61.7) // => \"D4\"\r\n */\r\nfunction fromMidi(midi) {\r\n    return midiToNoteName(midi);\r\n}\r\n/**\r\n * Given a midi number, returns a note name. Uses flats for altered notes.\r\n */\r\nfunction fromFreq(freq) {\r\n    return midiToNoteName(freqToMidi(freq));\r\n}\r\n/**\r\n * Given a midi number, returns a note name. Uses flats for altered notes.\r\n */\r\nfunction fromFreqSharps(freq) {\r\n    return midiToNoteName(freqToMidi(freq), { sharps: true });\r\n}\r\n/**\r\n * Given a midi number, returns a note name. Uses flats for altered notes.\r\n *\r\n * @function\r\n * @param {number} midi - the midi note number\r\n * @return {string} the note name\r\n * @example\r\n * Note.fromMidiSharps(61) // => \"C#4\"\r\n */\r\nfunction fromMidiSharps(midi) {\r\n    return midiToNoteName(midi, { sharps: true });\r\n}\r\n/**\r\n * Transpose a note by an interval\r\n */\r\nconst transpose = transpose$1;\r\nconst tr = transpose$1;\r\n/**\r\n * Transpose by an interval.\r\n * @function\r\n * @param {string} interval\r\n * @return {function} a function that transposes by the given interval\r\n * @example\r\n * [\"C\", \"D\", \"E\"].map(Note.transposeBy(\"5P\"));\r\n * // => [\"G\", \"A\", \"B\"]\r\n */\r\nconst transposeBy = (interval) => (note) => transpose(note, interval);\r\nconst trBy = transposeBy;\r\n/**\r\n * Transpose from a note\r\n * @function\r\n * @param {string} note\r\n * @return {function}  a function that transposes the the note by an interval\r\n * [\"1P\", \"3M\", \"5P\"].map(Note.transposeFrom(\"C\"));\r\n * // => [\"C\", \"E\", \"G\"]\r\n */\r\nconst transposeFrom = (note) => (interval) => transpose(note, interval);\r\nconst trFrom = transposeFrom;\r\n/**\r\n * Transpose a note by a number of perfect fifths.\r\n *\r\n * @function\r\n * @param {string} note - the note name\r\n * @param {number} fifhts - the number of fifths\r\n * @return {string} the transposed note name\r\n *\r\n * @example\r\n * import { transposeFifths } from \"@tonaljs/note\"\r\n * transposeFifths(\"G4\", 1) // => \"D\"\r\n * [0, 1, 2, 3, 4].map(fifths => transposeFifths(\"C\", fifths)) // => [\"C\", \"G\", \"D\", \"A\", \"E\"]\r\n */\r\nfunction transposeFifths(noteName, fifths) {\r\n    const note = get(noteName);\r\n    if (note.empty) {\r\n        return \"\";\r\n    }\r\n    const [nFifths, nOcts] = note.coord;\r\n    const transposed = nOcts === undefined\r\n        ? coordToNote([nFifths + fifths])\r\n        : coordToNote([nFifths + fifths, nOcts]);\r\n    return transposed.name;\r\n}\r\nconst trFifths = transposeFifths;\r\nconst ascending = (a, b) => a.height - b.height;\r\nconst descending = (a, b) => b.height - a.height;\r\nfunction sortedNames(notes, comparator) {\r\n    comparator = comparator || ascending;\r\n    return onlyNotes(notes).sort(comparator).map(toName);\r\n}\r\nfunction sortedUniqNames(notes) {\r\n    return sortedNames(notes, ascending).filter((n, i, a) => i === 0 || n !== a[i - 1]);\r\n}\r\n/**\r\n * Simplify a note\r\n *\r\n * @function\r\n * @param {string} note - the note to be simplified\r\n * - sameAccType: default true. Use same kind of accidentals that source\r\n * @return {string} the simplified note or '' if not valid note\r\n * @example\r\n * simplify(\"C##\") // => \"D\"\r\n * simplify(\"C###\") // => \"D#\"\r\n * simplify(\"C###\")\r\n * simplify(\"B#4\") // => \"C5\"\r\n */\r\nconst simplify = (noteName) => {\r\n    const note = get(noteName);\r\n    if (note.empty) {\r\n        return \"\";\r\n    }\r\n    return midiToNoteName(note.midi || note.chroma, {\r\n        sharps: note.alt > 0,\r\n        pitchClass: note.midi === null,\r\n    });\r\n};\r\n/**\r\n * Get enharmonic of a note\r\n *\r\n * @function\r\n * @param {string} note\r\n * @param [string] - [optional] Destination pitch class\r\n * @return {string} the enharmonic note name or '' if not valid note\r\n * @example\r\n * Note.enharmonic(\"Db\") // => \"C#\"\r\n * Note.enharmonic(\"C\") // => \"C\"\r\n * Note.enharmonic(\"F2\",\"E#\") // => \"E#2\"\r\n */\r\nfunction enharmonic(noteName, destName) {\r\n    const src = get(noteName);\r\n    if (src.empty) {\r\n        return \"\";\r\n    }\r\n    // destination: use given or generate one\r\n    const dest = get(destName ||\r\n        midiToNoteName(src.midi || src.chroma, {\r\n            sharps: src.alt < 0,\r\n            pitchClass: true,\r\n        }));\r\n    // ensure destination is valid\r\n    if (dest.empty || dest.chroma !== src.chroma) {\r\n        return \"\";\r\n    }\r\n    // if src has no octave, no need to calculate anything else\r\n    if (src.oct === undefined) {\r\n        return dest.pc;\r\n    }\r\n    // detect any octave overflow\r\n    const srcChroma = src.chroma - src.alt;\r\n    const destChroma = dest.chroma - dest.alt;\r\n    const destOctOffset = srcChroma > 11 || destChroma < 0\r\n        ? -1\r\n        : srcChroma < 0 || destChroma > 11\r\n            ? +1\r\n            : 0;\r\n    // calculate the new octave\r\n    const destOct = src.oct + destOctOffset;\r\n    return dest.pc + destOct;\r\n}\r\nvar index = {\r\n    names,\r\n    get,\r\n    name,\r\n    pitchClass,\r\n    accidentals,\r\n    octave,\r\n    midi,\r\n    ascending,\r\n    descending,\r\n    sortedNames,\r\n    sortedUniqNames,\r\n    fromMidi,\r\n    fromMidiSharps,\r\n    freq,\r\n    fromFreq,\r\n    fromFreqSharps,\r\n    chroma,\r\n    transpose,\r\n    tr,\r\n    transposeBy,\r\n    trBy,\r\n    transposeFrom,\r\n    trFrom,\r\n    transposeFifths,\r\n    trFifths,\r\n    simplify,\r\n    enharmonic,\r\n};\n\nexport { accidentals, ascending, chroma, index as default, descending, enharmonic, freq, fromFreq, fromFreqSharps, fromMidi, fromMidiSharps, get, midi, name, names, octave, pitchClass, simplify, sortedNames, sortedUniqNames, tr, trBy, trFifths, trFrom, transpose, transposeBy, transposeFifths, transposeFrom };\n//# sourceMappingURL=index.es.js.map\n","import { deprecate, isPitch, altToAcc, isNamed, accToAlt, interval } from '@tonaljs/core';\n\nconst NoRomanNumeral = { empty: true, name: \"\", chordType: \"\" };\r\nconst cache = {};\r\n/**\r\n * Get properties of a roman numeral string\r\n *\r\n * @function\r\n * @param {string} - the roman numeral string (can have type, like: Imaj7)\r\n * @return {Object} - the roman numeral properties\r\n * @param {string} name - the roman numeral (tonic)\r\n * @param {string} type - the chord type\r\n * @param {string} num - the number (1 = I, 2 = II...)\r\n * @param {boolean} major - major or not\r\n *\r\n * @example\r\n * romanNumeral(\"VIIb5\") // => { name: \"VII\", type: \"b5\", num: 7, major: true }\r\n */\r\nfunction get(src) {\r\n    return typeof src === \"string\"\r\n        ? cache[src] || (cache[src] = parse(src))\r\n        : typeof src === \"number\"\r\n            ? get(NAMES[src] || \"\")\r\n            : isPitch(src)\r\n                ? fromPitch(src)\r\n                : isNamed(src)\r\n                    ? get(src.name)\r\n                    : NoRomanNumeral;\r\n}\r\nconst romanNumeral = deprecate(\"RomanNumeral.romanNumeral\", \"RomanNumeral.get\", get);\r\n/**\r\n * Get roman numeral names\r\n *\r\n * @function\r\n * @param {boolean} [isMajor=true]\r\n * @return {Array<String>}\r\n *\r\n * @example\r\n * names() // => [\"I\", \"II\", \"III\", \"IV\", \"V\", \"VI\", \"VII\"]\r\n */\r\nfunction names(major = true) {\r\n    return (major ? NAMES : NAMES_MINOR).slice();\r\n}\r\nfunction fromPitch(pitch) {\r\n    return get(altToAcc(pitch.alt) + NAMES[pitch.step]);\r\n}\r\nconst REGEX = /^(#{1,}|b{1,}|x{1,}|)(IV|I{1,3}|VI{0,2}|iv|i{1,3}|vi{0,2})([^IViv]*)$/;\r\nfunction tokenize(str) {\r\n    return (REGEX.exec(str) || [\"\", \"\", \"\", \"\"]);\r\n}\r\nconst ROMANS = \"I II III IV V VI VII\";\r\nconst NAMES = ROMANS.split(\" \");\r\nconst NAMES_MINOR = ROMANS.toLowerCase().split(\" \");\r\nfunction parse(src) {\r\n    const [name, acc, roman, chordType] = tokenize(src);\r\n    if (!roman) {\r\n        return NoRomanNumeral;\r\n    }\r\n    const upperRoman = roman.toUpperCase();\r\n    const step = NAMES.indexOf(upperRoman);\r\n    const alt = accToAlt(acc);\r\n    const dir = 1;\r\n    return {\r\n        empty: false,\r\n        name,\r\n        roman,\r\n        interval: interval({ step, alt, dir }).name,\r\n        acc,\r\n        chordType,\r\n        alt,\r\n        step,\r\n        major: roman === upperRoman,\r\n        oct: 0,\r\n        dir,\r\n    };\r\n}\r\nvar index = {\r\n    names,\r\n    get,\r\n    // deprecated\r\n    romanNumeral,\r\n};\n\nexport { index as default, get, names, tokenize };\n//# sourceMappingURL=index.es.js.map\n","import { note, transpose, altToAcc, accToAlt } from '@tonaljs/core';\nimport { transposeFifths } from '@tonaljs/note';\nimport { get } from '@tonaljs/roman-numeral';\n\nconst Empty = Object.freeze([]);\r\nconst NoKey = {\r\n    type: \"major\",\r\n    tonic: \"\",\r\n    alteration: 0,\r\n    keySignature: \"\",\r\n};\r\nconst NoKeyScale = {\r\n    tonic: \"\",\r\n    grades: Empty,\r\n    intervals: Empty,\r\n    scale: Empty,\r\n    chords: Empty,\r\n    chordsHarmonicFunction: Empty,\r\n    chordScales: Empty,\r\n};\r\nconst NoMajorKey = {\r\n    ...NoKey,\r\n    ...NoKeyScale,\r\n    type: \"major\",\r\n    minorRelative: \"\",\r\n    scale: Empty,\r\n    secondaryDominants: Empty,\r\n    secondaryDominantsMinorRelative: Empty,\r\n    substituteDominants: Empty,\r\n    substituteDominantsMinorRelative: Empty,\r\n};\r\nconst NoMinorKey = {\r\n    ...NoKey,\r\n    type: \"minor\",\r\n    relativeMajor: \"\",\r\n    natural: NoKeyScale,\r\n    harmonic: NoKeyScale,\r\n    melodic: NoKeyScale,\r\n};\r\nconst mapScaleToType = (scale, list, sep = \"\") => list.map((type, i) => `${scale[i]}${sep}${type}`);\r\nfunction keyScale(grades, chords, harmonicFunctions, chordScales) {\r\n    return (tonic) => {\r\n        const intervals = grades.map((gr) => get(gr).interval || \"\");\r\n        const scale = intervals.map((interval) => transpose(tonic, interval));\r\n        return {\r\n            tonic,\r\n            grades,\r\n            intervals,\r\n            scale,\r\n            chords: mapScaleToType(scale, chords),\r\n            chordsHarmonicFunction: harmonicFunctions.slice(),\r\n            chordScales: mapScaleToType(scale, chordScales, \" \"),\r\n        };\r\n    };\r\n}\r\nconst distInFifths = (from, to) => {\r\n    const f = note(from);\r\n    const t = note(to);\r\n    return f.empty || t.empty ? 0 : t.coord[0] - f.coord[0];\r\n};\r\nconst MajorScale = keyScale(\"I II III IV V VI VII\".split(\" \"), \"maj7 m7 m7 maj7 7 m7 m7b5\".split(\" \"), \"T SD T SD D T D\".split(\" \"), \"major,dorian,phrygian,lydian,mixolydian,minor,locrian\".split(\",\"));\r\nconst NaturalScale = keyScale(\"I II bIII IV V bVI bVII\".split(\" \"), \"m7 m7b5 maj7 m7 m7 maj7 7\".split(\" \"), \"T SD T SD D SD SD\".split(\" \"), \"minor,locrian,major,dorian,phrygian,lydian,mixolydian\".split(\",\"));\r\nconst HarmonicScale = keyScale(\"I II bIII IV V bVI VII\".split(\" \"), \"mMaj7 m7b5 +maj7 m7 7 maj7 o7\".split(\" \"), \"T SD T SD D SD D\".split(\" \"), \"harmonic minor,locrian 6,major augmented,lydian diminished,phrygian dominant,lydian #9,ultralocrian\".split(\",\"));\r\nconst MelodicScale = keyScale(\"I II bIII IV V VI VII\".split(\" \"), \"m6 m7 +maj7 7 7 m7b5 m7b5\".split(\" \"), \"T SD T SD D  \".split(\" \"), \"melodic minor,dorian b2,lydian augmented,lydian dominant,mixolydian b6,locrian #2,altered\".split(\",\"));\r\n/**\r\n * Get a major key properties in a given tonic\r\n * @param tonic\r\n */\r\nfunction majorKey(tonic) {\r\n    const pc = note(tonic).pc;\r\n    if (!pc)\r\n        return NoMajorKey;\r\n    const keyScale = MajorScale(pc);\r\n    const alteration = distInFifths(\"C\", pc);\r\n    const romanInTonic = (src) => {\r\n        const r = get(src);\r\n        if (r.empty)\r\n            return \"\";\r\n        return transpose(tonic, r.interval) + r.chordType;\r\n    };\r\n    return {\r\n        ...keyScale,\r\n        type: \"major\",\r\n        minorRelative: transpose(pc, \"-3m\"),\r\n        alteration,\r\n        keySignature: altToAcc(alteration),\r\n        secondaryDominants: \"- VI7 VII7 I7 II7 III7 -\".split(\" \").map(romanInTonic),\r\n        secondaryDominantsMinorRelative: \"- IIIm7b5 IV#m7 Vm7 VIm7 VIIm7b5 -\"\r\n            .split(\" \")\r\n            .map(romanInTonic),\r\n        substituteDominants: \"- bIII7 IV7 bV7 bVI7 bVII7 -\"\r\n            .split(\" \")\r\n            .map(romanInTonic),\r\n        substituteDominantsMinorRelative: \"- IIIm7 Im7 IIbm7 VIm7 IVm7 -\"\r\n            .split(\" \")\r\n            .map(romanInTonic),\r\n    };\r\n}\r\n/**\r\n * Get minor key properties in a given tonic\r\n * @param tonic\r\n */\r\nfunction minorKey(tnc) {\r\n    const pc = note(tnc).pc;\r\n    if (!pc)\r\n        return NoMinorKey;\r\n    const alteration = distInFifths(\"C\", pc) - 3;\r\n    return {\r\n        type: \"minor\",\r\n        tonic: pc,\r\n        relativeMajor: transpose(pc, \"3m\"),\r\n        alteration,\r\n        keySignature: altToAcc(alteration),\r\n        natural: NaturalScale(pc),\r\n        harmonic: HarmonicScale(pc),\r\n        melodic: MelodicScale(pc),\r\n    };\r\n}\r\n/**\r\n * Given a key signature, returns the tonic of the major key\r\n * @param sigature\r\n * @example\r\n * majorTonicFromKeySignature('###') // => 'A'\r\n */\r\nfunction majorTonicFromKeySignature(sig) {\r\n    if (typeof sig === \"number\") {\r\n        return transposeFifths(\"C\", sig);\r\n    }\r\n    else if (typeof sig === \"string\" && /^b+|#+$/.test(sig)) {\r\n        return transposeFifths(\"C\", accToAlt(sig));\r\n    }\r\n    return null;\r\n}\r\nvar index = { majorKey, majorTonicFromKeySignature, minorKey };\n\nexport { index as default, majorKey, majorTonicFromKeySignature, minorKey };\n//# sourceMappingURL=index.es.js.map\n","import { rotate } from '@tonaljs/collection';\nimport { deprecate, transpose } from '@tonaljs/core';\nimport { simplify, transposeFifths } from '@tonaljs/interval';\nimport { EmptyPcset } from '@tonaljs/pcset';\nimport { get as get$1 } from '@tonaljs/scale-type';\n\nconst MODES = [\r\n    [0, 2773, 0, \"ionian\", \"\", \"Maj7\", \"major\"],\r\n    [1, 2902, 2, \"dorian\", \"m\", \"m7\"],\r\n    [2, 3418, 4, \"phrygian\", \"m\", \"m7\"],\r\n    [3, 2741, -1, \"lydian\", \"\", \"Maj7\"],\r\n    [4, 2774, 1, \"mixolydian\", \"\", \"7\"],\r\n    [5, 2906, 3, \"aeolian\", \"m\", \"m7\", \"minor\"],\r\n    [6, 3434, 5, \"locrian\", \"dim\", \"m7b5\"],\r\n];\r\nconst NoMode = {\r\n    ...EmptyPcset,\r\n    name: \"\",\r\n    alt: 0,\r\n    modeNum: NaN,\r\n    triad: \"\",\r\n    seventh: \"\",\r\n    aliases: [],\r\n};\r\nconst modes = MODES.map(toMode);\r\nconst index = {};\r\nmodes.forEach((mode) => {\r\n    index[mode.name] = mode;\r\n    mode.aliases.forEach((alias) => {\r\n        index[alias] = mode;\r\n    });\r\n});\r\n/**\r\n * Get a Mode by it's name\r\n *\r\n * @example\r\n * get('dorian')\r\n * // =>\r\n * // {\r\n * //   intervals: [ '1P', '2M', '3m', '4P', '5P', '6M', '7m' ],\r\n * //   modeNum: 1,\r\n * //   chroma: '101101010110',\r\n * //   normalized: '101101010110',\r\n * //   name: 'dorian',\r\n * //   setNum: 2902,\r\n * //   alt: 2,\r\n * //   triad: 'm',\r\n * //   seventh: 'm7',\r\n * //   aliases: []\r\n * // }\r\n */\r\nfunction get(name) {\r\n    return typeof name === \"string\"\r\n        ? index[name.toLowerCase()] || NoMode\r\n        : name && name.name\r\n            ? get(name.name)\r\n            : NoMode;\r\n}\r\nconst mode = deprecate(\"Mode.mode\", \"Mode.get\", get);\r\n/**\r\n * Get a list of all modes\r\n */\r\nfunction all() {\r\n    return modes.slice();\r\n}\r\nconst entries = deprecate(\"Mode.mode\", \"Mode.all\", all);\r\n/**\r\n * Get a list of all mode names\r\n */\r\nfunction names() {\r\n    return modes.map((mode) => mode.name);\r\n}\r\nfunction toMode(mode) {\r\n    const [modeNum, setNum, alt, name, triad, seventh, alias] = mode;\r\n    const aliases = alias ? [alias] : [];\r\n    const chroma = Number(setNum).toString(2);\r\n    const intervals = get$1(name).intervals;\r\n    return {\r\n        empty: false,\r\n        intervals,\r\n        modeNum,\r\n        chroma,\r\n        normalized: chroma,\r\n        name,\r\n        setNum,\r\n        alt,\r\n        triad,\r\n        seventh,\r\n        aliases,\r\n    };\r\n}\r\nfunction notes(modeName, tonic) {\r\n    return get(modeName).intervals.map((ivl) => transpose(tonic, ivl));\r\n}\r\nfunction chords(chords) {\r\n    return (modeName, tonic) => {\r\n        const mode = get(modeName);\r\n        if (mode.empty)\r\n            return [];\r\n        const triads = rotate(mode.modeNum, chords);\r\n        const tonics = mode.intervals.map((i) => transpose(tonic, i));\r\n        return triads.map((triad, i) => tonics[i] + triad);\r\n    };\r\n}\r\nconst triads = chords(MODES.map((x) => x[4]));\r\nconst seventhChords = chords(MODES.map((x) => x[5]));\r\nfunction distance(destination, source) {\r\n    const from = get(source);\r\n    const to = get(destination);\r\n    if (from.empty || to.empty)\r\n        return \"\";\r\n    return simplify(transposeFifths(\"1P\", to.alt - from.alt));\r\n}\r\nfunction relativeTonic(destination, source, tonic) {\r\n    return transpose(tonic, distance(destination, source));\r\n}\r\nvar index$1 = {\r\n    get,\r\n    names,\r\n    all,\r\n    distance,\r\n    relativeTonic,\r\n    notes,\r\n    triads,\r\n    seventhChords,\r\n    // deprecated\r\n    entries,\r\n    mode,\r\n};\n\nexport { all, index$1 as default, distance, entries, get, mode, names, notes, relativeTonic, seventhChords, triads };\n//# sourceMappingURL=index.es.js.map\n","import { tokenize } from '@tonaljs/chord';\nimport { transpose, interval, distance } from '@tonaljs/core';\nimport { get } from '@tonaljs/roman-numeral';\n\n/**\r\n * Given a tonic and a chord list expressed with roman numeral notation\r\n * returns the progression expressed with leadsheet chords symbols notation\r\n * @example\r\n * fromRomanNumerals(\"C\", [\"I\", \"IIm7\", \"V7\"]);\r\n * // => [\"C\", \"Dm7\", \"G7\"]\r\n */\r\nfunction fromRomanNumerals(tonic, chords) {\r\n    const romanNumerals = chords.map(get);\r\n    return romanNumerals.map((rn) => transpose(tonic, interval(rn)) + rn.chordType);\r\n}\r\n/**\r\n * Given a tonic and a chord list with leadsheet symbols notation,\r\n * return the chord list with roman numeral notation\r\n * @example\r\n * toRomanNumerals(\"C\", [\"CMaj7\", \"Dm7\", \"G7\"]);\r\n * // => [\"IMaj7\", \"IIm7\", \"V7\"]\r\n */\r\nfunction toRomanNumerals(tonic, chords) {\r\n    return chords.map((chord) => {\r\n        const [note, chordType] = tokenize(chord);\r\n        const intervalName = distance(tonic, note);\r\n        const roman = get(interval(intervalName));\r\n        return roman.name + chordType;\r\n    });\r\n}\r\nvar index = { fromRomanNumerals, toRomanNumerals };\n\nexport { index as default, fromRomanNumerals, toRomanNumerals };\n//# sourceMappingURL=index.es.js.map\n","import { compact, range } from '@tonaljs/collection';\nimport { toMidi, midiToNoteName } from '@tonaljs/midi';\n\n/**\r\n * Create a numeric range. You supply a list of notes or numbers and it will\r\n * be connected to create complex ranges.\r\n *\r\n * @param {Array} notes - the list of notes or midi numbers used\r\n * @return {Array} an array of numbers or empty array if not valid parameters\r\n *\r\n * @example\r\n * numeric([\"C5\", \"C4\"]) // => [ 72, 71, 70, 69, 68, 67, 66, 65, 64, 63, 62, 61, 60 ]\r\n * // it works midi notes\r\n * numeric([10, 5]) // => [ 10, 9, 8, 7, 6, 5 ]\r\n * // complex range\r\n * numeric([\"C4\", \"E4\", \"Bb3\"]) // => [60, 61, 62, 63, 64, 63, 62, 61, 60, 59, 58]\r\n */\r\nfunction numeric(notes) {\r\n    const midi = compact(notes.map(toMidi));\r\n    if (!notes.length || midi.length !== notes.length) {\r\n        // there is no valid notes\r\n        return [];\r\n    }\r\n    return midi.reduce((result, note) => {\r\n        const last = result[result.length - 1];\r\n        return result.concat(range(last, note).slice(1));\r\n    }, [midi[0]]);\r\n}\r\n/**\r\n * Create a range of chromatic notes. The altered notes will use flats.\r\n *\r\n * @function\r\n * @param {Array} notes - the list of notes or midi note numbers to create a range from\r\n * @param {Object} options - The same as `midiToNoteName` (`{ sharps: boolean, pitchClass: boolean }`)\r\n * @return {Array} an array of note names\r\n *\r\n * @example\r\n * Range.chromatic([\"C2, \"E2\", \"D2\"]) // => [\"C2\", \"Db2\", \"D2\", \"Eb2\", \"E2\", \"Eb2\", \"D2\"]\r\n * // with sharps\r\n * Range.chromatic([\"C2\", \"C3\"], { sharps: true }) // => [ \"C2\", \"C#2\", \"D2\", \"D#2\", \"E2\", \"F2\", \"F#2\", \"G2\", \"G#2\", \"A2\", \"A#2\", \"B2\", \"C3\" ]\r\n */\r\nfunction chromatic(notes, options) {\r\n    return numeric(notes).map((midi) => midiToNoteName(midi, options));\r\n}\r\nvar index = { numeric, chromatic };\n\nexport { chromatic, index as default, numeric };\n//# sourceMappingURL=index.es.js.map\n","import { all } from '@tonaljs/chord-type';\nimport { rotate, range } from '@tonaljs/collection';\nimport { deprecate, note, transpose } from '@tonaljs/core';\nimport { sortedUniqNames, fromMidi, enharmonic } from '@tonaljs/note';\nimport { isSubsetOf, isSupersetOf, modes } from '@tonaljs/pcset';\nimport { names as names$1, get as get$1, all as all$1 } from '@tonaljs/scale-type';\n\n/**\r\n * References:\r\n * - https://www.researchgate.net/publication/327567188_An_Algorithm_for_Spelling_the_Pitches_of_Any_Musical_Scale\r\n * @module scale\r\n */\r\nconst NoScale = {\r\n    empty: true,\r\n    name: \"\",\r\n    type: \"\",\r\n    tonic: null,\r\n    setNum: NaN,\r\n    chroma: \"\",\r\n    normalized: \"\",\r\n    aliases: [],\r\n    notes: [],\r\n    intervals: [],\r\n};\r\n/**\r\n * Given a string with a scale name and (optionally) a tonic, split\r\n * that components.\r\n *\r\n * It retuns an array with the form [ name, tonic ] where tonic can be a\r\n * note name or null and name can be any arbitrary string\r\n * (this function doesn\"t check if that scale name exists)\r\n *\r\n * @function\r\n * @param {string} name - the scale name\r\n * @return {Array} an array [tonic, name]\r\n * @example\r\n * tokenize(\"C mixolydean\") // => [\"C\", \"mixolydean\"]\r\n * tokenize(\"anything is valid\") // => [\"\", \"anything is valid\"]\r\n * tokenize() // => [\"\", \"\"]\r\n */\r\nfunction tokenize(name) {\r\n    if (typeof name !== \"string\") {\r\n        return [\"\", \"\"];\r\n    }\r\n    const i = name.indexOf(\" \");\r\n    const tonic = note(name.substring(0, i));\r\n    if (tonic.empty) {\r\n        const n = note(name);\r\n        return n.empty ? [\"\", name] : [n.name, \"\"];\r\n    }\r\n    const type = name.substring(tonic.name.length + 1);\r\n    return [tonic.name, type.length ? type : \"\"];\r\n}\r\n/**\r\n * Get all scale names\r\n * @function\r\n */\r\nconst names = names$1;\r\n/**\r\n * Get a Scale from a scale name.\r\n */\r\nfunction get(src) {\r\n    const tokens = Array.isArray(src) ? src : tokenize(src);\r\n    const tonic = note(tokens[0]).name;\r\n    const st = get$1(tokens[1]);\r\n    if (st.empty) {\r\n        return NoScale;\r\n    }\r\n    const type = st.name;\r\n    const notes = tonic\r\n        ? st.intervals.map((i) => transpose(tonic, i))\r\n        : [];\r\n    const name = tonic ? tonic + \" \" + type : type;\r\n    return { ...st, name, type, tonic, notes };\r\n}\r\nconst scale = deprecate(\"Scale.scale\", \"Scale.get\", get);\r\n/**\r\n * Get all chords that fits a given scale\r\n *\r\n * @function\r\n * @param {string} name - the scale name\r\n * @return {Array<string>} - the chord names\r\n *\r\n * @example\r\n * scaleChords(\"pentatonic\") // => [\"5\", \"64\", \"M\", \"M6\", \"Madd9\", \"Msus2\"]\r\n */\r\nfunction scaleChords(name) {\r\n    const s = get(name);\r\n    const inScale = isSubsetOf(s.chroma);\r\n    return all()\r\n        .filter((chord) => inScale(chord.chroma))\r\n        .map((chord) => chord.aliases[0]);\r\n}\r\n/**\r\n * Get all scales names that are a superset of the given one\r\n * (has the same notes and at least one more)\r\n *\r\n * @function\r\n * @param {string} name\r\n * @return {Array} a list of scale names\r\n * @example\r\n * extended(\"major\") // => [\"bebop\", \"bebop dominant\", \"bebop major\", \"chromatic\", \"ichikosucho\"]\r\n */\r\nfunction extended(name) {\r\n    const s = get(name);\r\n    const isSuperset = isSupersetOf(s.chroma);\r\n    return all$1()\r\n        .filter((scale) => isSuperset(scale.chroma))\r\n        .map((scale) => scale.name);\r\n}\r\n/**\r\n * Find all scales names that are a subset of the given one\r\n * (has less notes but all from the given scale)\r\n *\r\n * @function\r\n * @param {string} name\r\n * @return {Array} a list of scale names\r\n *\r\n * @example\r\n * reduced(\"major\") // => [\"ionian pentatonic\", \"major pentatonic\", \"ritusen\"]\r\n */\r\nfunction reduced(name) {\r\n    const isSubset = isSubsetOf(get(name).chroma);\r\n    return all$1()\r\n        .filter((scale) => isSubset(scale.chroma))\r\n        .map((scale) => scale.name);\r\n}\r\n/**\r\n * Given an array of notes, return the scale: a pitch class set starting from\r\n * the first note of the array\r\n *\r\n * @function\r\n * @param {string[]} notes\r\n * @return {string[]} pitch classes with same tonic\r\n * @example\r\n * scaleNotes(['C4', 'c3', 'C5', 'C4', 'c4']) // => [\"C\"]\r\n * scaleNotes(['D4', 'c#5', 'A5', 'F#6']) // => [\"D\", \"F#\", \"A\", \"C#\"]\r\n */\r\nfunction scaleNotes(notes) {\r\n    const pcset = notes.map((n) => note(n).pc).filter((x) => x);\r\n    const tonic = pcset[0];\r\n    const scale = sortedUniqNames(pcset);\r\n    return rotate(scale.indexOf(tonic), scale);\r\n}\r\n/**\r\n * Find mode names of a scale\r\n *\r\n * @function\r\n * @param {string} name - scale name\r\n * @example\r\n * modeNames(\"C pentatonic\") // => [\r\n *   [\"C\", \"major pentatonic\"],\r\n *   [\"D\", \"egyptian\"],\r\n *   [\"E\", \"malkos raga\"],\r\n *   [\"G\", \"ritusen\"],\r\n *   [\"A\", \"minor pentatonic\"]\r\n * ]\r\n */\r\nfunction modeNames(name) {\r\n    const s = get(name);\r\n    if (s.empty) {\r\n        return [];\r\n    }\r\n    const tonics = s.tonic ? s.notes : s.intervals;\r\n    return modes(s.chroma)\r\n        .map((chroma, i) => {\r\n        const modeName = get(chroma).name;\r\n        return modeName ? [tonics[i], modeName] : [\"\", \"\"];\r\n    })\r\n        .filter((x) => x[0]);\r\n}\r\nfunction getNoteNameOf(scale) {\r\n    const names = Array.isArray(scale) ? scaleNotes(scale) : get(scale).notes;\r\n    const chromas = names.map((name) => note(name).chroma);\r\n    return (noteOrMidi) => {\r\n        const currNote = typeof noteOrMidi === \"number\"\r\n            ? note(fromMidi(noteOrMidi))\r\n            : note(noteOrMidi);\r\n        const height = currNote.height;\r\n        if (height === undefined)\r\n            return undefined;\r\n        const chroma = height % 12;\r\n        const position = chromas.indexOf(chroma);\r\n        if (position === -1)\r\n            return undefined;\r\n        return enharmonic(currNote.name, names[position]);\r\n    };\r\n}\r\nfunction rangeOf(scale) {\r\n    const getName = getNoteNameOf(scale);\r\n    return (fromNote, toNote) => {\r\n        const from = note(fromNote).height;\r\n        const to = note(toNote).height;\r\n        if (from === undefined || to === undefined)\r\n            return [];\r\n        return range(from, to)\r\n            .map(getName)\r\n            .filter((x) => x);\r\n    };\r\n}\r\nvar index = {\r\n    get,\r\n    names,\r\n    extended,\r\n    modeNames,\r\n    reduced,\r\n    scaleChords,\r\n    scaleNotes,\r\n    tokenize,\r\n    rangeOf,\r\n    // deprecated\r\n    scale,\r\n};\n\nexport { index as default, extended, get, modeNames, names, rangeOf, reduced, scale, scaleChords, scaleNotes, tokenize };\n//# sourceMappingURL=index.es.js.map\n","// CONSTANTS\r\nconst NONE = {\r\n    empty: true,\r\n    name: \"\",\r\n    upper: undefined,\r\n    lower: undefined,\r\n    type: undefined,\r\n    additive: [],\r\n};\r\nconst NAMES = [\"4/4\", \"3/4\", \"2/4\", \"2/2\", \"12/8\", \"9/8\", \"6/8\", \"3/8\"];\r\n// PUBLIC API\r\nfunction names() {\r\n    return NAMES.slice();\r\n}\r\nconst REGEX = /^(\\d?\\d(?:\\+\\d)*)\\/(\\d)$/;\r\nconst CACHE = new Map();\r\nfunction get(literal) {\r\n    const cached = CACHE.get(literal);\r\n    if (cached) {\r\n        return cached;\r\n    }\r\n    const ts = build(parse(literal));\r\n    CACHE.set(literal, ts);\r\n    return ts;\r\n}\r\nfunction parse(literal) {\r\n    if (typeof literal === \"string\") {\r\n        const [_, up, low] = REGEX.exec(literal) || [];\r\n        return parse([up, low]);\r\n    }\r\n    const [up, down] = literal;\r\n    const denominator = +down;\r\n    if (typeof up === \"number\") {\r\n        return [up, denominator];\r\n    }\r\n    const list = up.split(\"+\").map((n) => +n);\r\n    return list.length === 1 ? [list[0], denominator] : [list, denominator];\r\n}\r\nvar index = { names, parse, get };\r\n// PRIVATE\r\nfunction build([up, down]) {\r\n    const upper = Array.isArray(up) ? up.reduce((a, b) => a + b, 0) : up;\r\n    const lower = down;\r\n    if (upper === 0 || lower === 0) {\r\n        return NONE;\r\n    }\r\n    const name = Array.isArray(up) ? `${up.join(\"+\")}/${down}` : `${up}/${down}`;\r\n    const additive = Array.isArray(up) ? up : [];\r\n    const type = lower === 4 || lower === 2\r\n        ? \"simple\"\r\n        : lower === 8 && upper % 3 === 0\r\n            ? \"compound\"\r\n            : \"irregular\";\r\n    return {\r\n        empty: false,\r\n        name,\r\n        type,\r\n        upper,\r\n        lower,\r\n        additive,\r\n    };\r\n}\n\nexport default index;\nexport { get, names, parse };\n//# sourceMappingURL=index.es.js.map\n","export { default as AbcNotation } from '@tonaljs/abc-notation';\nimport * as array from '@tonaljs/array';\nexport { array as Array };\nexport { default as Chord } from '@tonaljs/chord';\nimport ChordType from '@tonaljs/chord-type';\nexport { default as ChordType } from '@tonaljs/chord-type';\nexport { default as Collection } from '@tonaljs/collection';\nimport * as Core from '@tonaljs/core';\nexport * from '@tonaljs/core';\nexport { Core };\nexport { default as DurationValue } from '@tonaljs/duration-value';\nexport { default as Interval } from '@tonaljs/interval';\nexport { default as Key } from '@tonaljs/key';\nexport { default as Midi } from '@tonaljs/midi';\nexport { default as Mode } from '@tonaljs/mode';\nexport { default as Note } from '@tonaljs/note';\nimport Pcset from '@tonaljs/pcset';\nexport { default as Pcset } from '@tonaljs/pcset';\nexport { default as Progression } from '@tonaljs/progression';\nexport { default as Range } from '@tonaljs/range';\nexport { default as RomanNumeral } from '@tonaljs/roman-numeral';\nexport { default as Scale } from '@tonaljs/scale';\nimport ScaleType from '@tonaljs/scale-type';\nexport { default as ScaleType } from '@tonaljs/scale-type';\nexport { default as TimeSignature } from '@tonaljs/time-signature';\n\n// deprecated (backwards compatibility)\r\nconst Tonal = Core;\r\nconst PcSet = Pcset;\r\nconst ChordDictionary = ChordType;\r\nconst ScaleDictionary = ScaleType;\n\nexport { ChordDictionary, PcSet, ScaleDictionary, Tonal };\n//# sourceMappingURL=index.es.js.map\n","/*\ntonal.mjs - <short description TODO>\nCopyright (C) 2022 Strudel contributors - see <https://github.com/tidalcycles/strudel/blob/main/packages/tonal/tonal.mjs>\nThis program is free software: you can redistribute it and/or modify it under the terms of the GNU Affero General Public License as published by the Free Software Foundation, either version 3 of the License, or (at your option) any later version. This program is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU Affero General Public License for more details. You should have received a copy of the GNU Affero General Public License along with this program.  If not, see <https://www.gnu.org/licenses/>.\n*/\n\nimport { Note, Interval, Scale } from '@tonaljs/tonal';\nimport { Pattern, mod } from '@strudel.cycles/core';\n\n// transpose note inside scale by offset steps\n// function scaleOffset(scale: string, offset: number, note: string) {\nfunction scaleOffset(scale, offset, note) {\n  let [tonic, scaleName] = Scale.tokenize(scale);\n  let { notes } = Scale.get(`${tonic} ${scaleName}`);\n  notes = notes.map((note) => Note.get(note).pc); // use only pc!\n  offset = Number(offset);\n  if (isNaN(offset)) {\n    throw new Error(`scale offset \"${offset}\" not a number`);\n  }\n  const { pc: fromPc, oct = 3 } = Note.get(note);\n  const noteIndex = notes.indexOf(fromPc);\n  if (noteIndex === -1) {\n    throw new Error(`note \"${note}\" is not in scale \"${scale}\"`);\n  }\n  let i = noteIndex,\n    o = oct,\n    n = fromPc;\n  const direction = Math.sign(offset);\n  // TODO: find way to do this smarter\n  while (Math.abs(i - noteIndex) < Math.abs(offset)) {\n    i += direction;\n    const index = mod(i, notes.length);\n    if (direction < 0 && n[0] === 'C') {\n      o += direction;\n    }\n    n = notes[index];\n    if (direction > 0 && n[0] === 'C') {\n      o += direction;\n    }\n  }\n  return n + o;\n}\n\n// Pattern.prototype._transpose = function (intervalOrSemitones: string | number) {\n/**\n * Change the pitch of each value by the given amount. Expects numbers or note strings as values.\n * The amount can be given as a number of semitones or as a string in interval short notation.\n * If you don't care about enharmonic correctness, just use numbers. Otherwise, pass the interval of\n * the form: ST where S is the degree number and T the type of interval with\n *\n * - M = major\n * - m = minor\n * - P = perfect\n * - A = augmented\n * - d = diminished\n *\n * Examples intervals:\n *\n * - 1P = unison\n * - 3M = major third\n * - 3m = minor third\n * - 4P = perfect fourth\n * - 4A = augmented fourth\n * - 5P = perfect fifth\n * - 5d = diminished fifth\n *\n * @param {string | number} amount Either number of semitones or interval string.\n * @returns Pattern\n * @memberof Pattern\n * @name transpose\n * @example\n * \"c2 c3\".fast(2).transpose(\"<0 -2 5 3>\".slow(2)).note()\n * @example\n * \"c2 c3\".fast(2).transpose(\"<1P -2M 4P 3m>\".slow(2)).note()\n */\n\nPattern.prototype._transpose = function (intervalOrSemitones) {\n  return this.withHap((hap) => {\n    const interval = !isNaN(Number(intervalOrSemitones))\n      ? Interval.fromSemitones(intervalOrSemitones /*  as number */)\n      : String(intervalOrSemitones);\n    if (typeof hap.value === 'number') {\n      const semitones = typeof interval === 'string' ? Interval.semitones(interval) || 0 : interval;\n      return hap.withValue(() => hap.value + semitones);\n    }\n    // TODO: move simplify to player to preserve enharmonics\n    // tone.js doesn't understand multiple sharps flats e.g. F##3 has to be turned into G3\n    return hap.withValue(() => Note.simplify(Note.transpose(hap.value, interval)));\n  });\n};\n\n// example: transpose(3).late(0.2) will be equivalent to compose(transpose(3), late(0.2))\n// TODO: add Pattern.define(name, function, options) that handles all the meta programming stuff\n// TODO: find out how to patternify this function when it's standalone\n// e.g. `stack(c3).superimpose(transpose(slowcat(7, 5)))` or\n// or even `stack(c3).superimpose(transpose.slowcat(7, 5))` or\n\n/**\n * Transposes notes inside the scale by the number of steps.\n * Expected to be called on a Pattern which already has a {@link Pattern#scale}\n *\n * @memberof Pattern\n * @name scaleTranspose\n * @param {offset} offset number of steps inside the scale\n * @returns Pattern\n * @example\n * \"-8 [2,4,6]\"\n * .scale('C4 bebop major')\n * .scaleTranspose(\"<0 -1 -2 -3 -4 -5 -6 -4>\")\n * .note()\n */\n\nPattern.prototype._scaleTranspose = function (offset /* : number | string */) {\n  return this.withHap((hap) => {\n    if (!hap.context.scale) {\n      throw new Error('can only use scaleTranspose after .scale');\n    }\n    if (typeof hap.value !== 'string') {\n      throw new Error('can only use scaleTranspose with notes');\n    }\n    return hap.withValue(() => scaleOffset(hap.context.scale, Number(offset), hap.value));\n  });\n};\n\n/**\n * Turns numbers into notes in the scale (zero indexed). Also sets scale for other scale operations, like {@link Pattern#scaleTranspose}.\n *\n * The scale name has the form \"TO? N\" wher\n *\n * - T = Tonic\n * - O = Octave (optional, defaults to 3)\n * - N = Name of scale, available names can be found [here](https://github.com/tonaljs/tonal/blob/main/packages/scale-type/data.ts).\n *\n * @memberof Pattern\n * @name scale\n * @param {string} scale Name of scale\n * @returns Pattern\n * @example\n * \"0 2 4 6 4 2\"\n * .scale(seq('C2 major', 'C2 minor').slow(2))\n * .note()\n */\n\nPattern.prototype._scale = function (scale /* : string */) {\n  return this.withHap((hap) => {\n    let note = hap.value;\n    const asNumber = Number(note);\n    if (!isNaN(asNumber)) {\n      let [tonic, scaleName] = Scale.tokenize(scale);\n      const { pc, oct = 3 } = Note.get(tonic);\n      note = scaleOffset(pc + ' ' + scaleName, asNumber, pc + oct);\n    }\n    return hap.withValue(() => note).setContext({ ...hap.context, scale });\n  });\n};\n\nPattern.prototype.define('transpose', (a, pat) => pat.transpose(a), { composable: true, patternified: true });\nPattern.prototype.define('scale', (a, pat) => pat.scale(a), { composable: true, patternified: true });\nPattern.prototype.define('scaleTranspose', (a, pat) => pat.scaleTranspose(a), { composable: true, patternified: true });\n","\"use strict\";\nexports.__esModule = true;\nexports.getBestVoicing = void 0;\nfunction getBestVoicing(voicingOptions) {\n    var chord = voicingOptions.chord, range = voicingOptions.range, finder = voicingOptions.finder, picker = voicingOptions.picker, lastVoicing = voicingOptions.lastVoicing;\n    var voicings = finder(chord, range);\n    if (!voicings.length) {\n        return [];\n    }\n    return picker(voicings, lastVoicing);\n}\nexports.getBestVoicing = getBestVoicing;\n//# sourceMappingURL=getBestVoicing.js.map","\"use strict\";\nexports.__esModule = true;\nexports.tokenizeChord = void 0;\nfunction tokenizeChord(chord) {\n    var match = (chord || '').match(/^([A-G][b#]*)([^\\/]*)[\\/]?([A-G][b#]*)?$/);\n    if (!match) {\n        // console.warn('could not tokenize chord', chord);\n        return [];\n    }\n    return match.slice(1);\n}\nexports.tokenizeChord = tokenizeChord;\n//# sourceMappingURL=tokenizeChord.js.map","\"use strict\";\nexports.__esModule = true;\nexports.voicingsInRange = void 0;\nvar tonal_1 = require(\"@tonaljs/tonal\");\nvar dictionaryVoicing_1 = require(\"./dictionaryVoicing\");\nvar tokenizeChord_1 = require(\"./tokenizeChord\");\nfunction voicingsInRange(chord, dictionary, range) {\n    if (dictionary === void 0) { dictionary = dictionaryVoicing_1.lefthand; }\n    if (range === void 0) { range = ['D3', 'A4']; }\n    var _a = (0, tokenizeChord_1.tokenizeChord)(chord), tonic = _a[0], symbol = _a[1];\n    if (!dictionary[symbol]) {\n        return [];\n    }\n    // resolve array of interval arrays for the wanted symbol\n    var voicings = dictionary[symbol].map(function (intervals) { return intervals.split(' '); });\n    var notesInRange = tonal_1.Range.chromatic(range); // gives array of notes inside range\n    return voicings.reduce(function (voiced, voicing) {\n        // transpose intervals relative to first interval (e.g. 3m 5P > 1P 3M)\n        var relativeIntervals = voicing.map(function (interval) { return tonal_1.Interval.substract(interval, voicing[0]); });\n        // get enharmonic correct pitch class the bottom note\n        var bottomPitchClass = tonal_1.Note.transpose(tonic, voicing[0]);\n        // get all possible start notes for voicing\n        var starts = notesInRange\n            // only get the start notes:\n            .filter(function (note) { return tonal_1.Note.chroma(note) === tonal_1.Note.chroma(bottomPitchClass); })\n            // filter out start notes that will overshoot the top end of the range\n            .filter(function (note) {\n            return tonal_1.Note.midi(tonal_1.Note.transpose(note, relativeIntervals[relativeIntervals.length - 1])) <= tonal_1.Note.midi(range[1]);\n        })\n            // replace Range.chromatic notes with the correct enharmonic equivalents\n            .map(function (note) { return tonal_1.Note.enharmonic(note, bottomPitchClass); });\n        // render one voicing for each start note\n        var notes = starts.map(function (start) { return relativeIntervals.map(function (interval) { return tonal_1.Note.transpose(start, interval); }); });\n        return voiced.concat(notes);\n    }, []);\n}\nexports.voicingsInRange = voicingsInRange;\n//# sourceMappingURL=voicingsInRange.js.map","\"use strict\";\nvar __assign = (this && this.__assign) || function () {\n    __assign = Object.assign || function(t) {\n        for (var s, i = 1, n = arguments.length; i < n; i++) {\n            s = arguments[i];\n            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))\n                t[p] = s[p];\n        }\n        return t;\n    };\n    return __assign.apply(this, arguments);\n};\nvar __rest = (this && this.__rest) || function (s, e) {\n    var t = {};\n    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)\n        t[p] = s[p];\n    if (s != null && typeof Object.getOwnPropertySymbols === \"function\")\n        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {\n            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))\n                t[p[i]] = s[p[i]];\n        }\n    return t;\n};\nexports.__esModule = true;\nexports.dictionaryVoicing = exports.dictionaryVoicingFinder = exports.triads = exports.guidetones = exports.lefthand = void 0;\nvar getBestVoicing_1 = require(\"./getBestVoicing\");\nvar voicingsInRange_1 = require(\"./voicingsInRange\");\nexports.lefthand = {\n    m7: ['3m 5P 7m 9M', '7m 9M 10m 12P'],\n    '7': ['3M 6M 7m 9M', '7m 9M 10M 13M'],\n    '^7': ['3M 5P 7M 9M', '7M 9M 10M 12P'],\n    '69': ['3M 5P 6A 9M'],\n    m7b5: ['3m 5d 7m 8P', '7m 8P 10m 12d'],\n    '7b9': ['3M 6m 7m 9m', '7m 9m 10M 13m'],\n    '7b13': ['3M 6m 7m 9m', '7m 9m 10M 13m'],\n    o7: ['1P 3m 5d 6M', '5d 6M 8P 10m'],\n    '7#11': ['7m 9M 11A 13A'],\n    '7#9': ['3M 7m 9A'],\n    mM7: ['3m 5P 7M 9M', '7M 9M 10m 12P'],\n    m6: ['3m 5P 6M 9M', '6M 9M 10m 12P']\n};\nexports.guidetones = {\n    m7: ['3m 7m', '7m 10m'],\n    m9: ['3m 7m', '7m 10m'],\n    '7': ['3M 7m', '7m 10M'],\n    '^7': ['3M 7M', '7M 10M'],\n    '^9': ['3M 7M', '7M 10M'],\n    '69': ['3M 6M'],\n    '6': ['3M 6M', '6M 10M'],\n    m7b5: ['3m 7m', '7m 10m'],\n    '7b9': ['3M 7m', '7m 10M'],\n    '7b13': ['3M 7m', '7m 10M'],\n    o7: ['3m 6M', '6M 10m'],\n    '7#11': ['3M 7m', '7m 10M'],\n    '7#9': ['3M 7m', '7m 10M'],\n    mM7: ['3m 7M', '7M 10m'],\n    m6: ['3m 6M', '6M 10m']\n};\nexports.triads = {\n    M: ['1P 3M 5P', '3M 5P 8P', '5P 8P 10M'],\n    m: ['1P 3m 5P', '3m 5P 8P', '5P 8P 10m'],\n    o: ['1P 3m 5d', '3m 5d 8P', '5d 8P 10m'],\n    aug: ['1P 3m 5A', '3m 5A 8P', '5A 8P 10m']\n};\nvar dictionaryVoicingFinder = function (dictionary) { return function (chordSymbol, range) {\n    return (0, voicingsInRange_1.voicingsInRange)(chordSymbol, dictionary, range);\n}; };\nexports.dictionaryVoicingFinder = dictionaryVoicingFinder;\nvar dictionaryVoicing = function (props) {\n    var dictionary = props.dictionary, range = props.range, rest = __rest(props, [\"dictionary\", \"range\"]);\n    return (0, getBestVoicing_1.getBestVoicing)(__assign(__assign({}, rest), { range: range, finder: (0, exports.dictionaryVoicingFinder)(dictionary) }));\n};\nexports.dictionaryVoicing = dictionaryVoicing;\n//# sourceMappingURL=dictionaryVoicing.js.map","\"use strict\";\nexports.__esModule = true;\nexports.minTopNoteDiff = void 0;\nvar tonal_1 = require(\"@tonaljs/tonal\");\nfunction minTopNoteDiff(voicings, lastVoicing) {\n    if (!lastVoicing) {\n        return voicings[0];\n    }\n    var diff = function (voicing) {\n        return Math.abs(tonal_1.Note.midi(lastVoicing[lastVoicing.length - 1]) - tonal_1.Note.midi(voicing[voicing.length - 1]));\n    };\n    return voicings.reduce(function (best, current) { return (diff(current) < diff(best) ? current : best); }, voicings[0]);\n}\nexports.minTopNoteDiff = minTopNoteDiff;\n//# sourceMappingURL=minTopNoteDiff.js.map","\"use strict\";\nexports.__esModule = true;\nvar dictionaryVoicing_1 = require(\"./dictionaryVoicing\");\nvar minTopNoteDiff_1 = require(\"./minTopNoteDiff\");\nvar getBestVoicing_1 = require(\"./getBestVoicing\");\nvar tokenizeChord_1 = require(\"./tokenizeChord\");\nexports[\"default\"] = {\n    tokenizeChord: tokenizeChord_1.tokenizeChord,\n    getBestVoicing: getBestVoicing_1.getBestVoicing,\n    dictionaryVoicing: dictionaryVoicing_1.dictionaryVoicing,\n    dictionaryVoicingFinder: dictionaryVoicing_1.dictionaryVoicingFinder,\n    lefthand: dictionaryVoicing_1.lefthand,\n    guidetones: dictionaryVoicing_1.guidetones,\n    triads: dictionaryVoicing_1.triads,\n    minTopNoteDiff: minTopNoteDiff_1.minTopNoteDiff\n};\n//# sourceMappingURL=index.js.map","/*\nvoicings.mjs - <short description TODO>\nCopyright (C) 2022 Strudel contributors - see <https://github.com/tidalcycles/strudel/blob/main/packages/tonal/voicings.mjs>\nThis program is free software: you can redistribute it and/or modify it under the terms of the GNU Affero General Public License as published by the Free Software Foundation, either version 3 of the License, or (at your option) any later version. This program is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU Affero General Public License for more details. You should have received a copy of the GNU Affero General Public License along with this program.  If not, see <https://www.gnu.org/licenses/>.\n*/\n\nimport { Pattern as _Pattern, stack, Hap, reify } from '@strudel.cycles/core';\nimport _voicings from 'chord-voicings';\nconst { dictionaryVoicing, minTopNoteDiff, lefthand } = _voicings.default || _voicings; // parcel module resolution fuckup\n\nconst getVoicing = (chord, lastVoicing, range = ['F3', 'A4']) =>\n  dictionaryVoicing({\n    chord,\n    dictionary: lefthand,\n    range,\n    picker: minTopNoteDiff,\n    lastVoicing,\n  });\n\nconst Pattern = _Pattern;\n\nPattern.prototype.fmapNested = function (func) {\n  return new Pattern((span) =>\n    this.query(span)\n      .map((event) =>\n        reify(func(event))\n          .query(span)\n          .map((hap) => new Hap(event.whole, event.part, hap.value, hap.context)),\n      )\n      .flat(),\n  );\n};\n\n/**\n * Turns chord symbols into voicings, using the smoothest voice leading possible.\n * Uses [chord-voicings package](https://github.com/felixroos/chord-voicings#chord-voicings).\n *\n * @name voicings\n * @memberof Pattern\n * @param {range} range note range for possible voicings (optional, defaults to `['F3', 'A4']`)\n * @returns Pattern\n * @example\n * stack(\"<C^7 A7 Dm7 G7>\".voicings(), \"<C3 A2 D3 G2>\").note()\n */\n\nPattern.prototype.voicings = function (range) {\n  let lastVoicing;\n  if (!range?.length) {\n    // allows to pass empty array, if too lazy to specify range\n    range = ['F3', 'A4'];\n  }\n  return this.fmapNested((event) => {\n    lastVoicing = getVoicing(event.value, lastVoicing, range);\n    return stack(...lastVoicing).withContext(() => ({\n      locations: event.context.locations || [],\n    }));\n  });\n};\n\nPattern.prototype._rootNotes = function (octave = 2) {\n  return this.fmap((value) => {\n    const [_, root] = value.match(/^([a-gA-G][b#]?).*$/);\n    return root + octave;\n  });\n};\n\nPattern.prototype.define('voicings', (range, pat) => pat.voicings(range), { composable: true });\nPattern.prototype.define('rootNotes', (oct, pat) => pat.rootNotes(oct), { composable: true, patternified: true });\n"],"names":["fillStr","s","n","deprecate","original","alternative","fn","args","isNamed","src","isPitch","pitch","FIFTHS","STEPS_TO_OCTS","fifths","encode","step","alt","oct","dir","f","o","FIFTHS_TO_STEPS","decode","coord","unaltered","i","NoNote","cache$1","stepToLetter","altToAcc","accToAlt","acc","note","cached","value","parse$1","pitchName$1","REGEX$1","tokenizeNote","str","m","coordToNote","noteCoord","mod","SEMI","noteName","tokens","letter","octStr","name","pc","chroma","height","midi","freq","props","NoInterval","INTERVAL_TONAL_REGEX","INTERVAL_SHORTHAND_REGEX","REGEX","tokenizeInterval","cache","interval","parse","pitchName","SIZES","TYPES","num","q","t","type","simple","qToAlt","semitones","coordToInterval","forceDescending","isDescending","ivl","calcNum","d","altToQ","transpose","intervalName","note$1","interval$1","intervalCoord","tr","distance","fromNote","toNote","from","to","fcoord","tcoord","octs","character","times","tokenize","abcToScientificNotation","a","scientificToAbcNotation","l","transpose$1","distance$1","index","ascR","b","descR","range","rotate","arr","len","compact","sortedNoteNames","notes","sortedUniqNoteNames","shuffle","rnd","permutations","perm","e","pos","newPerm","EmptyPcset","setNumToChroma","chromaToNumber","isChroma","set","isPcsetNum","isPcset","get","listToChroma","chromaToPcset","pcset","intervals","IVLS","chromaToIntervals","chromas","modes","normalize","binary","_","r","isEqual","s1","s2","isSubsetOf","isSupersetOf","isNoteIncludedIn","filter","isIncluded","chromaRotations","setNum","normalizedNum","normalized","CHORDS","NoChordType","dictionary","chordType","names","chord","x","symbols","keys","all","entries","removeAll","add","aliases","fullName","quality","getQuality","get$1","alias","addAlias","has","ivls","index$1","namedSet","pcToName","record","detect","source","findExactMatches","weight","tonic","tonicChroma","allModes","found","mode","chordName","baseNote","SCALES","NoScaleType","scale","scaleType","NoChord","NUM_TYPES","getChord","typeName","optionalTonic","optionalRoot","root","rootInterval","rootDegree","newNum","symbol","chordScales","isChordIncluded","extended","isSuperset","all$1","reduced","isSubset","DATA","VALUES","denominator","shorthand","NoDuration","duration","shorthands","dur","dots","base","fraction","calcDots","pow","numerator","simplify","invert","IN","IQ","fromSemitones","c","combinator","addTo","other","substract","transposeFifths","nFifths","nOcts","coordA","coordB","isMidi","arg","toMidi","midiToFreq","tuning","L2","L440","freqToMidi","v","SHARPS","FLATS","midiToNoteName","options","NAMES","toName","onlyNotes","array","pitchClass","accidentals","octave","fromMidi","fromFreq","fromFreqSharps","fromMidiSharps","transposeBy","trBy","transposeFrom","trFrom","trFifths","ascending","descending","sortedNames","comparator","sortedUniqNames","enharmonic","destName","dest","srcChroma","destChroma","destOctOffset","destOct","NoRomanNumeral","fromPitch","romanNumeral","major","NAMES_MINOR","ROMANS","roman","upperRoman","Empty","NoKey","NoKeyScale","NoMajorKey","NoMinorKey","mapScaleToType","list","sep","keyScale","grades","chords","harmonicFunctions","gr","distInFifths","MajorScale","NaturalScale","HarmonicScale","MelodicScale","majorKey","alteration","romanInTonic","minorKey","tnc","majorTonicFromKeySignature","sig","MODES","NoMode","toMode","modeNum","triad","seventh","modeName","triads","tonics","seventhChords","destination","relativeTonic","fromRomanNumerals","rn","toRomanNumerals","numeric","result","last","chromatic","NoScale","names$1","st","scaleChords","inScale","scaleNotes","modeNames","getNoteNameOf","noteOrMidi","currNote","position","rangeOf","getName","NONE","CACHE","literal","ts","build","up","low","down","upper","lower","additive","Tonal","Core","PcSet","Pcset","ChordDictionary","ChordType","ScaleDictionary","ScaleType","scaleOffset","offset","scaleName","Scale","Note","fromPc","noteIndex","direction","Pattern","intervalOrSemitones","hap","Interval","asNumber","pat","getBestVoicing_1","getBestVoicing","voicingOptions","finder","picker","lastVoicing","voicings","tokenizeChord_1","tokenizeChord","match","voicingsInRange_1","tonal_1","require$$0","dictionaryVoicing_1","require$$1","require$$2","voicingsInRange","_a","notesInRange","voiced","voicing","relativeIntervals","bottomPitchClass","starts","start","__assign","this","p","__rest","exports","dictionaryVoicingFinder","chordSymbol","dictionaryVoicing","rest","minTopNoteDiff_1","minTopNoteDiff","diff","best","current","require$$3","lefthand","_voicings","getVoicing","_Pattern","func","span","event","reify","Hap","stack"],"mappings":"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"}