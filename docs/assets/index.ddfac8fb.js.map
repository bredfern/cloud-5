{"version":3,"file":"index.ddfac8fb.js","sources":["../../packages/csound/csound.mjs"],"sourcesContent":["/*\ncsound.mjs - <short description TODO>\nCopyright (C) 2022 Strudel contributors - see <https://github.com/tidalcycles/strudel/blob/main/packages/midi/midi.mjs>\nThis program is free software: you can redistribute it and/or modify it under the terms of the GNU Affero General Public License as published by the Free Software Foundation, either version 3 of the License, or (at your option) any later version. This program is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU Affero General Public License for more details. You should have received a copy of the GNU Affero General Public License along with this program.  If not, see <https://www.gnu.org/licenses/>.\n*/\n\nimport { Pattern, isPattern, isNote, toMidi, getPlayableNoteValue, logger } from '@strudel.cycles/core';\n\n/**\n * Sends notes to Csound for rendering. My Csound instruments use the \n * following conventions:\n *\n *  p1 -- Csound instrument number, 1-based, can be a fraction.\n *  p2 -- time in beats (usually seconds) from start of performance.\n *  p3 -- duration in beats (usually seconds).\n *  p4 -- MIDI key number (as a real number, not an integer, but in [0, 127].\n *  p5 -- MIDI velocity (as a real number, not an integer, but in [0, 127].\n *  p6 -- spatial location from front to back (often not used), the listener \n *        is at 0.\n *  p7 -- spatial location from left to right (i.e. stereo pan), the listener \n *        is at 0 (for Ambisonics etc.) or 0.5 (for plain stereo).\n *  p8 -- spatial location from bottom to top (i.e. height), the listener is \n *        at 0.\n *  p9 -- audio signal phase (e.g. for phase-sychronous granular synthesis), \n *        often not used.\n * p10 -- Mason number (pitch-class sets encoded as powers of 2 in a real \n *        number, allows arithmetic on chords and scales, often not used).\n *\n * Here, p1 comes from pfields[0]; p2 defaults to 0; p3, p4, and p5 come \n * from the hap; p6 and p7 default to 0 and .5, but can be overridden by \n * arguments, so p6 and higher can come from pfields 1 and higher.\n */\nPattern.prototype.csnd = async function(...pfields) {\n  return this.onTrigger((tidal_time, hap, audio_context_time) => {\n      const p1 = pfields[0];\n      // Time in seconds counting from now.\n      const p2 = tidal_time - audio_context_time;\n      const p3 = hap.duration.valueOf();\n      let note = getPlayableNoteValue(hap);\n      // How can we get the pitch of the note as a _real-valued_ MIDI key \n      // number?\n      const p4 = toMidi(note);\n      // We prefer floating point precision, but over the MIDI range [0, 127].\n      const p5 = 127. * (hap.context?.velocity ?? 0.9);\n      let p6;\n      if (pfields.length > 1) {\n        p6 = pfields[1];\n      } else {\n        p6 = 0.;\n      }\n      let p7;\n      if (pfields.length > 2) {\n        p7 = pfields[2];\n      } else {\n        p7 = 0.;\n      }\n      // Build default pfields.\n      let i_statement = `i ${p1} ${p2} ${p3} ${p4} ${p5} ${p6} ${p7}`;\n      // Add optional pfields.\n      if (pfields.length > 3) {\n        for (let i = 3; i < pfields.length; ++i) {\n          i_statement = i_statement + ` ${pfields[i]}`;\n        }\n      }\n      i_statement += ('\\n');\n      logger(`[csnd] ${i_statement}`);\n      // Currently, Csound is a global variable in the REPL IFrame's content \n      // window, but it should be a member of the Tidal object, whatever that \n      // is. Dense textures of notes might get sloppy here.\n      if (window.__csound__) {\n        if (window.__csound__.inputMessage) {\n          // For \"canonical\" CsoundObj:\n          window.__csound__.inputMessage(i_statement);\n        } else {\n          // For mkg's CsoundAudioNode:\n          window.__csound__.InputMessage(i_statement);\n        }\n      } else {\n        logger('[csnd] Error: Csound is not defined!');\n      }\n  });\n};\n\n\n\n"],"names":["Pattern","pfields","tidal_time","hap","audio_context_time","p1","p2","p3","note","getPlayableNoteValue","p4","toMidi","p5","_b","_a","p6","p7","i_statement","logger"],"mappings":"6DAgCAA,EAAQ,UAAU,KAAO,kBAAkBC,EAAS,CAClD,OAAO,KAAK,UAAU,CAACC,EAAYC,EAAKC,IAAuB,SAC3D,MAAMC,EAAKJ,EAAQ,GAEbK,EAAKJ,EAAaE,EAClBG,EAAKJ,EAAI,SAAS,QAAO,EAC/B,IAAIK,EAAOC,EAAqBN,CAAG,EAGnC,MAAMO,EAAKC,EAAOH,CAAI,EAEhBI,EAAK,MAAQC,GAAAC,EAAAX,EAAI,UAAJ,YAAAW,EAAa,WAAb,KAAAD,EAAyB,IAC5C,IAAIE,EACAd,EAAQ,OAAS,EACnBc,EAAKd,EAAQ,GAEbc,EAAK,EAEP,IAAIC,EACAf,EAAQ,OAAS,EACnBe,EAAKf,EAAQ,GAEbe,EAAK,EAGP,IAAIC,EAAc,KAAKZ,KAAMC,KAAMC,KAAMG,KAAME,KAAMG,KAAMC,IAE3D,GAAIf,EAAQ,OAAS,EACnB,QAAS,EAAI,EAAG,EAAIA,EAAQ,OAAQ,EAAE,EACpCgB,EAAcA,EAAc,IAAIhB,EAAQ,KAG5CgB,GAAgB;AAAA,EAChBC,EAAO,UAAUD,GAAa,EAI1B,OAAO,WACL,OAAO,WAAW,aAEpB,OAAO,WAAW,aAAaA,CAAW,EAG1C,OAAO,WAAW,aAAaA,CAAW,EAG5CC,EAAO,sCAAsC,CAErD,CAAG,CACH"}