{"version":3,"file":"serial.7eb7e5a2.js","sources":["../../packages/serial/serial.mjs"],"sourcesContent":["/*\nserial.mjs - <short description TODO>\nCopyright (C) 2022 Strudel contributors - see <https://github.com/tidalcycles/strudel/blob/main/packages/serial/serial.mjs>\nThis program is free software: you can redistribute it and/or modify it under the terms of the GNU Affero General Public License as published by the Free Software Foundation, either version 3 of the License, or (at your option) any later version. This program is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU Affero General Public License for more details. You should have received a copy of the GNU Affero General Public License along with this program.  If not, see <https://www.gnu.org/licenses/>.\n*/\n\nimport { Pattern, isPattern } from '@strudel.cycles/core';\n\nvar serialWriter;\nvar choosing = false;\n\nexport async function getWriter(br = 38400) {\n  if (choosing) {\n    return;\n  }\n  choosing = true;\n  if (serialWriter) {\n    return serialWriter;\n  }\n  if ('serial' in navigator) {\n    const port = await navigator.serial.requestPort();\n    await port.open({ baudRate: br });\n    const textEncoder = new TextEncoderStream();\n    const writableStreamClosed = textEncoder.readable.pipeTo(port.writable);\n    const writer = textEncoder.writable.getWriter();\n    serialWriter = function (message) {\n      writer.write(message);\n    };\n  } else {\n    throw 'Webserial is not available in this browser.';\n  }\n}\n\nconst latency = 0.1;\n\nPattern.prototype.serial = function (...args) {\n  return this._withHap((hap) => {\n    if (!serialWriter) {\n      getWriter(...args);\n    }\n    const onTrigger = (time, hap, currentTime) => {\n      var message = '';\n      if (typeof hap.value === 'object') {\n        if ('action' in hap.value) {\n          message += hap.value['action'] + '(';\n          var first = true;\n          for (const [key, val] of Object.entries(hap.value)) {\n            if (key === 'action') {\n              continue;\n            }\n            if (first) {\n              first = false;\n            } else {\n              message += ',';\n            }\n            message += `${key}:${val}`;\n          }\n          message += ')';\n        } else {\n          for (const [key, val] of Object.entries(hap.value)) {\n            message += `${key}:${val};`;\n          }\n        }\n      } else {\n        message = hap.value;\n      }\n      const offset = (time - currentTime + latency) * 1000;\n      window.setTimeout(serialWriter, offset, message);\n    };\n    return hap.setContext({ ...hap.context, onTrigger, dominantTrigger: true });\n  });\n};\n"],"names":["serialWriter","choosing","getWriter","br","port","textEncoder","writer","message","latency","Pattern","args","hap","onTrigger","time","currentTime","first","key","val","offset"],"mappings":"wCAQA,IAAIA,EACAC,EAAW,GAER,eAAeC,EAAUC,EAAK,MAAO,CAC1C,GAAI,CAAAF,EAIJ,IADAA,EAAW,GACPD,EACF,OAAOA,EAET,GAAI,WAAY,UAAW,CACzB,MAAMI,EAAO,MAAM,UAAU,OAAO,YAAW,EAC/C,MAAMA,EAAK,KAAK,CAAE,SAAUD,CAAI,CAAA,EAChC,MAAME,EAAc,IAAI,kBACKA,EAAY,SAAS,OAAOD,EAAK,QAAQ,EACtE,MAAME,EAASD,EAAY,SAAS,UAAS,EAC7CL,EAAe,SAAUO,EAAS,CAChCD,EAAO,MAAMC,CAAO,CAC1B,CACA,KACI,MAAM,8CAEV,CAEA,MAAMC,EAAU,GAEhBC,EAAQ,UAAU,OAAS,YAAaC,EAAM,CAC5C,OAAO,KAAK,SAAUC,GAAQ,CACvBX,GACHE,EAAU,GAAGQ,CAAI,EAEnB,MAAME,EAAY,CAACC,EAAMF,EAAKG,IAAgB,CAC5C,IAAIP,EAAU,GACd,GAAI,OAAOI,EAAI,OAAU,SACvB,GAAI,WAAYA,EAAI,MAAO,CACzBJ,GAAWI,EAAI,MAAM,OAAY,IACjC,IAAII,EAAQ,GACZ,SAAW,CAACC,EAAKC,CAAG,IAAK,OAAO,QAAQN,EAAI,KAAK,EAC3CK,IAAQ,WAGRD,EACFA,EAAQ,GAERR,GAAW,IAEbA,GAAW,GAAGS,KAAOC,KAEvBV,GAAW,GACrB,KACU,UAAW,CAACS,EAAKC,CAAG,IAAK,OAAO,QAAQN,EAAI,KAAK,EAC/CJ,GAAW,GAAGS,KAAOC,UAIzBV,EAAUI,EAAI,MAEhB,MAAMO,GAAUL,EAAOC,EAAcN,GAAW,IAChD,OAAO,WAAWR,EAAckB,EAAQX,CAAO,CACrD,EACI,OAAOI,EAAI,WAAW,CAAE,GAAGA,EAAI,QAAS,UAAAC,EAAW,gBAAiB,EAAI,CAAE,CAC9E,CAAG,CACH"}