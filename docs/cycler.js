/**
  * This file implements real-time and/or "always-on" score generation for 
  * cloud-music. Time is provided by performance.now() or by  
  * BaseAudioContext.currentTime.
  * 
  * Author: Michael Gogins
  * Copyright: 2023.
  * Licence: GNU Lesser General Public License, version 2.1.
  *
  * Provisionally using CsoundAC-wasm and math.js. Dimensions of 
  * events are the same as CsoundAC, but CsoundAC is column major while 
  * math.js is row major.
  * let transform = math.identity(11);
  * let event = math.zeros([1,11]);
  * event[10] = 1;
  */
  
/**
  * Base class for always-on performance nodes.
  * Derived classes should, at a minimum, override `Node.generate`.
  */
class Node {
  constructor(performer) {
    this.performer = performer;
    this.transform = math.identity(11);
    // Children are keys, types of nodes are values.
    this.children = new Array();
  };
  /** 
    * Produces events for the current enclosing cycle from this Node and its 
    * children. The default implementation simply traverses the tree for this 
    * cycle and applies the transformation. Note that because of malicious 
    * exploits of precise timestamps, `performance.now` precision is .01 or 
    * even 1 millisecond; .01 is fine, but real musicians may notice 1 
    * millisecond by "feel."
    *
    * The basic algorithm is to traverse the tree of nodes and generate all 
    * notes within a slice of time. The generated notes are then sent to 
    * Csound. During the traversal, a map of node begin and end times is 
    * compiled. For the next time slice, the map of times is used to 
    * determine which already performed nodes to skip, and which previously 
    * unperformed nodes to traverse. When the end of the enclosing node is 
    * reached, the list of times is reset to 0 before traversing, and this 
    * enables indefinitely performing pieces.
    */
  generate(events, transform, times_for_nodes) {
  };
};

/**
  * Performs the child nodes of this in sequence. The duration of this is the 
  * sum of the child durations.
  */
class Sequence extends Node {
};

/**
  * Performs the child nodes of this in sequence. The durations of the child 
  * nodes are rescaled to fit the existing duration of this.
  */
class Nest extends Sequence {
};

/**
  * Modifies in some way the events generated by the child nodes of this.
  */
class Apply extends Node {
};

/**
  * Performs the child nodes of this simultaneously. The child nodes may have 
  * different durations.
  */
class Stack extends Node {
};


/**
  * Modifies in some way the events generated by the child nodes of this, and 
  * also produces the original events.
  */
class StackApply extends Apply {
};


class Performer extends Node {
  constructor(csound) {
    this.csound = csound;
    this.root = new Node();
    this.keep_running = false;
    this.interval = .02;
    this.events = new CsoundAC.Score();
    this.divisions_per_octave = 12;
    this.round_pitches = true;
    this.current_time = 0;
    this.starting_time = 0;
  };
  current_time() {
    return performance.now() / 1000;
  }
  performance_time() {
    return this.current_time() - this.starting_time();
  }
  start() {
    this.keep_running = true;
    this.starting_time = performance.now() / 1000; 
    this.slice_start = 0;
    this.slice_end = this.slice_start + this.interval);
    this.tymer = setTimeout(this.tick, this.interval);
  }
  stop() {
    this.keep_running = false;
  }
  render() {
    // Time 0 is the beginning of this slice, not the 
    // beginning of this performance.
    score_text = this.score.getCsoundScore(this.divisions_per_octave, this.round_pitches);
    this.csound.readScore(score_text);
  }
  /**
    * Generates and renders events indefinitely, until stopped.
    */
  tick() {
    if (this.keep_running === false) {
      return;
    } else {
      this.tymer.setTimeout(this.tick, this.interval);
    }
    this.events.clear();
    this.slice_start = this.performance_time();
    this.slice_end = this.slice_start + this.interval;
    this
    // Generate one slice's worth of pending events.
    this.generate(this.events, this.getLocalCoordinates());
    // Render this slice's pending events in real time using Csound.
    this.render();    
  }
};