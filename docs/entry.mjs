import i, { createElement, useState, useEffect } from 'react';
import ReactDOM from 'react-dom/server';
import { h as h$2, Component } from 'preact';
import render from 'preact-render-to-string';
import { escape } from 'html-escaper';
/* empty css                                 *//* empty css                                */import Fraction from 'fraction.js';
import bjork from 'bjork';
import { jsx, jsxs, Fragment as Fragment$1 } from 'react/jsx-runtime';
import { createCanvas } from 'canvas';
import escodegen from 'escodegen';
import { parse } from 'acorn';
import { walk } from 'estree-walker';
import { Interval, Note, Scale } from '@tonaljs/tonal';
import _voicings from 'chord-voicings';

/**
 * Astro passes `children` as a string of HTML, so we need
 * a wrapper `div` to render that content as VNodes.
 *
 * As a bonus, we can signal to React that this subtree is
 * entirely static and will never change via `shouldComponentUpdate`.
 */
const StaticHtml$1 = ({ value, name }) => {
	if (!value) return null;
	return createElement('astro-slot', {
		name,
		suppressHydrationWarning: true,
		dangerouslySetInnerHTML: { __html: value },
	});
};

/**
 * This tells React to opt-out of re-rendering this subtree,
 * In addition to being a performance optimization,
 * this also allows other frameworks to attach to `children`.
 *
 * See https://preactjs.com/guide/v8/external-dom-mutations
 */
StaticHtml$1.shouldComponentUpdate = () => false;

const slotName$2 = (str) => str.trim().replace(/[-_]([a-z])/g, (_, w) => w.toUpperCase());
const reactTypeof = Symbol.for('react.element');

function errorIsComingFromPreactComponent(err) {
	return (
		err.message &&
		(err.message.startsWith("Cannot read property '__H'") ||
			err.message.includes("(reading '__H')"))
	);
}

async function check$2(Component, props, children) {
	// Note: there are packages that do some unholy things to create "components".
	// Checking the $$typeof property catches most of these patterns.
	if (typeof Component === 'object') {
		const $$typeof = Component['$$typeof'];
		return $$typeof && $$typeof.toString().slice('Symbol('.length).startsWith('react');
	}
	if (typeof Component !== 'function') return false;

	if (Component.prototype != null && typeof Component.prototype.render === 'function') {
		return i.Component.isPrototypeOf(Component) || i.PureComponent.isPrototypeOf(Component);
	}

	let error = null;
	let isReactComponent = false;
	function Tester(...args) {
		try {
			const vnode = Component(...args);
			if (vnode && vnode['$$typeof'] === reactTypeof) {
				isReactComponent = true;
			}
		} catch (err) {
			if (!errorIsComingFromPreactComponent(err)) {
				error = err;
			}
		}

		return i.createElement('div');
	}

	await renderToStaticMarkup$2(Tester, props, children, {});

	if (error) {
		throw error;
	}
	return isReactComponent;
}

async function getNodeWritable() {
	let nodeStreamBuiltinModuleName = 'stream';
	let { Writable } = await import(/* @vite-ignore */ nodeStreamBuiltinModuleName);
	return Writable;
}

async function renderToStaticMarkup$2(Component, props, { default: children, ...slotted }, metadata) {
	delete props['class'];
	const slots = {};
	for (const [key, value] of Object.entries(slotted)) {
		const name = slotName$2(key);
		slots[name] = i.createElement(StaticHtml$1, { value, name });
	}
	// Note: create newProps to avoid mutating `props` before they are serialized
	const newProps = {
		...props,
		...slots,
	};
	if (children != null) {
		newProps.children = i.createElement(StaticHtml$1, { value: children });
	}
	const vnode = i.createElement(Component, newProps);
	let html;
	if (metadata && metadata.hydrate) {
		if ('renderToReadableStream' in ReactDOM) {
			html = await renderToReadableStreamAsync(vnode);
		} else {
			html = await renderToPipeableStreamAsync(vnode);
		}
	} else {
		if ('renderToReadableStream' in ReactDOM) {
			html = await renderToReadableStreamAsync(vnode);
		} else {
			html = await renderToStaticNodeStreamAsync(vnode);
		}
	}
	return { html };
}

async function renderToPipeableStreamAsync(vnode) {
	const Writable = await getNodeWritable();
	let html = '';
	return new Promise((resolve, reject) => {
		let error = undefined;
		let stream = ReactDOM.renderToPipeableStream(vnode, {
			onError(err) {
				error = err;
				reject(error);
			},
			onAllReady() {
				stream.pipe(
					new Writable({
						write(chunk, _encoding, callback) {
							html += chunk.toString('utf-8');
							callback();
						},
						destroy() {
							resolve(html);
						},
					})
				);
			},
		});
	});
}

async function renderToStaticNodeStreamAsync(vnode) {
	const Writable = await getNodeWritable();
	let html = '';
	return new Promise((resolve, reject) => {
		let stream = ReactDOM.renderToStaticNodeStream(vnode);
		stream.on('error', (err) => {
			reject(err);
		});
		stream.pipe(
			new Writable({
				write(chunk, _encoding, callback) {
					html += chunk.toString('utf-8');
					callback();
				},
				destroy() {
					resolve(html);
				},
			})
		);
	});
}

/**
 * Use a while loop instead of "for await" due to cloudflare and Vercel Edge issues
 * See https://github.com/facebook/react/issues/24169
 */
async function readResult(stream) {
	const reader = stream.getReader();
	let result = '';
	const decoder = new TextDecoder('utf-8');
	while (true) {
		const { done, value } = await reader.read();
		if (done) {
			if (value) {
				result += decoder.decode(value);
			} else {
				// This closes the decoder
				decoder.decode(new Uint8Array());
			}

			return result;
		}
		result += decoder.decode(value, { stream: true });
	}
}

async function renderToReadableStreamAsync(vnode) {
	return await readResult(await ReactDOM.renderToReadableStream(vnode));
}

const _renderer2 = {
	check: check$2,
	renderToStaticMarkup: renderToStaticMarkup$2,
};

const contexts = /* @__PURE__ */ new WeakMap();
function getContext(result) {
  if (contexts.has(result)) {
    return contexts.get(result);
  }
  let ctx = {
    c: 0,
    get id() {
      return "p" + this.c.toString();
    },
    signals: /* @__PURE__ */ new Map(),
    propsToSignals: /* @__PURE__ */ new Map()
  };
  contexts.set(result, ctx);
  return ctx;
}
function incrementId(ctx) {
  let id = ctx.id;
  ctx.c++;
  return id;
}

function isSignal(x) {
  return x != null && typeof x === "object" && typeof x.peek === "function" && "value" in x;
}
function restoreSignalsOnProps(ctx, props) {
  let propMap;
  if (ctx.propsToSignals.has(props)) {
    propMap = ctx.propsToSignals.get(props);
  } else {
    propMap = /* @__PURE__ */ new Map();
    ctx.propsToSignals.set(props, propMap);
  }
  for (const [key, signal] of propMap) {
    props[key] = signal;
  }
  return propMap;
}
function serializeSignals(ctx, props, attrs, map) {
  const signals = {};
  for (const [key, value] of Object.entries(props)) {
    if (isSignal(value)) {
      props[key] = value.peek();
      map.set(key, value);
      let id;
      if (ctx.signals.has(value)) {
        id = ctx.signals.get(value);
      } else {
        id = incrementId(ctx);
        ctx.signals.set(value, id);
      }
      signals[key] = id;
    }
  }
  if (Object.keys(signals).length) {
    attrs["data-preact-signals"] = JSON.stringify(signals);
  }
}

const StaticHtml = ({ value, name }) => {
  if (!value)
    return null;
  return h$2("astro-slot", { name, dangerouslySetInnerHTML: { __html: value } });
};
StaticHtml.shouldComponentUpdate = () => false;
var static_html_default = StaticHtml;

const slotName$1 = (str) => str.trim().replace(/[-_]([a-z])/g, (_, w) => w.toUpperCase());
let originalConsoleError$1;
let consoleFilterRefs$1 = 0;
function check$1(Component$1, props, children) {
  if (typeof Component$1 !== "function")
    return false;
  if (Component$1.prototype != null && typeof Component$1.prototype.render === "function") {
    return Component.isPrototypeOf(Component$1);
  }
  useConsoleFilter$1();
  try {
    try {
      const { html } = renderToStaticMarkup$1.call(this, Component$1, props, children);
      if (typeof html !== "string") {
        return false;
      }
      return !/\<undefined\>/.test(html);
    } catch (err) {
      return false;
    }
  } finally {
    finishUsingConsoleFilter$1();
  }
}
function renderToStaticMarkup$1(Component, props, { default: children, ...slotted }) {
  const ctx = getContext(this.result);
  const slots = {};
  for (const [key, value] of Object.entries(slotted)) {
    const name = slotName$1(key);
    slots[name] = h$2(static_html_default, { value, name });
  }
  let propsMap = restoreSignalsOnProps(ctx, props);
  const newProps = { ...props, ...slots };
  const attrs = {};
  serializeSignals(ctx, props, attrs, propsMap);
  const html = render(
    h$2(Component, newProps, children != null ? h$2(static_html_default, { value: children }) : children)
  );
  return {
    attrs,
    html
  };
}
function useConsoleFilter$1() {
  consoleFilterRefs$1++;
  if (!originalConsoleError$1) {
    originalConsoleError$1 = console.error;
    try {
      console.error = filteredConsoleError$1;
    } catch (error) {
    }
  }
}
function finishUsingConsoleFilter$1() {
  consoleFilterRefs$1--;
}
function filteredConsoleError$1(msg, ...rest) {
  if (consoleFilterRefs$1 > 0 && typeof msg === "string") {
    const isKnownReactHookError = msg.includes("Warning: Invalid hook call.") && msg.includes("https://reactjs.org/link/invalid-hook-call");
    if (isKnownReactHookError)
      return;
  }
  originalConsoleError$1(msg, ...rest);
}
var server_default$1 = {
  check: check$1,
  renderToStaticMarkup: renderToStaticMarkup$1
};

function baseCreateComponent(cb, moduleId) {
  cb.isAstroComponentFactory = true;
  cb.moduleId = moduleId;
  return cb;
}
function createComponentWithOptions(opts) {
  const cb = baseCreateComponent(opts.factory, opts.moduleId);
  cb.propagation = opts.propagation;
  return cb;
}
function createComponent(arg1, moduleId) {
  if (typeof arg1 === "function") {
    return baseCreateComponent(arg1, moduleId);
  } else {
    return createComponentWithOptions(arg1);
  }
}

const ASTRO_VERSION = "1.7.2";

function createDeprecatedFetchContentFn() {
  return () => {
    throw new Error("Deprecated: Astro.fetchContent() has been replaced with Astro.glob().");
  };
}
function createAstroGlobFn() {
  const globHandler = (importMetaGlobResult, globValue) => {
    let allEntries = [...Object.values(importMetaGlobResult)];
    if (allEntries.length === 0) {
      throw new Error(`Astro.glob(${JSON.stringify(globValue())}) - no matches found.`);
    }
    return Promise.all(allEntries.map((fn) => fn()));
  };
  return globHandler;
}
function createAstro(filePathname, _site, projectRootStr) {
  const site = _site ? new URL(_site) : void 0;
  const referenceURL = new URL(filePathname, `http://localhost`);
  const projectRoot = new URL(projectRootStr);
  return {
    site,
    generator: `Astro v${ASTRO_VERSION}`,
    fetchContent: createDeprecatedFetchContentFn(),
    glob: createAstroGlobFn(),
    resolve(...segments) {
      let resolved = segments.reduce((u, segment) => new URL(segment, u), referenceURL).pathname;
      if (resolved.startsWith(projectRoot.pathname)) {
        resolved = "/" + resolved.slice(projectRoot.pathname.length);
      }
      return resolved;
    }
  };
}

const escapeHTML = escape;
class HTMLString extends String {
  get [Symbol.toStringTag]() {
    return "HTMLString";
  }
}
const markHTMLString = (value) => {
  if (value instanceof HTMLString) {
    return value;
  }
  if (typeof value === "string") {
    return new HTMLString(value);
  }
  return value;
};
function isHTMLString(value) {
  return Object.prototype.toString.call(value) === "[object HTMLString]";
}

var idle_prebuilt_default = `(self.Astro=self.Astro||{}).idle=t=>{const e=async()=>{await(await t())()};"requestIdleCallback"in window?window.requestIdleCallback(e):setTimeout(e,200)},window.dispatchEvent(new Event("astro:idle"));`;

var load_prebuilt_default = `(self.Astro=self.Astro||{}).load=a=>{(async()=>await(await a())())()},window.dispatchEvent(new Event("astro:load"));`;

var media_prebuilt_default = `(self.Astro=self.Astro||{}).media=(s,a)=>{const t=async()=>{await(await s())()};if(a.value){const e=matchMedia(a.value);e.matches?t():e.addEventListener("change",t,{once:!0})}},window.dispatchEvent(new Event("astro:media"));`;

var only_prebuilt_default = `(self.Astro=self.Astro||{}).only=t=>{(async()=>await(await t())())()},window.dispatchEvent(new Event("astro:only"));`;

var visible_prebuilt_default = `(self.Astro=self.Astro||{}).visible=(s,c,n)=>{const r=async()=>{await(await s())()};let i=new IntersectionObserver(e=>{for(const t of e)if(!!t.isIntersecting){i.disconnect(),r();break}});for(let e=0;e<n.children.length;e++){const t=n.children[e];i.observe(t)}},window.dispatchEvent(new Event("astro:visible"));`;

var astro_island_prebuilt_default = `var l;{const c={0:t=>t,1:t=>JSON.parse(t,o),2:t=>new RegExp(t),3:t=>new Date(t),4:t=>new Map(JSON.parse(t,o)),5:t=>new Set(JSON.parse(t,o)),6:t=>BigInt(t),7:t=>new URL(t),8:t=>new Uint8Array(JSON.parse(t)),9:t=>new Uint16Array(JSON.parse(t)),10:t=>new Uint32Array(JSON.parse(t))},o=(t,s)=>{if(t===""||!Array.isArray(s))return s;const[e,n]=s;return e in c?c[e](n):void 0};customElements.get("astro-island")||customElements.define("astro-island",(l=class extends HTMLElement{constructor(){super(...arguments);this.hydrate=()=>{if(!this.hydrator||this.parentElement&&this.parentElement.closest("astro-island[ssr]"))return;const s=this.querySelectorAll("astro-slot"),e={},n=this.querySelectorAll("template[data-astro-template]");for(const r of n){const i=r.closest(this.tagName);!i||!i.isSameNode(this)||(e[r.getAttribute("data-astro-template")||"default"]=r.innerHTML,r.remove())}for(const r of s){const i=r.closest(this.tagName);!i||!i.isSameNode(this)||(e[r.getAttribute("name")||"default"]=r.innerHTML)}const a=this.hasAttribute("props")?JSON.parse(this.getAttribute("props"),o):{};this.hydrator(this)(this.Component,a,e,{client:this.getAttribute("client")}),this.removeAttribute("ssr"),window.removeEventListener("astro:hydrate",this.hydrate),window.dispatchEvent(new CustomEvent("astro:hydrate"))}}connectedCallback(){!this.hasAttribute("await-children")||this.firstChild?this.childrenConnectedCallback():new MutationObserver((s,e)=>{e.disconnect(),this.childrenConnectedCallback()}).observe(this,{childList:!0})}async childrenConnectedCallback(){window.addEventListener("astro:hydrate",this.hydrate);let s=this.getAttribute("before-hydration-url");s&&await import(s),this.start()}start(){const s=JSON.parse(this.getAttribute("opts")),e=this.getAttribute("client");if(Astro[e]===void 0){window.addEventListener(\`astro:\${e}\`,()=>this.start(),{once:!0});return}Astro[e](async()=>{const n=this.getAttribute("renderer-url"),[a,{default:r}]=await Promise.all([import(this.getAttribute("component-url")),n?import(n):()=>()=>{}]),i=this.getAttribute("component-export")||"default";if(!i.includes("."))this.Component=a[i];else{this.Component=a;for(const d of i.split("."))this.Component=this.Component[d]}return this.hydrator=r,this.hydrate},s,this)}attributeChangedCallback(){this.hydrator&&this.hydrate()}},l.observedAttributes=["props"],l))}`;

function determineIfNeedsHydrationScript(result) {
  if (result._metadata.hasHydrationScript) {
    return false;
  }
  return result._metadata.hasHydrationScript = true;
}
const hydrationScripts = {
  idle: idle_prebuilt_default,
  load: load_prebuilt_default,
  only: only_prebuilt_default,
  media: media_prebuilt_default,
  visible: visible_prebuilt_default
};
function determinesIfNeedsDirectiveScript(result, directive) {
  if (result._metadata.hasDirectives.has(directive)) {
    return false;
  }
  result._metadata.hasDirectives.add(directive);
  return true;
}
function getDirectiveScriptText(directive) {
  if (!(directive in hydrationScripts)) {
    throw new Error(`Unknown directive: ${directive}`);
  }
  const directiveScriptText = hydrationScripts[directive];
  return directiveScriptText;
}
function getPrescripts(type, directive) {
  switch (type) {
    case "both":
      return `<style>astro-island,astro-slot{display:contents}</style><script>${getDirectiveScriptText(directive) + astro_island_prebuilt_default}<\/script>`;
    case "directive":
      return `<script>${getDirectiveScriptText(directive)}<\/script>`;
  }
  return "";
}

const headAndContentSym = Symbol.for("astro.headAndContent");
function isHeadAndContent(obj) {
  return typeof obj === "object" && !!obj[headAndContentSym];
}

function serializeListValue(value) {
  const hash = {};
  push(value);
  return Object.keys(hash).join(" ");
  function push(item) {
    if (item && typeof item.forEach === "function")
      item.forEach(push);
    else if (item === Object(item))
      Object.keys(item).forEach((name) => {
        if (item[name])
          push(name);
      });
    else {
      item = item === false || item == null ? "" : String(item).trim();
      if (item) {
        item.split(/\s+/).forEach((name) => {
          hash[name] = true;
        });
      }
    }
  }
}
function isPromise(value) {
  return !!value && typeof value === "object" && typeof value.then === "function";
}

var _a$4;
const renderTemplateResultSym = Symbol.for("astro.renderTemplateResult");
class RenderTemplateResult {
  constructor(htmlParts, expressions) {
    this[_a$4] = true;
    this.htmlParts = htmlParts;
    this.error = void 0;
    this.expressions = expressions.map((expression) => {
      if (isPromise(expression)) {
        return Promise.resolve(expression).catch((err) => {
          if (!this.error) {
            this.error = err;
            throw err;
          }
        });
      }
      return expression;
    });
  }
  get [(_a$4 = renderTemplateResultSym, Symbol.toStringTag)]() {
    return "AstroComponent";
  }
  async *[Symbol.asyncIterator]() {
    const { htmlParts, expressions } = this;
    for (let i = 0; i < htmlParts.length; i++) {
      const html = htmlParts[i];
      const expression = expressions[i];
      yield markHTMLString(html);
      yield* renderChild(expression);
    }
  }
}
function isRenderTemplateResult(obj) {
  return typeof obj === "object" && !!obj[renderTemplateResultSym];
}
async function* renderAstroTemplateResult(component) {
  for await (const value of component) {
    if (value || value === 0) {
      for await (const chunk of renderChild(value)) {
        switch (chunk.type) {
          case "directive": {
            yield chunk;
            break;
          }
          default: {
            yield markHTMLString(chunk);
            break;
          }
        }
      }
    }
  }
}
function renderTemplate(htmlParts, ...expressions) {
  return new RenderTemplateResult(htmlParts, expressions);
}

function isAstroComponentFactory(obj) {
  return obj == null ? false : obj.isAstroComponentFactory === true;
}
async function renderToString(result, componentFactory, props, children) {
  const factoryResult = await componentFactory(result, props, children);
  if (factoryResult instanceof Response) {
    const response = factoryResult;
    throw response;
  }
  let parts = new HTMLParts();
  const templateResult = isHeadAndContent(factoryResult) ? factoryResult.content : factoryResult;
  for await (const chunk of renderAstroTemplateResult(templateResult)) {
    parts.append(chunk, result);
  }
  return parts.toString();
}
function isAPropagatingComponent(result, factory) {
  let hint = factory.propagation || "none";
  if (factory.moduleId && result.propagation.has(factory.moduleId) && hint === "none") {
    hint = result.propagation.get(factory.moduleId);
  }
  return hint === "in-tree" || hint === "self";
}

const defineErrors = (errs) => errs;
const AstroErrorData = defineErrors({
  UnknownCompilerError: {
    title: "Unknown compiler error.",
    code: 1e3
  },
  StaticRedirectNotAvailable: {
    title: "`Astro.redirect` is not available in static mode.",
    code: 3001,
    message: "Redirects are only available when using `output: 'server'`. Update your Astro config if you need SSR features.",
    hint: "See https://docs.astro.build/en/guides/server-side-rendering/#enabling-ssr-in-your-project for more information on how to enable SSR."
  },
  ClientAddressNotAvailable: {
    title: "`Astro.clientAddress` is not available in current adapter.",
    code: 3002,
    message: (adapterName) => `\`Astro.clientAddress\` is not available in the \`${adapterName}\` adapter. File an issue with the adapter to add support.`
  },
  StaticClientAddressNotAvailable: {
    title: "`Astro.clientAddress` is not available in static mode.",
    code: 3003,
    message: "`Astro.clientAddress` is only available when using `output: 'server'`. Update your Astro config if you need SSR features.",
    hint: "See https://docs.astro.build/en/guides/server-side-rendering/#enabling-ssr-in-your-project for more information on how to enable SSR."
  },
  NoMatchingStaticPathFound: {
    title: "No static path found for requested path.",
    code: 3004,
    message: (pathName) => `A \`getStaticPaths()\` route pattern was matched, but no matching static path was found for requested path \`${pathName}\`.`,
    hint: (possibleRoutes) => `Possible dynamic routes being matched: ${possibleRoutes.join(", ")}.`
  },
  OnlyResponseCanBeReturned: {
    title: "Invalid type returned by Astro page.",
    code: 3005,
    message: (route, returnedValue) => `Route \`${route ? route : ""}\` returned a \`${returnedValue}\`. Only a [Response](https://developer.mozilla.org/en-US/docs/Web/API/Response) can be returned from Astro files.`,
    hint: "See https://docs.astro.build/en/guides/server-side-rendering/#response for more information."
  },
  MissingMediaQueryDirective: {
    title: "Missing value for `client:media` directive.",
    code: 3006,
    message: 'Media query not provided for `client:media` directive. A media query similar to `client:media="(max-width: 600px)"` must be provided'
  },
  NoMatchingRenderer: {
    title: "No matching renderer found.",
    code: 3007,
    message: (componentName, componentExtension, plural, validRenderersCount) => `Unable to render \`${componentName}\`.

${validRenderersCount > 0 ? `There ${plural ? "are." : "is."} ${validRenderersCount} renderer${plural ? "s." : ""} configured in your \`astro.config.mjs\` file,
but ${plural ? "none were." : "it was not."} able to server-side render \`${componentName}\`.` : `No valid renderer was found ${componentExtension ? `for the \`.${componentExtension}\` file extension.` : `for this file extension.`}`}`,
    hint: (probableRenderers) => `Did you mean to enable the ${probableRenderers} integration?

See https://docs.astro.build/en/core-concepts/framework-components/ for more information on how to install and configure integrations.`
  },
  NoClientEntrypoint: {
    title: "No client entrypoint specified in renderer.",
    code: 3008,
    message: (componentName, clientDirective, rendererName) => `\`${componentName}\` component has a \`client:${clientDirective}\` directive, but no client entrypoint was provided by \`${rendererName}\`.`,
    hint: "See https://docs.astro.build/en/reference/integrations-reference/#addrenderer-option for more information on how to configure your renderer."
  },
  NoClientOnlyHint: {
    title: "Missing hint on client:only directive.",
    code: 3009,
    message: (componentName) => `Unable to render \`${componentName}\`. When using the \`client:only\` hydration strategy, Astro needs a hint to use the correct renderer.`,
    hint: (probableRenderers) => `Did you mean to pass \`client:only="${probableRenderers}"\`? See https://docs.astro.build/en/reference/directives-reference/#clientonly for more information on client:only`
  },
  InvalidGetStaticPathParam: {
    title: "Invalid value returned by a `getStaticPaths` path.",
    code: 3010,
    message: (paramType) => `Invalid params given to \`getStaticPaths\` path. Expected an \`object\`, got \`${paramType}\``,
    hint: "See https://docs.astro.build/en/reference/api-reference/#getstaticpaths for more information on getStaticPaths."
  },
  InvalidGetStaticPathsReturn: {
    title: "Invalid value returned by getStaticPaths.",
    code: 3011,
    message: (returnType) => `Invalid type returned by \`getStaticPaths\`. Expected an \`array\`, got \`${returnType}\``,
    hint: "See https://docs.astro.build/en/reference/api-reference/#getstaticpaths for more information on getStaticPaths."
  },
  GetStaticPathsRemovedRSSHelper: {
    title: "getStaticPaths RSS helper is not available anymore.",
    code: 3012,
    message: "The RSS helper has been removed from `getStaticPaths`. Try the new @astrojs/rss package instead.",
    hint: "See https://docs.astro.build/en/guides/rss/ for more information."
  },
  GetStaticPathsExpectedParams: {
    title: "Missing params property on `getStaticPaths` route.",
    code: 3013,
    message: "Missing or empty required `params` property on `getStaticPaths` route.",
    hint: "See https://docs.astro.build/en/reference/api-reference/#getstaticpaths for more information on getStaticPaths."
  },
  GetStaticPathsInvalidRouteParam: {
    title: "Invalid value for `getStaticPaths` route parameter.",
    code: 3014,
    message: (key, value, valueType) => `Invalid getStaticPaths route parameter for \`${key}\`. Expected undefined, a string or a number, received \`${valueType}\` (\`${value}\`)`,
    hint: "See https://docs.astro.build/en/reference/api-reference/#getstaticpaths for more information on getStaticPaths."
  },
  GetStaticPathsRequired: {
    title: "`getStaticPaths()` function required for dynamic routes.",
    code: 3015,
    message: "`getStaticPaths()` function is required for dynamic routes. Make sure that you `export` a `getStaticPaths` function from your dynamic route.",
    hint: `See https://docs.astro.build/en/core-concepts/routing/#dynamic-routes for more information on dynamic routes.

Alternatively, set \`output: "server"\` in your Astro config file to switch to a non-static server build.
See https://docs.astro.build/en/guides/server-side-rendering/ for more information on non-static rendering.`
  },
  ReservedSlotName: {
    title: "Invalid slot name.",
    code: 3016,
    message: (slotName) => `Unable to create a slot named \`${slotName}\`. \`${slotName}\` is a reserved slot name. Please update the name of this slot.`
  },
  NoAdapterInstalled: {
    title: "Cannot use Server-side Rendering without an adapter.",
    code: 3017,
    message: `Cannot use \`output: 'server'\` without an adapter. Please install and configure the appropriate server adapter for your final deployment.`,
    hint: "See https://docs.astro.build/en/guides/server-side-rendering/ for more information."
  },
  NoMatchingImport: {
    title: "No import found for component.",
    code: 3018,
    message: (componentName) => `Could not render \`${componentName}\`. No matching import has been found for \`${componentName}\`.`,
    hint: "Please make sure the component is properly imported."
  },
  InvalidPrerenderExport: {
    title: "Invalid prerender export.",
    code: 3019,
    message: (prefix, suffix) => {
      let msg = `A \`prerender\` export has been detected, but its value cannot be statically analyzed.`;
      if (prefix !== "const")
        msg += `
Expected \`const\` declaration but got \`${prefix}\`.`;
      if (suffix !== "true")
        msg += `
Expected \`true\` value but got \`${suffix}\`.`;
      return msg;
    },
    hint: "Mutable values declared at runtime are not supported. Please make sure to use exactly `export const prerender = true`."
  },
  UnknownViteError: {
    title: "Unknown Vite Error.",
    code: 4e3
  },
  FailedToLoadModuleSSR: {
    title: "Could not import file.",
    code: 4001,
    message: (importName) => `Could not import \`${importName}\`.`,
    hint: "This is often caused by a typo in the import path. Please make sure the file exists."
  },
  InvalidGlob: {
    title: "Invalid glob pattern.",
    code: 4002,
    message: (globPattern) => `Invalid glob pattern: \`${globPattern}\`. Glob patterns must start with './', '../' or '/'.`,
    hint: "See https://docs.astro.build/en/guides/imports/#glob-patterns for more information on supported glob patterns."
  },
  UnknownCSSError: {
    title: "Unknown CSS Error.",
    code: 5e3
  },
  CSSSyntaxError: {
    title: "CSS Syntax Error.",
    code: 5001
  },
  UnknownMarkdownError: {
    title: "Unknown Markdown Error.",
    code: 6e3
  },
  MarkdownFrontmatterParseError: {
    title: "Failed to parse Markdown frontmatter.",
    code: 6001
  },
  MarkdownContentSchemaValidationError: {
    title: "Content collection frontmatter invalid.",
    code: 6002,
    message: (collection, entryId, error) => {
      return [
        `${String(collection)} \u2192 ${String(entryId)} frontmatter does not match collection schema.`,
        ...error.errors.map((zodError) => zodError.message)
      ].join("\n");
    },
    hint: "See https://docs.astro.build/en/guides/content-collections/ for more information on content schemas."
  },
  UnknownConfigError: {
    title: "Unknown configuration error.",
    code: 7e3
  },
  ConfigNotFound: {
    title: "Specified configuration file not found.",
    code: 7001,
    message: (configFile) => `Unable to resolve \`--config "${configFile}"\`. Does the file exist?`
  },
  ConfigLegacyKey: {
    title: "Legacy configuration detected.",
    code: 7002,
    message: (legacyConfigKey) => `Legacy configuration detected: \`${legacyConfigKey}\`.`,
    hint: "Please update your configuration to the new format.\nSee https://astro.build/config for more information."
  },
  UnknownError: {
    title: "Unknown Error.",
    code: 99999
  }
});

function normalizeLF(code) {
  return code.replace(/\r\n|\r(?!\n)|\n/g, "\n");
}
function getErrorDataByCode(code) {
  const entry = Object.entries(AstroErrorData).find((data) => data[1].code === code);
  if (entry) {
    return {
      name: entry[0],
      data: entry[1]
    };
  }
}

function codeFrame(src, loc) {
  if (!loc || loc.line === void 0 || loc.column === void 0) {
    return "";
  }
  const lines = normalizeLF(src).split("\n").map((ln) => ln.replace(/\t/g, "  "));
  const visibleLines = [];
  for (let n = -2; n <= 2; n++) {
    if (lines[loc.line + n])
      visibleLines.push(loc.line + n);
  }
  let gutterWidth = 0;
  for (const lineNo of visibleLines) {
    let w = `> ${lineNo}`;
    if (w.length > gutterWidth)
      gutterWidth = w.length;
  }
  let output = "";
  for (const lineNo of visibleLines) {
    const isFocusedLine = lineNo === loc.line - 1;
    output += isFocusedLine ? "> " : "  ";
    output += `${lineNo + 1} | ${lines[lineNo]}
`;
    if (isFocusedLine)
      output += `${Array.from({ length: gutterWidth }).join(" ")}  | ${Array.from({
        length: loc.column
      }).join(" ")}^
`;
  }
  return output;
}

class AstroError extends Error {
  constructor(props, ...params) {
    var _a;
    super(...params);
    this.type = "AstroError";
    const { code, name, title, message, stack, location, hint, frame } = props;
    this.errorCode = code;
    if (name && name !== "Error") {
      this.name = name;
    } else {
      this.name = ((_a = getErrorDataByCode(this.errorCode)) == null ? void 0 : _a.name) ?? "UnknownError";
    }
    this.title = title;
    if (message)
      this.message = message;
    this.stack = stack ? stack : this.stack;
    this.loc = location;
    this.hint = hint;
    this.frame = frame;
  }
  setErrorCode(errorCode) {
    this.errorCode = errorCode;
  }
  setLocation(location) {
    this.loc = location;
  }
  setName(name) {
    this.name = name;
  }
  setMessage(message) {
    this.message = message;
  }
  setHint(hint) {
    this.hint = hint;
  }
  setFrame(source, location) {
    this.frame = codeFrame(source, location);
  }
  static is(err) {
    return err.type === "AstroError";
  }
}

const PROP_TYPE = {
  Value: 0,
  JSON: 1,
  RegExp: 2,
  Date: 3,
  Map: 4,
  Set: 5,
  BigInt: 6,
  URL: 7,
  Uint8Array: 8,
  Uint16Array: 9,
  Uint32Array: 10
};
function serializeArray(value, metadata = {}, parents = /* @__PURE__ */ new WeakSet()) {
  if (parents.has(value)) {
    throw new Error(`Cyclic reference detected while serializing props for <${metadata.displayName} client:${metadata.hydrate}>!

Cyclic references cannot be safely serialized for client-side usage. Please remove the cyclic reference.`);
  }
  parents.add(value);
  const serialized = value.map((v) => {
    return convertToSerializedForm(v, metadata, parents);
  });
  parents.delete(value);
  return serialized;
}
function serializeObject(value, metadata = {}, parents = /* @__PURE__ */ new WeakSet()) {
  if (parents.has(value)) {
    throw new Error(`Cyclic reference detected while serializing props for <${metadata.displayName} client:${metadata.hydrate}>!

Cyclic references cannot be safely serialized for client-side usage. Please remove the cyclic reference.`);
  }
  parents.add(value);
  const serialized = Object.fromEntries(
    Object.entries(value).map(([k, v]) => {
      return [k, convertToSerializedForm(v, metadata, parents)];
    })
  );
  parents.delete(value);
  return serialized;
}
function convertToSerializedForm(value, metadata = {}, parents = /* @__PURE__ */ new WeakSet()) {
  const tag = Object.prototype.toString.call(value);
  switch (tag) {
    case "[object Date]": {
      return [PROP_TYPE.Date, value.toISOString()];
    }
    case "[object RegExp]": {
      return [PROP_TYPE.RegExp, value.source];
    }
    case "[object Map]": {
      return [
        PROP_TYPE.Map,
        JSON.stringify(serializeArray(Array.from(value), metadata, parents))
      ];
    }
    case "[object Set]": {
      return [
        PROP_TYPE.Set,
        JSON.stringify(serializeArray(Array.from(value), metadata, parents))
      ];
    }
    case "[object BigInt]": {
      return [PROP_TYPE.BigInt, value.toString()];
    }
    case "[object URL]": {
      return [PROP_TYPE.URL, value.toString()];
    }
    case "[object Array]": {
      return [PROP_TYPE.JSON, JSON.stringify(serializeArray(value, metadata, parents))];
    }
    case "[object Uint8Array]": {
      return [PROP_TYPE.Uint8Array, JSON.stringify(Array.from(value))];
    }
    case "[object Uint16Array]": {
      return [PROP_TYPE.Uint16Array, JSON.stringify(Array.from(value))];
    }
    case "[object Uint32Array]": {
      return [PROP_TYPE.Uint32Array, JSON.stringify(Array.from(value))];
    }
    default: {
      if (value !== null && typeof value === "object") {
        return [PROP_TYPE.Value, serializeObject(value, metadata, parents)];
      } else {
        return [PROP_TYPE.Value, value];
      }
    }
  }
}
function serializeProps(props, metadata) {
  const serialized = JSON.stringify(serializeObject(props, metadata));
  return serialized;
}

const HydrationDirectivesRaw = ["load", "idle", "media", "visible", "only"];
const HydrationDirectives = new Set(HydrationDirectivesRaw);
const HydrationDirectiveProps = new Set(HydrationDirectivesRaw.map((n) => `client:${n}`));
function extractDirectives(displayName, inputProps) {
  let extracted = {
    isPage: false,
    hydration: null,
    props: {}
  };
  for (const [key, value] of Object.entries(inputProps)) {
    if (key.startsWith("server:")) {
      if (key === "server:root") {
        extracted.isPage = true;
      }
    }
    if (key.startsWith("client:")) {
      if (!extracted.hydration) {
        extracted.hydration = {
          directive: "",
          value: "",
          componentUrl: "",
          componentExport: { value: "" }
        };
      }
      switch (key) {
        case "client:component-path": {
          extracted.hydration.componentUrl = value;
          break;
        }
        case "client:component-export": {
          extracted.hydration.componentExport.value = value;
          break;
        }
        case "client:component-hydration": {
          break;
        }
        case "client:display-name": {
          break;
        }
        default: {
          extracted.hydration.directive = key.split(":")[1];
          extracted.hydration.value = value;
          if (!HydrationDirectives.has(extracted.hydration.directive)) {
            throw new Error(
              `Error: invalid hydration directive "${key}". Supported hydration methods: ${Array.from(
                HydrationDirectiveProps
              ).join(", ")}`
            );
          }
          if (extracted.hydration.directive === "media" && typeof extracted.hydration.value !== "string") {
            throw new AstroError(AstroErrorData.MissingMediaQueryDirective);
          }
          break;
        }
      }
    } else if (key === "class:list") {
      if (value) {
        extracted.props[key.slice(0, -5)] = serializeListValue(value);
      }
    } else {
      extracted.props[key] = value;
    }
  }
  for (const sym of Object.getOwnPropertySymbols(inputProps)) {
    extracted.props[sym] = inputProps[sym];
  }
  return extracted;
}
async function generateHydrateScript(scriptOptions, metadata) {
  const { renderer, result, astroId, props, attrs } = scriptOptions;
  const { hydrate, componentUrl, componentExport } = metadata;
  if (!componentExport.value) {
    throw new Error(
      `Unable to resolve a valid export for "${metadata.displayName}"! Please open an issue at https://astro.build/issues!`
    );
  }
  const island = {
    children: "",
    props: {
      uid: astroId
    }
  };
  if (attrs) {
    for (const [key, value] of Object.entries(attrs)) {
      island.props[key] = escapeHTML(value);
    }
  }
  island.props["component-url"] = await result.resolve(decodeURI(componentUrl));
  if (renderer.clientEntrypoint) {
    island.props["component-export"] = componentExport.value;
    island.props["renderer-url"] = await result.resolve(decodeURI(renderer.clientEntrypoint));
    island.props["props"] = escapeHTML(serializeProps(props, metadata));
  }
  island.props["ssr"] = "";
  island.props["client"] = hydrate;
  let beforeHydrationUrl = await result.resolve("astro:scripts/before-hydration.js");
  if (beforeHydrationUrl.length) {
    island.props["before-hydration-url"] = beforeHydrationUrl;
  }
  island.props["opts"] = escapeHTML(
    JSON.stringify({
      name: metadata.displayName,
      value: metadata.hydrateArgs || ""
    })
  );
  return island;
}

var _a$3;
const astroComponentInstanceSym = Symbol.for("astro.componentInstance");
class AstroComponentInstance {
  constructor(result, props, slots, factory) {
    this[_a$3] = true;
    this.result = result;
    this.props = props;
    this.factory = factory;
    this.slotValues = {};
    for (const name in slots) {
      this.slotValues[name] = slots[name]();
    }
  }
  async init() {
    this.returnValue = this.factory(this.result, this.props, this.slotValues);
    return this.returnValue;
  }
  async *render() {
    if (this.returnValue === void 0) {
      await this.init();
    }
    let value = this.returnValue;
    if (isPromise(value)) {
      value = await value;
    }
    if (isHeadAndContent(value)) {
      yield* value.content;
    } else {
      yield* renderChild(value);
    }
  }
}
_a$3 = astroComponentInstanceSym;
function validateComponentProps(props, displayName) {
  if (props != null) {
    for (const prop of Object.keys(props)) {
      if (HydrationDirectiveProps.has(prop)) {
        console.warn(
          `You are attempting to render <${displayName} ${prop} />, but ${displayName} is an Astro component. Astro components do not render in the client and should not have a hydration directive. Please use a framework component for client rendering.`
        );
      }
    }
  }
}
function createAstroComponentInstance(result, displayName, factory, props, slots = {}) {
  validateComponentProps(props, displayName);
  const instance = new AstroComponentInstance(result, props, slots, factory);
  if (isAPropagatingComponent(result, factory) && !result.propagators.has(factory)) {
    result.propagators.set(factory, instance);
  }
  return instance;
}
function isAstroComponentInstance(obj) {
  return typeof obj === "object" && !!obj[astroComponentInstanceSym];
}

async function* renderChild(child) {
  child = await child;
  if (child instanceof SlotString) {
    if (child.instructions) {
      yield* child.instructions;
    }
    yield child;
  } else if (isHTMLString(child)) {
    yield child;
  } else if (Array.isArray(child)) {
    for (const value of child) {
      yield markHTMLString(await renderChild(value));
    }
  } else if (typeof child === "function") {
    yield* renderChild(child());
  } else if (typeof child === "string") {
    yield markHTMLString(escapeHTML(child));
  } else if (!child && child !== 0) ; else if (isRenderTemplateResult(child)) {
    yield* renderAstroTemplateResult(child);
  } else if (isAstroComponentInstance(child)) {
    yield* child.render();
  } else if (ArrayBuffer.isView(child)) {
    yield child;
  } else if (typeof child === "object" && (Symbol.asyncIterator in child || Symbol.iterator in child)) {
    yield* child;
  } else {
    yield child;
  }
}

const slotString = Symbol.for("astro:slot-string");
class SlotString extends HTMLString {
  constructor(content, instructions) {
    super(content);
    this.instructions = instructions;
    this[slotString] = true;
  }
}
function isSlotString(str) {
  return !!str[slotString];
}
async function renderSlot(_result, slotted, fallback) {
  if (slotted) {
    let iterator = renderChild(slotted);
    let content = "";
    let instructions = null;
    for await (const chunk of iterator) {
      if (chunk.type === "directive") {
        if (instructions === null) {
          instructions = [];
        }
        instructions.push(chunk);
      } else {
        content += chunk;
      }
    }
    return markHTMLString(new SlotString(content, instructions));
  }
  return fallback;
}
async function renderSlots(result, slots = {}) {
  let slotInstructions = null;
  let children = {};
  if (slots) {
    await Promise.all(
      Object.entries(slots).map(
        ([key, value]) => renderSlot(result, value).then((output) => {
          if (output.instructions) {
            if (slotInstructions === null) {
              slotInstructions = [];
            }
            slotInstructions.push(...output.instructions);
          }
          children[key] = output;
        })
      )
    );
  }
  return { slotInstructions, children };
}

const Fragment = Symbol.for("astro:fragment");
const Renderer = Symbol.for("astro:renderer");
const encoder = new TextEncoder();
const decoder = new TextDecoder();
function stringifyChunk(result, chunk) {
  switch (chunk.type) {
    case "directive": {
      const { hydration } = chunk;
      let needsHydrationScript = hydration && determineIfNeedsHydrationScript(result);
      let needsDirectiveScript = hydration && determinesIfNeedsDirectiveScript(result, hydration.directive);
      let prescriptType = needsHydrationScript ? "both" : needsDirectiveScript ? "directive" : null;
      if (prescriptType) {
        let prescripts = getPrescripts(prescriptType, hydration.directive);
        return markHTMLString(prescripts);
      } else {
        return "";
      }
    }
    default: {
      if (isSlotString(chunk)) {
        let out = "";
        const c = chunk;
        if (c.instructions) {
          for (const instr of c.instructions) {
            out += stringifyChunk(result, instr);
          }
        }
        out += chunk.toString();
        return out;
      }
      return chunk.toString();
    }
  }
}
class HTMLParts {
  constructor() {
    this.parts = "";
  }
  append(part, result) {
    if (ArrayBuffer.isView(part)) {
      this.parts += decoder.decode(part);
    } else {
      this.parts += stringifyChunk(result, part);
    }
  }
  toString() {
    return this.parts;
  }
  toArrayBuffer() {
    return encoder.encode(this.parts);
  }
}

const ClientOnlyPlaceholder = "astro-client-only";
class Skip {
  constructor(vnode) {
    this.vnode = vnode;
    this.count = 0;
  }
  increment() {
    this.count++;
  }
  haveNoTried() {
    return this.count === 0;
  }
  isCompleted() {
    return this.count > 2;
  }
}
Skip.symbol = Symbol("astro:jsx:skip");
let originalConsoleError;
let consoleFilterRefs = 0;
async function renderJSX(result, vnode) {
  switch (true) {
    case vnode instanceof HTMLString:
      if (vnode.toString().trim() === "") {
        return "";
      }
      return vnode;
    case typeof vnode === "string":
      return markHTMLString(escapeHTML(vnode));
    case typeof vnode === "function":
      return vnode;
    case (!vnode && vnode !== 0):
      return "";
    case Array.isArray(vnode):
      return markHTMLString(
        (await Promise.all(vnode.map((v) => renderJSX(result, v)))).join("")
      );
  }
  let skip;
  if (vnode.props) {
    if (vnode.props[Skip.symbol]) {
      skip = vnode.props[Skip.symbol];
    } else {
      skip = new Skip(vnode);
    }
  } else {
    skip = new Skip(vnode);
  }
  return renderJSXVNode(result, vnode, skip);
}
async function renderJSXVNode(result, vnode, skip) {
  if (isVNode(vnode)) {
    switch (true) {
      case !vnode.type: {
        throw new Error(`Unable to render ${result._metadata.pathname} because it contains an undefined Component!
Did you forget to import the component or is it possible there is a typo?`);
      }
      case vnode.type === Symbol.for("astro:fragment"):
        return renderJSX(result, vnode.props.children);
      case vnode.type.isAstroComponentFactory: {
        let props = {};
        let slots = {};
        for (const [key, value] of Object.entries(vnode.props ?? {})) {
          if (key === "children" || value && typeof value === "object" && value["$$slot"]) {
            slots[key === "children" ? "default" : key] = () => renderJSX(result, value);
          } else {
            props[key] = value;
          }
        }
        return markHTMLString(await renderToString(result, vnode.type, props, slots));
      }
      case (!vnode.type && vnode.type !== 0):
        return "";
      case (typeof vnode.type === "string" && vnode.type !== ClientOnlyPlaceholder):
        return markHTMLString(await renderElement$1(result, vnode.type, vnode.props ?? {}));
    }
    if (vnode.type) {
      let extractSlots2 = function(child) {
        if (Array.isArray(child)) {
          return child.map((c) => extractSlots2(c));
        }
        if (!isVNode(child)) {
          _slots.default.push(child);
          return;
        }
        if ("slot" in child.props) {
          _slots[child.props.slot] = [..._slots[child.props.slot] ?? [], child];
          delete child.props.slot;
          return;
        }
        _slots.default.push(child);
      };
      if (typeof vnode.type === "function" && vnode.type["astro:renderer"]) {
        skip.increment();
      }
      if (typeof vnode.type === "function" && vnode.props["server:root"]) {
        const output2 = await vnode.type(vnode.props ?? {});
        return await renderJSX(result, output2);
      }
      if (typeof vnode.type === "function") {
        if (skip.haveNoTried() || skip.isCompleted()) {
          useConsoleFilter();
          try {
            const output2 = await vnode.type(vnode.props ?? {});
            let renderResult;
            if (output2 && output2[AstroJSX]) {
              renderResult = await renderJSXVNode(result, output2, skip);
              return renderResult;
            } else if (!output2) {
              renderResult = await renderJSXVNode(result, output2, skip);
              return renderResult;
            }
          } catch (e) {
            if (skip.isCompleted()) {
              throw e;
            }
            skip.increment();
          } finally {
            finishUsingConsoleFilter();
          }
        } else {
          skip.increment();
        }
      }
      const { children = null, ...props } = vnode.props ?? {};
      const _slots = {
        default: []
      };
      extractSlots2(children);
      for (const [key, value] of Object.entries(props)) {
        if (value["$$slot"]) {
          _slots[key] = value;
          delete props[key];
        }
      }
      const slotPromises = [];
      const slots = {};
      for (const [key, value] of Object.entries(_slots)) {
        slotPromises.push(
          renderJSX(result, value).then((output2) => {
            if (output2.toString().trim().length === 0)
              return;
            slots[key] = () => output2;
          })
        );
      }
      await Promise.all(slotPromises);
      props[Skip.symbol] = skip;
      let output;
      if (vnode.type === ClientOnlyPlaceholder && vnode.props["client:only"]) {
        output = await renderComponentToIterable(
          result,
          vnode.props["client:display-name"] ?? "",
          null,
          props,
          slots
        );
      } else {
        output = await renderComponentToIterable(
          result,
          typeof vnode.type === "function" ? vnode.type.name : vnode.type,
          vnode.type,
          props,
          slots
        );
      }
      if (typeof output !== "string" && Symbol.asyncIterator in output) {
        let parts = new HTMLParts();
        for await (const chunk of output) {
          parts.append(chunk, result);
        }
        return markHTMLString(parts.toString());
      } else {
        return markHTMLString(output);
      }
    }
  }
  return markHTMLString(`${vnode}`);
}
async function renderElement$1(result, tag, { children, ...props }) {
  return markHTMLString(
    `<${tag}${spreadAttributes(props)}${markHTMLString(
      (children == null || children == "") && voidElementNames.test(tag) ? `/>` : `>${children == null ? "" : await renderJSX(result, children)}</${tag}>`
    )}`
  );
}
function useConsoleFilter() {
  consoleFilterRefs++;
  if (!originalConsoleError) {
    originalConsoleError = console.error;
    try {
      console.error = filteredConsoleError;
    } catch (error) {
    }
  }
}
function finishUsingConsoleFilter() {
  consoleFilterRefs--;
}
function filteredConsoleError(msg, ...rest) {
  if (consoleFilterRefs > 0 && typeof msg === "string") {
    const isKnownReactHookError = msg.includes("Warning: Invalid hook call.") && msg.includes("https://reactjs.org/link/invalid-hook-call");
    if (isKnownReactHookError)
      return;
  }
  originalConsoleError(msg, ...rest);
}

/**
 * shortdash - https://github.com/bibig/node-shorthash
 *
 * @license
 *
 * (The MIT License)
 *
 * Copyright (c) 2013 Bibig <bibig@me.com>
 *
 * Permission is hereby granted, free of charge, to any person
 * obtaining a copy of this software and associated documentation
 * files (the "Software"), to deal in the Software without
 * restriction, including without limitation the rights to use,
 * copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the
 * Software is furnished to do so, subject to the following
 * conditions:
 *
 * The above copyright notice and this permission notice shall be
 * included in all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
 * EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES
 * OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
 * NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT
 * HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY,
 * WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING
 * FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR
 * OTHER DEALINGS IN THE SOFTWARE.
 */
const dictionary = "0123456789abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXY";
const binary = dictionary.length;
function bitwise(str) {
  let hash = 0;
  if (str.length === 0)
    return hash;
  for (let i = 0; i < str.length; i++) {
    const ch = str.charCodeAt(i);
    hash = (hash << 5) - hash + ch;
    hash = hash & hash;
  }
  return hash;
}
function shorthash(text) {
  let num;
  let result = "";
  let integer = bitwise(text);
  const sign = integer < 0 ? "Z" : "";
  integer = Math.abs(integer);
  while (integer >= binary) {
    num = integer % binary;
    integer = Math.floor(integer / binary);
    result = dictionary[num] + result;
  }
  if (integer > 0) {
    result = dictionary[integer] + result;
  }
  return sign + result;
}

const voidElementNames = /^(area|base|br|col|command|embed|hr|img|input|keygen|link|meta|param|source|track|wbr)$/i;
const htmlBooleanAttributes = /^(allowfullscreen|async|autofocus|autoplay|controls|default|defer|disabled|disablepictureinpicture|disableremoteplayback|formnovalidate|hidden|loop|nomodule|novalidate|open|playsinline|readonly|required|reversed|scoped|seamless|itemscope)$/i;
const htmlEnumAttributes = /^(contenteditable|draggable|spellcheck|value)$/i;
const svgEnumAttributes = /^(autoReverse|externalResourcesRequired|focusable|preserveAlpha)$/i;
const STATIC_DIRECTIVES = /* @__PURE__ */ new Set(["set:html", "set:text"]);
const toIdent = (k) => k.trim().replace(/(?:(?!^)\b\w|\s+|[^\w]+)/g, (match, index) => {
  if (/[^\w]|\s/.test(match))
    return "";
  return index === 0 ? match : match.toUpperCase();
});
const toAttributeString = (value, shouldEscape = true) => shouldEscape ? String(value).replace(/&/g, "&#38;").replace(/"/g, "&#34;") : value;
const kebab = (k) => k.toLowerCase() === k ? k : k.replace(/[A-Z]/g, (match) => `-${match.toLowerCase()}`);
const toStyleString = (obj) => Object.entries(obj).map(([k, v]) => `${kebab(k)}:${v}`).join(";");
function defineScriptVars(vars) {
  let output = "";
  for (const [key, value] of Object.entries(vars)) {
    output += `const ${toIdent(key)} = ${JSON.stringify(value)};
`;
  }
  return markHTMLString(output);
}
function formatList(values) {
  if (values.length === 1) {
    return values[0];
  }
  return `${values.slice(0, -1).join(", ")} or ${values[values.length - 1]}`;
}
function addAttribute(value, key, shouldEscape = true) {
  if (value == null) {
    return "";
  }
  if (value === false) {
    if (htmlEnumAttributes.test(key) || svgEnumAttributes.test(key)) {
      return markHTMLString(` ${key}="false"`);
    }
    return "";
  }
  if (STATIC_DIRECTIVES.has(key)) {
    console.warn(`[astro] The "${key}" directive cannot be applied dynamically at runtime. It will not be rendered as an attribute.

Make sure to use the static attribute syntax (\`${key}={value}\`) instead of the dynamic spread syntax (\`{...{ "${key}": value }}\`).`);
    return "";
  }
  if (key === "class:list") {
    const listValue = toAttributeString(serializeListValue(value), shouldEscape);
    if (listValue === "") {
      return "";
    }
    return markHTMLString(` ${key.slice(0, -5)}="${listValue}"`);
  }
  if (key === "style" && !(value instanceof HTMLString) && typeof value === "object") {
    return markHTMLString(` ${key}="${toAttributeString(toStyleString(value), shouldEscape)}"`);
  }
  if (key === "className") {
    return markHTMLString(` class="${toAttributeString(value, shouldEscape)}"`);
  }
  if (value === true && (key.startsWith("data-") || htmlBooleanAttributes.test(key))) {
    return markHTMLString(` ${key}`);
  } else {
    return markHTMLString(` ${key}="${toAttributeString(value, shouldEscape)}"`);
  }
}
function internalSpreadAttributes(values, shouldEscape = true) {
  let output = "";
  for (const [key, value] of Object.entries(values)) {
    output += addAttribute(value, key, shouldEscape);
  }
  return markHTMLString(output);
}
function renderElement(name, { props: _props, children = "" }, shouldEscape = true) {
  const { lang: _, "data-astro-id": astroId, "define:vars": defineVars, ...props } = _props;
  if (defineVars) {
    if (name === "style") {
      delete props["is:global"];
      delete props["is:scoped"];
    }
    if (name === "script") {
      delete props.hoist;
      children = defineScriptVars(defineVars) + "\n" + children;
    }
  }
  if ((children == null || children == "") && voidElementNames.test(name)) {
    return `<${name}${internalSpreadAttributes(props, shouldEscape)} />`;
  }
  return `<${name}${internalSpreadAttributes(props, shouldEscape)}>${children}</${name}>`;
}

function componentIsHTMLElement(Component) {
  return typeof HTMLElement !== "undefined" && HTMLElement.isPrototypeOf(Component);
}
async function renderHTMLElement(result, constructor, props, slots) {
  const name = getHTMLElementName(constructor);
  let attrHTML = "";
  for (const attr in props) {
    attrHTML += ` ${attr}="${toAttributeString(await props[attr])}"`;
  }
  return markHTMLString(
    `<${name}${attrHTML}>${await renderSlot(result, slots == null ? void 0 : slots.default)}</${name}>`
  );
}
function getHTMLElementName(constructor) {
  const definedName = customElements.getName(constructor);
  if (definedName)
    return definedName;
  const assignedName = constructor.name.replace(/^HTML|Element$/g, "").replace(/[A-Z]/g, "-$&").toLowerCase().replace(/^-/, "html-");
  return assignedName;
}

const rendererAliases = /* @__PURE__ */ new Map([["solid", "solid-js"]]);
function guessRenderers(componentUrl) {
  const extname = componentUrl == null ? void 0 : componentUrl.split(".").pop();
  switch (extname) {
    case "svelte":
      return ["@astrojs/svelte"];
    case "vue":
      return ["@astrojs/vue"];
    case "jsx":
    case "tsx":
      return ["@astrojs/react", "@astrojs/preact", "@astrojs/solid", "@astrojs/vue (jsx)"];
    default:
      return [
        "@astrojs/react",
        "@astrojs/preact",
        "@astrojs/solid",
        "@astrojs/vue",
        "@astrojs/svelte"
      ];
  }
}
function isFragmentComponent(Component) {
  return Component === Fragment;
}
function isHTMLComponent(Component) {
  return Component && typeof Component === "object" && Component["astro:html"];
}
async function renderFrameworkComponent(result, displayName, Component, _props, slots = {}) {
  var _a, _b;
  if (!Component && !_props["client:only"]) {
    throw new Error(
      `Unable to render ${displayName} because it is ${Component}!
Did you forget to import the component or is it possible there is a typo?`
    );
  }
  const { renderers } = result._metadata;
  const metadata = { displayName };
  const { hydration, isPage, props } = extractDirectives(displayName, _props);
  let html = "";
  let attrs = void 0;
  if (hydration) {
    metadata.hydrate = hydration.directive;
    metadata.hydrateArgs = hydration.value;
    metadata.componentExport = hydration.componentExport;
    metadata.componentUrl = hydration.componentUrl;
  }
  const probableRendererNames = guessRenderers(metadata.componentUrl);
  const validRenderers = renderers.filter((r) => r.name !== "astro:jsx");
  const { children, slotInstructions } = await renderSlots(result, slots);
  let renderer;
  if (metadata.hydrate !== "only") {
    let isTagged = false;
    try {
      isTagged = Component && Component[Renderer];
    } catch {
    }
    if (isTagged) {
      const rendererName = Component[Renderer];
      renderer = renderers.find(({ name }) => name === rendererName);
    }
    if (!renderer) {
      let error;
      for (const r of renderers) {
        try {
          if (await r.ssr.check.call({ result }, Component, props, children)) {
            renderer = r;
            break;
          }
        } catch (e) {
          error ?? (error = e);
        }
      }
      if (!renderer && error) {
        throw error;
      }
    }
    if (!renderer && typeof HTMLElement === "function" && componentIsHTMLElement(Component)) {
      const output = renderHTMLElement(result, Component, _props, slots);
      return output;
    }
  } else {
    if (metadata.hydrateArgs) {
      const passedName = metadata.hydrateArgs;
      const rendererName = rendererAliases.has(passedName) ? rendererAliases.get(passedName) : passedName;
      renderer = renderers.find(
        ({ name }) => name === `@astrojs/${rendererName}` || name === rendererName
      );
    }
    if (!renderer && validRenderers.length === 1) {
      renderer = validRenderers[0];
    }
    if (!renderer) {
      const extname = (_a = metadata.componentUrl) == null ? void 0 : _a.split(".").pop();
      renderer = renderers.filter(
        ({ name }) => name === `@astrojs/${extname}` || name === extname
      )[0];
    }
  }
  if (!renderer) {
    if (metadata.hydrate === "only") {
      throw new AstroError({
        ...AstroErrorData.NoClientOnlyHint,
        message: AstroErrorData.NoClientOnlyHint.message(metadata.displayName),
        hint: AstroErrorData.NoClientOnlyHint.hint(
          probableRendererNames.map((r) => r.replace("@astrojs/", "")).join("|")
        )
      });
    } else if (typeof Component !== "string") {
      const matchingRenderers = validRenderers.filter(
        (r) => probableRendererNames.includes(r.name)
      );
      const plural = validRenderers.length > 1;
      if (matchingRenderers.length === 0) {
        throw new AstroError({
          ...AstroErrorData.NoMatchingRenderer,
          message: AstroErrorData.NoMatchingRenderer.message(
            metadata.displayName,
            (_b = metadata == null ? void 0 : metadata.componentUrl) == null ? void 0 : _b.split(".").pop(),
            plural,
            validRenderers.length
          ),
          hint: AstroErrorData.NoMatchingRenderer.hint(
            formatList(probableRendererNames.map((r) => "`" + r + "`"))
          )
        });
      } else if (matchingRenderers.length === 1) {
        renderer = matchingRenderers[0];
        ({ html, attrs } = await renderer.ssr.renderToStaticMarkup.call(
          { result },
          Component,
          props,
          children,
          metadata
        ));
      } else {
        throw new Error(`Unable to render ${metadata.displayName}!

This component likely uses ${formatList(probableRendererNames)},
but Astro encountered an error during server-side rendering.

Please ensure that ${metadata.displayName}:
1. Does not unconditionally access browser-specific globals like \`window\` or \`document\`.
   If this is unavoidable, use the \`client:only\` hydration directive.
2. Does not conditionally return \`null\` or \`undefined\` when rendered on the server.

If you're still stuck, please open an issue on GitHub or join us at https://astro.build/chat.`);
      }
    }
  } else {
    if (metadata.hydrate === "only") {
      html = await renderSlot(result, slots == null ? void 0 : slots.fallback);
    } else {
      ({ html, attrs } = await renderer.ssr.renderToStaticMarkup.call(
        { result },
        Component,
        props,
        children,
        metadata
      ));
    }
  }
  if (renderer && !renderer.clientEntrypoint && renderer.name !== "@astrojs/lit" && metadata.hydrate) {
    throw new AstroError({
      ...AstroErrorData.NoClientEntrypoint,
      message: AstroErrorData.NoClientEntrypoint.message(
        displayName,
        metadata.hydrate,
        renderer.name
      )
    });
  }
  if (!html && typeof Component === "string") {
    const Tag = sanitizeElementName(Component);
    const childSlots = Object.values(children).join("");
    const iterable = renderAstroTemplateResult(
      await renderTemplate`<${Tag}${internalSpreadAttributes(props)}${markHTMLString(
        childSlots === "" && voidElementNames.test(Tag) ? `/>` : `>${childSlots}</${Tag}>`
      )}`
    );
    html = "";
    for await (const chunk of iterable) {
      html += chunk;
    }
  }
  if (!hydration) {
    return async function* () {
      if (slotInstructions) {
        yield* slotInstructions;
      }
      if (isPage || (renderer == null ? void 0 : renderer.name) === "astro:jsx") {
        yield html;
      } else {
        yield markHTMLString(html.replace(/\<\/?astro-slot\>/g, ""));
      }
    }();
  }
  const astroId = shorthash(
    `<!--${metadata.componentExport.value}:${metadata.componentUrl}-->
${html}
${serializeProps(
      props,
      metadata
    )}`
  );
  const island = await generateHydrateScript(
    { renderer, result, astroId, props, attrs },
    metadata
  );
  let unrenderedSlots = [];
  if (html) {
    if (Object.keys(children).length > 0) {
      for (const key of Object.keys(children)) {
        if (!html.includes(key === "default" ? `<astro-slot>` : `<astro-slot name="${key}">`)) {
          unrenderedSlots.push(key);
        }
      }
    }
  } else {
    unrenderedSlots = Object.keys(children);
  }
  const template = unrenderedSlots.length > 0 ? unrenderedSlots.map(
    (key) => `<template data-astro-template${key !== "default" ? `="${key}"` : ""}>${children[key]}</template>`
  ).join("") : "";
  island.children = `${html ?? ""}${template}`;
  if (island.children) {
    island.props["await-children"] = "";
  }
  async function* renderAll() {
    if (slotInstructions) {
      yield* slotInstructions;
    }
    yield { type: "directive", hydration, result };
    yield markHTMLString(renderElement("astro-island", island, false));
  }
  return renderAll();
}
function sanitizeElementName(tag) {
  const unsafe = /[&<>'"\s]+/g;
  if (!unsafe.test(tag))
    return tag;
  return tag.trim().split(unsafe)[0].trim();
}
async function renderFragmentComponent(result, slots = {}) {
  const children = await renderSlot(result, slots == null ? void 0 : slots.default);
  if (children == null) {
    return children;
  }
  return markHTMLString(children);
}
async function renderHTMLComponent(result, Component, _props, slots = {}) {
  const { slotInstructions, children } = await renderSlots(result, slots);
  const html = Component.render({ slots: children });
  const hydrationHtml = slotInstructions ? slotInstructions.map((instr) => stringifyChunk(result, instr)).join("") : "";
  return markHTMLString(hydrationHtml + html);
}
function renderComponent(result, displayName, Component, props, slots = {}) {
  if (isPromise(Component)) {
    return Promise.resolve(Component).then((Unwrapped) => {
      return renderComponent(result, displayName, Unwrapped, props, slots);
    });
  }
  if (isFragmentComponent(Component)) {
    return renderFragmentComponent(result, slots);
  }
  if (isHTMLComponent(Component)) {
    return renderHTMLComponent(result, Component, props, slots);
  }
  if (isAstroComponentFactory(Component)) {
    return createAstroComponentInstance(result, displayName, Component, props, slots);
  }
  return renderFrameworkComponent(result, displayName, Component, props, slots);
}
function renderComponentToIterable(result, displayName, Component, props, slots = {}) {
  const renderResult = renderComponent(result, displayName, Component, props, slots);
  if (isAstroComponentInstance(renderResult)) {
    return renderResult.render();
  }
  return renderResult;
}

const uniqueElements = (item, index, all) => {
  const props = JSON.stringify(item.props);
  const children = item.children;
  return index === all.findIndex((i) => JSON.stringify(i.props) === props && i.children == children);
};
async function* renderExtraHead(result, base) {
  yield base;
  for (const part of result.extraHead) {
    yield* renderChild(part);
  }
}
function renderAllHeadContent(result) {
  const styles = Array.from(result.styles).filter(uniqueElements).map((style) => renderElement("style", style));
  result.styles.clear();
  const scripts = Array.from(result.scripts).filter(uniqueElements).map((script, i) => {
    return renderElement("script", script, false);
  });
  const links = Array.from(result.links).filter(uniqueElements).map((link) => renderElement("link", link, false));
  const baseHeadContent = markHTMLString(links.join("\n") + styles.join("\n") + scripts.join("\n"));
  if (result.extraHead.length > 0) {
    return renderExtraHead(result, baseHeadContent);
  } else {
    return baseHeadContent;
  }
}
function createRenderHead(result) {
  result._metadata.hasRenderedHead = true;
  return renderAllHeadContent.bind(null, result);
}
const renderHead = createRenderHead;
async function* maybeRenderHead(result) {
  if (result._metadata.hasRenderedHead) {
    return;
  }
  yield createRenderHead(result)();
}

typeof process === "object" && Object.prototype.toString.call(process) === "[object process]";

function __astro_tag_component__(Component, rendererName) {
  if (!Component)
    return;
  if (typeof Component !== "function")
    return;
  Object.defineProperty(Component, Renderer, {
    value: rendererName,
    enumerable: false,
    writable: false
  });
}
function spreadAttributes(values, _name, { class: scopedClassName } = {}) {
  let output = "";
  if (scopedClassName) {
    if (typeof values.class !== "undefined") {
      values.class += ` ${scopedClassName}`;
    } else if (typeof values["class:list"] !== "undefined") {
      values["class:list"] = [values["class:list"], scopedClassName];
    } else {
      values.class = scopedClassName;
    }
  }
  for (const [key, value] of Object.entries(values)) {
    output += addAttribute(value, key, true);
  }
  return markHTMLString(output);
}

const AstroJSX = "astro:jsx";
const Empty = Symbol("empty");
const toSlotName = (slotAttr) => slotAttr;
function isVNode(vnode) {
  return vnode && typeof vnode === "object" && vnode[AstroJSX];
}
function transformSlots(vnode) {
  if (typeof vnode.type === "string")
    return vnode;
  const slots = {};
  if (isVNode(vnode.props.children)) {
    const child = vnode.props.children;
    if (!isVNode(child))
      return;
    if (!("slot" in child.props))
      return;
    const name = toSlotName(child.props.slot);
    slots[name] = [child];
    slots[name]["$$slot"] = true;
    delete child.props.slot;
    delete vnode.props.children;
  }
  if (Array.isArray(vnode.props.children)) {
    vnode.props.children = vnode.props.children.map((child) => {
      if (!isVNode(child))
        return child;
      if (!("slot" in child.props))
        return child;
      const name = toSlotName(child.props.slot);
      if (Array.isArray(slots[name])) {
        slots[name].push(child);
      } else {
        slots[name] = [child];
        slots[name]["$$slot"] = true;
      }
      delete child.props.slot;
      return Empty;
    }).filter((v) => v !== Empty);
  }
  Object.assign(vnode.props, slots);
}
function markRawChildren(child) {
  if (typeof child === "string")
    return markHTMLString(child);
  if (Array.isArray(child))
    return child.map((c) => markRawChildren(c));
  return child;
}
function transformSetDirectives(vnode) {
  if (!("set:html" in vnode.props || "set:text" in vnode.props))
    return;
  if ("set:html" in vnode.props) {
    const children = markRawChildren(vnode.props["set:html"]);
    delete vnode.props["set:html"];
    Object.assign(vnode.props, { children });
    return;
  }
  if ("set:text" in vnode.props) {
    const children = vnode.props["set:text"];
    delete vnode.props["set:text"];
    Object.assign(vnode.props, { children });
    return;
  }
}
function createVNode(type, props) {
  const vnode = {
    [Renderer]: "astro:jsx",
    [AstroJSX]: true,
    type,
    props: props ?? {}
  };
  transformSetDirectives(vnode);
  transformSlots(vnode);
  return vnode;
}

const slotName = (str) => str.trim().replace(/[-_]([a-z])/g, (_, w) => w.toUpperCase());
async function check(Component, props, { default: children = null, ...slotted } = {}) {
  if (typeof Component !== "function")
    return false;
  const slots = {};
  for (const [key, value] of Object.entries(slotted)) {
    const name = slotName(key);
    slots[name] = value;
  }
  try {
    const result = await Component({ ...props, ...slots, children });
    return result[AstroJSX];
  } catch (e) {
  }
  return false;
}
async function renderToStaticMarkup(Component, props = {}, { default: children = null, ...slotted } = {}) {
  const slots = {};
  for (const [key, value] of Object.entries(slotted)) {
    const name = slotName(key);
    slots[name] = value;
  }
  const { result } = this;
  const html = await renderJSX(result, createVNode(Component, { ...props, ...slots, children }));
  return { html };
}
var server_default = {
  check,
  renderToStaticMarkup
};

var __freeze$2 = Object.freeze;
var __defProp$2 = Object.defineProperty;
var __template$2 = (cooked, raw) => __freeze$2(__defProp$2(cooked, "raw", { value: __freeze$2(raw || cooked.slice()) }));
var _a$2;
const $$Astro$6 = createAstro("/Users/michaelgogins/cloud-music/strudel/website/src/components/HeadCommon.astro", "https://strudel.tidalcycles.org/", "file:///Users/michaelgogins/cloud-music/strudel/website/");
const $$HeadCommon = createComponent(async ($$result, $$props, $$slots) => {
  const Astro2 = $$result.createAstro($$Astro$6, $$props, $$slots);
  Astro2.self = $$HeadCommon;
  const { BASE_URL } = (Object.assign({"BASE_URL":"/","MODE":"production","DEV":false,"PROD":true},{_:process.env._,BASE_URL:'/',}));
  const base = BASE_URL;
  return renderTemplate(_a$2 || (_a$2 = __template$2(['<!-- Global Metadata --><meta charset="utf-8">\n<meta name="viewport" content="width=device-width">\n<meta name="generator"', '>\n\n<link rel="icon" type="image/svg+xml" href="favicon.ico">\n\n<link rel="sitemap" href="./sitemap.xml">\n\n<base', `>

<!-- Preload Fonts -->
<link rel="preconnect" href="https://fonts.googleapis.com">
<link rel="preconnect" href="https://fonts.gstatic.com" crossorigin>
<link href="https://fonts.googleapis.com/css2?family=IBM+Plex+Mono:ital@0;1&display=swap" rel="stylesheet">

<!-- Scrollable a11y code helper -->
<script src="./make-scrollable-code-focusable.js"><\/script>

<!-- This is intentionally inlined to avoid FOUC -->
<script>
  /*   const root = document.documentElement;
  const theme = localStorage.getItem('theme');
  if (theme === 'dark' || (!theme && window.matchMedia('(prefers-color-scheme: dark)').matches)) {
    root.classList.add('theme-dark');
  } else {
    root.classList.remove('theme-dark');
  } */
<\/script>

<!-- Global site tag (gtag.js) - Google Analytics -->
<!-- <script async src="https://www.googletagmanager.com/gtag/js?id=G-TEL60V1WM9" is:inline><\/script>
<script>
  window.dataLayer = window.dataLayer || [];
  function gtag(){dataLayer.push(arguments);}
  gtag('js', new Date());
  gtag('config', 'G-TEL60V1WM9');
<\/script> -->
`])), addAttribute(Astro2.generator, "content"), addAttribute(base, "href"));
}, "/Users/michaelgogins/cloud-music/strudel/website/src/components/HeadCommon.astro");

const $$Astro$5 = createAstro("/Users/michaelgogins/cloud-music/strudel/website/src/pages/index.astro", "https://strudel.tidalcycles.org/", "file:///Users/michaelgogins/cloud-music/strudel/website/");
const $$Index$4 = createComponent(async ($$result, $$props, $$slots) => {
  const Astro2 = $$result.createAstro($$Astro$5, $$props, $$slots);
  Astro2.self = $$Index$4;
  return renderTemplate`<html>
  <head>
    ${renderComponent($$result, "HeadCommon", $$HeadCommon, {})}
    <title>Strudel REPL</title>
  ${renderHead($$result)}</head>
  <body>
    ${renderComponent($$result, "Repl", null, { "client:only": "react", "client:component-hydration": "only", "client:component-path": "/Users/michaelgogins/cloud-music/strudel/website/src/repl/Repl.jsx", "client:component-export": "Repl" })}
  </body></html>`;
}, "/Users/michaelgogins/cloud-music/strudel/website/src/pages/index.astro");

const $$file$5 = "/Users/michaelgogins/cloud-music/strudel/website/src/pages/index.astro";
const $$url$5 = "";

const _page0 = /*#__PURE__*/Object.freeze(/*#__PURE__*/Object.defineProperty({
	__proto__: null,
	default: $$Index$4,
	file: $$file$5,
	url: $$url$5
}, Symbol.toStringTag, { value: 'Module' }));

/*
fraction.mjs - <short description TODO>
Copyright (C) 2022 Strudel contributors - see <https://github.com/tidalcycles/strudel/blob/main/packages/core/fraction.mjs>
This program is free software: you can redistribute it and/or modify it under the terms of the GNU Affero General Public License as published by the Free Software Foundation, either version 3 of the License, or (at your option) any later version. This program is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU Affero General Public License for more details. You should have received a copy of the GNU Affero General Public License along with this program.  If not, see <https://www.gnu.org/licenses/>.
*/

// Returns the start of the cycle.
Fraction.prototype.sam = function () {
  return this.floor();
};

// Returns the start of the next cycle.
Fraction.prototype.nextSam = function () {
  return this.sam().add(1);
};

// Returns a TimeSpan representing the begin and end of the Time value's cycle
Fraction.prototype.wholeCycle = function () {
  return new TimeSpan(this.sam(), this.nextSam());
};

// The position of a time value relative to the start of its cycle.
Fraction.prototype.cyclePos = function () {
  return this.sub(this.sam());
};

Fraction.prototype.lt = function (other) {
  return this.compare(other) < 0;
};

Fraction.prototype.gt = function (other) {
  return this.compare(other) > 0;
};

Fraction.prototype.lte = function (other) {
  return this.compare(other) <= 0;
};

Fraction.prototype.gte = function (other) {
  return this.compare(other) >= 0;
};

Fraction.prototype.eq = function (other) {
  return this.compare(other) == 0;
};

Fraction.prototype.max = function (other) {
  return this.gt(other) ? this : other;
};

Fraction.prototype.min = function (other) {
  return this.lt(other) ? this : other;
};

Fraction.prototype.show = function (/* excludeWhole = false */) {
  // return this.toFraction(excludeWhole);
  return this.s * this.n + '/' + this.d;
};

Fraction.prototype.or = function (other) {
  return this.eq(0) ? other : this;
};

const fraction = (n) => {
  return Fraction(n);
};

const gcd = (...fractions) => {
  return fractions.reduce((gcd, fraction) => gcd.gcd(fraction), fraction(1));
};

fraction._original = Fraction;

// "If you concern performance, cache Fraction.js objects and pass arrays/objects.“
// -> tested memoized version, but it's slower than unmemoized, even with repeated evaluation
/* const memo = {};
const memoizedFraction = (n) => {
  if (typeof n === 'number') {
    n = String(n);
  }
  if (memo[n] !== undefined) {
    return memo[n];
  }
  memo[n] = Fraction(n);
  return memo[n];
}; */

/*
timespan.mjs - <short description TODO>
Copyright (C) 2022 Strudel contributors - see <https://github.com/tidalcycles/strudel/blob/main/packages/core/timespan.mjs>
This program is free software: you can redistribute it and/or modify it under the terms of the GNU Affero General Public License as published by the Free Software Foundation, either version 3 of the License, or (at your option) any later version. This program is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU Affero General Public License for more details. You should have received a copy of the GNU Affero General Public License along with this program.  If not, see <https://www.gnu.org/licenses/>.
*/

class TimeSpan {
  constructor(begin, end) {
    this.begin = fraction(begin);
    this.end = fraction(end);
  }

  get spanCycles() {
    const spans = [];
    var begin = this.begin;
    const end = this.end;
    const end_sam = end.sam();

    // Support zero-width timespans
    if (begin.equals(end)) {
      return [new TimeSpan(begin, end)];
    }

    while (end.gt(begin)) {
      // If begin and end are in the same cycle, we're done.
      if (begin.sam().equals(end_sam)) {
        spans.push(new TimeSpan(begin, this.end));
        break;
      }
      // add a timespan up to the next sam
      const next_begin = begin.nextSam();
      spans.push(new TimeSpan(begin, next_begin));

      // continue with the next cycle
      begin = next_begin;
    }
    return spans;
  }

  get duration() {
    return this.end.sub(this.begin);
  }

  cycleArc() {
    // Shifts a timespan to one of equal duration that starts within cycle zero.
    // (Note that the output timespan probably does not start *at* Time 0 --
    // that only happens when the input Arc starts at an integral Time.)
    const b = this.begin.cyclePos();
    const e = b.add(this.duration);
    return new TimeSpan(b, e);
  }

  withTime(func_time) {
    // Applies given function to both the begin and end time of the timespan"""
    return new TimeSpan(func_time(this.begin), func_time(this.end));
  }

  withEnd(func_time) {
    // Applies given function to the end time of the timespan"""
    return new TimeSpan(this.begin, func_time(this.end));
  }

  withCycle(func_time) {
    // Like withTime, but time is relative to relative to the cycle (i.e. the
    // sam of the start of the timespan)
    const sam = this.begin.sam();
    const b = sam.add(func_time(this.begin.sub(sam)));
    const e = sam.add(func_time(this.end.sub(sam)));
    return new TimeSpan(b, e);
  }

  intersection(other) {
    // Intersection of two timespans, returns None if they don't intersect.
    const intersect_begin = this.begin.max(other.begin);
    const intersect_end = this.end.min(other.end);

    if (intersect_begin.gt(intersect_end)) {
      return undefined;
    }
    if (intersect_begin.equals(intersect_end)) {
      // Zero-width (point) intersection - doesn't intersect if it's at the end of a
      // non-zero-width timespan.
      if (intersect_begin.equals(this.end) && this.begin.lt(this.end)) {
        return undefined;
      }
      if (intersect_begin.equals(other.end) && other.begin.lt(other.end)) {
        return undefined;
      }
    }
    return new TimeSpan(intersect_begin, intersect_end);
  }

  intersection_e(other) {
    // Like 'sect', but raises an exception if the timespans don't intersect.
    const result = this.intersection(other);
    if (result == undefined) {
      throw 'TimeSpans do not intersect';
    }
    return result;
  }

  midpoint() {
    return this.begin.add(this.duration.div(fraction(2)));
  }

  equals(other) {
    return this.begin.equals(other.begin) && this.end.equals(other.end);
  }

  show() {
    return this.begin.show() + ' → ' + this.end.show();
  }
}

/*
hap.mjs - <short description TODO>
Copyright (C) 2022 Strudel contributors - see <https://github.com/tidalcycles/strudel/blob/main/packages/core/hap.mjs>
This program is free software: you can redistribute it and/or modify it under the terms of the GNU Affero General Public License as published by the Free Software Foundation, either version 3 of the License, or (at your option) any later version. This program is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU Affero General Public License for more details. You should have received a copy of the GNU Affero General Public License along with this program.  If not, see <https://www.gnu.org/licenses/>.
*/

class Hap {
  /*
      Event class, representing a value active during the timespan
      'part'. This might be a fragment of an event, in which case the
      timespan will be smaller than the 'whole' timespan, otherwise the
      two timespans will be the same. The 'part' must never extend outside of the
      'whole'. If the event represents a continuously changing value
      then the whole will be returned as None, in which case the given
      value will have been sampled from the point halfway between the
      start and end of the 'part' timespan.
      The context is to store a list of source code locations causing the event.

      The word 'Event' is more or less a reserved word in javascript, hence this
      class is named called 'Hap'.
      */

  constructor(whole, part, value, context = {}, stateful = false) {
    this.whole = whole;
    this.part = part;
    this.value = value;
    this.context = context;
    this.stateful = stateful;
    if (stateful) {
      console.assert(typeof this.value === 'function', 'Stateful values must be functions');
    }
  }

  get duration() {
    return this.whole.end.sub(this.whole.begin);
  }

  wholeOrPart() {
    return this.whole ? this.whole : this.part;
  }

  withSpan(func) {
    // Returns a new hap with the function f applies to the hap timespan.
    const whole = this.whole ? func(this.whole) : undefined;
    return new Hap(whole, func(this.part), this.value, this.context);
  }

  withValue(func) {
    // Returns a new hap with the function f applies to the hap value.
    return new Hap(this.whole, this.part, func(this.value), this.context);
  }

  hasOnset() {
    // Test whether the hap contains the onset, i.e that
    // the beginning of the part is the same as that of the whole timespan."""
    return this.whole != undefined && this.whole.begin.equals(this.part.begin);
  }

  resolveState(state) {
    if (this.stateful && this.hasOnset()) {
      console.log('stateful');
      const func = this.value;
      const [newState, newValue] = func(state);
      return [newState, new Hap(this.whole, this.part, newValue, this.context, false)];
    }
    return [state, this];
  }

  spanEquals(other) {
    return (this.whole == undefined && other.whole == undefined) || this.whole.equals(other.whole);
  }

  equals(other) {
    return (
      this.spanEquals(other) &&
      this.part.equals(other.part) &&
      // TODO would == be better ??
      this.value === other.value
    );
  }

  show(compact = false) {
    const value =
      typeof this.value === 'object'
        ? compact
          ? JSON.stringify(this.value).slice(1, -1).replaceAll('"', '').replaceAll(',', ' ')
          : JSON.stringify(this.value)
        : this.value;
    var spans = '';
    if (this.whole == undefined) {
      spans = '~' + this.part.show;
    } else {
      var is_whole = this.whole.begin.equals(this.part.begin) && this.whole.end.equals(this.part.end);
      if (!this.whole.begin.equals(this.part.begin)) {
        spans = this.whole.begin.show() + ' ⇜ ';
      }
      if (!is_whole) {
        spans += '(';
      }
      spans += this.part.show();
      if (!is_whole) {
        spans += ')';
      }
      if (!this.whole.end.equals(this.part.end)) {
        spans += ' ⇝ ' + this.whole.end.show();
      }
    }
    return '[ ' + spans + ' | ' + value + ' ]';
  }

  showWhole(compact = false) {
    return `${this.whole == undefined ? '~' : this.whole.show()}: ${
      typeof this.value === 'object'
        ? compact
          ? JSON.stringify(this.value).slice(1, -1).replaceAll('"', '').replaceAll(',', ' ')
          : JSON.stringify(this.value)
        : this.value
    }`;
  }

  combineContext(b) {
    const a = this;
    return { ...a.context, ...b.context, locations: (a.context.locations || []).concat(b.context.locations || []) };
  }

  setContext(context) {
    return new Hap(this.whole, this.part, this.value, context);
  }
}

/*
state.mjs - <short description TODO>
Copyright (C) 2022 Strudel contributors - see <https://github.com/tidalcycles/strudel/blob/main/packages/core/state.mjs>
This program is free software: you can redistribute it and/or modify it under the terms of the GNU Affero General Public License as published by the Free Software Foundation, either version 3 of the License, or (at your option) any later version. This program is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU Affero General Public License for more details. You should have received a copy of the GNU Affero General Public License along with this program.  If not, see <https://www.gnu.org/licenses/>.
*/

class State {
  constructor(span, controls = {}) {
    this.span = span;
    this.controls = controls;
  }

  // Returns new State with different span
  setSpan(span) {
    return new State(span, this.controls);
  }

  withSpan(func) {
    return this.setSpan(func(this.span));
  }

  // Returns new State with different controls
  setControls(controls) {
    return new State(this.span, controls);
  }
}

/*
util.mjs - <short description TODO>
Copyright (C) 2022 Strudel contributors - see <https://github.com/tidalcycles/strudel/blob/main/packages/core/util.mjs>
This program is free software: you can redistribute it and/or modify it under the terms of the GNU Affero General Public License as published by the Free Software Foundation, either version 3 of the License, or (at your option) any later version. This program is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU Affero General Public License for more details. You should have received a copy of the GNU Affero General Public License along with this program.  If not, see <https://www.gnu.org/licenses/>.
*/

// returns true if the given string is a note
const isNoteWithOctave = (name) => /^[a-gA-G][#bs]*[0-9]$/.test(name);
const isNote = (name) => /^[a-gA-G][#bs]*[0-9]?$/.test(name);
const tokenizeNote = (note) => {
  if (typeof note !== 'string') {
    return [];
  }
  const [pc, acc = '', oct] = note.match(/^([a-gA-G])([#bs]*)([0-9])?$/)?.slice(1) || [];
  if (!pc) {
    return [];
  }
  return [pc, acc, oct ? Number(oct) : undefined];
};

// turns the given note into its midi number representation
const toMidi = (note) => {
  const [pc, acc, oct = 3] = tokenizeNote(note);
  if (!pc) {
    throw new Error('not a note: "' + note + '"');
  }
  const chroma = { c: 0, d: 2, e: 4, f: 5, g: 7, a: 9, b: 11 }[pc.toLowerCase()];
  const offset = acc?.split('').reduce((o, char) => o + { '#': 1, b: -1, s: 1 }[char], 0) || 0;
  return (Number(oct) + 1) * 12 + chroma + offset;
};
const fromMidi = (n) => {
  return Math.pow(2, (n - 69) / 12) * 440;
};

const freqToMidi = (freq) => {
  return (12 * Math.log(freq / 440)) / Math.LN2 + 69;
};

const valueToMidi = (value, fallbackValue) => {
  if (typeof value !== 'object') {
    throw new Error('valueToMidi: expected object value');
  }
  let { freq, note } = value;
  if (typeof freq === 'number') {
    return freqToMidi(freq);
  }
  if (typeof note === 'string') {
    return toMidi(note);
  }
  if (typeof note === 'number') {
    return note;
  }
  if (!fallbackValue) {
    throw new Error('valueToMidi: expected freq or note to be set');
  }
  return fallbackValue;
};

/**
 * @deprecated does not appear to be referenced or invoked anywhere in the codebase
 */
const getFreq = (noteOrMidi) => {
  if (typeof noteOrMidi === 'number') {
    return fromMidi(noteOrMidi);
  }
  return fromMidi(toMidi(noteOrMidi));
};

/**
 * @deprecated does not appear to be referenced or invoked anywhere in the codebase
 */
const midi2note = (n) => {
  const oct = Math.floor(n / 12) - 1;
  const pc = ['C', 'Db', 'D', 'Eb', 'E', 'F', 'Gb', 'G', 'Ab', 'A', 'Bb', 'B'][n % 12];
  return pc + oct;
};

// modulo that works with negative numbers e.g. _mod(-1, 3) = 2. Works on numbers (rather than patterns of numbers, as @mod@ from pattern.mjs does)
const _mod = (n, m) => ((n % m) + m) % m;

const getPlayableNoteValue = (hap) => {
  let { value, context } = hap;
  let note = value;
  if (typeof note === 'object' && !Array.isArray(note)) {
    note = note.note || note.n || note.value;
    if (note === undefined) {
      throw new Error(`cannot find a playable note for ${JSON.stringify(value)}`);
    }
  }
  // if value is number => interpret as midi number as long as its not marked as frequency
  if (typeof note === 'number' && context.type !== 'frequency') {
    note = fromMidi(hap.value);
  } else if (typeof note === 'number' && context.type === 'frequency') {
    note = hap.value; // legacy workaround.. will be removed in the future
  } else if (typeof note !== 'string' || !isNote(note)) {
    throw new Error('not a note: ' + JSON.stringify(note));
  }
  return note;
};

const getFrequency = (hap) => {
  let { value, context } = hap;
  // if value is number => interpret as midi number as long as its not marked as frequency
  if (typeof value === 'object') {
    if (value.freq) {
      return value.freq;
    }
    return getFreq(value.note || value.n || value.value);
  }
  if (typeof value === 'number' && context.type !== 'frequency') {
    value = fromMidi(hap.value);
  } else if (typeof value === 'string' && isNote(value)) {
    value = fromMidi(toMidi(hap.value));
  } else if (typeof value !== 'number') {
    throw new Error('not a note or frequency: ' + value);
  }
  return value;
};

// rotate array by n steps (to the left)
const rotate = (arr, n) => arr.slice(n).concat(arr.slice(0, n));

const pipe = (...funcs) => {
  return funcs.reduce(
    (f, g) =>
      (...args) =>
        f(g(...args)),
    (x) => x,
  );
};

const compose = (...funcs) => pipe(...funcs.reverse());

// Removes 'None' values from given list
const removeUndefineds = (xs) => xs.filter((x) => x != undefined);

const flatten = (arr) => [].concat(...arr);

const id$1 = (a) => a;
const constant = (a, b) => a;

const listRange = (min, max) => Array.from({ length: max - min + 1 }, (_, i) => i + min);

function curry(func, overload, arity = func.length) {
  const fn = function curried(...args) {
    if (args.length >= arity) {
      return func.apply(this, args);
    } else {
      const partial = function (...args2) {
        return curried.apply(this, args.concat(args2));
      };
      if (overload) {
        overload(partial, args);
      }
      return partial;
    }
  };
  if (overload) {
    // overload function without args... needed for chordBass.transpose(2)
    overload(fn, []);
  }
  return fn;
}

function parseNumeral(numOrString) {
  const asNumber = Number(numOrString);
  if (!isNaN(asNumber)) {
    return asNumber;
  }
  if (isNote(numOrString)) {
    return toMidi(numOrString);
  }
  throw new Error(`cannot parse as numeral: "${numOrString}"`);
}

function mapArgs(fn, mapFn) {
  return (...args) => fn(...args.map(mapFn));
}

function numeralArgs(fn) {
  return mapArgs(fn, parseNumeral);
}

function parseFractional(numOrString) {
  const asNumber = Number(numOrString);
  if (!isNaN(asNumber)) {
    return asNumber;
  }
  const specialValue = {
    pi: Math.PI,
    w: 1,
    h: 0.5,
    q: 0.25,
    e: 0.125,
    s: 0.0625,
    t: 1 / 3,
    f: 0.2,
    x: 1 / 6,
  }[numOrString];
  if (typeof specialValue !== 'undefined') {
    return specialValue;
  }
  throw new Error(`cannot parse as fractional: "${numOrString}"`);
}

const fractionalArgs = (fn) => mapArgs(fn, parseFractional);

/*
value.mjs - <short description TODO>
Copyright (C) 2022 Strudel contributors - see <https://github.com/tidalcycles/strudel/blob/main/packages/core/value.mjs>
This program is free software: you can redistribute it and/or modify it under the terms of the GNU Affero General Public License as published by the Free Software Foundation, either version 3 of the License, or (at your option) any later version. This program is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU Affero General Public License for more details. You should have received a copy of the GNU Affero General Public License along with this program.  If not, see <https://www.gnu.org/licenses/>.
*/

function unionWithObj(a, b, func) {
  if (typeof b?.value === 'number') {
    // https://github.com/tidalcycles/strudel/issues/262
    const numKeys = Object.keys(a).filter((k) => typeof a[k] === 'number');
    const numerals = Object.fromEntries(numKeys.map((k) => [k, b.value]));
    b = Object.assign(b, numerals);
    delete b.value;
  }
  const common = Object.keys(a).filter((k) => Object.keys(b).includes(k));
  return Object.assign({}, a, b, Object.fromEntries(common.map((k) => [k, func(a[k], b[k])])));
}

curry((a, b) => a * b);

curry((f, anyFunctor) => anyFunctor.map(f));

/*
drawLine.mjs - <short description TODO>
Copyright (C) 2022 Strudel contributors - see <https://github.com/tidalcycles/strudel/blob/main/packages/core/drawLine.mjs>
This program is free software: you can redistribute it and/or modify it under the terms of the GNU Affero General Public License as published by the Free Software Foundation, either version 3 of the License, or (at your option) any later version. This program is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU Affero General Public License for more details. You should have received a copy of the GNU Affero General Public License along with this program.  If not, see <https://www.gnu.org/licenses/>.
*/

/**
 * Intended for a debugging, drawLine renders the pattern as a string, where each character represents the same time span.
 * Should only be used with single characters as values, otherwise the character slots will be messed up.
 * Character legend:
 *
 * - "|" cycle separator
 * - "-" hold previous value
 * - "." silence
 *
 * @param {Pattern} pattern the pattern to use
 * @param {number} chars max number of characters (approximately)
 * @returns string
 * @example
 * const line = drawLine("0 [1 2 3]", 10); // |0--123|0--123
 * console.log(line);
 * silence;
 */
function drawLine(pat, chars = 60) {
  let cycle = 0;
  let pos = fraction(0);
  let lines = [''];
  let emptyLine = ''; // this will be the "reference" empty line, which will be copied into extra lines
  while (lines[0].length < chars) {
    const haps = pat.queryArc(cycle, cycle + 1);
    const durations = haps.filter((hap) => hap.hasOnset()).map((hap) => hap.duration);
    const charFraction = gcd(...durations);
    const totalSlots = charFraction.inverse(); // number of character slots for the current cycle
    lines = lines.map((line) => line + '|'); // add pipe character before each cycle
    emptyLine += '|';
    for (let i = 0; i < totalSlots; i++) {
      const [begin, end] = [pos, pos.add(charFraction)];
      const matches = haps.filter((hap) => hap.whole.begin.lte(begin) && hap.whole.end.gte(end));
      const missingLines = matches.length - lines.length;
      if (missingLines > 0) {
        lines = lines.concat(Array(missingLines).fill(emptyLine));
      }
      lines = lines.map((line, i) => {
        const hap = matches[i];
        if (hap) {
          const isOnset = hap.whole.begin.eq(begin);
          const char = isOnset ? '' + hap.value : '-';
          return line + char;
        }
        return line + '.';
      });
      emptyLine += '.';
      pos = pos.add(charFraction);
    }
    cycle++;
  }
  return lines.join('\n');
}

const logKey = 'strudel.log';

function logger(message, type, data = {}) {
  console.log(`%c${message}`, 'background-color: black;color:white;border-radius:15px');
  if (typeof document !== 'undefined' && typeof CustomEvent !== 'undefined') {
    document.dispatchEvent(
      new CustomEvent(logKey, {
        detail: {
          message,
          type,
          data,
        },
      }),
    );
  }
}

logger.key = logKey;

/*
pattern.mjs - Core pattern representation for strudel
Copyright (C) 2022 Strudel contributors - see <https://github.com/tidalcycles/strudel/blob/main/packages/core/pattern.mjs>
This program is free software: you can redistribute it and/or modify it under the terms of the GNU Affero General Public License as published by the Free Software Foundation, either version 3 of the License, or (at your option) any later version. This program is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU Affero General Public License for more details. You should have received a copy of the GNU Affero General Public License along with this program.  If not, see <https://www.gnu.org/licenses/>.
*/

let stringParser;

// parser is expected to turn a string into a pattern
// if set, the reify function will parse all strings with it
// intended to use with mini to automatically interpret all strings as mini notation
const setStringParser = (parser) => (stringParser = parser);

/** @class Class representing a pattern. */
class Pattern$1 {
  _Pattern = true; // this property is used to detect if a pattern that fails instanceof Pattern is an instance of another Pattern
  /**
   * Create a pattern. As an end user, you will most likely not create a Pattern directly.
   *
   * @param {function} query - The function that maps a {@link State} to an array of {@link Hap}.
   */
  constructor(query) {
    this.query = query;
  }

  //////////////////////////////////////////////////////////////////////
  // Haskell-style functor, applicative and monadic operations

  /**
   * Returns a new pattern, with the function applied to the value of
   * each hap. It has the alias {@link Pattern#fmap}.
   * @param {Function} func
   * @returns Pattern
   */
  withValue(func) {
    return new Pattern$1((state) => this.query(state).map((hap) => hap.withValue(func)));
  }

  /**
   * see {@link Pattern#withValue}
   */
  fmap(func) {
    return this.withValue(func);
  }

  appWhole(whole_func, pat_val) {
    // Assumes 'this' is a pattern of functions, and given a function to
    // resolve wholes, applies a given pattern of values to that
    // pattern of functions.
    const pat_func = this;
    const query = function (state) {
      const hap_funcs = pat_func.query(state);
      const hap_vals = pat_val.query(state);
      const apply = function (hap_func, hap_val) {
        const s = hap_func.part.intersection(hap_val.part);
        if (s == undefined) {
          return undefined;
        }
        return new Hap(
          whole_func(hap_func.whole, hap_val.whole),
          s,
          hap_func.value(hap_val.value),
          hap_val.combineContext(hap_func),
        );
      };
      return flatten(
        hap_funcs.map((hap_func) => removeUndefineds(hap_vals.map((hap_val) => apply(hap_func, hap_val)))),
      );
    };
    return new Pattern$1(query);
  }

  /**
   * When this method is called on a pattern of functions, it matches its haps
   * with those in the given pattern of values.  A new pattern is returned, with
   * each matching value applied to the corresponding function.
   *
   * In this `_appBoth` variant, where timespans of the function and value haps
   * are not the same but do intersect, the resulting hap has a timespan of the
   * intersection. This applies to both the part and the whole timespan.
   * @param {Pattern} pat_val
   * @returns Pattern
   */
  appBoth(pat_val) {
    // Tidal's <*>
    const whole_func = function (span_a, span_b) {
      if (span_a == undefined || span_b == undefined) {
        return undefined;
      }
      return span_a.intersection_e(span_b);
    };
    return this.appWhole(whole_func, pat_val);
  }

  /**
   * As with {@link Pattern#appBoth}, but the `whole` timespan is not the intersection,
   * but the timespan from the function of patterns that this method is called
   * on. In practice, this means that the pattern structure, including onsets,
   * are preserved from the pattern of functions (often referred to as the left
   * hand or inner pattern).
   * @param {Pattern} pat_val
   * @returns Pattern
   */
  appLeft(pat_val) {
    const pat_func = this;

    const query = function (state) {
      const haps = [];
      for (const hap_func of pat_func.query(state)) {
        const hap_vals = pat_val.query(state.setSpan(hap_func.wholeOrPart()));
        for (const hap_val of hap_vals) {
          const new_whole = hap_func.whole;
          const new_part = hap_func.part.intersection(hap_val.part);
          if (new_part) {
            const new_value = hap_func.value(hap_val.value);
            const new_context = hap_val.combineContext(hap_func);
            const hap = new Hap(new_whole, new_part, new_value, new_context);
            haps.push(hap);
          }
        }
      }
      return haps;
    };
    return new Pattern$1(query);
  }

  /**
   * As with {@link Pattern#appLeft}, but `whole` timespans are instead taken from the
   * pattern of values, i.e. structure is preserved from the right hand/outer
   * pattern.
   * @param {Pattern} pat_val
   * @returns Pattern
   */
  appRight(pat_val) {
    const pat_func = this;

    const query = function (state) {
      const haps = [];
      for (const hap_val of pat_val.query(state)) {
        const hap_funcs = pat_func.query(state.setSpan(hap_val.wholeOrPart()));
        for (const hap_func of hap_funcs) {
          const new_whole = hap_val.whole;
          const new_part = hap_func.part.intersection(hap_val.part);
          if (new_part) {
            const new_value = hap_func.value(hap_val.value);
            const new_context = hap_val.combineContext(hap_func);
            const hap = new Hap(new_whole, new_part, new_value, new_context);
            haps.push(hap);
          }
        }
      }
      return haps;
    };
    return new Pattern$1(query);
  }

  bindWhole(choose_whole, func) {
    const pat_val = this;
    const query = function (state) {
      const withWhole = function (a, b) {
        return new Hap(
          choose_whole(a.whole, b.whole),
          b.part,
          b.value,
          Object.assign({}, a.context, b.context, {
            locations: (a.context.locations || []).concat(b.context.locations || []),
          }),
        );
      };
      const match = function (a) {
        return func(a.value)
          .query(state.setSpan(a.part))
          .map((b) => withWhole(a, b));
      };
      return flatten(pat_val.query(state).map((a) => match(a)));
    };
    return new Pattern$1(query);
  }

  bind(func) {
    const whole_func = function (a, b) {
      if (a == undefined || b == undefined) {
        return undefined;
      }
      return a.intersection_e(b);
    };
    return this.bindWhole(whole_func, func);
  }

  join() {
    // Flattens a pattern of patterns into a pattern, where wholes are
    // the intersection of matched inner and outer haps.
    return this.bind(id$1);
  }

  outerBind(func) {
    return this.bindWhole((a) => a, func);
  }

  outerJoin() {
    // Flattens a pattern of patterns into a pattern, where wholes are
    // taken from inner haps.
    return this.outerBind(id$1);
  }

  innerBind(func) {
    return this.bindWhole((_, b) => b, func);
  }

  innerJoin() {
    // Flattens a pattern of patterns into a pattern, where wholes are
    // taken from inner haps.
    return this.innerBind(id$1);
  }

  // Flatterns patterns of patterns, by retriggering/resetting inner patterns at onsets of outer pattern haps
  trigJoin(cycleZero = false) {
    const pat_of_pats = this;
    return new Pattern$1((state) => {
      return (
        pat_of_pats
          // drop continuous haps from the outer pattern.
          .discreteOnly()
          .query(state)
          .map((outer_hap) => {
            return (
              outer_hap.value
                // trig = align the inner pattern cycle start to outer pattern haps
                // Trigzero = align the inner pattern cycle zero to outer pattern haps
                .late(cycleZero ? outer_hap.whole.begin : outer_hap.whole.begin.cyclePos())
                .query(state)
                .map((inner_hap) =>
                  new Hap(
                    // Supports continuous haps in the inner pattern
                    inner_hap.whole ? inner_hap.whole.intersection(outer_hap.whole) : undefined,
                    inner_hap.part.intersection(outer_hap.part),
                    inner_hap.value,
                  ).setContext(outer_hap.combineContext(inner_hap)),
                )
                // Drop haps that didn't intersect
                .filter((hap) => hap.part)
            );
          })
          .flat()
      );
    });
  }

  trigzeroJoin() {
    return this.trigJoin(true);
  }

  // Like the other joins above, joins a pattern of patterns of values, into a flatter
  // pattern of values. In this case it takes whole cycles of the inner pattern to fit each event
  // in the outer pattern.
  squeezeJoin() {
    // A pattern of patterns, which we call the 'outer' pattern, with patterns
    // as values which we call the 'inner' patterns.
    const pat_of_pats = this;
    function query(state) {
      // Get the events with the inner patterns. Ignore continuous events (without 'wholes')
      const haps = pat_of_pats.discreteOnly().query(state);
      // A function to map over the events from the outer pattern.
      function flatHap(outerHap) {
        // Get the inner pattern, slowed and shifted so that the 'whole'
        // timespan of the outer event corresponds to the first cycle of the
        // inner event
        const inner_pat = outerHap.value._focusSpan(outerHap.wholeOrPart());
        // Get the inner events, from the timespan of the outer event's part
        const innerHaps = inner_pat.query(state.setSpan(outerHap.part));
        // A function to map over the inner events, to combine them with the
        // outer event
        function munge(outer, inner) {
          let whole = undefined;
          if (inner.whole && outer.whole) {
            whole = inner.whole.intersection(outer.whole);
            if (!whole) {
              // The wholes are present, but don't intersect
              return undefined;
            }
          }
          const part = inner.part.intersection(outer.part);
          if (!part) {
            // The parts don't intersect
            return undefined;
          }
          const context = inner.combineContext(outer);
          return new Hap(whole, part, inner.value, context);
        }
        return innerHaps.map((innerHap) => munge(outerHap, innerHap));
      }
      const result = flatten(haps.map(flatHap));
      // remove undefineds
      return result.filter((x) => x);
    }
    return new Pattern$1(query);
  }

  squeezeBind(func) {
    return this.fmap(func).squeezeJoin();
  }

  //////////////////////////////////////////////////////////////////////
  // Utility methods mainly for internal use

  /**
   * Query haps inside the given time span.
   *
   * @param {Fraction | number} begin from time
   * @param {Fraction | number} end to time
   * @returns Hap[]
   * @example
   * const pattern = sequence('a', ['b', 'c'])
   * const haps = pattern.queryArc(0, 1)
   * console.log(haps)
   * silence
   */
  queryArc(begin, end) {
    return this.query(new State(new TimeSpan(begin, end)));
  }

  /**
   * Returns a new pattern, with queries split at cycle boundaries. This makes
   * some calculations easier to express, as all haps are then constrained to
   * happen within a cycle.
   * @returns Pattern
   */
  splitQueries() {
    const pat = this;
    const q = (state) => {
      return flatten(state.span.spanCycles.map((subspan) => pat.query(state.setSpan(subspan))));
    };
    return new Pattern$1(q);
  }

  /**
   * Returns a new pattern, where the given function is applied to the query
   * timespan before passing it to the original pattern.
   * @param {Function} func the function to apply
   * @returns Pattern
   */
  withQuerySpan(func) {
    return new Pattern$1((state) => this.query(state.withSpan(func)));
  }

  withQuerySpanMaybe(func) {
    const pat = this;
    return new Pattern$1((state) => {
      const newState = state.withSpan(func);
      if (!newState.span) {
        return [];
      }
      return pat.query(newState);
    });
  }

  /**
   * As with {@link Pattern#withQuerySpan}, but the function is applied to both the
   * begin and end time of the query timespan.
   * @param {Function} func the function to apply
   * @returns Pattern
   */
  withQueryTime(func) {
    return new Pattern$1((state) => this.query(state.withSpan((span) => span.withTime(func))));
  }

  /**
   * Similar to {@link Pattern#withQuerySpan}, but the function is applied to the timespans
   * of all haps returned by pattern queries (both `part` timespans, and where
   * present, `whole` timespans).
   * @param {Function} func
   * @returns Pattern
   */
  withHapSpan(func) {
    return new Pattern$1((state) => this.query(state).map((hap) => hap.withSpan(func)));
  }

  /**
   * As with {@link Pattern#withHapSpan}, but the function is applied to both the
   * begin and end time of the hap timespans.
   * @param {Function} func the function to apply
   * @returns Pattern
   */
  withHapTime(func) {
    return this.withHapSpan((span) => span.withTime(func));
  }

  /**
   * Returns a new pattern with the given function applied to the list of haps returned by every query.
   * @param {Function} func
   * @returns Pattern
   */
  withHaps(func) {
    return new Pattern$1((state) => func(this.query(state)));
  }

  /**
   * As with {@link Pattern#withHaps}, but applies the function to every hap, rather than every list of haps.
   * @param {Function} func
   * @returns Pattern
   */
  withHap(func) {
    return this.withHaps((haps) => haps.map(func));
  }

  /**
   * Returns a new pattern with the context field set to every hap set to the given value.
   * @param {*} context
   * @returns Pattern
   */
  setContext(context) {
    return this.withHap((hap) => hap.setContext(context));
  }

  /**
   * Returns a new pattern with the given function applied to the context field of every hap.
   * @param {Function} func
   * @returns Pattern
   */
  withContext(func) {
    return this.withHap((hap) => hap.setContext(func(hap.context)));
  }

  /**
   * Returns a new pattern with the context field of every hap set to an empty object.
   * @returns Pattern
   */
  stripContext() {
    return this.withHap((hap) => hap.setContext({}));
  }

  /**
   * Returns a new pattern with the given location information added to the
   * context of every hap.
   * @param {Number} start
   * @param {Number} end
   * @returns Pattern
   */
  withLocation(start, end) {
    const location = {
      start: { line: start[0], column: start[1], offset: start[2] },
      end: { line: end[0], column: end[1], offset: end[2] },
    };
    return this.withContext((context) => {
      const locations = (context.locations || []).concat([location]);
      return { ...context, locations };
    });
  }

  withMiniLocation(start, end) {
    const offset = {
      start: { line: start[0], column: start[1], offset: start[2] },
      end: { line: end[0], column: end[1], offset: end[2] },
    };
    return this.withContext((context) => {
      let locations = context.locations || [];
      locations = locations.map(({ start, end }) => {
        const colOffset = start.line === 1 ? offset.start.column : 0;
        return {
          start: {
            ...start,
            line: start.line - 1 + (offset.start.line - 1) + 1,
            column: start.column - 1 + colOffset,
          },
          end: {
            ...end,
            line: end.line - 1 + (offset.start.line - 1) + 1,
            column: end.column - 1 + colOffset,
          },
        };
      });
      return { ...context, locations };
    });
  }

  /**
   * Returns a new Pattern, which only returns haps that meet the given test.
   * @param {Function} hap_test - a function which returns false for haps to be removed from the pattern
   * @returns Pattern
   */
  filterHaps(hap_test) {
    return new Pattern$1((state) => this.query(state).filter(hap_test));
  }

  /**
   * As with {@link Pattern#filterHaps}, but the function is applied to values
   * inside haps.
   * @param {Function} value_test
   * @returns Pattern
   */
  filterValues(value_test) {
    return new Pattern$1((state) => this.query(state).filter((hap) => value_test(hap.value)));
  }

  /**
   * Returns a new pattern, with haps containing undefined values removed from
   * query results.
   * @returns Pattern
   */
  removeUndefineds() {
    return this.filterValues((val) => val != undefined);
  }

  /**
   * Returns a new pattern, with all haps without onsets filtered out. A hap
   * with an onset is one with a `whole` timespan that begins at the same time
   * as its `part` timespan.
   * @returns Pattern
   */
  onsetsOnly() {
    // Returns a new pattern that will only return haps where the start
    // of the 'whole' timespan matches the start of the 'part'
    // timespan, i.e. the haps that include their 'onset'.
    return this.filterHaps((hap) => hap.hasOnset());
  }

  /**
   * Returns a new pattern, with 'continuous' haps (those without 'whole'
   * timespans) removed from query results.
   * @returns Pattern
   */
  discreteOnly() {
    // removes continuous haps that don't have a 'whole' timespan
    return this.filterHaps((hap) => hap.whole);
  }

  /**
   * Combines adjacent haps with the same value and whole.  Only
   * intended for use in tests.
   */
  defragmentHaps() {
    // remove continuous haps
    const pat = this.discreteOnly();

    return pat.withHaps((haps) => {
      const result = [];
      for (var i = 0; i < haps.length; ++i) {
        var searching = true;
        var a = haps[i];
        while (searching) {
          const a_value = JSON.stringify(haps[i].value);
          var found = false;

          for (var j = i + 1; j < haps.length; j++) {
            const b = haps[j];

            if (a.whole.equals(b.whole)) {
              if (a.part.begin.eq(b.part.end)) {
                if (a_value === JSON.stringify(b.value)) {
                  // eat the matching hap into 'a'
                  a = new Hap(a.whole, new TimeSpan(b.part.begin, a.part.end), a.value);
                  haps.splice(j, 1);
                  // restart the search
                  found = true;
                  break;
                }
              } else if (b.part.begin.eq(a.part.end)) {
                if (a_value == JSON.stringify(b.value)) {
                  // eat the matching hap into 'a'
                  a = new Hap(a.whole, new TimeSpan(a.part.begin, b.part.end), a.value);
                  haps.splice(j, 1);
                  // restart the search
                  found = true;
                  break;
                }
              }
            }
          }

          searching = found;
        }
        result.push(a);
      }
      return result;
    });
  }

  /**
   * Queries the pattern for the first cycle, returning Haps. Mainly of use when
   * debugging a pattern.
   * @param {Boolean} with_context - set to true, otherwise the context field
   * will be stripped from the resulting haps.
   * @returns [Hap]
   */
  firstCycle(with_context = false) {
    var self = this;
    if (!with_context) {
      self = self.stripContext();
    }
    return self.query(new State(new TimeSpan(fraction(0), fraction(1))));
  }

  /**
   * Accessor for a list of values returned by querying the first cycle.
   */
  get firstCycleValues() {
    return this.firstCycle().map((hap) => hap.value);
  }

  /**
   * More human-readable version of the {@link Pattern#firstCycleValues} accessor.
   */
  get showFirstCycle() {
    return this.firstCycle().map(
      (hap) => `${hap.value}: ${hap.whole.begin.toFraction()} - ${hap.whole.end.toFraction()}`,
    );
  }

  /**
   * Returns a new pattern, which returns haps sorted in temporal order. Mainly
   * of use when comparing two patterns for equality, in tests.
   * @returns Pattern
   */
  sortHapsByPart() {
    return this.withHaps((haps) =>
      haps.sort((a, b) =>
        a.part.begin
          .sub(b.part.begin)
          .or(a.part.end.sub(b.part.end))
          .or(a.whole.begin.sub(b.whole.begin).or(a.whole.end.sub(b.whole.end))),
      ),
    );
  }

  asNumber() {
    return this.fmap(parseNumeral);
  }

  //////////////////////////////////////////////////////////////////////
  // Operators - see 'make composers' later..

  _opIn(other, func) {
    return this.fmap(func).appLeft(reify(other));
  }
  _opOut(other, func) {
    return this.fmap(func).appRight(reify(other));
  }
  _opMix(other, func) {
    return this.fmap(func).appBoth(reify(other));
  }
  _opSqueeze(other, func) {
    const otherPat = reify(other);
    return this.fmap((a) => otherPat.fmap((b) => func(a)(b))).squeezeJoin();
  }
  _opSqueezeOut(other, func) {
    const thisPat = this;
    const otherPat = reify(other);
    return otherPat.fmap((a) => thisPat.fmap((b) => func(b)(a))).squeezeJoin();
  }
  _opTrig(other, func) {
    const otherPat = reify(other);
    return otherPat.fmap((b) => this.fmap((a) => func(a)(b))).trigJoin();
  }
  _opTrigzero(other, func) {
    const otherPat = reify(other);
    return otherPat.fmap((b) => this.fmap((a) => func(a)(b))).trigzeroJoin();
  }

  //////////////////////////////////////////////////////////////////////
  // End-user methods.
  // Those beginning with an underscore (_) are 'patternified',
  // i.e. versions are created without the underscore, that are
  // magically transformed to accept patterns for all their arguments.

  //////////////////////////////////////////////////////////////////////
  // Methods without corresponding toplevel functions

  /**
   * Layers the result of the given function(s). Like {@link Pattern.superimpose}, but without the original pattern:
   * @name layer
   * @memberof Pattern
   * @returns Pattern
   * @example
   * "<0 2 4 6 ~ 4 ~ 2 0!3 ~!5>*4"
   *   .layer(x=>x.add("0,2"))
   *   .scale('C minor').note()
   */
  layer(...funcs) {
    return stack(...funcs.map((func) => func(this)));
  }

  /**
   * Superimposes the result of the given function(s) on top of the original pattern:
   * @name superimpose
   * @memberof Pattern
   * @returns Pattern
   * @example
   * "<0 2 4 6 ~ 4 ~ 2 0!3 ~!5>*4"
   *   .superimpose(x=>x.add(2))
   *   .scale('C minor').note()
   */
  superimpose(...funcs) {
    return this.stack(...funcs.map((func) => func(this)));
  }

  //////////////////////////////////////////////////////////////////////
  // Multi-pattern functions

  /**
   * Stacks the given pattern(s) to the current pattern.
   * @name stack
   * @memberof Pattern
   * @example
   * s("hh*2").stack(
   *   n("c2(3,8)")
   * )
   */
  stack(...pats) {
    return stack(this, ...pats);
  }

  sequence(...pats) {
    return sequence(this, ...pats);
  }

  /**
   * Appends the given pattern(s) to the current pattern. Synonyms: .sequence .fastcat
   * @name seq
   * @memberof Pattern
   * @example
   * s("hh*2").seq(
   *   n("c2(3,8)")
   * )
   */
  seq(...pats) {
    return sequence(this, ...pats);
  }

  /**
   * Appends the given pattern(s) to the next cycle. Synonym: .slowcat
   * @name cat
   * @memberof Pattern
   * @example
   * s("hh*2").cat(
   *   n("c2(3,8)")
   * )
   */
  cat(...pats) {
    return cat(this, ...pats);
  }

  fastcat(...pats) {
    return fastcat(this, ...pats);
  }

  slowcat(...pats) {
    return slowcat(this, ...pats);
  }

  //////////////////////////////////////////////////////////////////////
  // Context methods - ones that deal with metadata

  onTrigger(onTrigger, dominant = true) {
    return this.withHap((hap) =>
      hap.setContext({
        ...hap.context,
        onTrigger: (...args) => {
          if (!dominant && hap.context.onTrigger) {
            hap.context.onTrigger(...args);
          }
          onTrigger(...args);
        },
        // we need this to know later if the default trigger should still fire
        dominantTrigger: dominant,
      }),
    );
  }

  log(func = (_, hap) => `[hap] ${hap.showWhole(true)}`) {
    return this.onTrigger((...args) => logger(func(...args)), false);
  }

  logValues(func = id$1) {
    return this.log((_, hap) => func(hap.value));
  }

  //////////////////////////////////////////////////////////////////////
  // Visualisation

  drawLine() {
    console.log(drawLine(this));
    return this;
  }
}

//////////////////////////////////////////////////////////////////////
// functions relating to chords/patterns of lists

// returns Array<Hap[]> where each list of haps satisfies eq
function groupHapsBy(eq, haps) {
  let groups = [];
  haps.forEach((hap) => {
    const match = groups.findIndex(([other]) => eq(hap, other));
    if (match === -1) {
      groups.push([hap]);
    } else {
      groups[match].push(hap);
    }
  });
  return groups;
}

// congruent haps = haps with equal spans
const congruent = (a, b) => a.spanEquals(b);
// Pattern<Hap<T>> -> Pattern<Hap<T[]>>
// returned pattern contains arrays of congruent haps
Pattern$1.prototype.collect = function () {
  return this.withHaps((haps) =>
    groupHapsBy(congruent, haps).map((_haps) => new Hap(_haps[0].whole, _haps[0].part, _haps, {})),
  );
};

// applies func to each array of congruent haps
Pattern$1.prototype.arpWith = function (func) {
  return this.collect()
    .fmap((v) => reify(func(v)))
    .squeezeJoin()
    .withHap((h) => new Hap(h.whole, h.part, h.value.value, h.combineContext(h.value)));
};

// applies pattern of indices to each array of congruent haps
Pattern$1.prototype.arp = function (pat) {
  return this.arpWith((haps) => pat.fmap((i) => haps[i % haps.length]));
};

//////////////////////////////////////////////////////////////////////
// compose matrix functions

// TODO - adopt value.mjs fully..
function _composeOp(a, b, func) {
  function _nonFunctionObject(x) {
    return x instanceof Object && !(x instanceof Function);
  }
  if (_nonFunctionObject(a) || _nonFunctionObject(b)) {
    if (!_nonFunctionObject(a)) {
      a = { value: a };
    }
    if (!_nonFunctionObject(b)) {
      b = { value: b };
    }
    return unionWithObj(a, b, func);
  }
  return func(a, b);
}

// Make composers
(function () {
  // pattern composers
  const composers = {
    set: [(a, b) => b],
    keep: [(a) => a],
    keepif: [(a, b) => (b ? a : undefined)],

    // numerical functions
    /**
     *
     * Assumes a pattern of numbers. Adds the given number to each item in the pattern.
     * @name add
     * @memberof Pattern
     * @example
     * // Here, the triad 0, 2, 4 is shifted by different amounts
     * "0 2 4".add("<0 3 4 0>").scale('C major').note()
     * // Without add, the equivalent would be:
     * // "<[0 2 4] [3 5 7] [4 6 8] [0 2 4]>".scale('C major').note()
     * @example
     * // You can also use add with notes:
     * "c3 e3 g3".add("<0 5 7 0>").note()
     * // Behind the scenes, the notes are converted to midi numbers:
     * // "48 52 55".add("<0 5 7 0>").note()
     */
    add: [numeralArgs((a, b) => a + b)], // support string concatenation
    /**
     *
     * Like add, but the given numbers are subtracted.
     * @name sub
     * @memberof Pattern
     * @example
     * "0 2 4".sub("<0 1 2 3>").scale('C4 minor').note()
     * // See add for more information.
     */
    sub: [numeralArgs((a, b) => a - b)],
    /**
     *
     * Multiplies each number by the given factor.
     * @name mul
     * @memberof Pattern
     * @example
     * "1 1.5 [1.66, <2 2.33>]".mul(150).freq()
     */
    mul: [numeralArgs((a, b) => a * b)],
    /**
     *
     * Divides each number by the given factor.
     * @name div
     * @memberof Pattern
     */
    div: [numeralArgs((a, b) => a / b)],
    mod: [numeralArgs(_mod)],
    pow: [numeralArgs(Math.pow)],
    band: [numeralArgs((a, b) => a & b)],
    bor: [numeralArgs((a, b) => a | b)],
    bxor: [numeralArgs((a, b) => a ^ b)],
    blshift: [numeralArgs((a, b) => a << b)],
    brshift: [numeralArgs((a, b) => a >> b)],

    // TODO - force numerical comparison if both look like numbers?
    lt: [(a, b) => a < b],
    gt: [(a, b) => a > b],
    lte: [(a, b) => a <= b],
    gte: [(a, b) => a >= b],
    eq: [(a, b) => a == b],
    eqt: [(a, b) => a === b],
    ne: [(a, b) => a != b],
    net: [(a, b) => a !== b],
    and: [(a, b) => a && b],
    or: [(a, b) => a || b],

    //  bitwise ops
    func: [(a, b) => b(a)],
  };

  const hows = ['In', 'Out', 'Mix', 'Squeeze', 'SqueezeOut', 'Trig', 'Trigzero'];

  // generate methods to do what and how
  for (const [what, [op, preprocess]] of Object.entries(composers)) {
    // make plain version, e.g. pat._add(value) adds that plain value
    // to all the values in pat
    Pattern$1.prototype['_' + what] = function (value) {
      return this.fmap((x) => op(x, value));
    };

    // make patternified monster version
    Object.defineProperty(Pattern$1.prototype, what, {
      // a getter that returns a function, so 'pat' can be
      // accessed by closures that are methods of that function..
      get: function () {
        const pat = this;

        // wrap the 'in' function as default behaviour
        const wrapper = (...other) => pat[what]['in'](...other);

        // add methods to that function for each behaviour
        for (const how of hows) {
          wrapper[how.toLowerCase()] = function (...other) {
            var howpat = pat;
            other = sequence(other);
            if (preprocess) {
              howpat = preprocess(howpat);
              other = preprocess(other);
            }
            var result;
            // hack to remove undefs when doing 'keepif'
            if (what === 'keepif') {
              // avoid union, as we want to throw away the value of 'b' completely
              result = howpat['_op' + how](other, (a) => (b) => op(a, b));
              result = result.removeUndefineds();
            } else {
              result = howpat['_op' + how](other, (a) => (b) => _composeOp(a, b, op));
            }
            return result;
          };
        }
        wrapper.squeezein = wrapper.squeeze;

        return wrapper;
      },
    });

    // Default op to 'set', e.g. pat.squeeze(pat2) = pat.set.squeeze(pat2)
    for (const how of hows) {
      Pattern$1.prototype[how.toLowerCase()] = function (...args) {
        return this.set[how.toLowerCase()](args);
      };
    }
  }

  // binary composers
  /**
   * Applies the given structure to the pattern:
   *
   * @name struct
   * @memberof Pattern
   * @returns Pattern
   * @example
   * note("c3,eb3,g3")
   *   .struct("x ~ x ~ ~ x ~ x ~ ~ ~ x ~ x ~ ~")
   *   .slow(4)
   */
  Pattern$1.prototype.struct = function (...args) {
    return this.keepif.out(...args);
  };
  Pattern$1.prototype.structAll = function (...args) {
    return this.keep.out(...args);
  };
  Pattern$1.prototype.mask = function (...args) {
    return this.keepif.in(...args);
  };
  Pattern$1.prototype.maskAll = function (...args) {
    return this.keep.in(...args);
  };
  Pattern$1.prototype.reset = function (...args) {
    return this.keepif.trig(...args);
  };
  Pattern$1.prototype.resetAll = function (...args) {
    return this.keep.trig(...args);
  };
  Pattern$1.prototype.restart = function (...args) {
    return this.keepif.trigzero(...args);
  };
  Pattern$1.prototype.restartAll = function (...args) {
    return this.keep.trigzero(...args);
  };
})();

// aliases
const polyrhythm = stack;
const pr = stack;

// methods that create patterns, which are added to patternified Pattern methods
Pattern$1.prototype.factories = {
  pure,
  stack,
  slowcat,
  fastcat,
  cat,
  timeCat,
  sequence,
  seq,
  polymeter,
  pm,
  polyrhythm,
  pr,
};
// the magic happens in Pattern constructor. Keeping this in prototype enables adding methods from the outside (e.g. see tonal.ts)

// Elemental patterns

// Nothing
const silence = new Pattern$1(() => []);

/** A discrete value that repeats once per cycle.
 *
 * @returns {Pattern}
 * @example
 * pure('e4') // "e4"
 */
function pure(value) {
  function query(state) {
    return state.span.spanCycles.map((subspan) => new Hap(fraction(subspan.begin).wholeCycle(), subspan, value));
  }
  return new Pattern$1(query);
}

function isPattern(thing) {
  // thing?.constructor?.name !== 'Pattern' // <- this will fail when code is mangled
  const is = thing instanceof Pattern$1 || thing?._Pattern;
  // TODO: find out how to check wrong core dependency. below will never work !thing === 'undefined'
  // wrapping it in (..) will result other checks to log that warning (e.g. isPattern('kalimba'))
  /* if (!thing instanceof Pattern) {
    console.warn(
      `Found Pattern that fails "instanceof Pattern" check.
      This may happen if you are using multiple versions of @strudel.cycles/core. 
      Please check by running "npm ls @strudel.cycles/core".`,
    );
    console.log(thing);
  } */
  return is;
}

function reify(thing) {
  // Turns something into a pattern, unless it's already a pattern
  if (isPattern(thing)) {
    return thing;
  }
  if (stringParser && typeof thing === 'string') {
    return stringParser(thing);
  }
  return pure(thing);
}

/** The given items are played at the same time at the same length.
 *
 * @return {Pattern}
 * @example
 * stack(g3, b3, [e4, d4]).note() // "g3,b3,[e4,d4]".note()
 */
function stack(...pats) {
  // Array test here is to avoid infinite recursions..
  pats = pats.map((pat) => (Array.isArray(pat) ? sequence(...pat) : reify(pat)));
  const query = (state) => flatten(pats.map((pat) => pat.query(state)));
  return new Pattern$1(query);
}

/** Concatenation: combines a list of patterns, switching between them successively, one per cycle:
 *
 * synonyms: {@link cat}
 *
 * @return {Pattern}
 * @example
 * slowcat(e5, b4, [d5, c5])
 *
 */
function slowcat(...pats) {
  // Array test here is to avoid infinite recursions..
  pats = pats.map((pat) => (Array.isArray(pat) ? sequence(...pat) : reify(pat)));

  const query = function (state) {
    const span = state.span;
    const pat_n = _mod(span.begin.sam(), pats.length);
    const pat = pats[pat_n];
    if (!pat) {
      // pat_n can be negative, if the span is in the past..
      return [];
    }
    // A bit of maths to make sure that cycles from constituent patterns aren't skipped.
    // For example if three patterns are slowcat-ed, the fourth cycle of the result should
    // be the second (rather than fourth) cycle from the first pattern.
    const offset = span.begin.floor().sub(span.begin.div(pats.length).floor());
    return pat.withHapTime((t) => t.add(offset)).query(state.setSpan(span.withTime((t) => t.sub(offset))));
  };
  return new Pattern$1(query).splitQueries();
}

/** Concatenation: combines a list of patterns, switching between them successively, one per cycle. Unlike slowcat, this version will skip cycles.
 * @param {...any} items - The items to concatenate
 * @return {Pattern}
 */
function slowcatPrime(...pats) {
  pats = pats.map(reify);
  const query = function (state) {
    const pat_n = Math.floor(state.span.begin) % pats.length;
    const pat = pats[pat_n]; // can be undefined for same cases e.g. /#cHVyZSg0MikKICAuZXZlcnkoMyxhZGQoNykpCiAgLmxhdGUoLjUp
    return pat?.query(state) || [];
  };
  return new Pattern$1(query).splitQueries();
}

/** Concatenation: as with {@link slowcat}, but squashes a cycle from each pattern into one cycle
 *
 * Synonyms: {@link Pattern.seq}, {@link Pattern.sequence}
 *
 * @param {...any} items - The items to concatenate
 * @return {Pattern}
 * @example
 * fastcat(e5, b4, [d5, c5])
 * // sequence(e5, b4, [d5, c5])
 * // seq(e5, b4, [d5, c5])
 */
function fastcat(...pats) {
  return slowcat(...pats)._fast(pats.length);
}

/** The given items are con**cat**enated, where each one takes one cycle. Synonym: slowcat
 *
 * @param {...any} items - The items to concatenate
 * @return {Pattern}
 * @example
 * cat(e5, b4, [d5, c5]).note() // "<e5 b4 [d5 c5]>".note()
 *
 */
function cat(...pats) {
  return slowcat(...pats);
}

/** Like {@link Pattern.seq}, but each step has a length, relative to the whole.
 * @return {Pattern}
 * @example
 * timeCat([3,e3],[1, g3]).note() // "e3@3 g3".note()
 */
function timeCat(...timepats) {
  const total = timepats.map((a) => a[0]).reduce((a, b) => a.add(b), fraction(0));
  let begin = fraction(0);
  const pats = [];
  for (const [time, pat] of timepats) {
    const end = begin.add(time);
    pats.push(reify(pat)._compress(begin.div(total), end.div(total)));
    begin = end;
  }
  return stack(...pats);
}

/** See {@link fastcat} */
function sequence(...pats) {
  return fastcat(...pats);
}

/** Like **cat**, but the items are crammed into one cycle. Synonyms: fastcat, sequence
 * @example
 * seq(e5, b4, [d5, c5]).note() // "e5 b4 [d5 c5]".note()
 *
 */
function seq(...pats) {
  return fastcat(...pats);
}

function _sequenceCount(x) {
  if (Array.isArray(x)) {
    if (x.length == 0) {
      return [silence, 0];
    }
    if (x.length == 1) {
      return _sequenceCount(x[0]);
    }
    return [fastcat(...x.map((a) => _sequenceCount(a)[0])), x.length];
  }
  return [reify(x), 1];
}

function polymeterSteps(steps, ...args) {
  const seqs = args.map((a) => _sequenceCount(a));
  if (seqs.length == 0) {
    return silence;
  }
  if (steps == 0) {
    steps = seqs[0][1];
  }
  const pats = [];
  for (const seq of seqs) {
    if (seq[1] == 0) {
      continue;
    }
    if (steps == seq[1]) {
      pats.push(seq[0]);
    } else {
      pats.push(seq[0]._fast(fraction(steps).div(fraction(seq[1]))));
    }
  }
  return stack(...pats);
}

function polymeter(...args) {
  return polymeterSteps(0, ...args);
}

// alias
function pm(...args) {
  polymeter(...args);
}

const mask = curry((a, b) => reify(b).mask(a));
const struct = curry((a, b) => reify(b).struct(a));
const superimpose = curry((a, b) => reify(b).superimpose(...a));

// operators
const set = curry((a, b) => reify(b).set(a));
const keep = curry((a, b) => reify(b).keep(a));
const keepif = curry((a, b) => reify(b).keepif(a));
const add = curry((a, b) => reify(b).add(a));
const sub = curry((a, b) => reify(b).sub(a));
const mul = curry((a, b) => reify(b).mul(a));
const div = curry((a, b) => reify(b).div(a));
const mod = curry((a, b) => reify(b).mod(a));
const pow = curry((a, b) => reify(b).pow(a));
const band = curry((a, b) => reify(b).band(a));
const bor = curry((a, b) => reify(b).bor(a));
const bxor = curry((a, b) => reify(b).bxor(a));
const blshift = curry((a, b) => reify(b).blshift(a));
const brshift = curry((a, b) => reify(b).brshift(a));
const lt = curry((a, b) => reify(b).lt(a));
const gt = curry((a, b) => reify(b).gt(a));
const lte = curry((a, b) => reify(b).lte(a));
const gte = curry((a, b) => reify(b).gte(a));
const eq = curry((a, b) => reify(b).eq(a));
const eqt = curry((a, b) => reify(b).eqt(a));
const ne = curry((a, b) => reify(b).ne(a));
const net = curry((a, b) => reify(b).net(a));
const and = curry((a, b) => reify(b).and(a));
const or = curry((a, b) => reify(b).or(a));
const func = curry((a, b) => reify(b).func(a));

function register(name, func) {
  if (Array.isArray(name)) {
    const result = {};
    for (const name_item of name) {
      result[name_item] = register(name_item, func);
    }
    return result;
  }
  const arity = func.length;
  var pfunc; // the patternified function

  pfunc = function (...args) {
    args = args.map(reify);
    const pat = args[args.length - 1];
    if (arity === 1) {
      return func(pat);
    }
    const [left, ...right] = args.slice(0, -1);
    let mapFn = (...args) => {
      // make sure to call func with the correct argument count
      // args.length is expected to be <= arity-1
      // so we set undefined args explicitly undefined
      Array(arity - 1)
        .fill()
        .map((_, i) => args[i] ?? undefined);
      return func(...args, pat);
    };
    mapFn = curry(mapFn, null, arity - 1);
    return right.reduce((acc, p) => acc.appLeft(p), left.fmap(mapFn)).innerJoin();
  };

  Pattern$1.prototype[name] = function (...args) {
    args = args.map(reify);
    // For methods that take a single argument (plus 'this'), allow
    // multiple arguments but sequence them
    if (arity === 2 && args.length !== 1) {
      args = [sequence(...args)];
    } else if (arity !== args.length + 1) {
      throw new Error(`.${name}() expects ${arity - 1} inputs but got ${args.length}.`);
    }
    return pfunc(...args, this);
  };

  if (arity > 1) {
    // There are patternified args, so lets make an unpatternified
    // version, prefixed by '_'
    Pattern$1.prototype['_' + name] = function (...args) {
      return func(...args, this);
    };
  }

  // toplevel functions get curried as well as patternified
  // because pfunc uses spread args, we need to state the arity explicitly!
  return curry(pfunc, null, arity);
}

//////////////////////////////////////////////////////////////////////
// Numerical transformations

/**
 * Assumes a numerical pattern. Returns a new pattern with all values rounded
 * to the nearest integer.
 * @name round
 * @memberof Pattern
 * @returns Pattern
 * @example
 * "0.5 1.5 2.5".round().scale('C major').note()
 */
const round = register('round', function (pat) {
  return pat.asNumber().fmap((v) => Math.round(v));
});

/**
 * Assumes a numerical pattern. Returns a new pattern with all values set to
 * their mathematical floor. E.g. `3.7` replaced with to `3`, and `-4.2`
 * replaced with `-5`.
 * @returns Pattern
 */
const floor = register('floor', function (pat) {
  return pat.asNumber().fmap((v) => Math.floor(v));
});

/**
 * Assumes a numerical pattern. Returns a new pattern with all values set to
 * their mathematical ceiling. E.g. `3.2` replaced with `4`, and `-4.2`
 * replaced with `-4`.
 * @returns Pattern
 */
const ceil = register('ceil', function (pat) {
  return pat.asNumber().fmap((v) => Math.ceil(v));
});
/**
 * Assumes a numerical pattern, containing unipolar values in the range 0 ..
 * 1. Returns a new pattern with values scaled to the bipolar range -1 .. 1
 * @returns Pattern
 */
const toBipolar = register('toBipolar', function (pat) {
  return pat.fmap((x) => x * 2 - 1);
});

/**
 * Assumes a numerical pattern, containing bipolar values in the range -1 ..
 * 1. Returns a new pattern with values scaled to the unipolar range 0 .. 1
 * @returns Pattern
 */
const fromBipolar = register('fromBipolar', function (pat) {
  return pat.fmap((x) => (x + 1) / 2);
});

/**
 * Assumes a numerical pattern, containing unipolar values in the range 0 .. 1.
 * Returns a new pattern with values scaled to the given min/max range.
 * Most useful in combination with continuous patterns.
 * @name range
 * @memberof Pattern
 * @returns Pattern
 * @example
 * s("bd sd,hh*4").cutoff(sine.range(500,2000).slow(4))
 */
const range = register('range', function (min, max, pat) {
  return pat.mul(max - min).add(min);
});

/**
 * Assumes a numerical pattern, containing unipolar values in the range 0 ..
 * 1. Returns a new pattern with values scaled to the given min/max range,
 * following an exponential curve.
 * @param {Number} min
 * @param {Number} max
 * @returns Pattern
 */
const rangex = register('rangex', function (min, max, pat) {
  return pat._range(Math.log(min), Math.log(max)).fmap(Math.exp);
});

/**
 * Assumes a numerical pattern, containing bipolar values in the range -1 ..
 * 1. Returns a new pattern with values scaled to the given min/max range.
 * @param {Number} min
 * @param {Number} max
 * @returns Pattern
 */
const range2 = register('range2', function (min, max, pat) {
  return pat.fromBipolar()._range(min, max);
});

//////////////////////////////////////////////////////////////////////
// Structural and temporal transformations

// Compress each cycle into the given timespan, leaving a gap
const compress = register('compress', function (b, e, pat) {
  if (b.gt(e) || b.gt(1) || e.gt(1) || b.lt(0) || e.lt(0)) {
    return silence;
  }
  return pat._fastGap(fraction(1).div(e.sub(b)))._late(b);
});

const { compressSpan, compressspan } = register(['compressSpan', 'compressspan'], function (span, pat) {
  return pat._compress(span.begin, span.end);
});

const { fastGap, fastgap } = register(['fastGap', 'fastgap'], function (factor, pat) {
  // A bit fiddly, to drop zero-width queries at the start of the next cycle
  const qf = function (span) {
    const cycle = span.begin.sam();
    const bpos = span.begin.sub(cycle).mul(factor).min(1);
    const epos = span.end.sub(cycle).mul(factor).min(1);
    if (bpos >= 1) {
      return undefined;
    }
    return new TimeSpan(cycle.add(bpos), cycle.add(epos));
  };
  // Also fiddly, to maintain the right 'whole' relative to the part
  const ef = function (hap) {
    const begin = hap.part.begin;
    const end = hap.part.end;
    const cycle = begin.sam();
    const beginPos = begin.sub(cycle).div(factor).min(1);
    const endPos = end.sub(cycle).div(factor).min(1);
    const newPart = new TimeSpan(cycle.add(beginPos), cycle.add(endPos));
    const newWhole = !hap.whole
      ? undefined
      : new TimeSpan(
          newPart.begin.sub(begin.sub(hap.whole.begin).div(factor)),
          newPart.end.add(hap.whole.end.sub(end).div(factor)),
        );
    return new Hap(newWhole, newPart, hap.value, hap.context);
  };
  return pat.withQuerySpanMaybe(qf).withHap(ef).splitQueries();
});

// Similar to compress, but doesn't leave gaps, and the 'focus' can be
// bigger than a cycle

const focus = register('focus', function (b, e, pat) {
  return pat._fast(fraction(1).div(e.sub(b))).late(b.cyclePos());
});

const { focusSpan, focusspan } = register(['focusSpan', 'focusspan'], function (span, pat) {
  return pat._focus(span.begin, span.end);
});

const ply = register('ply', function (factor, pat) {
  return pat.fmap((x) => pure(x)._fast(factor)).squeezeJoin();
});

/**
 * Speed up a pattern by the given factor. Used by "*" in mini notation.
 *
 * @name fast
 * @memberof Pattern
 * @param {number | Pattern} factor speed up factor
 * @returns Pattern
 * @example
 * s("<bd sd> hh").fast(2) // s("[<bd sd> hh]*2")
 */
const { fast, density } = register(['fast', 'density'], function (factor, pat) {
  factor = fraction(factor);
  const fastQuery = pat.withQueryTime((t) => t.mul(factor));
  return fastQuery.withHapTime((t) => t.div(factor));
});

/**
 * Slow down a pattern over the given number of cycles. Like the "/" operator in mini notation.
 *
 * @name slow
 * @memberof Pattern
 * @param {number | Pattern} factor slow down factor
 * @returns Pattern
 * @example
 * s("<bd sd> hh").slow(2) // s("[<bd sd> hh]/2")
 */
const { slow, sparsity } = register(['slow', 'sparsity'], function (factor, pat) {
  return pat._fast(fraction(1).div(factor));
});

// Should these really be in alphabetical order? a shame to split
// fast/slow, inside/outside..
const inside = register('inside', function (factor, f, pat) {
  return f(pat._slow(factor))._fast(factor);
});

const outside = register('outside', function (factor, f, pat) {
  return f(pat._fast(factor))._slow(factor);
});

/**
 * Applies the given function every n cycles, starting from the last cycle.
 * @name lastOf
 * @memberof Pattern
 * @param {number} n how many cycles
 * @param {function} func function to apply
 * @returns Pattern
 * @example
 * note("c3 d3 e3 g3").lastOf(4, x=>x.rev())
 */
const lastOf = register('lastOf', function (n, func, pat) {
  const pats = Array(n - 1).fill(pat);
  pats.push(func(pat));
  return slowcatPrime(...pats);
});

/**
 * Applies the given function every n cycles, starting from the first cycle.
 * @name firstOf
 * @memberof Pattern
 * @param {number} n how many cycles
 * @param {function} func function to apply
 * @returns Pattern
 * @example
 * note("c3 d3 e3 g3").firstOf(4, x=>x.rev())
 */

/**
 * An alias for {@link firstOf}
 * @name every
 * @memberof Pattern
 * @param {number} n how many cycles
 * @param {function} func function to apply
 * @returns Pattern
 * @example
 * note("c3 d3 e3 g3").every(4, x=>x.rev())
 */
const { firstOf, every } = register(['firstOf', 'every'], function (n, func, pat) {
  const pats = Array(n - 1).fill(pat);
  pats.unshift(func(pat));
  return slowcatPrime(...pats);
});

/**
 * Like layer, but with a single function:
 * @name apply
 * @memberof Pattern
 * @example
 * "<c3 eb3 g3>".scale('C minor').apply(scaleTranspose("0,2,4")).note()
 */
const apply = register('apply', function (func, pat) {
  return func(pat);
});

// cpm = cycles per minute
// TODO - global clock
const cpm = register('cpm', function (cpm, pat) {
  return pat._fast(cpm / 60);
});

/**
 * Nudge a pattern to start earlier in time. Equivalent of Tidal's <~ operator
 *
 * @name early
 * @memberof Pattern
 * @param {number | Pattern} cycles number of cycles to nudge left
 * @returns Pattern
 * @example
 * "bd ~".stack("hh ~".early(.1)).s()
 */
const early = register('early', function (offset, pat) {
  offset = fraction(offset);
  return pat.withQueryTime((t) => t.add(offset)).withHapTime((t) => t.sub(offset));
});

/**
 * Nudge a pattern to start later in time. Equivalent of Tidal's ~> operator
 *
 * @name late
 * @memberof Pattern
 * @param {number | Pattern} cycles number of cycles to nudge right
 * @returns Pattern
 * @example
 * "bd ~".stack("hh ~".late(.1)).s()
 */
const late = register('late', function (offset, pat) {
  offset = fraction(offset);
  return pat._early(fraction(0).sub(offset));
});

const zoom = register('zoom', function (s, e, pat) {
  e = fraction(e);
  s = fraction(s);
  const d = e.sub(s);
  return pat
    .withQuerySpan((span) => span.withCycle((t) => t.mul(d).add(s)))
    .withHapSpan((span) => span.withCycle((t) => t.sub(s).div(d)))
    .splitQueries();
});

const { zoomArc, zoomarc } = register(['zoomArc', 'zoomarc'], function (a, pat) {
  return pat.zoom(a.begin, a.end);
});

const linger = register('linger', function (t, pat) {
  if (t == 0) {
    return silence;
  } else if (t < 0) {
    return pat._zoom(t.add(1), 1)._slow(t);
  }
  return pat._zoom(0, t)._slow(t);
});

const segment = register('segment', function (rate, pat) {
  return pat.struct(pure(true)._fast(rate));
});

const { invert, inv } = register(['invert', 'inv'], function (pat) {
  // Swap true/false in a binary pattern
  return pat.fmap((x) => !x);
});

/**
 * Applies the given function whenever the given pattern is in a true state.
 * @name when
 * @memberof Pattern
 * @param {Pattern} binary_pat
 * @param {function} func
 * @returns Pattern
 * @example
 * "c3 eb3 g3".when("<0 1>/2", x=>x.sub(5)).note()
 */
const when = register('when', function (on, func, pat) {
  return on ? func(pat) : pat;
});

/**
 * Superimposes the function result on top of the original pattern, delayed by the given time.
 * @name off
 * @memberof Pattern
 * @param {Pattern | number} time offset time
 * @param {function} func function to apply
 * @returns Pattern
 * @example
 * "c3 eb3 g3".off(1/8, x=>x.add(7)).note()
 */
const off = register('off', function (time_pat, func, pat) {
  return stack(pat, func(pat.late(time_pat)));
});

/**
 * Returns a new pattern where every other cycle is played once, twice as
 * fast, and offset in time by one quarter of a cycle. Creates a kind of
 * breakbeat feel.
 * @returns Pattern
 */
const brak = register('brak', function (pat) {
  return pat.when(slowcat(false, true), (x) => fastcat(x, silence)._late(0.25));
});

/**
 * Reverse all haps in a pattern
 *
 * @name rev
 * @memberof Pattern
 * @returns Pattern
 * @example
 * note("c3 d3 e3 g3").rev()
 */
const rev = register('rev', function (pat) {
  const query = function (state) {
    const span = state.span;
    const cycle = span.begin.sam();
    const next_cycle = span.begin.nextSam();
    const reflect = function (to_reflect) {
      const reflected = to_reflect.withTime((time) => cycle.add(next_cycle.sub(time)));
      // [reflected.begin, reflected.end] = [reflected.end, reflected.begin] -- didn't work
      const tmp = reflected.begin;
      reflected.begin = reflected.end;
      reflected.end = tmp;
      return reflected;
    };
    const haps = pat.query(state.setSpan(reflect(span)));
    return haps.map((hap) => hap.withSpan(reflect));
  };
  return new Pattern$1(query).splitQueries();
});

const hush = register('hush', function (pat) {
  return silence;
});

const palindrome = register('palindrome', function (pat) {
  return pat.every(2, rev);
});

const { juxBy, juxby } = register(['juxBy', 'juxby'], function (by, func, pat) {
  by /= 2;
  const elem_or = function (dict, key, dflt) {
    if (key in dict) {
      return dict[key];
    }
    return dflt;
  };
  const left = pat.withValue((val) => Object.assign({}, val, { pan: elem_or(val, 'pan', 0.5) - by }));
  const right = pat.withValue((val) => Object.assign({}, val, { pan: elem_or(val, 'pan', 0.5) + by }));

  return stack(left, func(right));
});

const jux = register('jux', function (func, pat) {
  return pat._juxBy(1, func, pat);
});

const { stutWith, stutwith } = register(['stutWith', 'stutwith'], function (times, time, func, pat) {
  return stack(...listRange(0, times - 1).map((i) => func(pat.late(fraction(time).mul(i)), i)));
});

const stut = register('stut', function (times, feedback, time, pat) {
  return pat._stutWith(times, time, (pat, i) => pat.velocity(Math.pow(feedback, i)));
});

/**
 * Superimpose and offset multiple times, applying the given function each time.
 * @name echoWith
 * @memberof Pattern
 * @returns Pattern
 * @param {number} times how many times to repeat
 * @param {number} time cycle offset between iterations
 * @param {function} func function to apply, given the pattern and the iteration index
 * @example
 * "<0 [2 4]>"
 * .echoWith(4, 1/8, (p,n) => p.add(n*2))
 * .scale('C minor').note().legato(.2)
 */
const { echoWith, echowith } = register(['echoWith', 'echowith'], function (times, time, func, pat) {
  return stack(...listRange(0, times - 1).map((i) => func(pat.late(fraction(time).mul(i)), i)));
});

/**
 * Superimpose and offset multiple times, gradually decreasing the velocity
 * @name echo
 * @memberof Pattern
 * @returns Pattern
 * @param {number} times how many times to repeat
 * @param {number} time cycle offset between iterations
 * @param {number} feedback velocity multiplicator for each iteration
 * @example
 * s("bd sd").echo(3, 1/6, .8)
 */
const echo = register('echo', function (times, time, feedback, pat) {
  return pat._echoWith(times, time, (pat, i) => pat.velocity(Math.pow(feedback, i)));
});

/**
 * Divides a pattern into a given number of subdivisions, plays the subdivisions in order, but increments the starting subdivision each cycle. The pattern wraps to the first subdivision after the last subdivision is played.
 * @name iter
 * @memberof Pattern
 * @returns Pattern
 * @example
 * note("0 1 2 3".scale('A minor')).iter(4)
 */

const _iter = function (times, pat, back = false) {
  times = fraction(times);
  return slowcat(
    ...listRange(0, times.sub(1)).map((i) =>
      back ? pat.late(fraction(i).div(times)) : pat.early(fraction(i).div(times)),
    ),
  );
};

const iter = register('iter', function (times, pat) {
  return _iter(times, pat, false);
});

/**
 * Like `iter`, but plays the subdivisions in reverse order. Known as iter' in tidalcycles
 * @name iterBack
 * @memberof Pattern
 * @returns Pattern
 * @example
 * note("0 1 2 3".scale('A minor')).iterBack(4)
 */
const { iterBack, iterback } = register(['iterBack', 'iterback'], function (times, pat) {
  return _iter(times, pat, true);
});

/**
 * Divides a pattern into a given number of parts, then cycles through those parts in turn, applying the given function to each part in turn (one part per cycle).
 * @name chunk
 * @memberof Pattern
 * @returns Pattern
 * @example
 * "0 1 2 3".chunk(4, x=>x.add(7)).scale('A minor').note()
 */
const _chunk = function (n, func, pat, back = false) {
  const binary = Array(n - 1).fill(false);
  binary.unshift(true);
  const binary_pat = _iter(n, sequence(...binary), back);
  return pat.when(binary_pat, func);
};

const chunk = register('chunk', function (n, func, pat) {
  return _chunk(n, func, pat, false);
});

/**
 * Like `chunk`, but cycles through the parts in reverse order. Known as chunk' in tidalcycles
 * @name chunkBack
 * @memberof Pattern
 * @returns Pattern
 * @example
 * "0 1 2 3".chunkBack(4, x=>x.add(7)).scale('A minor').note()
 */
const { chunkBack, chunkback } = register(['chunkBack', 'chunkback'], function (n, func, pat) {
  return _chunk(n, func, pat, true);
});

// TODO - redefine elsewhere in terms of mask
const bypass = register('bypass', function (on, pat) {
  on = Boolean(parseInt(on));
  return on ? silence : this;
});

// sets absolute duration of haps
// TODO - fix
const duration = register('duration', function (value, pat) {
  return pat.withHapSpan((span) => new TimeSpan(span.begin, span.begin.add(value)));
});

// TODO - make control?
const { color, colour } = register(['color', 'colour'], function (color, pat) {
  return pat.withContext((context) => ({ ...context, color }));
});

/**
 *
 * Sets the velocity from 0 to 1. Is multiplied together with gain.
 * @name velocity
 * @example
 * s("hh*8")
 * .gain(".4!2 1 .4!2 1 .4 1")
 * .velocity(".4 1")
 */
const velocity = register('velocity', function (velocity, pat) {
  return pat.withContext((context) => ({ ...context, velocity: (context.velocity || 1) * velocity }));
});

/**
 *
 * Multiplies the hap duration with the given factor.
 * @name legato
 * @memberof Pattern
 * @example
 * note("c3 eb3 g3 c4").legato("<.25 .5 1 2>")
 */
// TODO - fix
const legato = register('legato', function (value, pat) {
  return pat.withHapSpan((span) => new TimeSpan(span.begin, span.begin.add(span.end.sub(span.begin).mul(value))));
});

//////////////////////////////////////////////////////////////////////
// Control-related functions, i.e. ones that manipulate patterns of
// objects

/**
 * Cuts each sample into the given number of parts, allowing you to explore a technique known as 'granular synthesis'.
 * It turns a pattern of samples into a pattern of parts of samples.
 * @name chop
 * @memberof Pattern
 * @returns Pattern
 * @example
 * samples({ rhodes: 'https://cdn.freesound.org/previews/132/132051_316502-lq.mp3' })
 * s("rhodes")
 *  .chop(4)
 *  .rev() // reverse order of chops
 *  .loopAt(4) // fit sample into 4 cycles
 *
 */
const chop$1 = register('chop', function (n, pat) {
  const slices = Array.from({ length: n }, (x, i) => i);
  const slice_objects = slices.map((i) => ({ begin: i / n, end: (i + 1) / n }));
  const func = function (o) {
    return sequence(slice_objects.map((slice_o) => Object.assign({}, o, slice_o)));
  };
  return pat.squeezeBind(func);
});

const striate = register('striate', function (n, pat) {
  const slices = Array.from({ length: n }, (x, i) => i);
  const slice_objects = slices.map((i) => ({ begin: i / n, end: (i + 1) / n }));
  const slicePat = slowcat(...slice_objects);
  return pat.set(slicePat)._fast(n);
});

/**
 * Makes the sample fit the given number of cycles by changing the speed.
 * @name loopAt
 * @memberof Pattern
 * @returns Pattern
 * @example
 * samples({ rhodes: 'https://cdn.freesound.org/previews/132/132051_316502-lq.mp3' })
 * s("rhodes").loopAt(4)
 */
// TODO - global cps clock
const _loopAt = function (factor, pat, cps = 1) {
  return pat
    .speed((1 / factor) * cps)
    .unit('c')
    .slow(factor);
};

register(['loopAt', 'loopat'], function (factor, pat) {
  return _loopAt(factor, pat, 1);
});

/**
 * Makes the sample fit the given number of cycles and cps value, by
 * changing the speed. Please note that at some point cps will be
 * given by a global clock and this function will be
 * deprecated/removed.
 * @name loopAtCps
 * @memberof Pattern
 * @returns Pattern
 * @example
 * samples({ rhodes: 'https://cdn.freesound.org/previews/132/132051_316502-lq.mp3' })
 * s("rhodes").loopAtCps(4,1.5).cps(1.5)
 */
// TODO - global cps clock
register(['loopAtCps', 'loopatcps'], function (factor, cps, pat) {
  return _loopAt(factor, pat, cps);
});

/*
controls.mjs - <short description TODO>
Copyright (C) 2022 Strudel contributors - see <https://github.com/tidalcycles/strudel/blob/main/packages/core/controls.mjs>
This program is free software: you can redistribute it and/or modify it under the terms of the GNU Affero General Public License as published by the Free Software Foundation, either version 3 of the License, or (at your option) any later version. This program is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU Affero General Public License for more details. You should have received a copy of the GNU Affero General Public License along with this program.  If not, see <https://www.gnu.org/licenses/>.
*/

const controls = {};
const generic_params = [
  /**
   * Select a sound / sample by name.
   *
   * <details style={{display:'none'}}>
   * <summary>show all sounds</summary>
   *
   * 808 (6) 808bd (25) 808cy (25) 808hc (5) 808ht (5) 808lc (5) 808lt (5) 808mc (5) 808mt (5) 808oh (5) 808sd (25) 909 (1) ab (12) ade (10) ades2 (9) ades3 (7) ades4 (6) alex (2) alphabet (26) amencutup (32) armora (7) arp (2) arpy (11) auto (11) baa (7) baa2 (7) bass (4) bass0 (3) bass1 (30) bass2 (5) bass3 (11) bassdm (24) bassfoo (3) battles (2) bd (24) bend (4) bev (2) bin (2) birds (10) birds3 (19) bleep (13) blip (2) blue (2) bottle (13) breaks125 (2) breaks152 (1) breaks157 (1) breaks165 (1) breath (1) bubble (8) can (14) casio (3) cb (1) cc (6) chin (4) circus (3) clak (2) click (4) clubkick (5) co (4) coins (1) control (2) cosmicg (15) cp (2) cr (6) crow (4) d (4) db (13) diphone (38) diphone2 (12) dist (16) dork2 (4) dorkbot (2) dr (42) dr2 (6) dr55 (4) dr_few (8) drum (6) drumtraks (13) e (8) east (9) electro1 (13) em2 (6) erk (1) f (1) feel (7) feelfx (8) fest (1) fire (1) flick (17) fm (17) foo (27) future (17) gab (10) gabba (4) gabbaloud (4) gabbalouder (4) glasstap (3) glitch (8) glitch2 (8) gretsch (24) gtr (3) h (7) hand (17) hardcore (12) hardkick (6) haw (6) hc (6) hh (13) hh27 (13) hit (6) hmm (1) ho (6) hoover (6) house (8) ht (16) if (5) ifdrums (3) incoming (8) industrial (32) insect (3) invaders (18) jazz (8) jungbass (20) jungle (13) juno (12) jvbass (13) kicklinn (1) koy (2) kurt (7) latibro (8) led (1) less (4) lighter (33) linnhats (6) lt (16) made (7) made2 (1) mash (2) mash2 (4) metal (10) miniyeah (4) monsterb (6) moog (7) mouth (15) mp3 (4) msg (9) mt (16) mute (28) newnotes (15) noise (1) noise2 (8) notes (15) numbers (9) oc (4) odx (15) off (1) outdoor (6) pad (3) padlong (1) pebbles (1) perc (6) peri (15) pluck (17) popkick (10) print (11) proc (2) procshort (8) psr (30) rave (8) rave2 (4) ravemono (2) realclaps (4) reverbkick (1) rm (2) rs (1) sax (22) sd (2) seawolf (3) sequential (8) sf (18) sheffield (1) short (5) sid (12) sine (6) sitar (8) sn (52) space (18) speakspell (12) speech (7) speechless (10) speedupdown (9) stab (23) stomp (10) subroc3d (11) sugar (2) sundance (6) tabla (26) tabla2 (46) tablex (3) tacscan (22) tech (13) techno (7) tink (5) tok (4) toys (13) trump (11) ul (10) ulgab (5) uxay (3) v (6) voodoo (5) wind (10) wobble (1) world (3) xmas (1) yeah (31)
   *
   * <a href="https://tidalcycles.org/docs/configuration/Audio%20Samples/default_library" target="_blank">more info</a>
   *
   * </details>
   *
   * @name s
   * @param {string | Pattern} sound The sound / pattern of sounds to pick
   * @example
   * s("bd hh")
   *
   */
  ['s', 's', 'sound'],
  /**
   * The note or sample number to choose for a synth or sampleset
   * Note names currently not working yet, but will hopefully soon. Just stick to numbers for now
   *
   * @name n
   * @param {string | number | Pattern} value note name, note number or sample number
   * @example
   * s('superpiano').n("<0 1 2 3>").osc()
   * @example
   * s('superpiano').n("<c4 d4 e4 g4>").osc()
   * @example
   * n("0 1 2 3").s('east').osc()
   */
  // also see https://github.com/tidalcycles/strudel/pull/63
  ['f', 'n', 'The note or sample number to choose for a synth or sampleset'],
  ['f', 'note', 'The note or pitch to play a sound or synth with'],
  //['s', 'toArg', 'for internal sound routing'],
  // ["f", "from", "for internal sound routing"),
  //['f', 'to', 'for internal sound routing'],
  /**
   * A pattern of numbers that speed up (or slow down) samples while they play. Currently only supported by osc / superdirt.
   *
   * @name accelerate
   * @param {number | Pattern} amount acceleration.
   * @superdirtOnly
   * @example
   * s("sax").accelerate("<0 1 2 4 8 16>").slow(2).osc()
   *
   */
  ['f', 'accelerate', 'a pattern of numbers that speed up (or slow down) samples while they play.'],
  /**
   * Controls the gain by an exponential amount.
   *
   * @name gain
   * @param {number | Pattern} amount gain.
   * @example
   * s("hh*8").gain(".4!2 1 .4!2 1 .4 1")
   *
   */
  [
    'f',
    'gain',
    'a pattern of numbers that specify volume. Values less than 1 make the sound quieter. Values greater than 1 make the sound louder. For the linear equivalent, see @amp@.',
  ],
  /**
   * Like {@link gain}, but linear.
   *
   * @name amp
   * @param {number | Pattern} amount gain.
   * @superdirtOnly
   * @example
   * s("bd*8").amp(".1*2 .5 .1*2 .5 .1 .5").osc()
   *
   */
  ['f', 'amp', 'like @gain@, but linear.'],
  /**
   * A pattern of numbers to specify the attack time of an envelope applied to each sample.
   * [More info about envelopes](/learn/synths-samples-effects/#envelope)
   *
   * @name attack
   * @param {number | Pattern} attack time in seconds.
   * @example
   * note("c3 e3").attack("<0 .1 .5>")
   *
   */
  [
    'f',
    'attack',
    'a pattern of numbers to specify the attack time (in seconds) of an envelope applied to each sample.',
  ],

  /**
   * Select the sound bank to use. To be used together with `s`. The bank name (+ "_") will be prepended to the value of `s`.
   *
   * @name bank
   * @param {string | Pattern} bank the name of the bank
   * @example
   * s("bd sd").bank('RolandTR909') // = s("RolandTR909_bd RolandTR909_sd")
   *
   */
  ['f', 'bank', 'selects sound bank to use'],

  /**
   * Gain envelope decay time = the time it takes after the attack time to reach the sustain level.
   * [More info about envelopes](/learn/synths-samples-effects/#envelope)
   *
   * @name decay
   * @param {number | Pattern} time decay time in seconds
   * @example
   * note("c3 e3").decay("<.1 .2 .3 .4>").sustain(0)
   *
   */
  ['f', 'decay', ''],
  /**
   * Gain envelope sustain level. [More info about envelopes](/learn/synths-samples-effects/#envelope)
   *
   * @name sustain
   * @param {number | Pattern} gain sustain level between 0 and 1
   * @example
   * note("c3 e3").decay(.2).sustain("<0 .1 .4 .6 1>")
   *
   */
  ['f', 'sustain', ''],
  /**
   * Gain envelope release time. [More info about envelopes](/learn/synths-samples-effects/#envelope)
   *
   * @name release
   * @param {number | Pattern} time release time in seconds
   * @example
   * note("c3 e3 g3 c4").release("<0 .1 .4 .6 1>/2")
   *
   */
  [
    'f',
    'release',
    'a pattern of numbers to specify the release time (in seconds) of an envelope applied to each sample.',
  ],
  [
    'f',
    'hold',
    'a pattern of numbers to specify the hold time (in seconds) of an envelope applied to each sample. Only takes effect if `attack` and `release` are also specified.',
  ],
  // TODO: in tidal, it seems to be normalized
  /**
   * Sets the center frequency of the band-pass filter.
   *
   * @name bandf
   * @param {number | Pattern} frequency center frequency
   * @example
   * s("bd sd,hh*3").bandf("<1000 2000 4000 8000>")
   *
   */
  ['f', 'bandf', 'A pattern of numbers from 0 to 1. Sets the center frequency of the band-pass filter.'],
  // TODO: in tidal, it seems to be normalized
  /**
   * Sets the q-factor of the band-pass filter
   *
   * @name bandq
   * @param {number | Pattern} q q factor
   * @example
   * s("bd sd").bandf(500).bandq("<0 1 2 3>")
   *
   */
  ['f', 'bandq', 'a pattern of anumbers from 0 to 1. Sets the q-factor of the band-pass filter.'],
  /**
   * a pattern of numbers from 0 to 1. Skips the beginning of each sample, e.g. `0.25` to cut off the first quarter from each sample.
   *
   * @memberof Pattern
   * @name begin
   * @param {number | Pattern} amount between 0 and 1, where 1 is the length of the sample
   * @example
   * samples({ rave: 'rave/AREUREADY.wav' }, 'github:tidalcycles/Dirt-Samples/master/')
   * s("rave").begin("<0 .25 .5 .75>")
   *
   */
  [
    'f',
    'begin',
    'a pattern of numbers from 0 to 1. Skips the beginning of each sample, e.g. `0.25` to cut off the first quarter from each sample.',
  ],
  /**
   * The same as .begin, but cuts off the end off each sample.
   *
   * @memberof Pattern
   * @name end
   * @param {number | Pattern} length 1 = whole sample, .5 = half sample, .25 = quarter sample etc..
   * @example
   * s("bd*2,oh*4").end("<.1 .2 .5 1>")
   *
   */
  [
    'f',
    'end',
    'the same as `begin`, but cuts the end off samples, shortening them; e.g. `0.75` to cut off the last quarter of each sample.',
  ],
  /**
   * Loops the sample (from `begin` to `end`) the specified number of times.
   * Note that the tempo of the loop is not synced with the cycle tempo.
   *
   * @name loop
   * @param {number | Pattern} times How often the sample is looped
   * @example
   * s("bd").loop("<1 2 3 4>").osc()
   *
   */
  ['f', 'loop', 'loops the sample (from `begin` to `end`) the specified number of times.'],
  // TODO: currently duplicated with "native" legato
  // TODO: superdirt legato will do more: https://youtu.be/dQPmE1WaD1k?t=419
  /**
   * a pattern of numbers from 0 to 1. Skips the beginning of each sample, e.g. `0.25` to cut off the first quarter from each sample.
   *
   * @name legato
   * @param {number | Pattern} duration between 0 and 1, where 1 is the length of the whole hap time
   * @example
   * "c4 eb4 g4 bb4".legato("<0.125 .25 .5 .75 1 2 4>")
   *
   */
  // ['f', 'legato', 'controls the amount of overlap between two adjacent sounds'],
  // ['f', 'clhatdecay', ''],
  /**
   * bit crusher effect.
   *
   * @name crush
   * @param {number | Pattern} depth between 1 (for drastic reduction in bit-depth) to 16 (for barely no reduction).
   * @example
   * s("<bd sd>,hh*3").fast(2).crush("<16 8 7 6 5 4 3 2>")
   *
   */
  [
    'f',
    'crush',
    'bit crushing, a pattern of numbers from 1 (for drastic reduction in bit-depth) to 16 (for barely no reduction).',
  ],
  /**
   * fake-resampling for lowering the sample rate. Caution: This effect seems to only work in chromium based browsers
   *
   * @name coarse
   * @param {number | Pattern} factor 1 for original 2 for half, 3 for a third and so on.
   * @example
   * s("bd sd,hh*4").coarse("<1 4 8 16 32>")
   *
   */
  [
    'f',
    'coarse',
    'fake-resampling, a pattern of numbers for lowering the sample rate, i.e. 1 for original 2 for half, 3 for a third and so on.',
  ],

  /**
   * choose the channel the pattern is sent to in superdirt
   *
   * @name channel
   * @param {number | Pattern} channel channel number
   *
   */
  ['i', 'channel', 'choose the channel the pattern is sent to in superdirt'],
  /**
   * In the style of classic drum-machines, `cut` will stop a playing sample as soon as another samples with in same cutgroup is to be played. An example would be an open hi-hat followed by a closed one, essentially muting the open.
   *
   * @name cut
   * @param {number | Pattern} group cut group number
   * @example
   * s("bd sax").cut(1).osc()
   *
   */
  [
    'i',
    'cut',
    'In the style of classic drum-machines, `cut` will stop a playing sample as soon as another samples with in same cutgroup is to be played. An example would be an open hi-hat followed by a closed one, essentially muting the open.',
  ],
  /**
   * Applies the cutoff frequency of the low-pass filter.
   *
   * @name cutoff
   * @param {number | Pattern} frequency audible between 0 and 20000
   * @example
   * s("bd sd,hh*3").cutoff("<4000 2000 1000 500 200 100>")
   *
   */
  // TODO: add lpf synonym
  ['f', 'cutoff', 'a pattern of numbers from 0 to 1. Applies the cutoff frequency of the low-pass filter.'],
  /**
   * Applies the cutoff frequency of the high-pass filter.
   *
   * @name hcutoff
   * @param {number | Pattern} frequency audible between 0 and 20000
   * @example
   * s("bd sd,hh*4").hcutoff("<4000 2000 1000 500 200 100>")
   *
   */
  // TODO: add hpf synonym
  [
    'f',
    'hcutoff',
    'a pattern of numbers from 0 to 1. Applies the cutoff frequency of the high-pass filter. Also has alias @hpf@',
  ],
  /**
   * Applies the resonance of the high-pass filter.
   *
   * @name hresonance
   * @param {number | Pattern} q resonance factor between 0 and 50
   * @example
   * s("bd sd,hh*4").hcutoff(2000).hresonance("<0 10 20 30>")
   *
   */
  [
    'f',
    'hresonance',
    'a pattern of numbers from 0 to 1. Applies the resonance of the high-pass filter. Has alias @hpq@',
  ],
  // TODO: add hpq synonym
  /**
   * Applies the cutoff frequency of the low-pass filter.
   *
   * @name resonance
   * @param {number | Pattern} q resonance factor between 0 and 50
   * @example
   * s("bd sd,hh*4").cutoff(2000).resonance("<0 10 20 30>")
   *
   */
  ['f', 'resonance', 'a pattern of numbers from 0 to 1. Specifies the resonance of the low-pass filter.'],
  // TODO: add lpq synonym?
  /**
   * DJ filter, below 0.5 is low pass filter, above is high pass filter.
   *
   * @name djf
   * @param {number | Pattern} cutoff below 0.5 is low pass filter, above is high pass filter
   * @example
   * n("0 3 7 [10,24]").s('superzow').octave(3).djf("<.5 .25 .5 .75>").osc()
   *
   */
  ['f', 'djf', 'DJ filter, below 0.5 is low pass filter, above is high pass filter.'],
  // ['f', 'cutoffegint', ''],
  // TODO: does not seem to work
  /*
   * Sets the level of the delay signal.
   *
   * @name delay
   * @param {number | Pattern} level between 0 and 1
   * @example
   * s("bd").delay("<0 .5 .75 1>").osc()
   *
   */
  ['f', 'delay', 'a pattern of numbers from 0 to 1. Sets the level of the delay signal.'],
  ['f', 'delayfeedback', 'a pattern of numbers from 0 to 1. Sets the amount of delay feedback.'],
  ['f', 'delaytime', 'a pattern of numbers from 0 to 1. Sets the length of the delay.'],
  /* // TODO: test
   * Specifies whether delaytime is calculated relative to cps.
   *
   * @name lock
   * @param {number | Pattern} enable When set to 1, delaytime is a direct multiple of a cycle.
   * @example
   * s("sd").delay().lock(1).osc()
   *
   */
  [
    'f',
    'lock',
    'A pattern of numbers. Specifies whether delaytime is calculated relative to cps. When set to 1, delaytime is a direct multiple of a cycle.',
  ],
  /**
   * Set detune of oscillators. Works only with some synths, see <a target="_blank" href="https://tidalcycles.org/docs/patternlib/tutorials/synthesizers">tidal doc</a>
   *
   * @name detune
   * @param {number | Pattern} amount between 0 and 1
   * @example
   * n("0 3 7").s('superzow').octave(3).detune("<0 .25 .5 1 2>").osc()
   *
   */
  ['f', 'detune', ''],
  /**
   * Set dryness of reverb. See {@link room} and {@link size} for more information about reverb.
   *
   * @name dry
   * @param {number | Pattern} dry 0 = wet, 1 = dry
   * @example
   * n("[0,3,7](3,8)").s("superpiano").room(.7).dry("<0 .5 .75 1>").osc()
   *
   */
  [
    'f',
    'dry',
    'when set to `1` will disable all reverb for this pattern. See `room` and `size` for more information about reverb.',
  ],
  // TODO: does not seem to do anything
  /*
   * Used when using {@link begin}/{@link end} or {@link chop}/{@link striate} and friends, to change the fade out time of the 'grain' envelope.
   *
   * @name fadeTime
   * @param {number | Pattern} time between 0 and 1
   * @example
   * s("oh*4").end(.1).fadeTime("<0 .2 .4 .8>").osc()
   *
   */
  [
    'f',
    'fadeTime',
    "Used when using begin/end or chop/striate and friends, to change the fade out time of the 'grain' envelope.",
  ],
  // TODO: see above
  [
    'f',
    'fadeInTime',
    'As with fadeTime, but controls the fade in time of the grain envelope. Not used if the grain begins at position 0 in the sample.',
  ],
  /**
   * Set frequency of sound.
   *
   * @name freq
   * @param {number | Pattern} frequency in Hz. the audible range is between 20 and 20000 Hz
   * @example
   * freq("220 110 440 110").s("superzow").osc()
   * @example
   * freq("110".mul.out(".5 1.5 .6 [2 3]")).s("superzow").osc()
   *
   */
  ['f', 'freq', ''],
  // TODO: https://tidalcycles.org/docs/configuration/MIDIOSC/control-voltage/#gate
  ['f', 'gate', ''],
  // ['f', 'hatgrain', ''],
  // ['f', 'lagogo', ''],
  // ['f', 'lclap', ''],
  // ['f', 'lclaves', ''],
  // ['f', 'lclhat', ''],
  // ['f', 'lcrash', ''],
  // TODO:
  // https://tidalcycles.org/docs/reference/audio_effects/#leslie-1
  // https://tidalcycles.org/docs/reference/audio_effects/#leslie
  /**
   * Emulation of a Leslie speaker: speakers rotating in a wooden amplified cabinet.
   *
   * @name leslie
   * @param {number | Pattern} wet between 0 and 1
   * @example
   * n("0,4,7").s("supersquare").leslie("<0 .4 .6 1>").osc()
   *
   */
  ['f', 'leslie', ''],
  /**
   * Rate of modulation / rotation for leslie effect
   *
   * @name lrate
   * @param {number | Pattern} rate 6.7 for fast, 0.7 for slow
   * @example
   * n("0,4,7").s("supersquare").leslie(1).lrate("<1 2 4 8>").osc()
   *
   */
  // TODO: the rate seems to "lag" (in the example, 1 will be fast)
  ['f', 'lrate', ''],
  /**
   * Physical size of the cabinet in meters. Be careful, it might be slightly larger than your computer. Affects the Doppler amount (pitch warble)
   *
   * @name lsize
   * @param {number | Pattern} meters somewhere between 0 and 1
   * @example
   * n("0,4,7").s("supersquare").leslie(1).lrate(2).lsize("<.1 .5 1>").osc()
   *
   */
  ['f', 'lsize', ''],
  // ['f', 'lfo', ''],
  // ['f', 'lfocutoffint', ''],
  // ['f', 'lfodelay', ''],
  // ['f', 'lfoint', ''],
  // ['f', 'lfopitchint', ''],
  // ['f', 'lfoshape', ''],
  // ['f', 'lfosync', ''],
  // ['f', 'lhitom', ''],
  // ['f', 'lkick', ''],
  // ['f', 'llotom', ''],
  // ['f', 'lophat', ''],
  // ['f', 'lsnare', ''],
  ['f', 'degree', ''], // TODO: what is this? not found in tidal doc
  ['f', 'mtranspose', ''], // TODO: what is this? not found in tidal doc
  ['f', 'ctranspose', ''], // TODO: what is this? not found in tidal doc
  ['f', 'harmonic', ''], // TODO: what is this? not found in tidal doc
  ['f', 'stepsPerOctave', ''], // TODO: what is this? not found in tidal doc
  ['f', 'octaveR', ''], // TODO: what is this? not found in tidal doc
  // TODO: why is this needed? what's the difference to late / early?
  [
    'f',
    'nudge',
    'Nudges events into the future by the specified number of seconds. Negative numbers work up to a point as well (due to internal latency)',
  ],
  // TODO: the following doc is just a guess, it's not documented in tidal doc.
  /**
   * Sets the default octave of a synth.
   *
   * @name octave
   * @param {number | Pattern} octave octave number
   * @example
   * n("0,4,7").s('supersquare').octave("<3 4 5 6>").osc()
   */
  ['i', 'octave', ''],
  ['f', 'offset', ''], // TODO: what is this? not found in tidal doc
  // ['f', 'ophatdecay', ''],
  // TODO: example
  /**
   * a pattern of numbers. An `orbit` is a global parameter context for patterns. Patterns with the same orbit will share hardware output bus offset and global effects, e.g. reverb and delay. The maximum number of orbits is specified in the superdirt startup, numbers higher than maximum will wrap around.
   *
   * @name orbit
   * @param {number | Pattern} number
   *
   */
  [
    'i',
    'orbit',
    'a pattern of numbers. An `orbit` is a global parameter context for patterns. Patterns with the same orbit will share hardware output bus offset and global effects, e.g. reverb and delay. The maximum number of orbits is specified in the superdirt startup, numbers higher than maximum will wrap around.',
  ],
  ['f', 'overgain', ''], // TODO: what is this? not found in tidal doc
  ['f', 'overshape', ''], // TODO: what is this? not found in tidal doc
  /**
   * Sets position in stereo.
   *
   * @name pan
   * @param {number | Pattern} pan between 0 and 1, from left to right (assuming stereo), once round a circle (assuming multichannel)
   * @example
   * s("[bd hh]*2").pan("<.5 1 .5 0>")
   *
   */
  [
    'f',
    'pan',
    'a pattern of numbers between 0 and 1, from left to right (assuming stereo), once round a circle (assuming multichannel)',
  ],
  // TODO: this has no effect (see example)
  /*
   * Controls how much multichannel output is fanned out
   *
   * @name panspan
   * @param {number | Pattern} span between -inf and inf, negative is backwards ordering
   * @example
   * s("[bd hh]*2").pan("<.5 1 .5 0>").panspan("<0 .5 1>").osc()
   *
   */
  [
    'f',
    'panspan',
    'a pattern of numbers between -inf and inf, which controls how much multichannel output is fanned out (negative is backwards ordering)',
  ],
  // TODO: this has no effect (see example)
  /*
   * Controls how much multichannel output is spread
   *
   * @name pansplay
   * @param {number | Pattern} spread between 0 and 1
   * @example
   * s("[bd hh]*2").pan("<.5 1 .5 0>").pansplay("<0 .5 1>").osc()
   *
   */
  [
    'f',
    'pansplay',
    'a pattern of numbers between 0.0 and 1.0, which controls the multichannel spread range (multichannel only)',
  ],
  [
    'f',
    'panwidth',
    'a pattern of numbers between 0.0 and inf, which controls how much each channel is distributed over neighbours (multichannel only)',
  ],
  [
    'f',
    'panorient',
    'a pattern of numbers between -1.0 and 1.0, which controls the relative position of the centre pan in a pair of adjacent speakers (multichannel only)',
  ],
  // ['f', 'pitch1', ''],
  // ['f', 'pitch2', ''],
  // ['f', 'pitch3', ''],
  // ['f', 'portamento', ''],
  // TODO: LFO rate see https://tidalcycles.org/docs/patternlib/tutorials/synthesizers/#supersquare
  ['f', 'rate', "used in SuperDirt softsynths as a control rate or 'speed'"],
  // TODO: slide param for certain synths
  ['f', 'slide', ''],
  // TODO: detune? https://tidalcycles.org/docs/patternlib/tutorials/synthesizers/#supersquare
  ['f', 'semitone', ''],
  // TODO: dedup with synth param, see https://tidalcycles.org/docs/reference/synthesizers/#superpiano
  // ['f', 'velocity', ''],
  ['f', 'voice', ''], // TODO: synth param
  /**
   * Sets the level of reverb.
   *
   * @name room
   * @param {number | Pattern} level between 0 and 1
   * @example
   * s("bd sd").room("<0 .2 .4 .6 .8 1>").osc()
   *
   */
  ['f', 'room', 'a pattern of numbers from 0 to 1. Sets the level of reverb.'],
  /**
   * Sets the room size of the reverb, see {@link room}.
   *
   * @name size
   * @param {number | Pattern} size between 0 and 1
   * @example
   * s("bd sd").room(.8).size("<0 .2 .4 .6 .8 1>").osc()
   *
   */
  // TODO: find out why :
  // s("bd sd").room(.8).size("<0 .2 .4 .6 .8 [1,0]>").osc()
  // .. does not work. Is it because room is only one effect?
  [
    'f',
    'size',
    'a pattern of numbers from 0 to 1. Sets the perceptual size (reverb time) of the `room` to be used in reverb.',
  ],
  [
    'f',
    'roomsize',
    'a pattern of numbers from 0 to 1. Sets the perceptual size (reverb time) of the `room` to be used in reverb.',
  ],
  // ['f', 'sagogo', ''],
  // ['f', 'sclap', ''],
  // ['f', 'sclaves', ''],
  // ['f', 'scrash', ''],
  /**
   * Wave shaping distortion. CAUTION: it might get loud
   *
   * @name shape
   * @param {number | Pattern} distortion between 0 and 1
   * @example
   * s("bd sd,hh*4").shape("<0 .2 .4 .6 .8>")
   *
   */
  [
    'f',
    'shape',
    'wave shaping distortion, a pattern of numbers from 0 for no distortion up to 1 for loads of distortion.',
  ],
  /**
   * Changes the speed of sample playback, i.e. a cheap way of changing pitch.
   *
   * @name speed
   * @param {number | Pattern} speed -inf to inf, negative numbers play the sample backwards.
   * @example
   * s("bd").speed("<1 2 4 1 -2 -4>").osc()
   * @example
   * speed("1 1.5*2 [2 1.1]").s("sax").cut(1).osc()
   *
   */
  [
    'f',
    'speed',
    'a pattern of numbers which changes the speed of sample playback, i.e. a cheap way of changing pitch. Negative values will play the sample backwards!',
  ],
  /**
   * Used in conjunction with {@link speed}, accepts values of "r" (rate, default behavior), "c" (cycles), or "s" (seconds). Using `unit "c"` means `speed` will be interpreted in units of cycles, e.g. `speed "1"` means samples will be stretched to fill a cycle. Using `unit "s"` means the playback speed will be adjusted so that the duration is the number of seconds specified by `speed`.
   *
   * @name unit
   * @param {number | string | Pattern} unit see description above
   * @example
   * speed("1 2 .5 3").s("bd").unit("c").osc()
   *
   */
  [
    's',
    'unit',
    'used in conjunction with `speed`, accepts values of "r" (rate, default behavior), "c" (cycles), or "s" (seconds). Using `unit "c"` means `speed` will be interpreted in units of cycles, e.g. `speed "1"` means samples will be stretched to fill a cycle. Using `unit "s"` means the playback speed will be adjusted so that the duration is the number of seconds specified by `speed`.',
  ],
  /**
   * Made by Calum Gunn. Reminiscent of some weird mixture of filter, ring-modulator and pitch-shifter. The SuperCollider manual defines Squiz as:
   *
   * "A simplistic pitch-raising algorithm. It's not meant to sound natural; its sound is reminiscent of some weird mixture of filter, ring-modulator and pitch-shifter, depending on the input. The algorithm works by cutting the signal into fragments (delimited by upwards-going zero-crossings) and squeezing those fragments in the time domain (i.e. simply playing them back faster than they came in), leaving silences inbetween. All the parameters apart from memlen can be modulated."
   *
   * @name squiz
   * @param {number | Pattern} squiz Try passing multiples of 2 to it - 2, 4, 8 etc.
   * @example
   * squiz("2 4/2 6 [8 16]").s("bd").osc()
   *
   */
  ['f', 'squiz', ''],
  ['f', 'stutterdepth', ''], // TODO: what is this? not found in tidal doc
  ['f', 'stuttertime', ''], // TODO: what is this? not found in tidal doc
  ['f', 'timescale', ''], // TODO: what is this? not found in tidal doc
  ['f', 'timescalewin', ''], // TODO: what is this? not found in tidal doc
  // ['f', 'tomdecay', ''],
  // ['f', 'vcfegint', ''],
  // ['f', 'vcoegint', ''],
  // TODO: Use a rest (~) to override the effect <- vowel
  /**
   *
   * Formant filter to make things sound like vowels.
   *
   * @name vowel
   * @param {string | Pattern} vowel You can use a e i o u.
   * @example
   * note("c2 <eb2 <g2 g1>>").s('sawtooth')
   * .vowel("<a e i <o u>>")
   *
   */
  [
    's',
    'vowel',
    'formant filter to make things sound like vowels, a pattern of either `a`, `e`, `i`, `o` or `u`. Use a rest (`~`) for no effect.',
  ],
  /* // TODO: find out how it works
   * Made by Calum Gunn. Divides an audio stream into tiny segments, using the signal's zero-crossings as segment boundaries, and discards a fraction of them. Takes a number between 1 and 100, denoted the percentage of segments to drop. The SuperCollider manual describes the Waveloss effect this way:
   *
   * Divide an audio stream into tiny segments, using the signal's zero-crossings as segment boundaries, and discard a fraction of them (i.e. replace them with silence of the same length). The technique was described by Trevor Wishart in a lecture. Parameters: the filter drops drop out of out of chunks. mode can be 1 to drop chunks in a simple deterministic fashion (e.g. always dropping the first 30 out of a set of 40 segments), or 2 to drop chunks randomly but in an appropriate proportion.)
   *
   * mode: ?
   * waveloss: ?
   *
   * @name waveloss
   */
  ['f', 'waveloss', ''],
  // TODO: midi effects?
  ['f', 'dur', ''],
  // ['f', 'modwheel', ''],
  ['f', 'expression', ''],
  ['f', 'sustainpedal', ''],
  /* // TODO: doesn't seem to do anything
   *
   * Tremolo Audio DSP effect
   *
   * @name tremolodepth
   * @param {number | Pattern} depth between 0 and 1
   * @example
   * n("0,4,7").tremolodepth("<0 .3 .6 .9>").osc()
   *
   */
  // TODO: tremdp alias
  ['f', 'tremolodepth', "Tremolo Audio DSP effect | params are 'tremolorate' and 'tremolodepth'"],
  ['f', 'tremolorate', "Tremolo Audio DSP effect | params are 'tremolorate' and 'tremolodepth'"],
  // TODO: doesn't seem to do anything
  ['f', 'phaserdepth', "Phaser Audio DSP effect | params are 'phaserrate' and 'phaserdepth'"],
  ['f', 'phaserrate', "Phaser Audio DSP effect | params are 'phaserrate' and 'phaserdepth'"],

  ['f', 'fshift', 'frequency shifter'],
  ['f', 'fshiftnote', 'frequency shifter'],
  ['f', 'fshiftphase', 'frequency shifter'],

  ['f', 'triode', 'tube distortion'],
  ['f', 'krush', 'shape/bass enhancer'],
  ['f', 'kcutoff', ''],
  ['f', 'octer', 'octaver effect'],
  ['f', 'octersub', 'octaver effect'],
  ['f', 'octersubsub', 'octaver effect'],
  ['f', 'ring', 'ring modulation'],
  ['f', 'ringf', 'ring modulation'],
  ['f', 'ringdf', 'ring modulation'],
  ['f', 'distort', 'noisy fuzzy distortion'],
  ['f', 'freeze', 'Spectral freeze'],
  ['f', 'xsdelay', ''],
  ['f', 'tsdelay', ''],
  ['f', 'real', 'Spectral conform'],
  ['f', 'imag', ''],
  ['f', 'enhance', 'Spectral enhance'],
  ['f', 'partials', ''],
  ['f', 'comb', 'Spectral comb'],
  ['f', 'smear', 'Spectral smear'],
  ['f', 'scram', 'Spectral scramble'],
  ['f', 'binshift', 'Spectral binshift'],
  ['f', 'hbrick', 'High pass sort of spectral filter'],
  ['f', 'lbrick', 'Low pass sort of spectral filter'],
  ['f', 'midichan', ''],
  ['f', 'control', ''],
  ['f', 'ccn', ''],
  ['f', 'ccv', ''],
  ['f', 'polyTouch', ''],
  ['f', 'midibend', ''],
  ['f', 'miditouch', ''],
  ['f', 'ctlNum', ''],
  ['f', 'frameRate', ''],
  ['f', 'frames', ''],
  ['f', 'hours', ''],
  ['s', 'midicmd', ''],
  ['f', 'minutes', ''],
  ['f', 'progNum', ''],
  ['f', 'seconds', ''],
  ['f', 'songPtr', ''],
  ['f', 'uid', ''],
  ['f', 'val', ''],
  ['f', 'cps', ''],
  ['f', 'clip', ''],
];

// TODO: slice / splice https://www.youtube.com/watch?v=hKhPdO0RKDQ&list=PL2lW1zNIIwj3bDkh-Y3LUGDuRcoUigoDs&index=13

const _name = (name, ...pats) => sequence(...pats).withValue((x) => ({ [name]: x }));

const _setter = (func, name) =>
  function (...pats) {
    if (!pats.length) {
      return this.fmap((value) => ({ [name]: value }));
    }
    return this.set(func(...pats));
  };

generic_params.forEach(([type, name, description]) => {
  controls[name] = (...pats) => _name(name, ...pats);
  Pattern$1.prototype[name] = _setter(controls[name], name);
});

// create custom param
controls.createParam = (name) => {
  const func = (...pats) => _name(name, ...pats);
  Pattern$1.prototype[name] = _setter(func, name);
  return (...pats) => _name(name, ...pats);
};

controls.createParams = (...names) =>
  names.reduce((acc, name) => Object.assign(acc, { [name]: controls.createParam(name) }), {});

/*
euclid.mjs - <short description TODO>
Copyright (C) 2022 Strudel contributors - see <https://github.com/tidalcycles/strudel/blob/main/packages/core/euclid.mjs>
This program is free software: you can redistribute it and/or modify it under the terms of the GNU Affero General Public License as published by the Free Software Foundation, either version 3 of the License, or (at your option) any later version. This program is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU Affero General Public License for more details. You should have received a copy of the GNU Affero General Public License along with this program.  If not, see <https://www.gnu.org/licenses/>.
*/

/**
 * Changes the structure of the pattern to form an euclidean rhythm.
 * Euclidian rhythms are rhythms obtained using the greatest common
 * divisor of two numbers.  They were described in 2004 by Godfried
 * Toussaint, a canadian computer scientist.  Euclidian rhythms are
 * really useful for computer/algorithmic music because they can
 * describe a large number of rhythms with a couple of numbers.
 *
 * @memberof Pattern
 * @name euclid
 * @param {number} pulses the number of onsets / beats
 * @param {number} steps the number of steps to fill
 * @returns Pattern
 * @example
 * // The Cuban tresillo pattern.
 * note("c3").euclid(3,8)
 */

/**
 * Like `iter`, but has an additional parameter for 'rotating' the resulting sequence.
 * @memberof Pattern
 * @name euclidRot
 * @param {number} pulses the number of onsets / beats
 * @param {number} steps the number of steps to fill
 * @param {number} rotation offset in steps
 * @returns Pattern
 * @example
 * // A Samba rhythm necklace from Brazil
 * note("c3").euclidRot(3,16,14)
 */

/**
 * @example // A thirteenth century Persian rhythm called Khafif-e-ramal.
 * note("c3").euclid(2,5)
 * @example // The archetypal pattern of the Cumbia from Colombia, as well as a Calypso rhythm from Trinidad.
 * note("c3").euclid(3,4)
 * @example // Another thirteenth century Persian rhythm by the name of Khafif-e-ramal, as well as a Rumanian folk-dance rhythm.
 * note("c3").euclidRot(3,5,2)
 * @example // A Ruchenitza rhythm used in a Bulgarian folk-dance.
 * note("c3").euclid(3,7)
 * @example // The Cuban tresillo pattern.
 * note("c3").euclid(3,8)
 * @example // Another Ruchenitza Bulgarian folk-dance rhythm.
 * note("c3").euclid(4,7)
 * @example // The Aksak rhythm of Turkey.
 * note("c3").euclid(4,9)
 * @example // The metric pattern used by Frank Zappa in his piece titled Outside Now.
 * note("c3").euclid(4,11)
 * @example // Yields the York-Samai pattern, a popular Arab rhythm.
 * note("c3").euclid(5,6)
 * @example // The Nawakhat pattern, another popular Arab rhythm.
 * note("c3").euclid(5,7)
 * @example // The Cuban cinquillo pattern.
 * note("c3").euclid(5,8)
 * @example // A popular Arab rhythm called Agsag-Samai.
 * note("c3").euclid(5,9)
 * @example // The metric pattern used by Moussorgsky in Pictures at an Exhibition.
 * note("c3").euclid(5,11)
 * @example // The Venda clapping pattern of a South African children’s song.
 * note("c3").euclid(5,12)
 * @example // The Bossa-Nova rhythm necklace of Brazil.
 * note("c3").euclid(5,16)
 * @example // A typical rhythm played on the Bendir (frame drum).
 * note("c3").euclid(7,8)
 * @example // A common West African bell pattern.
 * note("c3").euclid(7,12)
 * @example // A Samba rhythm necklace from Brazil.
 * note("c3").euclidRot(7,16,14)
 * @example // A rhythm necklace used in the Central African Republic.
 * note("c3").euclid(9,16)
 * @example // A rhythm necklace of the Aka Pygmies of Central Africa.
 * note("c3").euclidRot(11,24,14)
 * @example // Another rhythm necklace of the Aka Pygmies of the upper Sangha.
 * note("c3").euclidRot(13,24,5)
 */

const _euclidRot = function (pulses, steps, rotation) {
  const b = bjork(steps, pulses);
  if (rotation) {
    return rotate(b, -rotation);
  }
  return b;
};

const euclid = register('euclid', function (pulses, steps, pat) {
  return pat.struct(_euclidRot(steps, pulses, 0));
});

const { euclidrot, euclidRot } = register(['euclidrot', 'euclidRot'], function (pulses, steps, rotation, pat) {
  return pat.struct(_euclidRot(steps, pulses, rotation));
});

/**
 * Similar to `euclid`, but each pulse is held until the next pulse,
 * so there will be no gaps.
 * @name euclidLegato
 * @memberof Pattern
 * @example
 * n("g2").decay(.1).sustain(.3).euclidLegato(3,8)
 */

const _euclidLegato = function (pulses, steps, rotation, pat) {
  const bin_pat = _euclidRot(pulses, steps, rotation);
  const firstOne = bin_pat.indexOf(1);
  const gapless = rotate(bin_pat, firstOne)
    .join('')
    .split('1')
    .slice(1)
    .map((s) => [s.length + 1, true]);
  return pat.struct(timeCat(...gapless)).late(fraction(firstOne).div(steps));
};

const euclidLegato = register(['euclidLegato'], function (pulses, steps, pat) {
  return _euclidLegato(pulses, steps, 0, pat);
});

const euclidLegatoRot = register(['euclidLegatoRot'], function (pulses, steps, rotation, pat) {
  return _euclidLegato(pulses, steps, rotation, pat);
});

/*
signal.mjs - <short description TODO>
Copyright (C) 2022 Strudel contributors - see <https://github.com/tidalcycles/strudel/blob/main/packages/core/signal.mjs>
This program is free software: you can redistribute it and/or modify it under the terms of the GNU Affero General Public License as published by the Free Software Foundation, either version 3 of the License, or (at your option) any later version. This program is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU Affero General Public License for more details. You should have received a copy of the GNU Affero General Public License along with this program.  If not, see <https://www.gnu.org/licenses/>.
*/

function steady(value) {
  // A continuous value
  return new Pattern$1((state) => [new Hap(undefined, state.span, value)]);
}

const signal = (func) => {
  const query = (state) => [new Hap(undefined, state.span, func(state.span.midpoint()))];
  return new Pattern$1(query);
};

const isaw = signal((t) => 1 - (t % 1));
const isaw2 = isaw.toBipolar();

/**
 *  A sawtooth signal between 0 and 1.
 *
 * @return {Pattern}
 * @example
 * "c3 [eb3,g3] g2 [g3,bb3]".legato(saw.slow(4)).note()
 * @example
 * saw.range(0,8).segment(8).scale('C major').slow(4).note()
 *
 */
const saw = signal((t) => t % 1);
const saw2 = saw.toBipolar();

const sine2 = signal((t) => Math.sin(Math.PI * 2 * t));

/**
 *  A sine signal between 0 and 1.
 *
 * @return {Pattern}
 * @example
 * sine.segment(16).range(0,15).slow(2).scale('C minor').note()
 *
 */
const sine = sine2.fromBipolar();

/**
 *  A cosine signal between 0 and 1.
 *
 * @return {Pattern}
 * @example
 * stack(sine,cosine).segment(16).range(0,15).slow(2).scale('C minor').note()
 *
 */
const cosine = sine._early(fraction(1).div(4));
const cosine2 = sine2._early(fraction(1).div(4));

/**
 *  A square signal between 0 and 1.
 *
 * @return {Pattern}
 * @example
 * square.segment(2).range(0,7).scale('C minor').note()
 *
 */
const square = signal((t) => Math.floor((t * 2) % 2));
const square2 = square.toBipolar();

/**
 *  A triangle signal between 0 and 1.
 *
 * @return {Pattern}
 * @example
 * tri.segment(8).range(0,7).scale('C minor').note()
 *
 */
const tri = fastcat(isaw, saw);
const tri2 = fastcat(isaw2, saw2);

const time$1 = signal(id$1);

// random signals

const xorwise = (x) => {
  const a = (x << 13) ^ x;
  const b = (a >> 17) ^ a;
  return (b << 5) ^ b;
};

// stretch 300 cycles over the range of [0,2**29 == 536870912) then apply the xorshift algorithm
const _frac = (x) => x - Math.trunc(x);

const timeToIntSeed = (x) => xorwise(Math.trunc(_frac(x / 300) * 536870912));

const intSeedToRand = (x) => (x % 536870912) / 536870912;

const timeToRand = (x) => Math.abs(intSeedToRand(timeToIntSeed(x)));

/**
 *
 */

/**
 * A continuous pattern of random numbers, between 0 and 1.
 *
 * @name rand
 * @example
 * // randomly change the cutoff
 * s("bd sd,hh*4").cutoff(rand.range(500,2000))
 *
 */
const rand = signal(timeToRand);
/**
 * A continuous pattern of random numbers, between -1 and 1
 */
const rand2 = rand.toBipolar();

const _brandBy = (p) => rand.fmap((x) => x < p);
const brandBy = (pPat) => reify(pPat).fmap(_brandBy).innerJoin();
const brand = _brandBy(0.5);

const _irand = (i) => rand.fmap((x) => Math.trunc(x * i));

/**
 * A continuous pattern of random integers, between 0 and n-1.
 *
 * @name irand
 * @param {number} n max value (exclusive)
 * @example
 * // randomly select scale notes from 0 - 7 (= C to C)
 * irand(8).struct("x(3,8)").scale('C minor').note()
 *
 */
const irand = (ipat) => reify(ipat).fmap(_irand).innerJoin();

const __chooseWith = (pat, xs) => {
  xs = xs.map(reify);
  if (xs.length == 0) {
    return silence;
  }
  return pat.range(0, xs.length).fmap((i) => xs[Math.floor(i)]);
};
/**
 * Choose from the list of values (or patterns of values) using the given
 * pattern of numbers, which should be in the range of 0..1
 * @param {Pattern} pat
 * @param {*} xs
 * @returns {Pattern}
 */
const chooseWith = (pat, xs) => {
  return __chooseWith(pat, xs).outerJoin();
};

/**
 * As with {chooseWith}, but the structure comes from the chosen values, rather
 * than the pattern you're using to choose with.
 * @param {Pattern} pat
 * @param {*} xs
 * @returns {Pattern}
 */
const chooseInWith = (pat, xs) => {
  return __chooseWith(pat, xs).innerJoin();
};

/**
 * Chooses randomly from the given list of elements.
 * @param  {...any} xs values / patterns to choose from.
 * @returns {Pattern} - a continuous pattern.
 */
const choose = (...xs) => chooseWith(rand, xs);

/**
 * Chooses from the given list of values (or patterns of values), according
 * to the pattern that the method is called on. The pattern should be in
 * the range 0 .. 1.
 * @param  {...any} xs
 * @returns {Pattern}
 */
Pattern$1.prototype.choose = function (...xs) {
  return chooseWith(this, xs);
};

/**
 * As with choose, but the pattern that this method is called on should be
 * in the range -1 .. 1
 * @param  {...any} xs
 * @returns {Pattern}
 */
Pattern$1.prototype.choose2 = function (...xs) {
  return chooseWith(this.fromBipolar(), xs);
};

/**
 * Picks one of the elements at random each cycle.
 * @returns {Pattern}
 * @example
 * chooseCycles("bd", "hh", "sd").s().fast(4)
 * @example
 * "bd | hh | sd".s().fast(4)
 */
const chooseCycles = (...xs) => chooseInWith(rand.segment(1), xs);

const randcat = chooseCycles;

const _wchooseWith = function (pat, ...pairs) {
  const values = pairs.map((pair) => reify(pair[0]));
  const weights = [];
  let accum = 0;
  for (const pair of pairs) {
    accum += pair[1];
    weights.push(accum);
  }
  const total = accum;
  const match = function (r) {
    const find = r * total;
    return values[weights.findIndex((x) => x > find, weights)];
  };
  return pat.fmap(match);
};

const wchooseWith = (...args) => _wchooseWith(...args).outerJoin();

const wchoose = (...pairs) => wchooseWith(rand, ...pairs);

const wchooseCycles = (...pairs) => _wchooseWith(rand, ...pairs).innerJoin();

// this function expects pat to be a pattern of floats...
const perlinWith = (pat) => {
  const pata = pat.fmap(Math.floor);
  const patb = pat.fmap((t) => Math.floor(t) + 1);
  const smootherStep = (x) => 6.0 * x ** 5 - 15.0 * x ** 4 + 10.0 * x ** 3;
  const interp = (x) => (a) => (b) => a + smootherStep(x) * (b - a);
  return pat.sub(pata).fmap(interp).appBoth(pata.fmap(timeToRand)).appBoth(patb.fmap(timeToRand));
};

/**
 * Generates a continuous pattern of [perlin noise](https://en.wikipedia.org/wiki/Perlin_noise), in the range 0..1.
 *
 * @name perlin
 * @example
 * // randomly change the cutoff
 * s("bd sd,hh*4").cutoff(perlin.range(500,2000))
 *
 */
const perlin = perlinWith(time$1.fmap((v) => Number(v)));

const degradeByWith = register('degradeByWith', (withPat, x, pat) =>
  pat.fmap((a) => (_) => a).appLeft(withPat.filterValues((v) => v > x)),
);

/**
 * Randomly removes events from the pattern by a given amount.
 * 0 = 0% chance of removal
 * 1 = 100% chance of removal
 *
 * @name degradeBy
 * @memberof Pattern
 * @param {number} amount - a number between 0 and 1
 * @returns Pattern
 * @example
 * s("hh*8").degradeBy(0.2)
 * @example
 * s("[hh?0.2]*8")
 */
const degradeBy = register('degradeBy', function (x, pat) {
  return pat._degradeByWith(rand, x);
});

/**
 *
 * Randomly removes 50% of events from the pattern. Shorthand for `.degradeBy(0.5)`
 *
 * @name degrade
 * @memberof Pattern
 * @returns Pattern
 * @example
 * s("hh*8").degrade()
 * @example
 * s("[hh?]*8")
 */
const degrade = register('degrade', (pat) => pat._degradeBy(0.5));

/**
 * Inverse of {@link Pattern#degradeBy}: Randomly removes events from the pattern by a given amount.
 * 0 = 100% chance of removal
 * 1 = 0% chance of removal
 * Events that would be removed by degradeBy are let through by undegradeBy and vice versa (see second example).
 *
 * @name undegradeBy
 * @memberof Pattern
 * @param {number} amount - a number between 0 and 1
 * @returns Pattern
 * @example
 * s("hh*8").undegradeBy(0.2)
 */
const undegradeBy = register('undegradeBy', function (x, pat) {
  return pat._degradeByWith(
    rand.fmap((r) => 1 - r),
    x,
  );
});

const undegrade = register('undegrade', (pat) => pat._undegradeBy(0.5));

/**
 *
 * Randomly applies the given function by the given probability.
 * Similar to {@link Pattern#someCyclesBy}
 *
 * @name sometimesBy
 * @memberof Pattern
 * @param {number | Pattern} probability - a number between 0 and 1
 * @param {function} function - the transformation to apply
 * @returns Pattern
 * @example
 * s("hh(3,8)").sometimesBy(.4, x=>x.speed("0.5"))
 */

const sometimesBy = register('sometimesBy', function (patx, func, pat) {
  return reify(patx)
    .fmap((x) => stack(pat._degradeBy(x), func(pat._undegradeBy(1 - x))))
    .innerJoin();
});

/**
 *
 * Applies the given function with a 50% chance
 *
 * @name sometimes
 * @memberof Pattern
 * @param {function} function - the transformation to apply
 * @returns Pattern
 * @example
 * s("hh*4").sometimes(x=>x.speed("0.5"))
 */
const sometimes = register('sometimes', function (func, pat) {
  return pat._sometimesBy(0.5, func);
});

/**
 *
 * Randomly applies the given function by the given probability on a cycle by cycle basis.
 * Similar to {@link Pattern#sometimesBy}
 *
 * @name someCyclesBy
 * @memberof Pattern
 * @param {number | Pattern} probability - a number between 0 and 1
 * @param {function} function - the transformation to apply
 * @returns Pattern
 * @example
 * s("hh(3,8)").someCyclesBy(.3, x=>x.speed("0.5"))
 */

const someCyclesBy = register('someCyclesBy', function (patx, func, pat) {
  return reify(patx)
    .fmap((x) =>
      stack(
        pat._degradeByWith(rand._segment(1), x),
        func(pat._degradeByWith(rand.fmap((r) => 1 - r)._segment(1), 1 - x)),
      ),
    )
    .innerJoin();
});

/**
 *
 * Shorthand for `.someCyclesBy(0.5, fn)`
 *
 * @name someCycles
 * @memberof Pattern
 * @returns Pattern
 * @example
 * s("hh(3,8)").someCycles(x=>x.speed("0.5"))
 */
const someCycles = register('someCycles', function (func, pat) {
  return pat._someCyclesBy(0.5, func);
});

/**
 *
 * Shorthand for `.sometimesBy(0.75, fn)`
 *
 * @name often
 * @memberof Pattern
 * @returns Pattern
 * @example
 * s("hh*8").often(x=>x.speed("0.5"))
 */
const often = register('often', function (func, pat) {
  return pat.sometimesBy(0.75, func);
});

/**
 *
 * Shorthand for `.sometimesBy(0.25, fn)`
 *
 * @name rarely
 * @memberof Pattern
 * @returns Pattern
 * @example
 * s("hh*8").rarely(x=>x.speed("0.5"))
 */
const rarely = register('rarely', function (func, pat) {
  return pat.sometimesBy(0.25, func);
});

/**
 *
 * Shorthand for `.sometimesBy(0.1, fn)`
 *
 * @name almostNever
 * @memberof Pattern
 * @returns Pattern
 * @example
 * s("hh*8").almostNever(x=>x.speed("0.5"))
 */
const almostNever = register('almostNever', function (func, pat) {
  return pat.sometimesBy(0.1, func);
});

/**
 *
 * Shorthand for `.sometimesBy(0.9, fn)`
 *
 * @name almostAlways
 * @memberof Pattern
 * @returns Pattern
 * @example
 * s("hh*8").almostAlways(x=>x.speed("0.5"))
 */
const almostAlways = register('almostAlways', function (func, pat) {
  return pat.sometimesBy(0.9, func);
});

/**
 *
 * Shorthand for `.sometimesBy(0, fn)` (never calls fn)
 *
 * @name never
 * @memberof Pattern
 * @returns Pattern
 * @example
 * s("hh*8").never(x=>x.speed("0.5"))
 */
const never = register('never', function (_, pat) {
  return pat;
});

/**
 *
 * Shorthand for `.sometimesBy(1, fn)` (always calls fn)
 *
 * @name always
 * @memberof Pattern
 * @returns Pattern
 * @example
 * s("hh*8").always(x=>x.speed("0.5"))
 */
const always = register('always', function (func, pat) {
  return func(pat);
});

/*
speak.mjs - <short description TODO>
Copyright (C) 2022 Strudel contributors - see <https://github.com/tidalcycles/strudel/blob/main/packages/core/speak.mjs>
This program is free software: you can redistribute it and/or modify it under the terms of the GNU Affero General Public License as published by the Free Software Foundation, either version 3 of the License, or (at your option) any later version. This program is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU Affero General Public License for more details. You should have received a copy of the GNU Affero General Public License along with this program.  If not, see <https://www.gnu.org/licenses/>.
*/

let synth;
try {
  synth = window?.speechSynthesis;
} catch (err) {
  console.warn('cannot use window: not in browser?');
}

let allVoices = synth?.getVoices();
// console.log('voices', allVoices);

function triggerSpeech(words, lang, voice) {
  synth.cancel();
  const utterance = new SpeechSynthesisUtterance(words);
  utterance.lang = lang;
  allVoices = synth.getVoices();
  const voices = allVoices.filter((v) => v.lang.includes(lang));
  if (typeof voice === 'number') {
    utterance.voice = voices[voice % voices.length];
  } else if (typeof voice === 'string') {
    utterance.voice = voices.find((voice) => voice.name === voice);
  }
  // console.log(utterance.voice?.name, utterance.voice?.lang);
  speechSynthesis.speak(utterance);
}

const speak = register('speak', function (lang, voice, pat) {
  return pat.onTrigger((_, hap) => {
    triggerSpeech(hap.value, lang, voice);
  });
});

/*
evaluate.mjs - <short description TODO>
Copyright (C) 2022 Strudel contributors - see <https://github.com/tidalcycles/strudel/blob/main/packages/eval/evaluate.mjs>
This program is free software: you can redistribute it and/or modify it under the terms of the GNU Affero General Public License as published by the Free Software Foundation, either version 3 of the License, or (at your option) any later version. This program is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU Affero General Public License for more details. You should have received a copy of the GNU Affero General Public License along with this program.  If not, see <https://www.gnu.org/licenses/>.
*/

let scoped = false;
const evalScope = async (...args) => {
  if (scoped) {
    console.warn('evalScope was called more than once.');
  }
  scoped = true;
  const results = await Promise.allSettled(args);
  const modules = results.filter((result) => result.status === 'fulfilled').map((r) => r.value);
  results.forEach((result, i) => {
    if (result.status === 'rejected') {
      console.warn(`evalScope: module with index ${i} could not be loaded:`, result.reason);
    }
  });
  // Object.assign(globalThis, ...modules);
  // below is a fix for above commented out line
  // same error as https://github.com/vitest-dev/vitest/issues/1807 when running this on astro server
  modules.forEach((module) => {
    Object.entries(module).forEach(([name, value]) => {
      globalThis[name] = value;
    });
  });
};

function safeEval(str, options = {}) {
  const { wrapExpression = true, wrapAsync = true } = options;
  if (wrapExpression) {
    str = `{${str}}`;
  }
  if (wrapAsync) {
    str = `(async ()=>${str})()`;
  }
  const body = `"use strict";return (${str})`;
  return Function(body)();
}

const evaluate$1 = async (code, transpiler) => {
  if (!scoped) {
    await evalScope(); // at least scope Pattern.prototype.boostrap
  }
  if (transpiler) {
    code = transpiler(code); // transform syntactically correct js code to semantically usable code
  }
  // if no transpiler is given, we expect a single instruction (!wrapExpression)
  const options = { wrapExpression: !!transpiler };
  let evaluated = await safeEval(code, options);
  if (!isPattern(evaluated)) {
    console.log('evaluated', evaluated);
    const message = `got "${typeof evaluated}" instead of pattern`;
    throw new Error(message + (typeof evaluated === 'function' ? ', did you forget to call a function?' : '.'));
  }
  return { mode: 'javascript', pattern: evaluated };
};

// will move to https://github.com/felixroos/zyklus
// TODO: started flag

function createClock(
  getTime,
  callback, // called slightly before each cycle
  duration = 0.05, // duration of each cycle
  interval = 0.1, // interval between callbacks
  overlap = 0.1, // overlap between callbacks
) {
  let tick = 0; // counts callbacks
  let phase = 0; // next callback time
  let precision = 10 ** 4; // used to round phase
  let minLatency = 0.01;
  const setDuration = (setter) => (duration = setter(duration));
  overlap = overlap || interval / 2;
  const onTick = () => {
    const t = getTime();
    const lookahead = t + interval + overlap; // the time window for this tick
    if (phase === 0) {
      phase = t + minLatency;
    }
    // callback as long as we're inside the lookahead
    while (phase < lookahead) {
      phase = Math.round(phase * precision) / precision;
      phase >= t && callback(phase, duration, tick);
      phase < t && console.log('TOO LATE', phase); // what if latency is added from outside?
      phase += duration; // increment phase by duration
      tick++;
    }
  };
  let intervalID;
  const start = () => {
    clear(); // just in case start was called more than once
    onTick();
    intervalID = setInterval(onTick, interval * 1000);
  };
  const clear = () => intervalID !== undefined && clearInterval(intervalID);
  const pause = () => clear();
  const stop = () => {
    tick = 0;
    phase = 0;
    clear();
  };
  const getPhase = () => phase;
  // setCallback
  return { setDuration, start, stop, pause, duration, getPhase, minLatency };
}

/*
cyclist.mjs - <short description TODO>
Copyright (C) 2022 Strudel contributors - see <https://github.com/tidalcycles/strudel/blob/main/packages/core/cyclist.mjs>
This program is free software: you can redistribute it and/or modify it under the terms of the GNU Affero General Public License as published by the Free Software Foundation, either version 3 of the License, or (at your option) any later version. This program is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU Affero General Public License for more details. You should have received a copy of the GNU Affero General Public License along with this program.  If not, see <https://www.gnu.org/licenses/>.
*/

class Cyclist {
  worker;
  pattern;
  started = false;
  cps = 1; // TODO
  getTime;
  phase = 0;
  constructor({ interval, onTrigger, onToggle, onError, getTime, latency = 0.1 }) {
    this.getTime = getTime;
    this.onToggle = onToggle;
    this.latency = latency;
    const round = (x) => Math.round(x * 1000) / 1000;
    this.clock = createClock(
      getTime,
      (phase, duration, tick) => {
        if (tick === 0) {
          this.origin = phase;
        }
        const begin = round(phase - this.origin);
        this.phase = begin - latency;
        const end = round(begin + duration);
        const time = getTime();
        try {
          const haps = this.pattern.queryArc(begin, end); // get Haps
          haps.forEach((hap) => {
            if (hap.part.begin.equals(hap.whole.begin)) {
              const deadline = hap.whole.begin + this.origin - time + latency;
              const duration = hap.duration * 1;
              onTrigger?.(hap, deadline, duration);
            }
          });
        } catch (e) {
          logger(`[cyclist] error: ${e.message}`);
          onError?.(e);
        }
      }, // called slightly before each cycle
      interval, // duration of each cycle
    );
  }
  getPhase() {
    return this.getTime() - this.origin - this.latency;
  }
  now() {
    return this.getTime() - this.origin + this.clock.minLatency;
  }
  setStarted(v) {
    this.started = v;
    this.onToggle?.(v);
  }
  start() {
    if (!this.pattern) {
      throw new Error('Scheduler: no pattern set! call .setPattern first.');
    }
    logger('[cyclist] start');
    this.clock.start();
    this.setStarted(true);
  }
  pause() {
    logger('[cyclist] pause');
    this.clock.pause();
    this.setStarted(false);
  }
  stop() {
    logger('[cyclist] stop');
    this.clock.stop();
    this.setStarted(false);
  }
  setPattern(pat, autostart = false) {
    this.pattern = pat;
    if (autostart && !this.started) {
      this.start();
    }
  }
  setCps(cps = 1) {
    this.cps = cps;
  }
  log(begin, end, haps) {
    const onsets = haps.filter((h) => h.hasOnset());
    console.log(`${begin.toFixed(4)} - ${end.toFixed(4)} ${Array(onsets.length).fill('I').join('')}`);
  }
}

let time;
function getTime() {
  if (!time) {
    throw new Error('no time set! use setTime to define a time source');
  }
  return time();
}

function setTime(func) {
  time = func;
}

function repl({
  interval,
  defaultOutput,
  onSchedulerError,
  onEvalError,
  beforeEval,
  afterEval,
  getTime,
  transpiler,
  onToggle,
}) {
  const scheduler = new Cyclist({
    interval,
    onTrigger: async (hap, deadline, duration) => {
      try {
        if (!hap.context.onTrigger || !hap.context.dominantTrigger) {
          await defaultOutput(hap, deadline, duration);
        }
        if (hap.context.onTrigger) {
          const cps = 1;
          // call signature of output / onTrigger is different...
          await hap.context.onTrigger(getTime() + deadline, hap, getTime(), cps);
        }
      } catch (err) {
        logger(`[cyclist] error: ${err.message}`, 'error');
      }
    },
    onError: onSchedulerError,
    getTime,
    onToggle,
  });
  setTime(() => scheduler.getPhase()); // TODO: refactor?
  const evaluate = async (code, autostart = true) => {
    if (!code) {
      throw new Error('no code to evaluate');
    }
    try {
      beforeEval?.({ code });
      const { pattern } = await evaluate$1(code, transpiler);
      logger(`[eval] code updated`);
      scheduler.setPattern(pattern, autostart);
      afterEval?.({ code, pattern });
      return pattern;
    } catch (err) {
      // console.warn(`[repl] eval error: ${err.message}`);
      logger(`[eval] error: ${err.message}`, 'error');
      onEvalError?.(err);
    }
  };
  const stop = () => scheduler.stop();
  const start = () => scheduler.start();
  const pause = () => scheduler.pause();
  return { scheduler, evaluate, start, stop, pause };
}

/*
draw.mjs - <short description TODO>
Copyright (C) 2022 Strudel contributors - see <https://github.com/tidalcycles/strudel/blob/main/packages/tone/draw.mjs>
This program is free software: you can redistribute it and/or modify it under the terms of the GNU Affero General Public License as published by the Free Software Foundation, either version 3 of the License, or (at your option) any later version. This program is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU Affero General Public License for more details. You should have received a copy of the GNU Affero General Public License along with this program.  If not, see <https://www.gnu.org/licenses/>.
*/

const getDrawContext$1 = (id = 'test-canvas') => {
  let canvas = document.querySelector('#' + id);
  if (!canvas) {
    canvas = document.createElement('canvas');
    canvas.id = id;
    canvas.width = window.innerWidth;
    canvas.height = window.innerHeight;
    canvas.style = 'pointer-events:none;width:100%;height:100%;position:fixed;top:0;left:0;z-index:5';
    document.body.prepend(canvas);
  }
  return canvas.getContext('2d');
};

Pattern$1.prototype.draw = function (callback, { from, to, onQuery }) {
  if (window.strudelAnimation) {
    cancelAnimationFrame(window.strudelAnimation);
  }
  const ctx = getDrawContext$1();
  let cycle,
    events = [];
  const animate = (time) => {
    const t = getTime();
    if (from !== undefined && to !== undefined) {
      const currentCycle = Math.floor(t);
      if (cycle !== currentCycle) {
        cycle = currentCycle;
        const begin = currentCycle + from;
        const end = currentCycle + to;
        setTimeout(() => {
          events = this.query(new State(new TimeSpan(begin, end)))
            .filter(Boolean)
            .filter((event) => event.part.begin.equals(event.whole.begin));
          onQuery?.(events);
        }, 0);
      }
    }
    callback(ctx, events, t, time);
    window.strudelAnimation = requestAnimationFrame(animate);
  };
  requestAnimationFrame(animate);
  return this;
};

const cleanupDraw = (clearScreen = true) => {
  const ctx = getDrawContext$1();
  clearScreen && ctx.clearRect(0, 0, window.innerWidth, window.innerHeight);
  if (window.strudelAnimation) {
    cancelAnimationFrame(window.strudelAnimation);
  }
  if (window.strudelScheduler) {
    clearInterval(window.strudelScheduler);
  }
};

const { createParams } = controls;

let clearColor = '#22222210';

Pattern$1.prototype.animate = function ({ callback, sync = false, smear = 0.5 } = {}) {
  window.frame && cancelAnimationFrame(window.frame);
  const ctx = getDrawContext$1();
  const { clientWidth: ww, clientHeight: wh } = ctx.canvas;
  let smearPart = smear === 0 ? '99' : Number((1 - smear) * 100).toFixed(0);
  smearPart = smearPart.length === 1 ? `0${smearPart}` : smearPart;
  clearColor = `#200010${smearPart}`;
  const render = (t) => {
    let frame;
    /*     if (sync) {
      t = scheduler.now();
      frame = this.queryArc(t, t);
    } else { */
    t = Math.round(t);
    frame = this.slow(1000).queryArc(t, t);
    // }
    ctx.fillStyle = clearColor;
    ctx.fillRect(0, 0, ww, wh);
    frame.forEach((f) => {
      let { x, y, w, h, s, r, a = 0, fill = 'darkseagreen' } = f.value;
      w *= ww;
      h *= wh;
      if (r !== undefined && a !== undefined) {
        const radians = a * 2 * Math.PI;
        const [cx, cy] = [(ww - w) / 2, (wh - h) / 2];
        x = cx + Math.cos(radians) * r * cx;
        y = cy + Math.sin(radians) * r * cy;
      } else {
        x *= ww - w;
        y *= wh - h;
      }
      const val = { ...f.value, x, y, w, h };
      ctx.fillStyle = fill;
      if (s === 'rect') {
        ctx.fillRect(x, y, w, h);
      } else if (s === 'ellipse') {
        ctx.beginPath();
        ctx.ellipse(x + w / 2, y + h / 2, w / 2, h / 2, 0, 0, 2 * Math.PI);
        ctx.fill();
      }
      callback && callback(ctx, val, f);
    });
    window.frame = requestAnimationFrame(render);
  };
  window.frame = requestAnimationFrame(render);
  return silence;
};

const { x, y, w, h: h$1, a, r, fill, smear } = createParams('x', 'y', 'w', 'h', 'a', 'r', 'fill', 'smear');

const rescale = register('rescale', function (f, pat) {
  return pat.mul(x(f).w(f).y(f).h(f));
});

const moveXY = register('moveXY', function (dx, dy, pat) {
  return pat.add(x(dx).y(dy));
});

const zoomIn = register('zoomIn', function (f, pat) {
  const d = pure(1).sub(f).div(2);
  return pat.rescale(f).move(d, d);
});

/*
pianoroll.mjs - <short description TODO>
Copyright (C) 2022 Strudel contributors - see <https://github.com/tidalcycles/strudel/blob/main/packages/tone/pianoroll.mjs>
This program is free software: you can redistribute it and/or modify it under the terms of the GNU Affero General Public License as published by the Free Software Foundation, either version 3 of the License, or (at your option) any later version. This program is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU Affero General Public License for more details. You should have received a copy of the GNU Affero General Public License along with this program.  If not, see <https://www.gnu.org/licenses/>.
*/

const scale$1 = (normalized, min, max) => normalized * (max - min) + min;
const getValue = (e) => {
  let { value } = e;
  if (typeof e.value !== 'object') {
    value = { value };
  }
  let { note, n, freq, s } = value;
  if (freq) {
    return freqToMidi(freq);
  }
  note = note ?? n;
  if (typeof note === 'string') {
    return toMidi(note);
  }
  if (typeof note === 'number') {
    return note;
  }
  if (s) {
    return '_' + s;
  }
  return value;
};

Pattern$1.prototype.pianoroll = function ({
  cycles = 4,
  playhead = 0.5,
  overscan = 1,
  flipTime = 0,
  flipValues = 0,
  hideNegative = false,
  // inactive = '#C9E597',
  // inactive = '#FFCA28',
  inactive = '#7491D2',
  active = '#FFCA28',
  // background = '#2A3236',
  background = 'transparent',
  smear = 0,
  playheadColor = 'white',
  minMidi = 10,
  maxMidi = 90,
  autorange = 0,
  timeframe: timeframeProp,
  fold = 0,
  vertical = 0,
} = {}) {
  const ctx = getDrawContext$1();
  const w = ctx.canvas.width;
  const h = ctx.canvas.height;
  let from = -cycles * playhead;
  let to = cycles * (1 - playhead);

  if (timeframeProp) {
    console.warn('timeframe is deprecated! use from/to instead');
    from = 0;
    to = timeframeProp;
  }
  const timeAxis = vertical ? h : w;
  const valueAxis = vertical ? w : h;
  let timeRange = vertical ? [timeAxis, 0] : [0, timeAxis]; // pixel range for time
  const timeExtent = to - from; // number of seconds that fit inside the canvas frame
  const valueRange = vertical ? [0, valueAxis] : [valueAxis, 0]; // pixel range for values
  let valueExtent = maxMidi - minMidi + 1; // number of "slots" for values, overwritten if autorange true
  let barThickness = valueAxis / valueExtent; // pixels per value, overwritten if autorange true
  let foldValues = [];
  flipTime && timeRange.reverse();
  flipValues && valueRange.reverse();

  this.draw(
    (ctx, events, t) => {
      ctx.fillStyle = background;
      ctx.globalAlpha = 1; // reset!
      if (!smear) {
        ctx.clearRect(0, 0, w, h);
        ctx.fillRect(0, 0, w, h);
      }
      const inFrame = (event) =>
        (!hideNegative || event.whole.begin >= 0) && event.whole.begin <= t + to && event.whole.end >= t + from;
      events.filter(inFrame).forEach((event) => {
        const isActive = event.whole.begin <= t && event.whole.end > t;
        ctx.fillStyle = event.context?.color || inactive;
        ctx.strokeStyle = event.context?.color || active;
        ctx.globalAlpha = event.context.velocity ?? 1;
        const timePx = scale$1((event.whole.begin - (flipTime ? to : from)) / timeExtent, ...timeRange);
        let durationPx = scale$1(event.duration / timeExtent, 0, timeAxis);
        const value = getValue(event);
        const valuePx = scale$1(
          fold ? foldValues.indexOf(value) / foldValues.length : (Number(value) - minMidi) / valueExtent,
          ...valueRange,
        );
        let margin = 0;
        const offset = scale$1(t / timeExtent, ...timeRange);
        let coords;
        if (vertical) {
          coords = [
            valuePx + 1 - (flipValues ? barThickness : 0), // x
            timeAxis - offset + timePx + margin + 1 - (flipTime ? 0 : durationPx), // y
            barThickness - 2, // width
            durationPx - 2, // height
          ];
        } else {
          coords = [
            timePx - offset + margin + 1 - (flipTime ? durationPx : 0), // x
            valuePx + 1 - (flipValues ? 0 : barThickness), // y
            durationPx - 2, // widith
            barThickness - 2, // height
          ];
        }
        isActive ? ctx.strokeRect(...coords) : ctx.fillRect(...coords);
      });
      ctx.globalAlpha = 1; // reset!
      const playheadPosition = scale$1(-from / timeExtent, ...timeRange);
      // draw playhead
      ctx.strokeStyle = playheadColor;
      ctx.beginPath();
      if (vertical) {
        ctx.moveTo(0, playheadPosition);
        ctx.lineTo(valueAxis, playheadPosition);
      } else {
        ctx.moveTo(playheadPosition, 0);
        ctx.lineTo(playheadPosition, valueAxis);
      }
      ctx.stroke();
    },
    {
      from: from - overscan,
      to: to + overscan,
      onQuery: (events) => {
        const { min, max, values } = events.reduce(
          ({ min, max, values }, e) => {
            const v = getValue(e);
            return {
              min: v < min ? v : min,
              max: v > max ? v : max,
              values: values.includes(v) ? values : [...values, v],
            };
          },
          { min: Infinity, max: -Infinity, values: [] },
        );
        if (autorange) {
          minMidi = min;
          maxMidi = max;
          valueExtent = maxMidi - minMidi + 1;
        }
        foldValues = values.sort((a, b) => String(a).localeCompare(String(b)));
        barThickness = fold ? valueAxis / foldValues.length : valueAxis / valueExtent;
      },
    },
  );
  return this;
};

// this function allows drawing a pianoroll without ties to Pattern.prototype
// it will probably replace the above in the future
function pianoroll({
  time,
  haps,
  cycles = 4,
  playhead = 0.5,
  flipTime = 0,
  flipValues = 0,
  hideNegative = false,
  // inactive = '#C9E597',
  // inactive = '#FFCA28',
  inactive = '#7491D2',
  active = '#FFCA28',
  // background = '#2A3236',
  background = 'transparent',
  smear = 0,
  playheadColor = 'white',
  minMidi = 10,
  maxMidi = 90,
  autorange = 0,
  timeframe: timeframeProp,
  fold = 0,
  vertical = 0,
  ctx,
} = {}) {
  const w = ctx.canvas.width;
  const h = ctx.canvas.height;
  let from = -cycles * playhead;
  let to = cycles * (1 - playhead);

  if (timeframeProp) {
    console.warn('timeframe is deprecated! use from/to instead');
    from = 0;
    to = timeframeProp;
  }
  const timeAxis = vertical ? h : w;
  const valueAxis = vertical ? w : h;
  let timeRange = vertical ? [timeAxis, 0] : [0, timeAxis]; // pixel range for time
  const timeExtent = to - from; // number of seconds that fit inside the canvas frame
  const valueRange = vertical ? [0, valueAxis] : [valueAxis, 0]; // pixel range for values
  let valueExtent = maxMidi - minMidi + 1; // number of "slots" for values, overwritten if autorange true
  let barThickness = valueAxis / valueExtent; // pixels per value, overwritten if autorange true
  let foldValues = [];
  flipTime && timeRange.reverse();
  flipValues && valueRange.reverse();

  // onQuery
  const { min, max, values } = haps.reduce(
    ({ min, max, values }, e) => {
      const v = getValue(e);
      return {
        min: v < min ? v : min,
        max: v > max ? v : max,
        values: values.includes(v) ? values : [...values, v],
      };
    },
    { min: Infinity, max: -Infinity, values: [] },
  );
  if (autorange) {
    minMidi = min;
    maxMidi = max;
    valueExtent = maxMidi - minMidi + 1;
  }
  // foldValues = values.sort((a, b) => a - b);
  foldValues = values.sort((a, b) => String(a).localeCompare(String(b)));
  barThickness = fold ? valueAxis / foldValues.length : valueAxis / valueExtent;

  ctx.fillStyle = background;
  ctx.globalAlpha = 1; // reset!
  if (!smear) {
    ctx.clearRect(0, 0, w, h);
    ctx.fillRect(0, 0, w, h);
  }
  /*   const inFrame = (event) =>
    (!hideNegative || event.whole.begin >= 0) && event.whole.begin <= time + to && event.whole.end >= time + from; */
  haps
    // .filter(inFrame)
    .forEach((event) => {
      const isActive = event.whole.begin <= time && event.whole.end > time;
      const color = event.value?.color || event.context?.color;
      ctx.fillStyle = color || inactive;
      ctx.strokeStyle = color || active;
      ctx.globalAlpha = event.context.velocity ?? 1;
      const timePx = scale$1((event.whole.begin - (flipTime ? to : from)) / timeExtent, ...timeRange);
      let durationPx = scale$1(event.duration / timeExtent, 0, timeAxis);
      const value = getValue(event);
      const valuePx = scale$1(
        fold ? foldValues.indexOf(value) / foldValues.length : (Number(value) - minMidi) / valueExtent,
        ...valueRange,
      );
      let margin = 0;
      const offset = scale$1(time / timeExtent, ...timeRange);
      let coords;
      if (vertical) {
        coords = [
          valuePx + 1 - (flipValues ? barThickness : 0), // x
          timeAxis - offset + timePx + margin + 1 - (flipTime ? 0 : durationPx), // y
          barThickness - 2, // width
          durationPx - 2, // height
        ];
      } else {
        coords = [
          timePx - offset + margin + 1 - (flipTime ? durationPx : 0), // x
          valuePx + 1 - (flipValues ? 0 : barThickness), // y
          durationPx - 2, // widith
          barThickness - 2, // height
        ];
      }
      isActive ? ctx.strokeRect(...coords) : ctx.fillRect(...coords);
    });
  ctx.globalAlpha = 1; // reset!
  const playheadPosition = scale$1(-from / timeExtent, ...timeRange);
  // draw playhead
  ctx.strokeStyle = playheadColor;
  ctx.beginPath();
  if (vertical) {
    ctx.moveTo(0, playheadPosition);
    ctx.lineTo(valueAxis, playheadPosition);
  } else {
    ctx.moveTo(playheadPosition, 0);
    ctx.lineTo(playheadPosition, valueAxis);
  }
  ctx.stroke();
  return this;
}

/*
ui.mjs - <short description TODO>
Copyright (C) 2022 Strudel contributors - see <https://github.com/tidalcycles/strudel/blob/main/packages/tone/ui.mjs>
This program is free software: you can redistribute it and/or modify it under the terms of the GNU Affero General Public License as published by the Free Software Foundation, either version 3 of the License, or (at your option) any later version. This program is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU Affero General Public License for more details. You should have received a copy of the GNU Affero General Public License along with this program.  If not, see <https://www.gnu.org/licenses/>.
*/

function frame(callback) {
  if (window.strudelAnimation) {
    cancelAnimationFrame(window.strudelAnimation);
  }
  const animate = (animationTime) => {
    callback(animationTime, getTime());
    window.strudelAnimation = requestAnimationFrame(animate);
  };
  requestAnimationFrame(animate);
}

const backgroundImage = function (src, animateOptions = {}) {
  const container = document.getElementById('code');
  const bg = 'background-image:url(' + src + ');background-size:contain;';
  container.style = bg;
  const { className: initialClassName } = container;
  const handleOption = (option, value) => {
    ({
      style: () => (container.style = bg + ';' + value),
      className: () => (container.className = value + ' ' + initialClassName),
    }[option]());
  };
  const funcOptions = Object.entries(animateOptions).filter(([_, v]) => typeof v === 'function');
  const stringOptions = Object.entries(animateOptions).filter(([_, v]) => typeof v === 'string');
  stringOptions.forEach(([option, value]) => handleOption(option, value));

  if (funcOptions.length === 0) {
    return;
  }
  frame((_, t) =>
    funcOptions.forEach(([option, value]) => {
      handleOption(option, value(t));
    }),
  );
};

const cleanupUi = () => {
  const container = document.getElementById('code');
  if (container) {
    container.style = '';
    // TODO: find a way to remove that duplication..
    container.className = 'grow flex text-gray-100 relative overflow-auto cursor-text pb-0'; // has to match App.tsx
  }
};

/*
gist.js - <short description TODO>
Copyright (C) 2022 Strudel contributors - see <https://github.com/tidalcycles/strudel/blob/main/packages/core/gist.js>
This program is free software: you can redistribute it and/or modify it under the terms of the GNU Affero General Public License as published by the Free Software Foundation, either version 3 of the License, or (at your option) any later version. This program is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU Affero General Public License for more details. You should have received a copy of the GNU Affero General Public License along with this program.  If not, see <https://www.gnu.org/licenses/>.
*/

// this is a shortcut to eval code from a gist
// why? to be able to shorten strudel code + e.g. be able to change instruments after links have been generated
const gist = (route, cache = true) =>
  fetch(`https://gist.githubusercontent.com/${route}?cachebust=${cache ? '' : Date.now()}`)
    .then((res) => res.text())
    .then((code) => eval(code));

/*
index.mjs - <short description TODO>
Copyright (C) 2022 Strudel contributors - see <https://github.com/tidalcycles/strudel/blob/main/packages/core/index.mjs>
This program is free software: you can redistribute it and/or modify it under the terms of the GNU Affero General Public License as published by the Free Software Foundation, either version 3 of the License, or (at your option) any later version. This program is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU Affero General Public License for more details. You should have received a copy of the GNU Affero General Public License along with this program.  If not, see <https://www.gnu.org/licenses/>.
*/
// below won't work with runtime.mjs (json import fails)
/* import * as p from './package.json';
export const version = p.version; */
logger('🌀 @strudel.cycles/core loaded 🌀');
if (globalThis._strudelLoaded) {
  console.warn(
    `@strudel.cycles/core was loaded more than once...
This might happen when you have multiple versions of strudel installed. 
Please check with "npm ls @strudel.cycles/core".`,
  );
}
globalThis._strudelLoaded = true;

const strudel = /*#__PURE__*/Object.freeze(/*#__PURE__*/Object.defineProperty({
	__proto__: null,
	Fraction: fraction,
	controls,
	drawLine,
	gist,
	euclid,
	euclidrot,
	euclidRot,
	euclidLegato,
	euclidLegatoRot,
	Hap,
	setStringParser,
	Pattern: Pattern$1,
	polyrhythm,
	pr,
	silence,
	pure,
	isPattern,
	reify,
	stack,
	slowcat,
	slowcatPrime,
	fastcat,
	cat,
	timeCat,
	sequence,
	seq,
	polymeterSteps,
	polymeter,
	pm,
	mask,
	struct,
	superimpose,
	set,
	keep,
	keepif,
	add,
	sub,
	mul,
	div,
	mod,
	pow,
	band,
	bor,
	bxor,
	blshift,
	brshift,
	lt,
	gt,
	lte,
	gte,
	eq,
	eqt,
	ne,
	net,
	and,
	or,
	func,
	register,
	round,
	floor,
	ceil,
	toBipolar,
	fromBipolar,
	range,
	rangex,
	range2,
	compress,
	compressSpan,
	compressspan,
	fastGap,
	fastgap,
	focus,
	focusSpan,
	focusspan,
	ply,
	fast,
	density,
	slow,
	sparsity,
	inside,
	outside,
	lastOf,
	firstOf,
	every,
	apply,
	cpm,
	early,
	late,
	zoom,
	zoomArc,
	zoomarc,
	linger,
	segment,
	invert,
	inv,
	when,
	off,
	brak,
	rev,
	hush,
	palindrome,
	juxBy,
	juxby,
	jux,
	stutWith,
	stutwith,
	stut,
	echoWith,
	echowith,
	echo,
	iter,
	iterBack,
	iterback,
	chunk,
	chunkBack,
	chunkback,
	bypass,
	duration,
	color,
	colour,
	velocity,
	legato,
	chop: chop$1,
	striate,
	steady,
	signal,
	isaw,
	isaw2,
	saw,
	saw2,
	sine2,
	sine,
	cosine,
	cosine2,
	square,
	square2,
	tri,
	tri2,
	time: time$1,
	rand,
	rand2,
	_brandBy,
	brandBy,
	brand,
	_irand,
	irand,
	__chooseWith,
	chooseWith,
	chooseInWith,
	choose,
	chooseCycles,
	randcat,
	wchoose,
	wchooseCycles,
	perlinWith,
	perlin,
	degradeByWith,
	degradeBy,
	degrade,
	undegradeBy,
	undegrade,
	sometimesBy,
	sometimes,
	someCyclesBy,
	someCycles,
	often,
	rarely,
	almostNever,
	almostAlways,
	never,
	always,
	State,
	TimeSpan,
	isNoteWithOctave,
	isNote,
	tokenizeNote,
	toMidi,
	fromMidi,
	freqToMidi,
	valueToMidi,
	getFreq,
	midi2note,
	_mod,
	getPlayableNoteValue,
	getFrequency,
	rotate,
	pipe,
	compose,
	removeUndefineds,
	flatten,
	id: id$1,
	constant,
	listRange,
	curry,
	parseNumeral,
	mapArgs,
	numeralArgs,
	parseFractional,
	fractionalArgs,
	speak,
	evalScope,
	evaluate: evaluate$1,
	repl,
	logKey,
	logger,
	getTime,
	setTime,
	getDrawContext: getDrawContext$1,
	cleanupDraw,
	x,
	y,
	w,
	h: h$1,
	a,
	r,
	fill,
	smear,
	rescale,
	moveXY,
	zoomIn,
	pianoroll,
	backgroundImage,
	cleanupUi
}, Symbol.toStringTag, { value: 'Module' }));

if (typeof DelayNode !== 'undefined') {
  class FeedbackDelayNode extends DelayNode {
    constructor(ac, wet, time, feedback) {
      super(ac);
      wet = Math.abs(wet);
      this.delayTime.value = time;

      const feedbackGain = ac.createGain();
      feedbackGain.gain.value = Math.min(Math.abs(feedback), 0.995);
      this.feedback = feedbackGain.gain;

      const delayGain = ac.createGain();
      delayGain.gain.value = wet;
      this.delayGain = delayGain;

      this.connect(feedbackGain);
      this.connect(delayGain);
      feedbackGain.connect(this);

      this.connect = (target) => delayGain.connect(target);
      return this;
    }
    start(t) {
      this.delayGain.gain.setValueAtTime(this.delayGain.gain.value, t + this.delayTime.value);
    }
  }

  AudioContext.prototype.createFeedbackDelay = function (wet, time, feedback) {
    return new FeedbackDelayNode(this, wet, time, feedback);
  };
}

if (typeof AudioContext !== 'undefined') {
  AudioContext.prototype.impulseResponse = function (duration, channels = 1) {
    const length = this.sampleRate * duration;
    const impulse = this.createBuffer(channels, length, this.sampleRate);
    const IR = impulse.getChannelData(0);
    for (let i = 0; i < length; i++) IR[i] = (2 * Math.random() - 1) * Math.pow(1 - i / length, duration);
    return impulse;
  };

  AudioContext.prototype.createReverb = function (duration) {
    const convolver = this.createConvolver();
    convolver.setDuration = (d) => {
      convolver.buffer = this.impulseResponse(d);
      convolver.duration = duration;
      return convolver;
    };
    convolver.setDuration(duration);
    return convolver;
  };
}

// TODO: make the reverb more exciting
// check out https://blog.gskinner.com/archives/2019/02/reverb-web-audio-api.html

const bufferCache = {}; // string: Promise<ArrayBuffer>
const loadCache = {}; // string: Promise<ArrayBuffer>

const getCachedBuffer = (url) => bufferCache[url];

function humanFileSize(bytes, si) {
  var thresh = si ? 1000 : 1024;
  if (bytes < thresh) return bytes + ' B';
  var units = si
    ? ['kB', 'MB', 'GB', 'TB', 'PB', 'EB', 'ZB', 'YB']
    : ['KiB', 'MiB', 'GiB', 'TiB', 'PiB', 'EiB', 'ZiB', 'YiB'];
  var u = -1;
  do {
    bytes /= thresh;
    ++u;
  } while (bytes >= thresh);
  return bytes.toFixed(1) + ' ' + units[u];
}

const getSampleBufferSource = async (s, n, note, speed, freq) => {
  let transpose = 0;
  if (freq !== undefined && note !== undefined) {
    logger('[sampler] hap has note and freq. ignoring note', 'warning');
  }
  let midi = valueToMidi({ freq, note }, 36);
  transpose = midi - 36; // C3 is middle C

  const ac = getAudioContext$1();
  // is sample from loaded samples(..)
  const samples = getLoadedSamples();
  if (!samples) {
    throw new Error('no samples loaded');
  }
  const bank = samples?.[s];
  if (!bank) {
    throw new Error(
      `sample not found: "${s}"`,
      // , try one of ${Object.keys(samples)
      // .map((s) => `"${s}"`)
      // .join(', ')}.
    );
  }
  if (typeof bank !== 'object') {
    throw new Error('wrong format for sample bank:', s);
  }
  let sampleUrl;
  if (Array.isArray(bank)) {
    sampleUrl = bank[n % bank.length];
  } else {
    const midiDiff = (noteA) => toMidi(noteA) - midi;
    // object format will expect keys as notes
    const closest = Object.keys(bank)
      .filter((k) => !k.startsWith('_'))
      .reduce(
        (closest, key, j) => (!closest || Math.abs(midiDiff(key)) < Math.abs(midiDiff(closest)) ? key : closest),
        null,
      );
    transpose = -midiDiff(closest); // semitones to repitch
    sampleUrl = bank[closest][n % bank[closest].length];
  }
  let buffer = await loadBuffer(sampleUrl, ac, s, n);
  if (speed < 0) {
    // should this be cached?
    buffer = reverseBuffer(buffer);
  }
  const bufferSource = ac.createBufferSource();
  bufferSource.buffer = buffer;
  const playbackRate = 1.0 * Math.pow(2, transpose / 12);
  // bufferSource.playbackRate.value = Math.pow(2, transpose / 12);
  bufferSource.playbackRate.value = playbackRate;
  return bufferSource;
};

const loadBuffer = (url, ac, s, n = 0) => {
  const label = s ? `sound "${s}:${n}"` : 'sample';
  if (!loadCache[url]) {
    logger(`[sampler] load ${label}..`, 'load-sample', { url });
    const timestamp = Date.now();
    loadCache[url] = fetch(url)
      .then((res) => res.arrayBuffer())
      .then(async (res) => {
        const took = Date.now() - timestamp;
        const size = humanFileSize(res.byteLength);
        // const downSpeed = humanFileSize(res.byteLength / took);
        logger(`[sampler] load ${label}... done! loaded ${size} in ${took}ms`, 'loaded-sample', { url });
        const decoded = await ac.decodeAudioData(res);
        bufferCache[url] = decoded;
        return decoded;
      });
  }
  return loadCache[url];
};

function reverseBuffer(buffer) {
  const ac = getAudioContext$1();
  const reversed = ac.createBuffer(buffer.numberOfChannels, buffer.length, ac.sampleRate);
  for (let channel = 0; channel < buffer.numberOfChannels; channel++) {
    reversed.copyToChannel(buffer.getChannelData(channel).slice().reverse(), channel, channel);
  }
  return reversed;
}

const getLoadedBuffer = (url) => {
  return bufferCache[url];
};

let sampleCache = { current: undefined };

/**
 * Loads a collection of samples to use with `s`
 *
 * @example
 * samples({
 *  bd: '808bd/BD0000.WAV',
 *  sd: '808sd/SD0010.WAV'
 *  }, 'https://raw.githubusercontent.com/tidalcycles/Dirt-Samples/master/');
 * s("[bd ~]*2, [~ hh]*2, ~ sd")
 *
 */

const samples = async (sampleMap, baseUrl = sampleMap._base || '') => {
  if (typeof sampleMap === 'string') {
    if (sampleMap.startsWith('github:')) {
      const [_, path] = sampleMap.split('github:');
      sampleMap = `https://raw.githubusercontent.com/${path}/strudel.json`;
    }
    if (typeof fetch !== 'function') {
      // not a browser
      return;
    }
    const base = sampleMap.split('/').slice(0, -1).join('/');
    if (typeof fetch === 'undefined') {
      // skip fetch when in node / testing
      return;
    }
    return fetch(sampleMap)
      .then((res) => res.json())
      .then((json) => samples(json, baseUrl || json._base || base))
      .catch((error) => {
        console.error(error);
        throw new Error(`error loading "${sampleMap}"`);
      });
  }
  sampleCache.current = {
    ...sampleCache.current,
    ...Object.fromEntries(
      Object.entries(sampleMap).map(([key, value]) => {
        if (typeof value === 'string') {
          value = [value];
        }
        if (typeof value !== 'object') {
          throw new Error('wrong sample map format for ' + key);
        }
        baseUrl = value._base || baseUrl;
        const replaceUrl = (v) => (baseUrl + v).replace('github:', 'https://raw.githubusercontent.com/');
        if (Array.isArray(value)) {
          return [key, value.map(replaceUrl)];
        }
        // must be object
        return [
          key,
          Object.fromEntries(
            Object.entries(value).map(([note, samples]) => {
              return [note, (typeof samples === 'string' ? [samples] : samples).map(replaceUrl)];
            }),
          ),
        ];
      }),
    ),
  };
};

const resetLoadedSamples = () => {
  sampleCache.current = undefined;
};

const getLoadedSamples = () => sampleCache.current;

// credits to webdirt: https://github.com/dktr0/WebDirt/blob/41342e81d6ad694a2310d491fef7b7e8b0929efe/js-src/Graph.js#L597
var vowelFormant = {
  a: { freqs: [660, 1120, 2750, 3000, 3350], gains: [1, 0.5012, 0.0708, 0.0631, 0.0126], qs: [80, 90, 120, 130, 140] },
  e: { freqs: [440, 1800, 2700, 3000, 3300], gains: [1, 0.1995, 0.1259, 0.1, 0.1], qs: [70, 80, 100, 120, 120] },
  i: { freqs: [270, 1850, 2900, 3350, 3590], gains: [1, 0.0631, 0.0631, 0.0158, 0.0158], qs: [40, 90, 100, 120, 120] },
  o: { freqs: [430, 820, 2700, 3000, 3300], gains: [1, 0.3162, 0.0501, 0.0794, 0.01995], qs: [40, 80, 100, 120, 120] },
  u: { freqs: [370, 630, 2750, 3000, 3400], gains: [1, 0.1, 0.0708, 0.0316, 0.01995], qs: [40, 60, 100, 120, 120] },
};
if (typeof GainNode !== 'undefined') {
  class VowelNode extends GainNode {
    constructor(ac, letter) {
      super(ac);
      if (!vowelFormant[letter]) {
        throw new Error('vowel: unknown vowel ' + letter);
      }
      const { gains, qs, freqs } = vowelFormant[letter];
      const makeupGain = ac.createGain();
      for (let i = 0; i < 5; i++) {
        const gain = ac.createGain();
        gain.gain.value = gains[i];
        const filter = ac.createBiquadFilter();
        filter.type = 'bandpass';
        filter.Q.value = qs[i];
        filter.frequency.value = freqs[i];
        this.connect(filter);
        filter.connect(gain);
        gain.connect(makeupGain);
      }
      makeupGain.gain.value = 8; // how much makeup gain to add?
      this.connect = (target) => makeupGain.connect(target);
      return this;
    }
  }

  AudioContext.prototype.createVowelFilter = function (letter) {
    return new VowelNode(this, letter);
  };
}

const workletsUrl = "data:application/javascript;base64,Ly8gTElDRU5TRSBHTlUgR2VuZXJhbCBQdWJsaWMgTGljZW5zZSB2My4wIHNlZSBodHRwczovL2dpdGh1Yi5jb20vZGt0cjAvV2ViRGlydC9ibG9iL21haW4vTElDRU5TRQovLyBhbGwgdGhlIGNyZWRpdCBnb2VzIHRvIGRrdHIwJ3Mgd2ViZGlydDogaHR0cHM6Ly9naXRodWIuY29tL2RrdHIwL1dlYkRpcnQvYmxvYi81Y2UzZDY5ODM2MmM1NGQ2ZTFiNjhhY2M0N2ViMjk1NWFjNjJjNzkzL2Rpc3QvQXVkaW9Xb3JrbGV0cy5qcwovLyA8MwoKY2xhc3MgQ29hcnNlUHJvY2Vzc29yIGV4dGVuZHMgQXVkaW9Xb3JrbGV0UHJvY2Vzc29yIHsKICBzdGF0aWMgZ2V0IHBhcmFtZXRlckRlc2NyaXB0b3JzKCkgewogICAgcmV0dXJuIFt7IG5hbWU6ICdjb2Fyc2UnLCBkZWZhdWx0VmFsdWU6IDEgfV07CiAgfQoKICBjb25zdHJ1Y3RvcigpIHsKICAgIHN1cGVyKCk7CiAgICB0aGlzLm5vdFN0YXJ0ZWQgPSB0cnVlOwogIH0KCiAgcHJvY2VzcyhpbnB1dHMsIG91dHB1dHMsIHBhcmFtZXRlcnMpIHsKICAgIGNvbnN0IGlucHV0ID0gaW5wdXRzWzBdOwogICAgY29uc3Qgb3V0cHV0ID0gb3V0cHV0c1swXTsKICAgIGNvbnN0IGNvYXJzZSA9IHBhcmFtZXRlcnMuY29hcnNlOwogICAgY29uc3QgYmxvY2tTaXplID0gMTI4OwogICAgY29uc3QgaGFzSW5wdXQgPSAhKGlucHV0WzBdID09PSB1bmRlZmluZWQpOwogICAgaWYgKGhhc0lucHV0KSB7CiAgICAgIHRoaXMubm90U3RhcnRlZCA9IGZhbHNlOwogICAgICBvdXRwdXRbMF1bMF0gPSBpbnB1dFswXVswXTsKICAgICAgZm9yIChsZXQgbiA9IDE7IG4gPCBibG9ja1NpemU7IG4rKykgewogICAgICAgIGZvciAobGV0IG8gPSAwOyBvIDwgb3V0cHV0Lmxlbmd0aDsgbysrKSB7CiAgICAgICAgICBvdXRwdXRbb11bbl0gPSBuICUgY29hcnNlID09IDAgPyBpbnB1dFswXVtuXSA6IG91dHB1dFtvXVtuIC0gMV07CiAgICAgICAgfQogICAgICB9CiAgICB9CiAgICByZXR1cm4gdGhpcy5ub3RTdGFydGVkIHx8IGhhc0lucHV0OwogIH0KfQoKcmVnaXN0ZXJQcm9jZXNzb3IoJ2NvYXJzZS1wcm9jZXNzb3InLCBDb2Fyc2VQcm9jZXNzb3IpOwoKY2xhc3MgQ3J1c2hQcm9jZXNzb3IgZXh0ZW5kcyBBdWRpb1dvcmtsZXRQcm9jZXNzb3IgewogIHN0YXRpYyBnZXQgcGFyYW1ldGVyRGVzY3JpcHRvcnMoKSB7CiAgICByZXR1cm4gW3sgbmFtZTogJ2NydXNoJywgZGVmYXVsdFZhbHVlOiAwIH1dOwogIH0KCiAgY29uc3RydWN0b3IoKSB7CiAgICBzdXBlcigpOwogICAgdGhpcy5ub3RTdGFydGVkID0gdHJ1ZTsKICB9CgogIHByb2Nlc3MoaW5wdXRzLCBvdXRwdXRzLCBwYXJhbWV0ZXJzKSB7CiAgICBjb25zdCBpbnB1dCA9IGlucHV0c1swXTsKICAgIGNvbnN0IG91dHB1dCA9IG91dHB1dHNbMF07CiAgICBjb25zdCBjcnVzaCA9IHBhcmFtZXRlcnMuY3J1c2g7CiAgICBjb25zdCBibG9ja1NpemUgPSAxMjg7CiAgICBjb25zdCBoYXNJbnB1dCA9ICEoaW5wdXRbMF0gPT09IHVuZGVmaW5lZCk7CiAgICBpZiAoaGFzSW5wdXQpIHsKICAgICAgdGhpcy5ub3RTdGFydGVkID0gZmFsc2U7CiAgICAgIGlmIChjcnVzaC5sZW5ndGggPT09IDEpIHsKICAgICAgICBjb25zdCB4ID0gTWF0aC5wb3coMiwgY3J1c2hbMF0gLSAxKTsKICAgICAgICBmb3IgKGxldCBuID0gMDsgbiA8IGJsb2NrU2l6ZTsgbisrKSB7CiAgICAgICAgICBjb25zdCB2YWx1ZSA9IE1hdGgucm91bmQoaW5wdXRbMF1bbl0gKiB4KSAvIHg7CiAgICAgICAgICBmb3IgKGxldCBvID0gMDsgbyA8IG91dHB1dC5sZW5ndGg7IG8rKykgewogICAgICAgICAgICBvdXRwdXRbb11bbl0gPSB2YWx1ZTsKICAgICAgICAgIH0KICAgICAgICB9CiAgICAgIH0gZWxzZSB7CiAgICAgICAgZm9yIChsZXQgbiA9IDA7IG4gPCBibG9ja1NpemU7IG4rKykgewogICAgICAgICAgbGV0IHggPSBNYXRoLnBvdygyLCBjcnVzaFtuXSAtIDEpOwogICAgICAgICAgY29uc3QgdmFsdWUgPSBNYXRoLnJvdW5kKGlucHV0WzBdW25dICogeCkgLyB4OwogICAgICAgICAgZm9yIChsZXQgbyA9IDA7IG8gPCBvdXRwdXQubGVuZ3RoOyBvKyspIHsKICAgICAgICAgICAgb3V0cHV0W29dW25dID0gdmFsdWU7CiAgICAgICAgICB9CiAgICAgICAgfQogICAgICB9CiAgICB9CiAgICByZXR1cm4gdGhpcy5ub3RTdGFydGVkIHx8IGhhc0lucHV0OwogIH0KfQpyZWdpc3RlclByb2Nlc3NvcignY3J1c2gtcHJvY2Vzc29yJywgQ3J1c2hQcm9jZXNzb3IpOwoKY2xhc3MgU2hhcGVQcm9jZXNzb3IgZXh0ZW5kcyBBdWRpb1dvcmtsZXRQcm9jZXNzb3IgewogIHN0YXRpYyBnZXQgcGFyYW1ldGVyRGVzY3JpcHRvcnMoKSB7CiAgICByZXR1cm4gW3sgbmFtZTogJ3NoYXBlJywgZGVmYXVsdFZhbHVlOiAwIH1dOwogIH0KCiAgY29uc3RydWN0b3IoKSB7CiAgICBzdXBlcigpOwogICAgdGhpcy5ub3RTdGFydGVkID0gdHJ1ZTsKICB9CgogIHByb2Nlc3MoaW5wdXRzLCBvdXRwdXRzLCBwYXJhbWV0ZXJzKSB7CiAgICBjb25zdCBpbnB1dCA9IGlucHV0c1swXTsKICAgIGNvbnN0IG91dHB1dCA9IG91dHB1dHNbMF07CiAgICBjb25zdCBzaGFwZTAgPSBwYXJhbWV0ZXJzLnNoYXBlWzBdOwogICAgY29uc3Qgc2hhcGUxID0gc2hhcGUwIDwgMSA/IHNoYXBlMCA6IDEuMCAtIDRlLTEwOwogICAgY29uc3Qgc2hhcGUgPSAoMi4wICogc2hhcGUxKSAvICgxLjAgLSBzaGFwZTEpOwogICAgY29uc3QgYmxvY2tTaXplID0gMTI4OwogICAgY29uc3QgaGFzSW5wdXQgPSAhKGlucHV0WzBdID09PSB1bmRlZmluZWQpOwogICAgaWYgKGhhc0lucHV0KSB7CiAgICAgIHRoaXMubm90U3RhcnRlZCA9IGZhbHNlOwogICAgICBmb3IgKGxldCBuID0gMDsgbiA8IGJsb2NrU2l6ZTsgbisrKSB7CiAgICAgICAgY29uc3QgdmFsdWUgPSAoKDEgKyBzaGFwZSkgKiBpbnB1dFswXVtuXSkgLyAoMSArIHNoYXBlICogTWF0aC5hYnMoaW5wdXRbMF1bbl0pKTsKICAgICAgICBmb3IgKGxldCBvID0gMDsgbyA8IG91dHB1dC5sZW5ndGg7IG8rKykgewogICAgICAgICAgb3V0cHV0W29dW25dID0gdmFsdWU7CiAgICAgICAgfQogICAgICB9CiAgICB9CiAgICByZXR1cm4gdGhpcy5ub3RTdGFydGVkIHx8IGhhc0lucHV0OwogIH0KfQoKcmVnaXN0ZXJQcm9jZXNzb3IoJ3NoYXBlLXByb2Nlc3NvcicsIFNoYXBlUHJvY2Vzc29yKTsK";

/*
webaudio.mjs - <short description TODO>
Copyright (C) 2022 Strudel contributors - see <https://github.com/tidalcycles/strudel/blob/main/packages/webaudio/webaudio.mjs>
This program is free software: you can redistribute it and/or modify it under the terms of the GNU Affero General Public License as published by the Free Software Foundation, either version 3 of the License, or (at your option) any later version. This program is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU Affero General Public License for more details. You should have received a copy of the GNU Affero General Public License along with this program.  If not, see <https://www.gnu.org/licenses/>.
*/
const { Pattern } = strudel;

// export const getAudioContext = () => Tone.getContext().rawContext;

let audioContext;
const getAudioContext$1 = () => {
  if (!audioContext) {
    audioContext = new AudioContext();
  }
  return audioContext;
};

let destination;
const getDestination = () => {
  const ctx = getAudioContext$1();
  if (!destination) {
    destination = ctx.createGain();
    destination.connect(ctx.destination);
  }
  return destination;
};

const panic = () => {
  getDestination().gain.linearRampToValueAtTime(0, getAudioContext$1().currentTime + 0.01);
  destination = null;
};

const getFilter = (type, frequency, Q) => {
  const filter = getAudioContext$1().createBiquadFilter();
  filter.type = type;
  filter.frequency.value = frequency;
  filter.Q.value = Q;
  return filter;
};

const getADSR = (attack, decay, sustain, release, velocity, begin, end) => {
  const gainNode = getAudioContext$1().createGain();
  gainNode.gain.setValueAtTime(0, begin);
  gainNode.gain.linearRampToValueAtTime(velocity, begin + attack); // attack
  gainNode.gain.linearRampToValueAtTime(sustain * velocity, begin + attack + decay); // sustain start
  gainNode.gain.setValueAtTime(sustain * velocity, end); // sustain end
  gainNode.gain.linearRampToValueAtTime(0, end + release); // release
  // for some reason, using exponential ramping creates little cracklings
  /* let t = begin;
  gainNode.gain.setValueAtTime(0, t);
  gainNode.gain.exponentialRampToValueAtTime(velocity, (t += attack));
  const sustainGain = Math.max(sustain * velocity, 0.001);
  gainNode.gain.exponentialRampToValueAtTime(sustainGain, (t += decay));
  if (end - begin < attack + decay) {
    gainNode.gain.cancelAndHoldAtTime(end);
  } else {
    gainNode.gain.setValueAtTime(sustainGain, end);
  }
  gainNode.gain.exponentialRampToValueAtTime(0.001, end + release); // release */
  return gainNode;
};

const getOscillator = ({ s, freq, t, duration, release }) => {
  // make oscillator
  const o = getAudioContext$1().createOscillator();
  o.type = s || 'triangle';
  o.frequency.value = Number(freq);
  o.start(t);
  o.stop(t + duration + release);
  return o;
};

const getSoundfontKey = (s) => {
  if (!globalThis.soundfontList) {
    // soundfont package not loaded
    return false;
  }
  if (globalThis.soundfontList?.instruments?.includes(s)) {
    return s;
  }
  // check if s is one of the soundfonts, which are loaded into globalThis, to avoid coupling both packages
  const nameIndex = globalThis.soundfontList?.instrumentNames?.indexOf(s);
  // convert number nameIndex (0-128) to 3 digit string (001-128)
  const name = nameIndex < 10 ? `00${nameIndex}` : nameIndex < 100 ? `0${nameIndex}` : nameIndex;
  if (nameIndex !== -1) {
    // TODO: indices of instrumentNames do not seem to match instruments
    return globalThis.soundfontList.instruments.find((instrument) => instrument.startsWith(name));
  }
  return;
};

const splitSN = (s, n) => {
  if (!s.includes(':')) {
    return [s, n];
  }
  let [s2, n2] = s.split(':');
  if (isNaN(Number(n2))) {
    return [s, n];
  }
  return [s2, n2];
};

let workletsLoading;
function loadWorklets() {
  if (workletsLoading) {
    return workletsLoading;
  }
  workletsLoading = getAudioContext$1().audioWorklet.addModule(workletsUrl);
  return workletsLoading;
}

function getWorklet(ac, processor, params) {
  const node = new AudioWorkletNode(ac, processor);
  Object.entries(params).forEach(([key, value]) => {
    node.parameters.get(key).value = value;
  });
  return node;
}

// this function should be called on first user interaction (to avoid console warning)
function initAudio() {
  if (typeof window !== 'undefined') {
    try {
      getAudioContext$1().resume();
      loadWorklets();
    } catch (err) {
      console.warn('could not load AudioWorklet effects coarse, crush and shape', err);
    }
  }
}

function initAudioOnFirstClick() {
  document.addEventListener('click', function listener() {
    initAudio();
    document.removeEventListener('click', listener);
  });
}

function gainNode(value) {
  const node = getAudioContext$1().createGain();
  node.gain.value = value;
  return node;
}
const cutGroups = [];

let delays = {};
function getDelay(orbit, delaytime, delayfeedback, t) {
  if (!delays[orbit]) {
    const ac = getAudioContext$1();
    const dly = ac.createFeedbackDelay(1, delaytime, delayfeedback);
    dly.start?.(t); // for some reason, this throws when audion extension is installed..
    dly.connect(getDestination());
    delays[orbit] = dly;
  }
  delays[orbit].delayTime.value !== delaytime && delays[orbit].delayTime.setValueAtTime(delaytime, t);
  delays[orbit].feedback.value !== delayfeedback && delays[orbit].feedback.setValueAtTime(delayfeedback, t);
  return delays[orbit];
}

let reverbs = {};
function getReverb(orbit, duration = 2) {
  if (!reverbs[orbit]) {
    const ac = getAudioContext$1();
    const reverb = ac.createReverb(duration);
    reverb.connect(getDestination());
    reverbs[orbit] = reverb;
  }
  if (reverbs[orbit].duration !== duration) {
    reverbs[orbit] = reverbs[orbit].setDuration(duration);
    reverbs[orbit].duration = duration;
  }
  return reverbs[orbit];
}

function effectSend(input, effect, wet) {
  const send = gainNode(wet);
  input.connect(send);
  send.connect(effect);
  return send;
}

// export const webaudioOutput = async (t, hap, ct, cps) => {
const webaudioOutput = async (hap, deadline, hapDuration) => {
  const ac = getAudioContext$1();
  /* if (isNote(hap.value)) {
      // supports primitive hap values that look like notes
      hap.value = { note: hap.value };
    } */
  if (typeof hap.value !== 'object') {
    throw new Error(
      `hap.value ${hap.value} is not supported by webaudio output. Hint: append .note() or .s() to the end`,
    );
  }
  // calculate correct time (tone.js workaround)
  let t = ac.currentTime + deadline;
  // destructure value
  let {
    freq,
    s,
    bank,
    sf,
    clip = 0, // if 1, samples will be cut off when the hap ends
    n = 0,
    note,
    gain = 0.8,
    cutoff,
    resonance = 1,
    hcutoff,
    hresonance = 1,
    bandf,
    bandq = 1,
    coarse,
    crush,
    shape,
    pan,
    speed = 1, // sample playback speed
    begin = 0,
    end = 1,
    vowel,
    delay = 0,
    delayfeedback = 0.5,
    delaytime = 0.25,
    unit,
    nudge = 0, // TODO: is this in seconds?
    cut,
    loop,
    orbit = 1,
    room,
    size = 2,
    roomsize = size,
  } = hap.value;
  const { velocity = 1 } = hap.context;
  gain *= velocity; // legacy fix for velocity
  // the chain will hold all audio nodes that connect to each other
  const chain = [];
  if (bank && s) {
    s = `${bank}_${s}`;
  }
  if (typeof s === 'string') {
    [s, n] = splitSN(s, n);
  }
  if (typeof note === 'string') {
    [note, n] = splitSN(note, n);
  }
  if (!s || ['sine', 'square', 'triangle', 'sawtooth'].includes(s)) {
    // destructure adsr here, because the default should be different for synths and samples
    const { attack = 0.001, decay = 0.05, sustain = 0.6, release = 0.01 } = hap.value;
    // with synths, n and note are the same thing
    n = note || n || 36;
    if (typeof n === 'string') {
      n = toMidi(n); // e.g. c3 => 48
    }
    // get frequency
    if (!freq && typeof n === 'number') {
      freq = fromMidi(n); // + 48);
    }
    // make oscillator
    const o = getOscillator({ t, s, freq, duration: hapDuration, release });
    chain.push(o);
    // level down oscillators as they are really loud compared to samples i've tested
    chain.push(gainNode(0.3));
    // TODO: make adsr work with samples without pops
    // envelope
    const adsr = getADSR(attack, decay, sustain, release, 1, t, t + hapDuration);
    chain.push(adsr);
  } else {
    // destructure adsr here, because the default should be different for synths and samples
    const { attack = 0.001, decay = 0.001, sustain = 1, release = 0.001 } = hap.value;
    // load sample
    if (speed === 0) {
      // no playback
      return;
    }
    if (!s) {
      console.warn('no sample specified');
      return;
    }
    const soundfont = getSoundfontKey(s);
    let bufferSource;

    if (soundfont) {
      // is soundfont
      bufferSource = await globalThis.getFontBufferSource(soundfont, note || n, ac, freq);
    } else {
      // is sample from loaded samples(..)
      bufferSource = await getSampleBufferSource(s, n, note, speed, freq);
    }
    // asny stuff above took too long?
    if (ac.currentTime > t) {
      logger(`[sampler] still loading sound "${s}:${n}"`, 'highlight');
      // console.warn('sample still loading:', s, n);
      return;
    }
    if (!bufferSource) {
      console.warn('no buffer source');
      return;
    }
    bufferSource.playbackRate.value = Math.abs(speed) * bufferSource.playbackRate.value;
    if (unit === 'c') {
      // are there other units?
      bufferSource.playbackRate.value = bufferSource.playbackRate.value * bufferSource.buffer.duration;
    }
    let duration = soundfont || clip ? hapDuration : bufferSource.buffer.duration / bufferSource.playbackRate.value;
    // "The computation of the offset into the sound is performed using the sound buffer's natural sample rate,
    // rather than the current playback rate, so even if the sound is playing at twice its normal speed,
    // the midway point through a 10-second audio buffer is still 5."
    const offset = begin * duration * bufferSource.playbackRate.value;
    duration = (end - begin) * duration;
    if (loop) {
      bufferSource.loop = true;
      bufferSource.loopStart = offset;
      bufferSource.loopEnd = offset + duration;
      duration = loop * duration;
    }
    t += nudge;

    bufferSource.start(t, offset);
    if (cut !== undefined) {
      cutGroups[cut]?.stop(t); // fade out?
      cutGroups[cut] = bufferSource;
    }
    chain.push(bufferSource);
    bufferSource.stop(t + duration + release);
    const adsr = getADSR(attack, decay, sustain, release, 1, t, t + duration);
    chain.push(adsr);
  }

  // gain stage
  chain.push(gainNode(gain));

  // filters
  cutoff !== undefined && chain.push(getFilter('lowpass', cutoff, resonance));
  hcutoff !== undefined && chain.push(getFilter('highpass', hcutoff, hresonance));
  bandf !== undefined && chain.push(getFilter('bandpass', bandf, bandq));
  vowel !== undefined && chain.push(ac.createVowelFilter(vowel));

  // effects
  coarse !== undefined && chain.push(getWorklet(ac, 'coarse-processor', { coarse }));
  crush !== undefined && chain.push(getWorklet(ac, 'crush-processor', { crush }));
  shape !== undefined && chain.push(getWorklet(ac, 'shape-processor', { shape }));

  // panning
  if (pan !== undefined) {
    const panner = ac.createStereoPanner();
    panner.pan.value = 2 * pan - 1;
    chain.push(panner);
  }

  // last gain
  const post = gainNode(1);
  chain.push(post);
  post.connect(getDestination());

  // delay
  let delaySend;
  if (delay > 0 && delaytime > 0 && delayfeedback > 0) {
    const delyNode = getDelay(orbit, delaytime, delayfeedback, t);
    delaySend = effectSend(post, delyNode, delay);
  }
  // reverb
  let reverbSend;
  if (room > 0 && roomsize > 0) {
    const reverbNode = getReverb(orbit, roomsize);
    reverbSend = effectSend(post, reverbNode, room);
  }

  // connect chain elements together
  chain.slice(1).reduce((last, current) => last.connect(current), chain[0]);

  // disconnect all nodes when source node has ended:
  chain[0].onended = () => chain.concat([delaySend, reverbSend]).forEach((n) => n?.disconnect());
};

const webaudioOutputTrigger = (t, hap, ct, cps) => webaudioOutput(hap, t - ct, hap.duration / cps);

Pattern.prototype.out = function () {
  // TODO: refactor (t, hap, ct, cps) to (hap, deadline, duration) ?
  return this.onTrigger(webaudioOutputTrigger);
};

/*
index.mjs - <short description TODO>
Copyright (C) 2022 Strudel contributors - see <https://github.com/tidalcycles/strudel/blob/main/packages/webaudio/index.mjs>
This program is free software: you can redistribute it and/or modify it under the terms of the GNU Affero General Public License as published by the Free Software Foundation, either version 3 of the License, or (at your option) any later version. This program is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU Affero General Public License for more details. You should have received a copy of the GNU Affero General Public License along with this program.  If not, see <https://www.gnu.org/licenses/>.
*/

const webaudio = /*#__PURE__*/Object.freeze(/*#__PURE__*/Object.defineProperty({
	__proto__: null,
	getAudioContext: getAudioContext$1,
	panic,
	initAudio,
	initAudioOnFirstClick,
	webaudioOutput,
	webaudioOutputTrigger,
	getCachedBuffer,
	getSampleBufferSource,
	loadBuffer,
	reverseBuffer,
	getLoadedBuffer,
	samples,
	resetLoadedSamples,
	getLoadedSamples
}, Symbol.toStringTag, { value: 'Module' }));

async function prebake() {
  // https://archive.org/details/SalamanderGrandPianoV3
  // License: CC-by http://creativecommons.org/licenses/by/3.0/ Author: Alexander Holm
  return await Promise.all([
    samples(`./piano.json`, `./piano/`),
    // https://github.com/sgossner/VCSL/
    // https://api.github.com/repositories/126427031/contents/
    // LICENSE: CC0 general-purpose
    samples(`./vcsl.json`, 'github:sgossner/VCSL/master/'),
    samples(`./tidal-drum-machines.json`, 'github:ritchse/tidal-drum-machines/main/machines/'),
    samples(`./EmuSP12.json`, `./EmuSP12/`),
    // samples('github:tidalcycles/Dirt-Samples/master'),
  ]);
}

const maxPan = toMidi('C8');
const panwidth = (pan, width) => pan * width + (1 - width) / 2;

Pattern$1.prototype.piano = function () {
  return this.clip(1)
    .s('piano')
    .release(0.1)
    .fmap((value) => {
      const midi = valueToMidi(value);
      // pan by pitch
      const pan = panwidth(Math.min(Math.round(midi) / maxPan, 1), 0.5);
      return { ...value, pan: (value.pan || 1) * pan };
    });
};

if (typeof window !== "undefined") {
  evalScope(controls, Promise.resolve().then(() => strudel), Promise.resolve().then(() => tonalHelpers), import('./chunks/index.cd9bd191.mjs'), import('./chunks/index.000aa6e3.mjs'), import('./chunks/index.65799992.mjs'), Promise.resolve().then(() => webaudio), import('./chunks/osc.449927c4.mjs'));
}
if (typeof window !== "undefined") {
  initAudioOnFirstClick();
  prebake();
}
function MiniRepl({
  tune,
  withCanvas
}) {
  const [Repl, setRepl] = useState();
  useEffect(() => {
    import('./chunks/index.es.96992082.mjs').then((res) => {
      setRepl(() => res.MiniRepl);
    });
  }, []);
  return Repl ? /* @__PURE__ */ jsx(Repl, {
    tune,
    hideOutsideView: true,
    withCanvas
  }) : /* @__PURE__ */ jsx("pre", {
    children: tune
  });
}
__astro_tag_component__(MiniRepl, "@astrojs/react");

const MDXLayout$k = async function ({
  children
}) {
  const Layout = (await import('./chunks/MainLayout.c7eab378.mjs')).default;
  const {
    layout,
    ...content
  } = frontmatter$n;
  content.file = file$n;
  content.url = url$n;
  content.astro = {};
  Object.defineProperty(content.astro, "headings", {
    get() {
      throw new Error('The "astro" property is no longer supported! To access "headings" from your layout, try using "Astro.props.headings."');
    }
  });
  Object.defineProperty(content.astro, "html", {
    get() {
      throw new Error('The "astro" property is no longer supported! To access "html" from your layout, try using "Astro.props.compiledContent()."');
    }
  });
  Object.defineProperty(content.astro, "source", {
    get() {
      throw new Error('The "astro" property is no longer supported! To access "source" from your layout, try using "Astro.props.rawContent()."');
    }
  });
  return createVNode(Layout, {
    file: file$n,
    url: url$n,
    content,
    frontmatter: content,
    headings: getHeadings$m(),
    "server:root": true,
    children
  });
};
const frontmatter$n = {
  "title": "Pattern Aligment",
  "layout": "../../layouts/MainLayout.astro"
};
const _internal$m = {
  injectedFrontmatter: {}
};
function getHeadings$m() {
  return [{
    "depth": 1,
    "slug": "pattern-aligment--combination",
    "text": "Pattern Aligment & Combination"
  }];
}
function _createMdxContent$m(props) {
  const _components = Object.assign({
    h1: "h1",
    a: "a",
    span: "span",
    p: "p",
    em: "em",
    code: "code",
    pre: "pre",
    ul: "ul",
    li: "li"
  }, props.components);
  return createVNode(Fragment, {
    children: [createVNode(_components.h1, {
      id: "pattern-aligment--combination",
      children: [createVNode(_components.a, {
        "aria-hidden": "true",
        tabIndex: "-1",
        href: "#pattern-aligment--combination",
        children: createVNode(_components.span, {
          className: "icon icon-link"
        })
      }), "Pattern Aligment & Combination"]
    }), "\n", createVNode(_components.p, {
      children: ["One core aspect of Strudel, inherited from Tidal, is the flexible way that patterns can be combined, irrespective of their structure. Its declarative approach means a live coder does not have to think about the details of ", createVNode(_components.em, {
        children: "how"
      }), " this is done, only ", createVNode(_components.em, {
        children: "what"
      }), " is to be done."]
    }), "\n", createVNode(_components.p, {
      children: ["As a simple example, consider two number patterns ", createVNode(_components.code, {
        children: "\"0 [1 2] 3\""
      }), ", and ", createVNode(_components.code, {
        children: "\"10 20\""
      }), ". The first has three contiguous steps of equal lengths, with the second step broken down into two substeps, giving four events in total. There are a very large number of ways in which the structure of these two patterns could be combined, but the default method in both Strudel and Tidal is to line up the cycles of the two patterns, and then take events from the first pattern and match them with those in the second pattern. Therefore, the following two lines are equivalent:"]
    }), "\n", createVNode(_components.pre, {
      className: "astro-code",
      style: {
        backgroundColor: "#0d1117",
        overflowX: "auto"
      },
      children: createVNode(_components.code, {
        children: [createVNode(_components.span, {
          className: "line",
          children: [createVNode(_components.span, {
            style: {
              color: "#A5D6FF"
            },
            children: "'0 [1 2] 3'"
          }), createVNode(_components.span, {
            style: {
              color: "#C9D1D9"
            },
            children: "."
          }), createVNode(_components.span, {
            style: {
              color: "#D2A8FF"
            },
            children: "add"
          }), createVNode(_components.span, {
            style: {
              color: "#C9D1D9"
            },
            children: "("
          }), createVNode(_components.span, {
            style: {
              color: "#A5D6FF"
            },
            children: "'10 20'"
          }), createVNode(_components.span, {
            style: {
              color: "#C9D1D9"
            },
            children: ");"
          })]
        }), "\n", createVNode(_components.span, {
          className: "line",
          children: [createVNode(_components.span, {
            style: {
              color: "#C9D1D9"
            },
            children: "("
          }), createVNode(_components.span, {
            style: {
              color: "#A5D6FF"
            },
            children: "'10 [11 22] 23'"
          }), createVNode(_components.span, {
            style: {
              color: "#C9D1D9"
            },
            children: ");"
          })]
        })]
      })
    }), "\n", createVNode(_components.p, {
      children: "Where the events only partially overlap, they are treated as fragments\nof the event in the first pattern. This is a little difficult to\nconceptualise, but lets start by comparing the two patterns in the\nfollowing example:"
    }), "\n", createVNode(_components.pre, {
      className: "astro-code",
      style: {
        backgroundColor: "#0d1117",
        overflowX: "auto"
      },
      children: createVNode(_components.code, {
        children: [createVNode(_components.span, {
          className: "line",
          children: [createVNode(_components.span, {
            style: {
              color: "#A5D6FF"
            },
            children: "'0 1 2'"
          }), createVNode(_components.span, {
            style: {
              color: "#C9D1D9"
            },
            children: "."
          }), createVNode(_components.span, {
            style: {
              color: "#D2A8FF"
            },
            children: "add"
          }), createVNode(_components.span, {
            style: {
              color: "#C9D1D9"
            },
            children: "("
          }), createVNode(_components.span, {
            style: {
              color: "#A5D6FF"
            },
            children: "'10 20'"
          }), createVNode(_components.span, {
            style: {
              color: "#C9D1D9"
            },
            children: ");"
          })]
        }), "\n", createVNode(_components.span, {
          className: "line",
          children: [createVNode(_components.span, {
            style: {
              color: "#C9D1D9"
            },
            children: "("
          }), createVNode(_components.span, {
            style: {
              color: "#A5D6FF"
            },
            children: "'10 [11 21] 20'"
          }), createVNode(_components.span, {
            style: {
              color: "#C9D1D9"
            },
            children: ");"
          })]
        })]
      })
    }), "\n", createVNode(_components.p, {
      children: ["They are similar to the previous example in that the number ", createVNode(_components.code, {
        children: "1"
      }), " is split in two, with its two halves added to ", createVNode(_components.code, {
        children: "10"
      }), " and ", createVNode(_components.code, {
        children: "20"
      }), " respectively. However, the ", createVNode(_components.code, {
        children: "11"
      }), " \u2018remembers\u2019 that it is a fragment of that original ", createVNode(_components.code, {
        children: "1"
      }), " event, and so is treated as having a duration of a third of a cycle, despite only being active for a sixth of a cycle. Likewise, the ", createVNode(_components.code, {
        children: "21"
      }), " is also a fragment of that original ", createVNode(_components.code, {
        children: "1"
      }), " event, but a fragment of its second half. Because the start of its event is missing, it wouldn\u2019t actually trigger a sound (unless it underwent further pattern transformations/combinations)."]
    }), "\n", createVNode(_components.p, {
      children: ["In practice, the effect of this default, implicit method for combining two patterns is that the second pattern is added ", createVNode(_components.em, {
        children: "in"
      }), " to the first one, and indeed this can be made explicit:"]
    }), "\n", createVNode(_components.pre, {
      className: "astro-code",
      style: {
        backgroundColor: "#0d1117",
        overflowX: "auto"
      },
      children: createVNode(_components.code, {
        children: createVNode(_components.span, {
          className: "line",
          children: [createVNode(_components.span, {
            style: {
              color: "#A5D6FF"
            },
            children: "'0 1 2'"
          }), createVNode(_components.span, {
            style: {
              color: "#C9D1D9"
            },
            children: ".add."
          }), createVNode(_components.span, {
            style: {
              color: "#D2A8FF"
            },
            children: "in"
          }), createVNode(_components.span, {
            style: {
              color: "#C9D1D9"
            },
            children: "("
          }), createVNode(_components.span, {
            style: {
              color: "#A5D6FF"
            },
            children: "'10 20'"
          }), createVNode(_components.span, {
            style: {
              color: "#C9D1D9"
            },
            children: ");"
          })]
        })
      })
    }), "\n", createVNode(_components.p, {
      children: "This makes way for other ways to align the pattern, and several are already defined, in particular:"
    }), "\n", createVNode(_components.ul, {
      children: ["\n", createVNode(_components.li, {
        children: [createVNode(_components.code, {
          children: "in"
        }), " - as explained above, aligns cycles, and applies values from the pattern on the right ", createVNode(_components.em, {
          children: "in"
        }), " to the pattern on the left."]
      }), "\n", createVNode(_components.li, {
        children: [createVNode(_components.code, {
          children: "out"
        }), " - as with ", createVNode(_components.code, {
          children: "in"
        }), ", but values are applied ", createVNode(_components.em, {
          children: "out"
        }), " of the pattern on the left (i.e. ", createVNode(_components.em, {
          children: "in"
        }), " to the one on the right)."]
      }), "\n", createVNode(_components.li, {
        children: [createVNode(_components.code, {
          children: "mix"
        }), " - structures from both patterns are combined, so that the new events are not fragments but are created at intersections of events from both sides."]
      }), "\n", createVNode(_components.li, {
        children: [createVNode(_components.code, {
          children: "squeeze"
        }), " - cycles from the pattern on the right are squeezed into events on the left. So that e.g. ", createVNode(_components.code, {
          children: "\"0 1 2\".add.squeeze(\"10 20\")"
        }), " is equivalent to ", createVNode(_components.code, {
          children: "\"[10 20] [11 21] [12 22]\""
        }), "."]
      }), "\n", createVNode(_components.li, {
        children: [createVNode(_components.code, {
          children: "squeezeout"
        }), " - as with ", createVNode(_components.code, {
          children: "squeeze"
        }), ", but cycles from the left are squeezed into events on the right. So, ", createVNode(_components.code, {
          children: "\"0 1 2\".add.squeezeout(\"10 20\")"
        }), " is equivalent to ", createVNode(_components.code, {
          children: "[10 11 12] [20 21 22]"
        }), "."]
      }), "\n", createVNode(_components.li, {
        children: [createVNode(_components.code, {
          children: "trig"
        }), " is similar to ", createVNode(_components.code, {
          children: "squeezeout"
        }), " in that cycles from the right are aligned with events on the left. However those cycles are not \u2018squeezed\u2019, rather they are truncated to fit the event. So ", createVNode(_components.code, {
          children: "\"0 1 2 3 4 5 6 7\".add.trig(\"10 [20 30]\")"
        }), " would be equivalent to ", createVNode(_components.code, {
          children: "10 11 12 13 20 21 30 31"
        }), ". In effect, events on the right \u2018trigger\u2019 cycles on the left."]
      }), "\n", createVNode(_components.li, {
        children: [createVNode(_components.code, {
          children: "trigzero"
        }), " is similar to ", createVNode(_components.code, {
          children: "trig"
        }), ", but the pattern is \u2018triggered\u2019 from its very first cycle, rather than from the current cycle. ", createVNode(_components.code, {
          children: "trig"
        }), " and ", createVNode(_components.code, {
          children: "trigzero"
        }), " therefore only give different results where the leftmost pattern differs from one cycle to the next."]
      }), "\n"]
    }), "\n", createVNode(_components.p, {
      children: "We will save going deeper into the background, design and practicalities of these alignment functions for future publications. However in the next section, we take them as a case study for looking at the different design affordances offered by Haskell to Tidal, and JavaScript to Strudel."
    })]
  });
}
function MDXContent$m(props = {}) {
  return createVNode(MDXLayout$k, {
    ...props,
    children: createVNode(_createMdxContent$m, {
      ...props
    })
  });
}

__astro_tag_component__(getHeadings$m, "astro:jsx");
__astro_tag_component__(MDXContent$m, "astro:jsx");
const url$n = "/technical-manual/alignment";
const file$n = "/Users/michaelgogins/cloud-music/strudel/website/src/pages/technical-manual/alignment.mdx";
function rawContent$m() { throw new Error("MDX does not support rawContent()! If you need to read the Markdown contents to calculate values (ex. reading time), we suggest injecting frontmatter via remark plugins. Learn more on our docs: https://docs.astro.build/en/guides/integrations-guide/mdx/#inject-frontmatter-via-remark-or-rehype-plugins") }function compiledContent$m() { throw new Error("MDX does not support compiledContent()! If you need to read the HTML contents to calculate values (ex. reading time), we suggest injecting frontmatter via rehype plugins. Learn more on our docs: https://docs.astro.build/en/guides/integrations-guide/mdx/#inject-frontmatter-via-remark-or-rehype-plugins") }const Content$n = (props = {}) => MDXContent$m({
											...props,
											components: { Fragment, ...props.components },
										});
Content$n[Symbol.for('astro.needsHeadRendering')] = !Boolean(frontmatter$n.layout);

const _page1 = /*#__PURE__*/Object.freeze(/*#__PURE__*/Object.defineProperty({
	__proto__: null,
	frontmatter: frontmatter$n,
	_internal: _internal$m,
	getHeadings: getHeadings$m,
	url: url$n,
	file: file$n,
	rawContent: rawContent$m,
	compiledContent: compiledContent$m,
	Content: Content$n,
	default: Content$n
}, Symbol.toStringTag, { value: 'Module' }));

const frontmatter$m = {};
const _internal$l = {
  injectedFrontmatter: {}
};
function getHeadings$l() {
  return [{
    "depth": 2,
    "slug": "strudel-packages",
    "text": "Strudel Packages"
  }];
}
function _createMdxContent$l(props) {
  const _components = Object.assign({
    h2: "h2",
    a: "a",
    span: "span",
    p: "p",
    ul: "ul",
    li: "li"
  }, props.components);
  return createVNode(Fragment, {
    children: [createVNode(_components.h2, {
      id: "strudel-packages",
      children: [createVNode(_components.a, {
        "aria-hidden": "true",
        tabIndex: "-1",
        href: "#strudel-packages",
        children: createVNode(_components.span, {
          className: "icon icon-link"
        })
      }), "Strudel Packages"]
    }), "\n", createVNode(_components.p, {
      children: "There are different packages for different purposes. They.."
    }), "\n", createVNode(_components.ul, {
      children: ["\n", createVNode(_components.li, {
        children: "split up the code into smaller chunks"
      }), "\n", createVNode(_components.li, {
        children: "can be selectively used to implement some sort of time based system"
      }), "\n"]
    }), "\n", createVNode(_components.p, {
      children: ["Please refer to the individual README files in the ", createVNode(_components.a, {
        href: "https://github.com/tidalcycles/strudel/tree/main/packages",
        children: "packages folder"
      })]
    }), "\n", createVNode(_components.p, {
      children: "TODO"
    })]
  });
}
function MDXContent$l(props = {}) {
  const {
    wrapper: MDXLayout
  } = props.components || {};
  return MDXLayout ? createVNode(MDXLayout, {
    ...props,
    children: createVNode(_createMdxContent$l, {
      ...props
    })
  }) : _createMdxContent$l(props);
}

__astro_tag_component__(getHeadings$l, "astro:jsx");
__astro_tag_component__(MDXContent$l, "astro:jsx");
const url$m = "/technical-manual/packages";
const file$m = "/Users/michaelgogins/cloud-music/strudel/website/src/pages/technical-manual/packages.mdx";
function rawContent$l() { throw new Error("MDX does not support rawContent()! If you need to read the Markdown contents to calculate values (ex. reading time), we suggest injecting frontmatter via remark plugins. Learn more on our docs: https://docs.astro.build/en/guides/integrations-guide/mdx/#inject-frontmatter-via-remark-or-rehype-plugins") }function compiledContent$l() { throw new Error("MDX does not support compiledContent()! If you need to read the HTML contents to calculate values (ex. reading time), we suggest injecting frontmatter via rehype plugins. Learn more on our docs: https://docs.astro.build/en/guides/integrations-guide/mdx/#inject-frontmatter-via-remark-or-rehype-plugins") }const Content$m = (props = {}) => MDXContent$l({
											...props,
											components: { Fragment, ...props.components },
										});
Content$m[Symbol.for('astro.needsHeadRendering')] = !Boolean(frontmatter$m.layout);

const _page2 = /*#__PURE__*/Object.freeze(/*#__PURE__*/Object.defineProperty({
	__proto__: null,
	frontmatter: frontmatter$m,
	_internal: _internal$l,
	getHeadings: getHeadings$l,
	url: url$m,
	file: file$m,
	rawContent: rawContent$l,
	compiledContent: compiledContent$l,
	Content: Content$m,
	default: Content$m
}, Symbol.toStringTag, { value: 'Module' }));

const docs$1 = [
	{
		comment: "/**\n   * Select a sound / sample by name.\n   *\n   * <details style={{display:'none'}}>\n   * <summary>show all sounds</summary>\n   *\n   * 808 (6) 808bd (25) 808cy (25) 808hc (5) 808ht (5) 808lc (5) 808lt (5) 808mc (5) 808mt (5) 808oh (5) 808sd (25) 909 (1) ab (12) ade (10) ades2 (9) ades3 (7) ades4 (6) alex (2) alphabet (26) amencutup (32) armora (7) arp (2) arpy (11) auto (11) baa (7) baa2 (7) bass (4) bass0 (3) bass1 (30) bass2 (5) bass3 (11) bassdm (24) bassfoo (3) battles (2) bd (24) bend (4) bev (2) bin (2) birds (10) birds3 (19) bleep (13) blip (2) blue (2) bottle (13) breaks125 (2) breaks152 (1) breaks157 (1) breaks165 (1) breath (1) bubble (8) can (14) casio (3) cb (1) cc (6) chin (4) circus (3) clak (2) click (4) clubkick (5) co (4) coins (1) control (2) cosmicg (15) cp (2) cr (6) crow (4) d (4) db (13) diphone (38) diphone2 (12) dist (16) dork2 (4) dorkbot (2) dr (42) dr2 (6) dr55 (4) dr_few (8) drum (6) drumtraks (13) e (8) east (9) electro1 (13) em2 (6) erk (1) f (1) feel (7) feelfx (8) fest (1) fire (1) flick (17) fm (17) foo (27) future (17) gab (10) gabba (4) gabbaloud (4) gabbalouder (4) glasstap (3) glitch (8) glitch2 (8) gretsch (24) gtr (3) h (7) hand (17) hardcore (12) hardkick (6) haw (6) hc (6) hh (13) hh27 (13) hit (6) hmm (1) ho (6) hoover (6) house (8) ht (16) if (5) ifdrums (3) incoming (8) industrial (32) insect (3) invaders (18) jazz (8) jungbass (20) jungle (13) juno (12) jvbass (13) kicklinn (1) koy (2) kurt (7) latibro (8) led (1) less (4) lighter (33) linnhats (6) lt (16) made (7) made2 (1) mash (2) mash2 (4) metal (10) miniyeah (4) monsterb (6) moog (7) mouth (15) mp3 (4) msg (9) mt (16) mute (28) newnotes (15) noise (1) noise2 (8) notes (15) numbers (9) oc (4) odx (15) off (1) outdoor (6) pad (3) padlong (1) pebbles (1) perc (6) peri (15) pluck (17) popkick (10) print (11) proc (2) procshort (8) psr (30) rave (8) rave2 (4) ravemono (2) realclaps (4) reverbkick (1) rm (2) rs (1) sax (22) sd (2) seawolf (3) sequential (8) sf (18) sheffield (1) short (5) sid (12) sine (6) sitar (8) sn (52) space (18) speakspell (12) speech (7) speechless (10) speedupdown (9) stab (23) stomp (10) subroc3d (11) sugar (2) sundance (6) tabla (26) tabla2 (46) tablex (3) tacscan (22) tech (13) techno (7) tink (5) tok (4) toys (13) trump (11) ul (10) ulgab (5) uxay (3) v (6) voodoo (5) wind (10) wobble (1) world (3) xmas (1) yeah (31)\n   *\n   * <a href=\"https://tidalcycles.org/docs/configuration/Audio%20Samples/default_library\" target=\"_blank\">more info</a>\n   *\n   * </details>\n   *\n   * @name s\n   * @param {string | Pattern} sound The sound / pattern of sounds to pick\n   * @example\n   * s(\"bd hh\")\n   *\n   */",
		meta: {
			filename: "controls.mjs",
			lineno: 11,
			columnno: 2,
			path: "/Users/michaelgogins/cloud-music/strudel/packages/core",
			code: {
			}
		},
		description: "<p>Select a sound / sample by name.</p>\n<details style={{display:'none'}}>\n<summary>show all sounds</summary>\n<p>808 (6) 808bd (25) 808cy (25) 808hc (5) 808ht (5) 808lc (5) 808lt (5) 808mc (5) 808mt (5) 808oh (5) 808sd (25) 909 (1) ab (12) ade (10) ades2 (9) ades3 (7) ades4 (6) alex (2) alphabet (26) amencutup (32) armora (7) arp (2) arpy (11) auto (11) baa (7) baa2 (7) bass (4) bass0 (3) bass1 (30) bass2 (5) bass3 (11) bassdm (24) bassfoo (3) battles (2) bd (24) bend (4) bev (2) bin (2) birds (10) birds3 (19) bleep (13) blip (2) blue (2) bottle (13) breaks125 (2) breaks152 (1) breaks157 (1) breaks165 (1) breath (1) bubble (8) can (14) casio (3) cb (1) cc (6) chin (4) circus (3) clak (2) click (4) clubkick (5) co (4) coins (1) control (2) cosmicg (15) cp (2) cr (6) crow (4) d (4) db (13) diphone (38) diphone2 (12) dist (16) dork2 (4) dorkbot (2) dr (42) dr2 (6) dr55 (4) dr_few (8) drum (6) drumtraks (13) e (8) east (9) electro1 (13) em2 (6) erk (1) f (1) feel (7) feelfx (8) fest (1) fire (1) flick (17) fm (17) foo (27) future (17) gab (10) gabba (4) gabbaloud (4) gabbalouder (4) glasstap (3) glitch (8) glitch2 (8) gretsch (24) gtr (3) h (7) hand (17) hardcore (12) hardkick (6) haw (6) hc (6) hh (13) hh27 (13) hit (6) hmm (1) ho (6) hoover (6) house (8) ht (16) if (5) ifdrums (3) incoming (8) industrial (32) insect (3) invaders (18) jazz (8) jungbass (20) jungle (13) juno (12) jvbass (13) kicklinn (1) koy (2) kurt (7) latibro (8) led (1) less (4) lighter (33) linnhats (6) lt (16) made (7) made2 (1) mash (2) mash2 (4) metal (10) miniyeah (4) monsterb (6) moog (7) mouth (15) mp3 (4) msg (9) mt (16) mute (28) newnotes (15) noise (1) noise2 (8) notes (15) numbers (9) oc (4) odx (15) off (1) outdoor (6) pad (3) padlong (1) pebbles (1) perc (6) peri (15) pluck (17) popkick (10) print (11) proc (2) procshort (8) psr (30) rave (8) rave2 (4) ravemono (2) realclaps (4) reverbkick (1) rm (2) rs (1) sax (22) sd (2) seawolf (3) sequential (8) sf (18) sheffield (1) short (5) sid (12) sine (6) sitar (8) sn (52) space (18) speakspell (12) speech (7) speechless (10) speedupdown (9) stab (23) stomp (10) subroc3d (11) sugar (2) sundance (6) tabla (26) tabla2 (46) tablex (3) tacscan (22) tech (13) techno (7) tink (5) tok (4) toys (13) trump (11) ul (10) ulgab (5) uxay (3) v (6) voodoo (5) wind (10) wobble (1) world (3) xmas (1) yeah (31)</p>\n<p><a href=\"https://tidalcycles.org/docs/configuration/Audio%20Samples/default_library\" target=\"_blank\">more info</a></p>\n</details>",
		name: "s",
		params: [
			{
				type: {
					names: [
						"string",
						"Pattern"
					]
				},
				description: "<p>The sound / pattern of sounds to pick</p>",
				name: "sound"
			}
		],
		examples: [
			"s(\"bd hh\")"
		],
		longname: "s",
		kind: "member",
		scope: "global",
		___id: "T000002R000215",
		___s: true
	},
	{
		comment: "/**\n   * The note or sample number to choose for a synth or sampleset\n   * Note names currently not working yet, but will hopefully soon. Just stick to numbers for now\n   *\n   * @name n\n   * @param {string | number | Pattern} value note name, note number or sample number\n   * @example\n   * s('superpiano').n(\"<0 1 2 3>\").osc()\n   * @example\n   * s('superpiano').n(\"<c4 d4 e4 g4>\").osc()\n   * @example\n   * n(\"0 1 2 3\").s('east').osc()\n   */",
		meta: {
			filename: "controls.mjs",
			lineno: 30,
			columnno: 2,
			path: "/Users/michaelgogins/cloud-music/strudel/packages/core",
			code: {
			}
		},
		description: "<p>The note or sample number to choose for a synth or sampleset\nNote names currently not working yet, but will hopefully soon. Just stick to numbers for now</p>",
		name: "n",
		params: [
			{
				type: {
					names: [
						"string",
						"number",
						"Pattern"
					]
				},
				description: "<p>note name, note number or sample number</p>",
				name: "value"
			}
		],
		examples: [
			"s('superpiano').n(\"<0 1 2 3>\").osc()",
			"s('superpiano').n(\"<c4 d4 e4 g4>\").osc()",
			"n(\"0 1 2 3\").s('east').osc()"
		],
		longname: "n",
		kind: "member",
		scope: "global",
		___id: "T000002R000216",
		___s: true
	},
	{
		comment: "/**\n   * A pattern of numbers that speed up (or slow down) samples while they play. Currently only supported by osc / superdirt.\n   *\n   * @name accelerate\n   * @param {number | Pattern} amount acceleration.\n   * @superdirtOnly\n   * @example\n   * s(\"sax\").accelerate(\"<0 1 2 4 8 16>\").slow(2).osc()\n   *\n   */",
		meta: {
			filename: "controls.mjs",
			lineno: 49,
			columnno: 2,
			path: "/Users/michaelgogins/cloud-music/strudel/packages/core",
			code: {
			}
		},
		description: "<p>A pattern of numbers that speed up (or slow down) samples while they play. Currently only supported by osc / superdirt.</p>",
		name: "accelerate",
		params: [
			{
				type: {
					names: [
						"number",
						"Pattern"
					]
				},
				description: "<p>acceleration.</p>",
				name: "amount"
			}
		],
		tags: [
			{
				originalTitle: "superdirtOnly",
				title: "superdirtonly",
				text: ""
			}
		],
		examples: [
			"s(\"sax\").accelerate(\"<0 1 2 4 8 16>\").slow(2).osc()"
		],
		longname: "accelerate",
		kind: "member",
		scope: "global",
		___id: "T000002R000217",
		___s: true
	},
	{
		comment: "/**\n   * Controls the gain by an exponential amount.\n   *\n   * @name gain\n   * @param {number | Pattern} amount gain.\n   * @example\n   * s(\"hh*8\").gain(\".4!2 1 .4!2 1 .4 1\")\n   *\n   */",
		meta: {
			filename: "controls.mjs",
			lineno: 60,
			columnno: 2,
			path: "/Users/michaelgogins/cloud-music/strudel/packages/core",
			code: {
			}
		},
		description: "<p>Controls the gain by an exponential amount.</p>",
		name: "gain",
		params: [
			{
				type: {
					names: [
						"number",
						"Pattern"
					]
				},
				description: "<p>gain.</p>",
				name: "amount"
			}
		],
		examples: [
			"s(\"hh*8\").gain(\".4!2 1 .4!2 1 .4 1\")"
		],
		longname: "gain",
		kind: "member",
		scope: "global",
		___id: "T000002R000218",
		___s: true
	},
	{
		comment: "/**\n   * Like {@link gain}, but linear.\n   *\n   * @name amp\n   * @param {number | Pattern} amount gain.\n   * @superdirtOnly\n   * @example\n   * s(\"bd*8\").amp(\".1*2 .5 .1*2 .5 .1 .5\").osc()\n   *\n   */",
		meta: {
			filename: "controls.mjs",
			lineno: 74,
			columnno: 2,
			path: "/Users/michaelgogins/cloud-music/strudel/packages/core",
			code: {
			}
		},
		description: "<p>Like {@link gain}, but linear.</p>",
		name: "amp",
		params: [
			{
				type: {
					names: [
						"number",
						"Pattern"
					]
				},
				description: "<p>gain.</p>",
				name: "amount"
			}
		],
		tags: [
			{
				originalTitle: "superdirtOnly",
				title: "superdirtonly",
				text: ""
			}
		],
		examples: [
			"s(\"bd*8\").amp(\".1*2 .5 .1*2 .5 .1 .5\").osc()"
		],
		longname: "amp",
		kind: "member",
		scope: "global",
		___id: "T000002R000219",
		___s: true
	},
	{
		comment: "/**\n   * A pattern of numbers to specify the attack time of an envelope applied to each sample.\n   * [More info about envelopes](/learn/synths-samples-effects/#envelope)\n   *\n   * @name attack\n   * @param {number | Pattern} attack time in seconds.\n   * @example\n   * note(\"c3 e3\").attack(\"<0 .1 .5>\")\n   *\n   */",
		meta: {
			filename: "controls.mjs",
			lineno: 85,
			columnno: 2,
			path: "/Users/michaelgogins/cloud-music/strudel/packages/core",
			code: {
			}
		},
		description: "<p>A pattern of numbers to specify the attack time of an envelope applied to each sample.\n<a href=\"/learn/synths-samples-effects/#envelope\">More info about envelopes</a></p>",
		name: "attack",
		params: [
			{
				type: {
					names: [
						"number",
						"Pattern"
					]
				},
				description: "<p>time in seconds.</p>",
				name: "attack"
			}
		],
		examples: [
			"note(\"c3 e3\").attack(\"<0 .1 .5>\")"
		],
		longname: "attack",
		kind: "member",
		scope: "global",
		___id: "T000002R000220",
		___s: true
	},
	{
		comment: "/**\n   * Select the sound bank to use. To be used together with `s`. The bank name (+ \"_\") will be prepended to the value of `s`.\n   *\n   * @name bank\n   * @param {string | Pattern} bank the name of the bank\n   * @example\n   * s(\"bd sd\").bank('RolandTR909') // = s(\"RolandTR909_bd RolandTR909_sd\")\n   *\n   */",
		meta: {
			filename: "controls.mjs",
			lineno: 101,
			columnno: 2,
			path: "/Users/michaelgogins/cloud-music/strudel/packages/core",
			code: {
			}
		},
		description: "<p>Select the sound bank to use. To be used together with <code>s</code>. The bank name (+ &quot;_&quot;) will be prepended to the value of <code>s</code>.</p>",
		name: "bank",
		params: [
			{
				type: {
					names: [
						"string",
						"Pattern"
					]
				},
				description: "<p>the name of the bank</p>",
				name: "bank"
			}
		],
		examples: [
			"s(\"bd sd\").bank('RolandTR909') // = s(\"RolandTR909_bd RolandTR909_sd\")"
		],
		longname: "bank",
		kind: "member",
		scope: "global",
		___id: "T000002R000221",
		___s: true
	},
	{
		comment: "/**\n   * Gain envelope decay time = the time it takes after the attack time to reach the sustain level.\n   * [More info about envelopes](/learn/synths-samples-effects/#envelope)\n   *\n   * @name decay\n   * @param {number | Pattern} time decay time in seconds\n   * @example\n   * note(\"c3 e3\").decay(\"<.1 .2 .3 .4>\").sustain(0)\n   *\n   */",
		meta: {
			filename: "controls.mjs",
			lineno: 112,
			columnno: 2,
			path: "/Users/michaelgogins/cloud-music/strudel/packages/core",
			code: {
			}
		},
		description: "<p>Gain envelope decay time = the time it takes after the attack time to reach the sustain level.\n<a href=\"/learn/synths-samples-effects/#envelope\">More info about envelopes</a></p>",
		name: "decay",
		params: [
			{
				type: {
					names: [
						"number",
						"Pattern"
					]
				},
				description: "<p>decay time in seconds</p>",
				name: "time"
			}
		],
		examples: [
			"note(\"c3 e3\").decay(\"<.1 .2 .3 .4>\").sustain(0)"
		],
		longname: "decay",
		kind: "member",
		scope: "global",
		___id: "T000002R000222",
		___s: true
	},
	{
		comment: "/**\n   * Gain envelope sustain level. [More info about envelopes](/learn/synths-samples-effects/#envelope)\n   *\n   * @name sustain\n   * @param {number | Pattern} gain sustain level between 0 and 1\n   * @example\n   * note(\"c3 e3\").decay(.2).sustain(\"<0 .1 .4 .6 1>\")\n   *\n   */",
		meta: {
			filename: "controls.mjs",
			lineno: 123,
			columnno: 2,
			path: "/Users/michaelgogins/cloud-music/strudel/packages/core",
			code: {
			}
		},
		description: "<p>Gain envelope sustain level. <a href=\"/learn/synths-samples-effects/#envelope\">More info about envelopes</a></p>",
		name: "sustain",
		params: [
			{
				type: {
					names: [
						"number",
						"Pattern"
					]
				},
				description: "<p>sustain level between 0 and 1</p>",
				name: "gain"
			}
		],
		examples: [
			"note(\"c3 e3\").decay(.2).sustain(\"<0 .1 .4 .6 1>\")"
		],
		longname: "sustain",
		kind: "member",
		scope: "global",
		___id: "T000002R000223",
		___s: true
	},
	{
		comment: "/**\n   * Gain envelope release time. [More info about envelopes](/learn/synths-samples-effects/#envelope)\n   *\n   * @name release\n   * @param {number | Pattern} time release time in seconds\n   * @example\n   * note(\"c3 e3 g3 c4\").release(\"<0 .1 .4 .6 1>/2\")\n   *\n   */",
		meta: {
			filename: "controls.mjs",
			lineno: 133,
			columnno: 2,
			path: "/Users/michaelgogins/cloud-music/strudel/packages/core",
			code: {
			}
		},
		description: "<p>Gain envelope release time. <a href=\"/learn/synths-samples-effects/#envelope\">More info about envelopes</a></p>",
		name: "release",
		params: [
			{
				type: {
					names: [
						"number",
						"Pattern"
					]
				},
				description: "<p>release time in seconds</p>",
				name: "time"
			}
		],
		examples: [
			"note(\"c3 e3 g3 c4\").release(\"<0 .1 .4 .6 1>/2\")"
		],
		longname: "release",
		kind: "member",
		scope: "global",
		___id: "T000002R000224",
		___s: true
	},
	{
		comment: "/**\n   * Sets the center frequency of the band-pass filter.\n   *\n   * @name bandf\n   * @param {number | Pattern} frequency center frequency\n   * @example\n   * s(\"bd sd,hh*3\").bandf(\"<1000 2000 4000 8000>\")\n   *\n   */",
		meta: {
			filename: "controls.mjs",
			lineno: 153,
			columnno: 2,
			path: "/Users/michaelgogins/cloud-music/strudel/packages/core",
			code: {
			}
		},
		description: "<p>Sets the center frequency of the band-pass filter.</p>",
		name: "bandf",
		params: [
			{
				type: {
					names: [
						"number",
						"Pattern"
					]
				},
				description: "<p>center frequency</p>",
				name: "frequency"
			}
		],
		examples: [
			"s(\"bd sd,hh*3\").bandf(\"<1000 2000 4000 8000>\")"
		],
		longname: "bandf",
		kind: "member",
		scope: "global",
		___id: "T000002R000225",
		___s: true
	},
	{
		comment: "/**\n   * Sets the q-factor of the band-pass filter\n   *\n   * @name bandq\n   * @param {number | Pattern} q q factor\n   * @example\n   * s(\"bd sd\").bandf(500).bandq(\"<0 1 2 3>\")\n   *\n   */",
		meta: {
			filename: "controls.mjs",
			lineno: 164,
			columnno: 2,
			path: "/Users/michaelgogins/cloud-music/strudel/packages/core",
			code: {
			}
		},
		description: "<p>Sets the q-factor of the band-pass filter</p>",
		name: "bandq",
		params: [
			{
				type: {
					names: [
						"number",
						"Pattern"
					]
				},
				description: "<p>q factor</p>",
				name: "q"
			}
		],
		examples: [
			"s(\"bd sd\").bandf(500).bandq(\"<0 1 2 3>\")"
		],
		longname: "bandq",
		kind: "member",
		scope: "global",
		___id: "T000002R000226",
		___s: true
	},
	{
		comment: "/**\n   * a pattern of numbers from 0 to 1. Skips the beginning of each sample, e.g. `0.25` to cut off the first quarter from each sample.\n   *\n   * @memberof Pattern\n   * @name begin\n   * @param {number | Pattern} amount between 0 and 1, where 1 is the length of the sample\n   * @example\n   * samples({ rave: 'rave/AREUREADY.wav' }, 'github:tidalcycles/Dirt-Samples/master/')\n   * s(\"rave\").begin(\"<0 .25 .5 .75>\")\n   *\n   */",
		meta: {
			filename: "controls.mjs",
			lineno: 174,
			columnno: 2,
			path: "/Users/michaelgogins/cloud-music/strudel/packages/core",
			code: {
			}
		},
		description: "<p>a pattern of numbers from 0 to 1. Skips the beginning of each sample, e.g. <code>0.25</code> to cut off the first quarter from each sample.</p>",
		memberof: "Pattern",
		name: "begin",
		params: [
			{
				type: {
					names: [
						"number",
						"Pattern"
					]
				},
				description: "<p>between 0 and 1, where 1 is the length of the sample</p>",
				name: "amount"
			}
		],
		examples: [
			"samples({ rave: 'rave/AREUREADY.wav' }, 'github:tidalcycles/Dirt-Samples/master/')\ns(\"rave\").begin(\"<0 .25 .5 .75>\")"
		],
		scope: "static",
		longname: "Pattern.begin",
		kind: "member",
		___id: "T000002R000227",
		___s: true
	},
	{
		comment: "/**\n   * The same as .begin, but cuts off the end off each sample.\n   *\n   * @memberof Pattern\n   * @name end\n   * @param {number | Pattern} length 1 = whole sample, .5 = half sample, .25 = quarter sample etc..\n   * @example\n   * s(\"bd*2,oh*4\").end(\"<.1 .2 .5 1>\")\n   *\n   */",
		meta: {
			filename: "controls.mjs",
			lineno: 190,
			columnno: 2,
			path: "/Users/michaelgogins/cloud-music/strudel/packages/core",
			code: {
			}
		},
		description: "<p>The same as .begin, but cuts off the end off each sample.</p>",
		memberof: "Pattern",
		name: "end",
		params: [
			{
				type: {
					names: [
						"number",
						"Pattern"
					]
				},
				description: "<p>1 = whole sample, .5 = half sample, .25 = quarter sample etc..</p>",
				name: "length"
			}
		],
		examples: [
			"s(\"bd*2,oh*4\").end(\"<.1 .2 .5 1>\")"
		],
		scope: "static",
		longname: "Pattern.end",
		kind: "member",
		___id: "T000002R000228",
		___s: true
	},
	{
		comment: "/**\n   * Loops the sample (from `begin` to `end`) the specified number of times.\n   * Note that the tempo of the loop is not synced with the cycle tempo.\n   *\n   * @name loop\n   * @param {number | Pattern} times How often the sample is looped\n   * @example\n   * s(\"bd\").loop(\"<1 2 3 4>\").osc()\n   *\n   */",
		meta: {
			filename: "controls.mjs",
			lineno: 205,
			columnno: 2,
			path: "/Users/michaelgogins/cloud-music/strudel/packages/core",
			code: {
			}
		},
		description: "<p>Loops the sample (from <code>begin</code> to <code>end</code>) the specified number of times.\nNote that the tempo of the loop is not synced with the cycle tempo.</p>",
		name: "loop",
		params: [
			{
				type: {
					names: [
						"number",
						"Pattern"
					]
				},
				description: "<p>How often the sample is looped</p>",
				name: "times"
			}
		],
		examples: [
			"s(\"bd\").loop(\"<1 2 3 4>\").osc()"
		],
		longname: "loop",
		kind: "member",
		scope: "global",
		___id: "T000002R000229",
		___s: true
	},
	{
		comment: "/**\n   * a pattern of numbers from 0 to 1. Skips the beginning of each sample, e.g. `0.25` to cut off the first quarter from each sample.\n   *\n   * @name legato\n   * @param {number | Pattern} duration between 0 and 1, where 1 is the length of the whole hap time\n   * @example\n   * \"c4 eb4 g4 bb4\".legato(\"<0.125 .25 .5 .75 1 2 4>\")\n   *\n   */",
		meta: {
			filename: "controls.mjs",
			lineno: 218,
			columnno: 2,
			path: "/Users/michaelgogins/cloud-music/strudel/packages/core",
			code: {
			}
		},
		description: "<p>a pattern of numbers from 0 to 1. Skips the beginning of each sample, e.g. <code>0.25</code> to cut off the first quarter from each sample.</p>",
		name: "legato",
		params: [
			{
				type: {
					names: [
						"number",
						"Pattern"
					]
				},
				description: "<p>between 0 and 1, where 1 is the length of the whole hap time</p>",
				name: "duration"
			}
		],
		examples: [
			"\"c4 eb4 g4 bb4\".legato(\"<0.125 .25 .5 .75 1 2 4>\")"
		],
		longname: "legato",
		kind: "member",
		scope: "global",
		___id: "T000002R000230",
		___s: true
	},
	{
		comment: "/**\n   * bit crusher effect.\n   *\n   * @name crush\n   * @param {number | Pattern} depth between 1 (for drastic reduction in bit-depth) to 16 (for barely no reduction).\n   * @example\n   * s(\"<bd sd>,hh*3\").fast(2).crush(\"<16 8 7 6 5 4 3 2>\")\n   *\n   */",
		meta: {
			filename: "controls.mjs",
			lineno: 229,
			columnno: 2,
			path: "/Users/michaelgogins/cloud-music/strudel/packages/core",
			code: {
			}
		},
		description: "<p>bit crusher effect.</p>",
		name: "crush",
		params: [
			{
				type: {
					names: [
						"number",
						"Pattern"
					]
				},
				description: "<p>between 1 (for drastic reduction in bit-depth) to 16 (for barely no reduction).</p>",
				name: "depth"
			}
		],
		examples: [
			"s(\"<bd sd>,hh*3\").fast(2).crush(\"<16 8 7 6 5 4 3 2>\")"
		],
		longname: "crush",
		kind: "member",
		scope: "global",
		___id: "T000002R000231",
		___s: true
	},
	{
		comment: "/**\n   * fake-resampling for lowering the sample rate. Caution: This effect seems to only work in chromium based browsers\n   *\n   * @name coarse\n   * @param {number | Pattern} factor 1 for original 2 for half, 3 for a third and so on.\n   * @example\n   * s(\"bd sd,hh*4\").coarse(\"<1 4 8 16 32>\")\n   *\n   */",
		meta: {
			filename: "controls.mjs",
			lineno: 243,
			columnno: 2,
			path: "/Users/michaelgogins/cloud-music/strudel/packages/core",
			code: {
			}
		},
		description: "<p>fake-resampling for lowering the sample rate. Caution: This effect seems to only work in chromium based browsers</p>",
		name: "coarse",
		params: [
			{
				type: {
					names: [
						"number",
						"Pattern"
					]
				},
				description: "<p>1 for original 2 for half, 3 for a third and so on.</p>",
				name: "factor"
			}
		],
		examples: [
			"s(\"bd sd,hh*4\").coarse(\"<1 4 8 16 32>\")"
		],
		longname: "coarse",
		kind: "member",
		scope: "global",
		___id: "T000002R000232",
		___s: true
	},
	{
		comment: "/**\n   * choose the channel the pattern is sent to in superdirt\n   *\n   * @name channel\n   * @param {number | Pattern} channel channel number\n   *\n   */",
		meta: {
			filename: "controls.mjs",
			lineno: 258,
			columnno: 2,
			path: "/Users/michaelgogins/cloud-music/strudel/packages/core",
			code: {
			}
		},
		description: "<p>choose the channel the pattern is sent to in superdirt</p>",
		name: "channel",
		params: [
			{
				type: {
					names: [
						"number",
						"Pattern"
					]
				},
				description: "<p>channel number</p>",
				name: "channel"
			}
		],
		longname: "channel",
		kind: "member",
		scope: "global",
		___id: "T000002R000233",
		___s: true
	},
	{
		comment: "/**\n   * In the style of classic drum-machines, `cut` will stop a playing sample as soon as another samples with in same cutgroup is to be played. An example would be an open hi-hat followed by a closed one, essentially muting the open.\n   *\n   * @name cut\n   * @param {number | Pattern} group cut group number\n   * @example\n   * s(\"bd sax\").cut(1).osc()\n   *\n   */",
		meta: {
			filename: "controls.mjs",
			lineno: 266,
			columnno: 2,
			path: "/Users/michaelgogins/cloud-music/strudel/packages/core",
			code: {
			}
		},
		description: "<p>In the style of classic drum-machines, <code>cut</code> will stop a playing sample as soon as another samples with in same cutgroup is to be played. An example would be an open hi-hat followed by a closed one, essentially muting the open.</p>",
		name: "cut",
		params: [
			{
				type: {
					names: [
						"number",
						"Pattern"
					]
				},
				description: "<p>cut group number</p>",
				name: "group"
			}
		],
		examples: [
			"s(\"bd sax\").cut(1).osc()"
		],
		longname: "cut",
		kind: "member",
		scope: "global",
		___id: "T000002R000234",
		___s: true
	},
	{
		comment: "/**\n   * Applies the cutoff frequency of the low-pass filter.\n   *\n   * @name cutoff\n   * @param {number | Pattern} frequency audible between 0 and 20000\n   * @example\n   * s(\"bd sd,hh*3\").cutoff(\"<4000 2000 1000 500 200 100>\")\n   *\n   */",
		meta: {
			filename: "controls.mjs",
			lineno: 280,
			columnno: 2,
			path: "/Users/michaelgogins/cloud-music/strudel/packages/core",
			code: {
			}
		},
		description: "<p>Applies the cutoff frequency of the low-pass filter.</p>",
		name: "cutoff",
		params: [
			{
				type: {
					names: [
						"number",
						"Pattern"
					]
				},
				description: "<p>audible between 0 and 20000</p>",
				name: "frequency"
			}
		],
		examples: [
			"s(\"bd sd,hh*3\").cutoff(\"<4000 2000 1000 500 200 100>\")"
		],
		longname: "cutoff",
		kind: "member",
		scope: "global",
		___id: "T000002R000235",
		___s: true
	},
	{
		comment: "/**\n   * Applies the cutoff frequency of the high-pass filter.\n   *\n   * @name hcutoff\n   * @param {number | Pattern} frequency audible between 0 and 20000\n   * @example\n   * s(\"bd sd,hh*4\").hcutoff(\"<4000 2000 1000 500 200 100>\")\n   *\n   */",
		meta: {
			filename: "controls.mjs",
			lineno: 291,
			columnno: 2,
			path: "/Users/michaelgogins/cloud-music/strudel/packages/core",
			code: {
			}
		},
		description: "<p>Applies the cutoff frequency of the high-pass filter.</p>",
		name: "hcutoff",
		params: [
			{
				type: {
					names: [
						"number",
						"Pattern"
					]
				},
				description: "<p>audible between 0 and 20000</p>",
				name: "frequency"
			}
		],
		examples: [
			"s(\"bd sd,hh*4\").hcutoff(\"<4000 2000 1000 500 200 100>\")"
		],
		longname: "hcutoff",
		kind: "member",
		scope: "global",
		___id: "T000002R000236",
		___s: true
	},
	{
		comment: "/**\n   * Applies the resonance of the high-pass filter.\n   *\n   * @name hresonance\n   * @param {number | Pattern} q resonance factor between 0 and 50\n   * @example\n   * s(\"bd sd,hh*4\").hcutoff(2000).hresonance(\"<0 10 20 30>\")\n   *\n   */",
		meta: {
			filename: "controls.mjs",
			lineno: 306,
			columnno: 2,
			path: "/Users/michaelgogins/cloud-music/strudel/packages/core",
			code: {
			}
		},
		description: "<p>Applies the resonance of the high-pass filter.</p>",
		name: "hresonance",
		params: [
			{
				type: {
					names: [
						"number",
						"Pattern"
					]
				},
				description: "<p>resonance factor between 0 and 50</p>",
				name: "q"
			}
		],
		examples: [
			"s(\"bd sd,hh*4\").hcutoff(2000).hresonance(\"<0 10 20 30>\")"
		],
		longname: "hresonance",
		kind: "member",
		scope: "global",
		___id: "T000002R000237",
		___s: true
	},
	{
		comment: "/**\n   * Applies the cutoff frequency of the low-pass filter.\n   *\n   * @name resonance\n   * @param {number | Pattern} q resonance factor between 0 and 50\n   * @example\n   * s(\"bd sd,hh*4\").cutoff(2000).resonance(\"<0 10 20 30>\")\n   *\n   */",
		meta: {
			filename: "controls.mjs",
			lineno: 321,
			columnno: 2,
			path: "/Users/michaelgogins/cloud-music/strudel/packages/core",
			code: {
			}
		},
		description: "<p>Applies the cutoff frequency of the low-pass filter.</p>",
		name: "resonance",
		params: [
			{
				type: {
					names: [
						"number",
						"Pattern"
					]
				},
				description: "<p>resonance factor between 0 and 50</p>",
				name: "q"
			}
		],
		examples: [
			"s(\"bd sd,hh*4\").cutoff(2000).resonance(\"<0 10 20 30>\")"
		],
		longname: "resonance",
		kind: "member",
		scope: "global",
		___id: "T000002R000238",
		___s: true
	},
	{
		comment: "/**\n   * DJ filter, below 0.5 is low pass filter, above is high pass filter.\n   *\n   * @name djf\n   * @param {number | Pattern} cutoff below 0.5 is low pass filter, above is high pass filter\n   * @example\n   * n(\"0 3 7 [10,24]\").s('superzow').octave(3).djf(\"<.5 .25 .5 .75>\").osc()\n   *\n   */",
		meta: {
			filename: "controls.mjs",
			lineno: 332,
			columnno: 2,
			path: "/Users/michaelgogins/cloud-music/strudel/packages/core",
			code: {
			}
		},
		description: "<p>DJ filter, below 0.5 is low pass filter, above is high pass filter.</p>",
		name: "djf",
		params: [
			{
				type: {
					names: [
						"number",
						"Pattern"
					]
				},
				description: "<p>below 0.5 is low pass filter, above is high pass filter</p>",
				name: "cutoff"
			}
		],
		examples: [
			"n(\"0 3 7 [10,24]\").s('superzow').octave(3).djf(\"<.5 .25 .5 .75>\").osc()"
		],
		longname: "djf",
		kind: "member",
		scope: "global",
		___id: "T000002R000239",
		___s: true
	},
	{
		comment: "/**\n   * Set detune of oscillators. Works only with some synths, see <a target=\"_blank\" href=\"https://tidalcycles.org/docs/patternlib/tutorials/synthesizers\">tidal doc</a>\n   *\n   * @name detune\n   * @param {number | Pattern} amount between 0 and 1\n   * @example\n   * n(\"0 3 7\").s('superzow').octave(3).detune(\"<0 .25 .5 1 2>\").osc()\n   *\n   */",
		meta: {
			filename: "controls.mjs",
			lineno: 370,
			columnno: 2,
			path: "/Users/michaelgogins/cloud-music/strudel/packages/core",
			code: {
			}
		},
		description: "<p>Set detune of oscillators. Works only with some synths, see <a target=\"_blank\" href=\"https://tidalcycles.org/docs/patternlib/tutorials/synthesizers\">tidal doc</a></p>",
		name: "detune",
		params: [
			{
				type: {
					names: [
						"number",
						"Pattern"
					]
				},
				description: "<p>between 0 and 1</p>",
				name: "amount"
			}
		],
		examples: [
			"n(\"0 3 7\").s('superzow').octave(3).detune(\"<0 .25 .5 1 2>\").osc()"
		],
		longname: "detune",
		kind: "member",
		scope: "global",
		___id: "T000002R000240",
		___s: true
	},
	{
		comment: "/**\n   * Set dryness of reverb. See {@link room} and {@link size} for more information about reverb.\n   *\n   * @name dry\n   * @param {number | Pattern} dry 0 = wet, 1 = dry\n   * @example\n   * n(\"[0,3,7](3,8)\").s(\"superpiano\").room(.7).dry(\"<0 .5 .75 1>\").osc()\n   *\n   */",
		meta: {
			filename: "controls.mjs",
			lineno: 380,
			columnno: 2,
			path: "/Users/michaelgogins/cloud-music/strudel/packages/core",
			code: {
			}
		},
		description: "<p>Set dryness of reverb. See {@link room} and {@link size} for more information about reverb.</p>",
		name: "dry",
		params: [
			{
				type: {
					names: [
						"number",
						"Pattern"
					]
				},
				description: "<p>0 = wet, 1 = dry</p>",
				name: "dry"
			}
		],
		examples: [
			"n(\"[0,3,7](3,8)\").s(\"superpiano\").room(.7).dry(\"<0 .5 .75 1>\").osc()"
		],
		longname: "dry",
		kind: "member",
		scope: "global",
		___id: "T000002R000241",
		___s: true
	},
	{
		comment: "/**\n   * Set frequency of sound.\n   *\n   * @name freq\n   * @param {number | Pattern} frequency in Hz. the audible range is between 20 and 20000 Hz\n   * @example\n   * freq(\"220 110 440 110\").s(\"superzow\").osc()\n   * @example\n   * freq(\"110\".mul.out(\".5 1.5 .6 [2 3]\")).s(\"superzow\").osc()\n   *\n   */",
		meta: {
			filename: "controls.mjs",
			lineno: 415,
			columnno: 2,
			path: "/Users/michaelgogins/cloud-music/strudel/packages/core",
			code: {
			}
		},
		description: "<p>Set frequency of sound.</p>",
		name: "freq",
		params: [
			{
				type: {
					names: [
						"number",
						"Pattern"
					]
				},
				description: "<p>in Hz. the audible range is between 20 and 20000 Hz</p>",
				name: "frequency"
			}
		],
		examples: [
			"freq(\"220 110 440 110\").s(\"superzow\").osc()",
			"freq(\"110\".mul.out(\".5 1.5 .6 [2 3]\")).s(\"superzow\").osc()"
		],
		longname: "freq",
		kind: "member",
		scope: "global",
		___id: "T000002R000242",
		___s: true
	},
	{
		comment: "/**\n   * Emulation of a Leslie speaker: speakers rotating in a wooden amplified cabinet.\n   *\n   * @name leslie\n   * @param {number | Pattern} wet between 0 and 1\n   * @example\n   * n(\"0,4,7\").s(\"supersquare\").leslie(\"<0 .4 .6 1>\").osc()\n   *\n   */",
		meta: {
			filename: "controls.mjs",
			lineno: 438,
			columnno: 2,
			path: "/Users/michaelgogins/cloud-music/strudel/packages/core",
			code: {
			}
		},
		description: "<p>Emulation of a Leslie speaker: speakers rotating in a wooden amplified cabinet.</p>",
		name: "leslie",
		params: [
			{
				type: {
					names: [
						"number",
						"Pattern"
					]
				},
				description: "<p>between 0 and 1</p>",
				name: "wet"
			}
		],
		examples: [
			"n(\"0,4,7\").s(\"supersquare\").leslie(\"<0 .4 .6 1>\").osc()"
		],
		longname: "leslie",
		kind: "member",
		scope: "global",
		___id: "T000002R000243",
		___s: true
	},
	{
		comment: "/**\n   * Rate of modulation / rotation for leslie effect\n   *\n   * @name lrate\n   * @param {number | Pattern} rate 6.7 for fast, 0.7 for slow\n   * @example\n   * n(\"0,4,7\").s(\"supersquare\").leslie(1).lrate(\"<1 2 4 8>\").osc()\n   *\n   */",
		meta: {
			filename: "controls.mjs",
			lineno: 448,
			columnno: 2,
			path: "/Users/michaelgogins/cloud-music/strudel/packages/core",
			code: {
			}
		},
		description: "<p>Rate of modulation / rotation for leslie effect</p>",
		name: "lrate",
		params: [
			{
				type: {
					names: [
						"number",
						"Pattern"
					]
				},
				description: "<p>6.7 for fast, 0.7 for slow</p>",
				name: "rate"
			}
		],
		examples: [
			"n(\"0,4,7\").s(\"supersquare\").leslie(1).lrate(\"<1 2 4 8>\").osc()"
		],
		longname: "lrate",
		kind: "member",
		scope: "global",
		___id: "T000002R000244",
		___s: true
	},
	{
		comment: "/**\n   * Physical size of the cabinet in meters. Be careful, it might be slightly larger than your computer. Affects the Doppler amount (pitch warble)\n   *\n   * @name lsize\n   * @param {number | Pattern} meters somewhere between 0 and 1\n   * @example\n   * n(\"0,4,7\").s(\"supersquare\").leslie(1).lrate(2).lsize(\"<.1 .5 1>\").osc()\n   *\n   */",
		meta: {
			filename: "controls.mjs",
			lineno: 459,
			columnno: 2,
			path: "/Users/michaelgogins/cloud-music/strudel/packages/core",
			code: {
			}
		},
		description: "<p>Physical size of the cabinet in meters. Be careful, it might be slightly larger than your computer. Affects the Doppler amount (pitch warble)</p>",
		name: "lsize",
		params: [
			{
				type: {
					names: [
						"number",
						"Pattern"
					]
				},
				description: "<p>somewhere between 0 and 1</p>",
				name: "meters"
			}
		],
		examples: [
			"n(\"0,4,7\").s(\"supersquare\").leslie(1).lrate(2).lsize(\"<.1 .5 1>\").osc()"
		],
		longname: "lsize",
		kind: "member",
		scope: "global",
		___id: "T000002R000245",
		___s: true
	},
	{
		comment: "/**\n   * Sets the default octave of a synth.\n   *\n   * @name octave\n   * @param {number | Pattern} octave octave number\n   * @example\n   * n(\"0,4,7\").s('supersquare').octave(\"<3 4 5 6>\").osc()\n   */",
		meta: {
			filename: "controls.mjs",
			lineno: 494,
			columnno: 2,
			path: "/Users/michaelgogins/cloud-music/strudel/packages/core",
			code: {
			}
		},
		description: "<p>Sets the default octave of a synth.</p>",
		name: "octave",
		params: [
			{
				type: {
					names: [
						"number",
						"Pattern"
					]
				},
				description: "<p>octave number</p>",
				name: "octave"
			}
		],
		examples: [
			"n(\"0,4,7\").s('supersquare').octave(\"<3 4 5 6>\").osc()"
		],
		longname: "octave",
		kind: "member",
		scope: "global",
		___id: "T000002R000246",
		___s: true
	},
	{
		comment: "/**\n   * a pattern of numbers. An `orbit` is a global parameter context for patterns. Patterns with the same orbit will share hardware output bus offset and global effects, e.g. reverb and delay. The maximum number of orbits is specified in the superdirt startup, numbers higher than maximum will wrap around.\n   *\n   * @name orbit\n   * @param {number | Pattern} number\n   *\n   */",
		meta: {
			filename: "controls.mjs",
			lineno: 506,
			columnno: 2,
			path: "/Users/michaelgogins/cloud-music/strudel/packages/core",
			code: {
			}
		},
		description: "<p>a pattern of numbers. An <code>orbit</code> is a global parameter context for patterns. Patterns with the same orbit will share hardware output bus offset and global effects, e.g. reverb and delay. The maximum number of orbits is specified in the superdirt startup, numbers higher than maximum will wrap around.</p>",
		name: "orbit",
		params: [
			{
				type: {
					names: [
						"number",
						"Pattern"
					]
				},
				name: "number"
			}
		],
		longname: "orbit",
		kind: "member",
		scope: "global",
		___id: "T000002R000247",
		___s: true
	},
	{
		comment: "/**\n   * Sets position in stereo.\n   *\n   * @name pan\n   * @param {number | Pattern} pan between 0 and 1, from left to right (assuming stereo), once round a circle (assuming multichannel)\n   * @example\n   * s(\"[bd hh]*2\").pan(\"<.5 1 .5 0>\")\n   *\n   */",
		meta: {
			filename: "controls.mjs",
			lineno: 520,
			columnno: 2,
			path: "/Users/michaelgogins/cloud-music/strudel/packages/core",
			code: {
			}
		},
		description: "<p>Sets position in stereo.</p>",
		name: "pan",
		params: [
			{
				type: {
					names: [
						"number",
						"Pattern"
					]
				},
				description: "<p>between 0 and 1, from left to right (assuming stereo), once round a circle (assuming multichannel)</p>",
				name: "pan"
			}
		],
		examples: [
			"s(\"[bd hh]*2\").pan(\"<.5 1 .5 0>\")"
		],
		longname: "pan",
		kind: "member",
		scope: "global",
		___id: "T000002R000248",
		___s: true
	},
	{
		comment: "/**\n   * Sets the level of reverb.\n   *\n   * @name room\n   * @param {number | Pattern} level between 0 and 1\n   * @example\n   * s(\"bd sd\").room(\"<0 .2 .4 .6 .8 1>\").osc()\n   *\n   */",
		meta: {
			filename: "controls.mjs",
			lineno: 587,
			columnno: 2,
			path: "/Users/michaelgogins/cloud-music/strudel/packages/core",
			code: {
			}
		},
		description: "<p>Sets the level of reverb.</p>",
		name: "room",
		params: [
			{
				type: {
					names: [
						"number",
						"Pattern"
					]
				},
				description: "<p>between 0 and 1</p>",
				name: "level"
			}
		],
		examples: [
			"s(\"bd sd\").room(\"<0 .2 .4 .6 .8 1>\").osc()"
		],
		longname: "room",
		kind: "member",
		scope: "global",
		___id: "T000002R000249",
		___s: true
	},
	{
		comment: "/**\n   * Sets the room size of the reverb, see {@link room}.\n   *\n   * @name size\n   * @param {number | Pattern} size between 0 and 1\n   * @example\n   * s(\"bd sd\").room(.8).size(\"<0 .2 .4 .6 .8 1>\").osc()\n   *\n   */",
		meta: {
			filename: "controls.mjs",
			lineno: 597,
			columnno: 2,
			path: "/Users/michaelgogins/cloud-music/strudel/packages/core",
			code: {
			}
		},
		description: "<p>Sets the room size of the reverb, see {@link room}.</p>",
		name: "size",
		params: [
			{
				type: {
					names: [
						"number",
						"Pattern"
					]
				},
				description: "<p>between 0 and 1</p>",
				name: "size"
			}
		],
		examples: [
			"s(\"bd sd\").room(.8).size(\"<0 .2 .4 .6 .8 1>\").osc()"
		],
		longname: "size",
		kind: "member",
		scope: "global",
		___id: "T000002R000250",
		___s: true
	},
	{
		comment: "/**\n   * Wave shaping distortion. CAUTION: it might get loud\n   *\n   * @name shape\n   * @param {number | Pattern} distortion between 0 and 1\n   * @example\n   * s(\"bd sd,hh*4\").shape(\"<0 .2 .4 .6 .8>\")\n   *\n   */",
		meta: {
			filename: "controls.mjs",
			lineno: 623,
			columnno: 2,
			path: "/Users/michaelgogins/cloud-music/strudel/packages/core",
			code: {
			}
		},
		description: "<p>Wave shaping distortion. CAUTION: it might get loud</p>",
		name: "shape",
		params: [
			{
				type: {
					names: [
						"number",
						"Pattern"
					]
				},
				description: "<p>between 0 and 1</p>",
				name: "distortion"
			}
		],
		examples: [
			"s(\"bd sd,hh*4\").shape(\"<0 .2 .4 .6 .8>\")"
		],
		longname: "shape",
		kind: "member",
		scope: "global",
		___id: "T000002R000251",
		___s: true
	},
	{
		comment: "/**\n   * Changes the speed of sample playback, i.e. a cheap way of changing pitch.\n   *\n   * @name speed\n   * @param {number | Pattern} speed -inf to inf, negative numbers play the sample backwards.\n   * @example\n   * s(\"bd\").speed(\"<1 2 4 1 -2 -4>\").osc()\n   * @example\n   * speed(\"1 1.5*2 [2 1.1]\").s(\"sax\").cut(1).osc()\n   *\n   */",
		meta: {
			filename: "controls.mjs",
			lineno: 637,
			columnno: 2,
			path: "/Users/michaelgogins/cloud-music/strudel/packages/core",
			code: {
			}
		},
		description: "<p>Changes the speed of sample playback, i.e. a cheap way of changing pitch.</p>",
		name: "speed",
		params: [
			{
				type: {
					names: [
						"number",
						"Pattern"
					]
				},
				description: "<p>inf to inf, negative numbers play the sample backwards.</p>",
				name: "speed"
			}
		],
		examples: [
			"s(\"bd\").speed(\"<1 2 4 1 -2 -4>\").osc()",
			"speed(\"1 1.5*2 [2 1.1]\").s(\"sax\").cut(1).osc()"
		],
		longname: "speed",
		kind: "member",
		scope: "global",
		___id: "T000002R000252",
		___s: true
	},
	{
		comment: "/**\n   * Used in conjunction with {@link speed}, accepts values of \"r\" (rate, default behavior), \"c\" (cycles), or \"s\" (seconds). Using `unit \"c\"` means `speed` will be interpreted in units of cycles, e.g. `speed \"1\"` means samples will be stretched to fill a cycle. Using `unit \"s\"` means the playback speed will be adjusted so that the duration is the number of seconds specified by `speed`.\n   *\n   * @name unit\n   * @param {number | string | Pattern} unit see description above\n   * @example\n   * speed(\"1 2 .5 3\").s(\"bd\").unit(\"c\").osc()\n   *\n   */",
		meta: {
			filename: "controls.mjs",
			lineno: 653,
			columnno: 2,
			path: "/Users/michaelgogins/cloud-music/strudel/packages/core",
			code: {
			}
		},
		description: "<p>Used in conjunction with {@link speed}, accepts values of &quot;r&quot; (rate, default behavior), &quot;c&quot; (cycles), or &quot;s&quot; (seconds). Using <code>unit &quot;c&quot;</code> means <code>speed</code> will be interpreted in units of cycles, e.g. <code>speed &quot;1&quot;</code> means samples will be stretched to fill a cycle. Using <code>unit &quot;s&quot;</code> means the playback speed will be adjusted so that the duration is the number of seconds specified by <code>speed</code>.</p>",
		name: "unit",
		params: [
			{
				type: {
					names: [
						"number",
						"string",
						"Pattern"
					]
				},
				description: "<p>see description above</p>",
				name: "unit"
			}
		],
		examples: [
			"speed(\"1 2 .5 3\").s(\"bd\").unit(\"c\").osc()"
		],
		longname: "unit",
		kind: "member",
		scope: "global",
		___id: "T000002R000253",
		___s: true
	},
	{
		comment: "/**\n   * Made by Calum Gunn. Reminiscent of some weird mixture of filter, ring-modulator and pitch-shifter. The SuperCollider manual defines Squiz as:\n   *\n   * \"A simplistic pitch-raising algorithm. It's not meant to sound natural; its sound is reminiscent of some weird mixture of filter, ring-modulator and pitch-shifter, depending on the input. The algorithm works by cutting the signal into fragments (delimited by upwards-going zero-crossings) and squeezing those fragments in the time domain (i.e. simply playing them back faster than they came in), leaving silences inbetween. All the parameters apart from memlen can be modulated.\"\n   *\n   * @name squiz\n   * @param {number | Pattern} squiz Try passing multiples of 2 to it - 2, 4, 8 etc.\n   * @example\n   * squiz(\"2 4/2 6 [8 16]\").s(\"bd\").osc()\n   *\n   */",
		meta: {
			filename: "controls.mjs",
			lineno: 667,
			columnno: 2,
			path: "/Users/michaelgogins/cloud-music/strudel/packages/core",
			code: {
			}
		},
		description: "<p>Made by Calum Gunn. Reminiscent of some weird mixture of filter, ring-modulator and pitch-shifter. The SuperCollider manual defines Squiz as:</p>\n<p>&quot;A simplistic pitch-raising algorithm. It's not meant to sound natural; its sound is reminiscent of some weird mixture of filter, ring-modulator and pitch-shifter, depending on the input. The algorithm works by cutting the signal into fragments (delimited by upwards-going zero-crossings) and squeezing those fragments in the time domain (i.e. simply playing them back faster than they came in), leaving silences inbetween. All the parameters apart from memlen can be modulated.&quot;</p>",
		name: "squiz",
		params: [
			{
				type: {
					names: [
						"number",
						"Pattern"
					]
				},
				description: "<p>Try passing multiples of 2 to it - 2, 4, 8 etc.</p>",
				name: "squiz"
			}
		],
		examples: [
			"squiz(\"2 4/2 6 [8 16]\").s(\"bd\").osc()"
		],
		longname: "squiz",
		kind: "member",
		scope: "global",
		___id: "T000002R000254",
		___s: true
	},
	{
		comment: "/**\n   *\n   * Formant filter to make things sound like vowels.\n   *\n   * @name vowel\n   * @param {string | Pattern} vowel You can use a e i o u.\n   * @example\n   * note(\"c2 <eb2 <g2 g1>>\").s('sawtooth')\n   * .vowel(\"<a e i <o u>>\")\n   *\n   */",
		meta: {
			filename: "controls.mjs",
			lineno: 687,
			columnno: 2,
			path: "/Users/michaelgogins/cloud-music/strudel/packages/core",
			code: {
			}
		},
		description: "<p>Formant filter to make things sound like vowels.</p>",
		name: "vowel",
		params: [
			{
				type: {
					names: [
						"string",
						"Pattern"
					]
				},
				description: "<p>You can use a e i o u.</p>",
				name: "vowel"
			}
		],
		examples: [
			"note(\"c2 <eb2 <g2 g1>>\").s('sawtooth')\n.vowel(\"<a e i <o u>>\")"
		],
		longname: "vowel",
		kind: "member",
		scope: "global",
		___id: "T000002R000255",
		___s: true
	},
	{
		comment: "/**\n * Intended for a debugging, drawLine renders the pattern as a string, where each character represents the same time span.\n * Should only be used with single characters as values, otherwise the character slots will be messed up.\n * Character legend:\n *\n * - \"|\" cycle separator\n * - \"-\" hold previous value\n * - \".\" silence\n *\n * @param {Pattern} pattern the pattern to use\n * @param {number} chars max number of characters (approximately)\n * @returns string\n * @example\n * const line = drawLine(\"0 [1 2 3]\", 10); // |0--123|0--123\n * console.log(line);\n * silence;\n */",
		meta: {
			range: [
				1426,
				2796
			],
			filename: "drawLine.mjs",
			lineno: 26,
			columnno: 0,
			path: "/Users/michaelgogins/cloud-music/strudel/packages/core",
			code: {
				id: "astnode100002250",
				name: "drawLine",
				type: "FunctionDeclaration",
				paramnames: [
					"pat",
					"chars"
				]
			},
			vars: {
				cycle: "drawLine~cycle",
				pos: "drawLine~pos",
				lines: "drawLine~lines",
				emptyLine: "drawLine~emptyLine",
				haps: "drawLine~haps",
				durations: "drawLine~durations",
				"": null,
				charFraction: "drawLine~charFraction",
				totalSlots: "drawLine~totalSlots",
				i: "drawLine~i",
				"undefined": null,
				matches: "drawLine~matches",
				missingLines: "drawLine~missingLines"
			}
		},
		description: "<p>Intended for a debugging, drawLine renders the pattern as a string, where each character represents the same time span.\nShould only be used with single characters as values, otherwise the character slots will be messed up.\nCharacter legend:</p>\n<ul>\n<li>&quot;|&quot; cycle separator</li>\n<li>&quot;-&quot; hold previous value</li>\n<li>&quot;.&quot; silence</li>\n</ul>",
		params: [
			{
				type: {
					names: [
						"Pattern"
					]
				},
				description: "<p>the pattern to use</p>",
				name: "pattern"
			},
			{
				type: {
					names: [
						"number"
					]
				},
				description: "<p>max number of characters (approximately)</p>",
				name: "chars"
			}
		],
		returns: [
			{
				description: "<p>string</p>"
			}
		],
		examples: [
			"const line = drawLine(\"0 [1 2 3]\", 10); // |0--123|0--123\nconsole.log(line);\nsilence;"
		],
		name: "drawLine",
		longname: "drawLine",
		kind: "function",
		scope: "global",
		___id: "T000002R000335",
		___s: true
	},
	{
		comment: "/**\n * Changes the structure of the pattern to form an euclidean rhythm.\n * Euclidian rhythms are rhythms obtained using the greatest common\n * divisor of two numbers.  They were described in 2004 by Godfried\n * Toussaint, a canadian computer scientist.  Euclidian rhythms are\n * really useful for computer/algorithmic music because they can\n * describe a large number of rhythms with a couple of numbers.\n *\n * @memberof Pattern\n * @name euclid\n * @param {number} pulses the number of onsets / beats\n * @param {number} steps the number of steps to fill\n * @returns Pattern\n * @example\n * // The Cuban tresillo pattern.\n * note(\"c3\").euclid(3,8)\n */",
		meta: {
			filename: "euclid.mjs",
			lineno: 12,
			columnno: 0,
			path: "/Users/michaelgogins/cloud-music/strudel/packages/core",
			code: {
			}
		},
		description: "<p>Changes the structure of the pattern to form an euclidean rhythm.\nEuclidian rhythms are rhythms obtained using the greatest common\ndivisor of two numbers.  They were described in 2004 by Godfried\nToussaint, a canadian computer scientist.  Euclidian rhythms are\nreally useful for computer/algorithmic music because they can\ndescribe a large number of rhythms with a couple of numbers.</p>",
		memberof: "Pattern",
		name: "euclid",
		params: [
			{
				type: {
					names: [
						"number"
					]
				},
				description: "<p>the number of onsets / beats</p>",
				name: "pulses"
			},
			{
				type: {
					names: [
						"number"
					]
				},
				description: "<p>the number of steps to fill</p>",
				name: "steps"
			}
		],
		returns: [
			{
				description: "<p>Pattern</p>"
			}
		],
		examples: [
			"// The Cuban tresillo pattern.\nnote(\"c3\").euclid(3,8)"
		],
		scope: "static",
		longname: "Pattern.euclid",
		kind: "member",
		___id: "T000002R000357",
		___s: true
	},
	{
		comment: "/**\n * Like `iter`, but has an additional parameter for 'rotating' the resulting sequence.\n * @memberof Pattern\n * @name euclidRot\n * @param {number} pulses the number of onsets / beats\n * @param {number} steps the number of steps to fill\n * @param {number} rotation offset in steps\n * @returns Pattern\n * @example\n * // A Samba rhythm necklace from Brazil\n * note(\"c3\").euclidRot(3,16,14)\n */",
		meta: {
			filename: "euclid.mjs",
			lineno: 30,
			columnno: 0,
			path: "/Users/michaelgogins/cloud-music/strudel/packages/core",
			code: {
			}
		},
		description: "<p>Like <code>iter</code>, but has an additional parameter for 'rotating' the resulting sequence.</p>",
		memberof: "Pattern",
		name: "euclidRot",
		params: [
			{
				type: {
					names: [
						"number"
					]
				},
				description: "<p>the number of onsets / beats</p>",
				name: "pulses"
			},
			{
				type: {
					names: [
						"number"
					]
				},
				description: "<p>the number of steps to fill</p>",
				name: "steps"
			},
			{
				type: {
					names: [
						"number"
					]
				},
				description: "<p>offset in steps</p>",
				name: "rotation"
			}
		],
		returns: [
			{
				description: "<p>Pattern</p>"
			}
		],
		examples: [
			"// A Samba rhythm necklace from Brazil\nnote(\"c3\").euclidRot(3,16,14)"
		],
		scope: "static",
		longname: "Pattern.euclidRot",
		kind: "member",
		___id: "T000002R000358",
		___s: true
	},
	{
		comment: "/**\n * @example // A thirteenth century Persian rhythm called Khafif-e-ramal.\n * note(\"c3\").euclid(2,5)\n * @example // The archetypal pattern of the Cumbia from Colombia, as well as a Calypso rhythm from Trinidad.\n * note(\"c3\").euclid(3,4)\n * @example // Another thirteenth century Persian rhythm by the name of Khafif-e-ramal, as well as a Rumanian folk-dance rhythm.\n * note(\"c3\").euclidRot(3,5,2)\n * @example // A Ruchenitza rhythm used in a Bulgarian folk-dance.\n * note(\"c3\").euclid(3,7)\n * @example // The Cuban tresillo pattern.\n * note(\"c3\").euclid(3,8)\n * @example // Another Ruchenitza Bulgarian folk-dance rhythm.\n * note(\"c3\").euclid(4,7)\n * @example // The Aksak rhythm of Turkey.\n * note(\"c3\").euclid(4,9)\n * @example // The metric pattern used by Frank Zappa in his piece titled Outside Now.\n * note(\"c3\").euclid(4,11)\n * @example // Yields the York-Samai pattern, a popular Arab rhythm.\n * note(\"c3\").euclid(5,6)\n * @example // The Nawakhat pattern, another popular Arab rhythm.\n * note(\"c3\").euclid(5,7)\n * @example // The Cuban cinquillo pattern.\n * note(\"c3\").euclid(5,8)\n * @example // A popular Arab rhythm called Agsag-Samai.\n * note(\"c3\").euclid(5,9)\n * @example // The metric pattern used by Moussorgsky in Pictures at an Exhibition.\n * note(\"c3\").euclid(5,11)\n * @example // The Venda clapping pattern of a South African children’s song.\n * note(\"c3\").euclid(5,12)\n * @example // The Bossa-Nova rhythm necklace of Brazil.\n * note(\"c3\").euclid(5,16)\n * @example // A typical rhythm played on the Bendir (frame drum).\n * note(\"c3\").euclid(7,8)\n * @example // A common West African bell pattern.\n * note(\"c3\").euclid(7,12)\n * @example // A Samba rhythm necklace from Brazil.\n * note(\"c3\").euclidRot(7,16,14)\n * @example // A rhythm necklace used in the Central African Republic.\n * note(\"c3\").euclid(9,16)\n * @example // A rhythm necklace of the Aka Pygmies of Central Africa.\n * note(\"c3\").euclidRot(11,24,14)\n * @example // Another rhythm necklace of the Aka Pygmies of the upper Sangha.\n * note(\"c3\").euclidRot(13,24,5)\n */",
		meta: {
			range: [
				4065,
				4217
			],
			filename: "euclid.mjs",
			lineno: 88,
			columnno: 6,
			path: "/Users/michaelgogins/cloud-music/strudel/packages/core",
			code: {
				id: "astnode100002522",
				name: "_euclidRot",
				type: "FunctionExpression"
			},
			vars: {
				b: "_euclidRot~b"
			}
		},
		examples: [
			"// A thirteenth century Persian rhythm called Khafif-e-ramal.\nnote(\"c3\").euclid(2,5)",
			"// The archetypal pattern of the Cumbia from Colombia, as well as a Calypso rhythm from Trinidad.\nnote(\"c3\").euclid(3,4)",
			"// Another thirteenth century Persian rhythm by the name of Khafif-e-ramal, as well as a Rumanian folk-dance rhythm.\nnote(\"c3\").euclidRot(3,5,2)",
			"// A Ruchenitza rhythm used in a Bulgarian folk-dance.\nnote(\"c3\").euclid(3,7)",
			"// The Cuban tresillo pattern.\nnote(\"c3\").euclid(3,8)",
			"// Another Ruchenitza Bulgarian folk-dance rhythm.\nnote(\"c3\").euclid(4,7)",
			"// The Aksak rhythm of Turkey.\nnote(\"c3\").euclid(4,9)",
			"// The metric pattern used by Frank Zappa in his piece titled Outside Now.\nnote(\"c3\").euclid(4,11)",
			"// Yields the York-Samai pattern, a popular Arab rhythm.\nnote(\"c3\").euclid(5,6)",
			"// The Nawakhat pattern, another popular Arab rhythm.\nnote(\"c3\").euclid(5,7)",
			"// The Cuban cinquillo pattern.\nnote(\"c3\").euclid(5,8)",
			"// A popular Arab rhythm called Agsag-Samai.\nnote(\"c3\").euclid(5,9)",
			"// The metric pattern used by Moussorgsky in Pictures at an Exhibition.\nnote(\"c3\").euclid(5,11)",
			"// The Venda clapping pattern of a South African children’s song.\nnote(\"c3\").euclid(5,12)",
			"// The Bossa-Nova rhythm necklace of Brazil.\nnote(\"c3\").euclid(5,16)",
			"// A typical rhythm played on the Bendir (frame drum).\nnote(\"c3\").euclid(7,8)",
			"// A common West African bell pattern.\nnote(\"c3\").euclid(7,12)",
			"// A Samba rhythm necklace from Brazil.\nnote(\"c3\").euclidRot(7,16,14)",
			"// A rhythm necklace used in the Central African Republic.\nnote(\"c3\").euclid(9,16)",
			"// A rhythm necklace of the Aka Pygmies of Central Africa.\nnote(\"c3\").euclidRot(11,24,14)",
			"// Another rhythm necklace of the Aka Pygmies of the upper Sangha.\nnote(\"c3\").euclidRot(13,24,5)"
		],
		name: "_euclidRot",
		longname: "_euclidRot",
		kind: "function",
		scope: "global",
		params: [
		],
		___id: "T000002R000359",
		___s: true
	},
	{
		comment: "/**\n * Similar to `euclid`, but each pulse is held until the next pulse,\n * so there will be no gaps.\n * @name euclidLegato\n * @memberof Pattern\n * @example\n * n(\"g2\").decay(.1).sustain(.3).euclidLegato(3,8)\n */",
		meta: {
			filename: "euclid.mjs",
			lineno: 104,
			columnno: 0,
			path: "/Users/michaelgogins/cloud-music/strudel/packages/core",
			code: {
			}
		},
		description: "<p>Similar to <code>euclid</code>, but each pulse is held until the next pulse,\nso there will be no gaps.</p>",
		name: "euclidLegato",
		memberof: "Pattern",
		examples: [
			"n(\"g2\").decay(.1).sustain(.3).euclidLegato(3,8)"
		],
		scope: "static",
		longname: "Pattern.euclidLegato",
		kind: "member",
		___id: "T000002R000366",
		___s: true
	},
	{
		comment: "/** @class Class representing a pattern. */",
		meta: {
			range: [
				1532,
				25058
			],
			filename: "pattern.mjs",
			lineno: 25,
			columnno: 0,
			path: "/Users/michaelgogins/cloud-music/strudel/packages/core",
			code: {
				id: "astnode100004211",
				name: "exports.Pattern",
				type: "ClassDeclaration"
			}
		},
		name: "Pattern",
		longname: "Pattern",
		kind: "class",
		classdesc: "<p>Class representing a pattern.</p>",
		scope: "global",
		description: "<p>Create a pattern. As an end user, you will most likely not create a Pattern directly.</p>",
		memberof: "Pattern",
		params: [
			{
				type: {
					names: [
						"function"
					]
				},
				description: "<p>The function that maps a {@link State} to an array of {@link Hap}.</p>",
				name: "query"
			}
		],
		___id: "T000002R000495",
		___s: true
	},
	{
		comment: "/**\n   * Returns a new pattern, with the function applied to the value of\n   * each hap. It has the alias {@link Pattern#fmap}.\n   * @param {Function} func\n   * @returns Pattern\n   */",
		meta: {
			range: [
				2269,
				2378
			],
			filename: "pattern.mjs",
			lineno: 45,
			columnno: 2,
			path: "/Users/michaelgogins/cloud-music/strudel/packages/core",
			code: {
				id: "astnode100004228",
				name: "Pattern#withValue",
				type: "MethodDefinition",
				paramnames: [
					"func"
				]
			},
			vars: {
				"": null
			}
		},
		description: "<p>Returns a new pattern, with the function applied to the value of\neach hap. It has the alias {@link Pattern#fmap}.</p>",
		params: [
			{
				type: {
					names: [
						"function"
					]
				},
				name: "func"
			}
		],
		returns: [
			{
				description: "<p>Pattern</p>"
			}
		],
		name: "withValue",
		longname: "Pattern#withValue",
		kind: "function",
		memberof: "Pattern",
		scope: "instance",
		___id: "T000002R000497",
		___s: true
	},
	{
		comment: "/**\n   * see {@link Pattern#withValue}\n   */",
		meta: {
			range: [
				2429,
				2478
			],
			filename: "pattern.mjs",
			lineno: 52,
			columnno: 2,
			path: "/Users/michaelgogins/cloud-music/strudel/packages/core",
			code: {
				id: "astnode100004253",
				name: "Pattern#fmap",
				type: "MethodDefinition",
				paramnames: [
					"func"
				]
			},
			vars: {
				"": null
			}
		},
		description: "<p>see {@link Pattern#withValue}</p>",
		name: "fmap",
		longname: "Pattern#fmap",
		kind: "function",
		memberof: "Pattern",
		scope: "instance",
		params: [
		],
		___id: "T000002R000498",
		___s: true
	},
	{
		comment: "/**\n   * When this method is called on a pattern of functions, it matches its haps\n   * with those in the given pattern of values.  A new pattern is returned, with\n   * each matching value applied to the corresponding function.\n   *\n   * In this `_appBoth` variant, where timespans of the function and value haps\n   * are not the same but do intersect, the resulting hap has a timespan of the\n   * intersection. This applies to both the part and the whole timespan.\n   * @param {Pattern} pat_val\n   * @returns Pattern\n   */",
		meta: {
			range: [
				3921,
				4201
			],
			filename: "pattern.mjs",
			lineno: 94,
			columnno: 2,
			path: "/Users/michaelgogins/cloud-music/strudel/packages/core",
			code: {
				id: "astnode100004371",
				name: "Pattern#appBoth",
				type: "MethodDefinition",
				paramnames: [
					"pat_val"
				]
			},
			vars: {
				"": null
			}
		},
		description: "<p>When this method is called on a pattern of functions, it matches its haps\nwith those in the given pattern of values.  A new pattern is returned, with\neach matching value applied to the corresponding function.</p>\n<p>In this <code>_appBoth</code> variant, where timespans of the function and value haps\nare not the same but do intersect, the resulting hap has a timespan of the\nintersection. This applies to both the part and the whole timespan.</p>",
		params: [
			{
				type: {
					names: [
						"Pattern"
					]
				},
				name: "pat_val"
			}
		],
		returns: [
			{
				description: "<p>Pattern</p>"
			}
		],
		name: "appBoth",
		longname: "Pattern#appBoth",
		kind: "function",
		memberof: "Pattern",
		scope: "instance",
		___id: "T000002R000506",
		___s: true
	},
	{
		comment: "/**\n   * As with {@link Pattern#appBoth}, but the `whole` timespan is not the intersection,\n   * but the timespan from the function of patterns that this method is called\n   * on. In practice, this means that the pattern structure, including onsets,\n   * are preserved from the pattern of functions (often referred to as the left\n   * hand or inner pattern).\n   * @param {Pattern} pat_val\n   * @returns Pattern\n   */",
		meta: {
			range: [
				4624,
				5368
			],
			filename: "pattern.mjs",
			lineno: 114,
			columnno: 2,
			path: "/Users/michaelgogins/cloud-music/strudel/packages/core",
			code: {
				id: "astnode100004407",
				name: "Pattern#appLeft",
				type: "MethodDefinition",
				paramnames: [
					"pat_val"
				]
			},
			vars: {
				"": null
			}
		},
		description: "<p>As with {@link Pattern#appBoth}, but the <code>whole</code> timespan is not the intersection,\nbut the timespan from the function of patterns that this method is called\non. In practice, this means that the pattern structure, including onsets,\nare preserved from the pattern of functions (often referred to as the left\nhand or inner pattern).</p>",
		params: [
			{
				type: {
					names: [
						"Pattern"
					]
				},
				name: "pat_val"
			}
		],
		returns: [
			{
				description: "<p>Pattern</p>"
			}
		],
		name: "appLeft",
		longname: "Pattern#appLeft",
		kind: "function",
		memberof: "Pattern",
		scope: "instance",
		___id: "T000002R000508",
		___s: true
	},
	{
		comment: "/**\n   * As with {@link Pattern#appLeft}, but `whole` timespans are instead taken from the\n   * pattern of values, i.e. structure is preserved from the right hand/outer\n   * pattern.\n   * @param {Pattern} pat_val\n   * @returns Pattern\n   */",
		meta: {
			range: [
				5615,
				6360
			],
			filename: "pattern.mjs",
			lineno: 144,
			columnno: 2,
			path: "/Users/michaelgogins/cloud-music/strudel/packages/core",
			code: {
				id: "astnode100004517",
				name: "Pattern#appRight",
				type: "MethodDefinition",
				paramnames: [
					"pat_val"
				]
			},
			vars: {
				"": null
			}
		},
		description: "<p>As with {@link Pattern#appLeft}, but <code>whole</code> timespans are instead taken from the\npattern of values, i.e. structure is preserved from the right hand/outer\npattern.</p>",
		params: [
			{
				type: {
					names: [
						"Pattern"
					]
				},
				name: "pat_val"
			}
		],
		returns: [
			{
				description: "<p>Pattern</p>"
			}
		],
		name: "appRight",
		longname: "Pattern#appRight",
		kind: "function",
		memberof: "Pattern",
		scope: "instance",
		___id: "T000002R000520",
		___s: true
	},
	{
		comment: "/**\n   * Query haps inside the given time span.\n   *\n   * @param {Fraction | number} begin from time\n   * @param {Fraction | number} end to time\n   * @returns Hap[]\n   * @example\n   * const pattern = sequence('a', ['b', 'c'])\n   * const haps = pattern.queryArc(0, 1)\n   * console.log(haps)\n   * silence\n   */",
		meta: {
			range: [
				11765,
				11851
			],
			filename: "pattern.mjs",
			lineno: 328,
			columnno: 2,
			path: "/Users/michaelgogins/cloud-music/strudel/packages/core",
			code: {
				id: "astnode100005135",
				name: "Pattern#queryArc",
				type: "MethodDefinition",
				paramnames: [
					"begin",
					"end"
				]
			},
			vars: {
				"": null
			}
		},
		description: "<p>Query haps inside the given time span.</p>",
		params: [
			{
				type: {
					names: [
						"Fraction",
						"number"
					]
				},
				description: "<p>from time</p>",
				name: "begin"
			},
			{
				type: {
					names: [
						"Fraction",
						"number"
					]
				},
				description: "<p>to time</p>",
				name: "end"
			}
		],
		returns: [
			{
				description: "<p>Hap[]</p>"
			}
		],
		examples: [
			"const pattern = sequence('a', ['b', 'c'])\nconst haps = pattern.queryArc(0, 1)\nconsole.log(haps)\nsilence"
		],
		name: "queryArc",
		longname: "Pattern#queryArc",
		kind: "function",
		memberof: "Pattern",
		scope: "instance",
		___id: "T000002R000562",
		___s: true
	},
	{
		comment: "/**\n   * Returns a new pattern, with queries split at cycle boundaries. This makes\n   * some calculations easier to express, as all haps are then constrained to\n   * happen within a cycle.\n   * @returns Pattern\n   */",
		meta: {
			range: [
				12074,
				12274
			],
			filename: "pattern.mjs",
			lineno: 338,
			columnno: 2,
			path: "/Users/michaelgogins/cloud-music/strudel/packages/core",
			code: {
				id: "astnode100005152",
				name: "Pattern#splitQueries",
				type: "MethodDefinition",
				paramnames: [
				]
			},
			vars: {
				"": null
			}
		},
		description: "<p>Returns a new pattern, with queries split at cycle boundaries. This makes\nsome calculations easier to express, as all haps are then constrained to\nhappen within a cycle.</p>",
		returns: [
			{
				description: "<p>Pattern</p>"
			}
		],
		name: "splitQueries",
		longname: "Pattern#splitQueries",
		kind: "function",
		memberof: "Pattern",
		scope: "instance",
		params: [
		],
		___id: "T000002R000563",
		___s: true
	},
	{
		comment: "/**\n   * Returns a new pattern, where the given function is applied to the query\n   * timespan before passing it to the original pattern.\n   * @param {Function} func the function to apply\n   * @returns Pattern\n   */",
		meta: {
			range: [
				12496,
				12590
			],
			filename: "pattern.mjs",
			lineno: 352,
			columnno: 2,
			path: "/Users/michaelgogins/cloud-music/strudel/packages/core",
			code: {
				id: "astnode100005192",
				name: "Pattern#withQuerySpan",
				type: "MethodDefinition",
				paramnames: [
					"func"
				]
			},
			vars: {
				"": null
			}
		},
		description: "<p>Returns a new pattern, where the given function is applied to the query\ntimespan before passing it to the original pattern.</p>",
		params: [
			{
				type: {
					names: [
						"function"
					]
				},
				description: "<p>the function to apply</p>",
				name: "func"
			}
		],
		returns: [
			{
				description: "<p>Pattern</p>"
			}
		],
		name: "withQuerySpan",
		longname: "Pattern#withQuerySpan",
		kind: "function",
		memberof: "Pattern",
		scope: "instance",
		___id: "T000002R000566",
		___s: true
	},
	{
		comment: "/**\n   * As with {@link Pattern#withQuerySpan}, but the function is applied to both the\n   * begin and end time of the query timespan.\n   * @param {Function} func the function to apply\n   * @returns Pattern\n   */",
		meta: {
			range: [
				13043,
				13162
			],
			filename: "pattern.mjs",
			lineno: 373,
			columnno: 2,
			path: "/Users/michaelgogins/cloud-music/strudel/packages/core",
			code: {
				id: "astnode100005248",
				name: "Pattern#withQueryTime",
				type: "MethodDefinition",
				paramnames: [
					"func"
				]
			},
			vars: {
				"": null
			}
		},
		description: "<p>As with {@link Pattern#withQuerySpan}, but the function is applied to both the\nbegin and end time of the query timespan.</p>",
		params: [
			{
				type: {
					names: [
						"function"
					]
				},
				description: "<p>the function to apply</p>",
				name: "func"
			}
		],
		returns: [
			{
				description: "<p>Pattern</p>"
			}
		],
		name: "withQueryTime",
		longname: "Pattern#withQueryTime",
		kind: "function",
		memberof: "Pattern",
		scope: "instance",
		___id: "T000002R000570",
		___s: true
	},
	{
		comment: "/**\n   * Similar to {@link Pattern#withQuerySpan}, but the function is applied to the timespans\n   * of all haps returned by pattern queries (both `part` timespans, and where\n   * present, `whole` timespans).\n   * @param {Function} func\n   * @returns Pattern\n   */",
		meta: {
			range: [
				13433,
				13543
			],
			filename: "pattern.mjs",
			lineno: 384,
			columnno: 2,
			path: "/Users/michaelgogins/cloud-music/strudel/packages/core",
			code: {
				id: "astnode100005273",
				name: "Pattern#withHapSpan",
				type: "MethodDefinition",
				paramnames: [
					"func"
				]
			},
			vars: {
				"": null
			}
		},
		description: "<p>Similar to {@link Pattern#withQuerySpan}, but the function is applied to the timespans\nof all haps returned by pattern queries (both <code>part</code> timespans, and where\npresent, <code>whole</code> timespans).</p>",
		params: [
			{
				type: {
					names: [
						"function"
					]
				},
				name: "func"
			}
		],
		returns: [
			{
				description: "<p>Pattern</p>"
			}
		],
		name: "withHapSpan",
		longname: "Pattern#withHapSpan",
		kind: "function",
		memberof: "Pattern",
		scope: "instance",
		___id: "T000002R000571",
		___s: true
	},
	{
		comment: "/**\n   * As with {@link Pattern#withHapSpan}, but the function is applied to both the\n   * begin and end time of the hap timespans.\n   * @param {Function} func the function to apply\n   * @returns Pattern\n   */",
		meta: {
			range: [
				13759,
				13842
			],
			filename: "pattern.mjs",
			lineno: 394,
			columnno: 2,
			path: "/Users/michaelgogins/cloud-music/strudel/packages/core",
			code: {
				id: "astnode100005298",
				name: "Pattern#withHapTime",
				type: "MethodDefinition",
				paramnames: [
					"func"
				]
			},
			vars: {
				"": null
			}
		},
		description: "<p>As with {@link Pattern#withHapSpan}, but the function is applied to both the\nbegin and end time of the hap timespans.</p>",
		params: [
			{
				type: {
					names: [
						"function"
					]
				},
				description: "<p>the function to apply</p>",
				name: "func"
			}
		],
		returns: [
			{
				description: "<p>Pattern</p>"
			}
		],
		name: "withHapTime",
		longname: "Pattern#withHapTime",
		kind: "function",
		memberof: "Pattern",
		scope: "instance",
		___id: "T000002R000572",
		___s: true
	},
	{
		comment: "/**\n   * Returns a new pattern with the given function applied to the list of haps returned by every query.\n   * @param {Function} func\n   * @returns Pattern\n   */",
		meta: {
			range: [
				14012,
				14092
			],
			filename: "pattern.mjs",
			lineno: 403,
			columnno: 2,
			path: "/Users/michaelgogins/cloud-music/strudel/packages/core",
			code: {
				id: "astnode100005315",
				name: "Pattern#withHaps",
				type: "MethodDefinition",
				paramnames: [
					"func"
				]
			},
			vars: {
				"": null
			}
		},
		description: "<p>Returns a new pattern with the given function applied to the list of haps returned by every query.</p>",
		params: [
			{
				type: {
					names: [
						"function"
					]
				},
				name: "func"
			}
		],
		returns: [
			{
				description: "<p>Pattern</p>"
			}
		],
		name: "withHaps",
		longname: "Pattern#withHaps",
		kind: "function",
		memberof: "Pattern",
		scope: "instance",
		___id: "T000002R000573",
		___s: true
	},
	{
		comment: "/**\n   * As with {@link Pattern#withHaps}, but applies the function to every hap, rather than every list of haps.\n   * @param {Function} func\n   * @returns Pattern\n   */",
		meta: {
			range: [
				14268,
				14339
			],
			filename: "pattern.mjs",
			lineno: 412,
			columnno: 2,
			path: "/Users/michaelgogins/cloud-music/strudel/packages/core",
			code: {
				id: "astnode100005332",
				name: "Pattern#withHap",
				type: "MethodDefinition",
				paramnames: [
					"func"
				]
			},
			vars: {
				"": null
			}
		},
		description: "<p>As with {@link Pattern#withHaps}, but applies the function to every hap, rather than every list of haps.</p>",
		params: [
			{
				type: {
					names: [
						"function"
					]
				},
				name: "func"
			}
		],
		returns: [
			{
				description: "<p>Pattern</p>"
			}
		],
		name: "withHap",
		longname: "Pattern#withHap",
		kind: "function",
		memberof: "Pattern",
		scope: "instance",
		___id: "T000002R000574",
		___s: true
	},
	{
		comment: "/**\n   * Returns a new pattern with the context field set to every hap set to the given value.\n   * @param {*} context\n   * @returns Pattern\n   */",
		meta: {
			range: [
				14492,
				14576
			],
			filename: "pattern.mjs",
			lineno: 421,
			columnno: 2,
			path: "/Users/michaelgogins/cloud-music/strudel/packages/core",
			code: {
				id: "astnode100005349",
				name: "Pattern#setContext",
				type: "MethodDefinition",
				paramnames: [
					"context"
				]
			},
			vars: {
				"": null
			}
		},
		description: "<p>Returns a new pattern with the context field set to every hap set to the given value.</p>",
		params: [
			{
				type: {
					names: [
						"*"
					]
				},
				name: "context"
			}
		],
		returns: [
			{
				description: "<p>Pattern</p>"
			}
		],
		name: "setContext",
		longname: "Pattern#setContext",
		kind: "function",
		memberof: "Pattern",
		scope: "instance",
		___id: "T000002R000575",
		___s: true
	},
	{
		comment: "/**\n   * Returns a new pattern with the given function applied to the context field of every hap.\n   * @param {Function} func\n   * @returns Pattern\n   */",
		meta: {
			range: [
				14736,
				14828
			],
			filename: "pattern.mjs",
			lineno: 430,
			columnno: 2,
			path: "/Users/michaelgogins/cloud-music/strudel/packages/core",
			code: {
				id: "astnode100005366",
				name: "Pattern#withContext",
				type: "MethodDefinition",
				paramnames: [
					"func"
				]
			},
			vars: {
				"": null
			}
		},
		description: "<p>Returns a new pattern with the given function applied to the context field of every hap.</p>",
		params: [
			{
				type: {
					names: [
						"function"
					]
				},
				name: "func"
			}
		],
		returns: [
			{
				description: "<p>Pattern</p>"
			}
		],
		name: "withContext",
		longname: "Pattern#withContext",
		kind: "function",
		memberof: "Pattern",
		scope: "instance",
		___id: "T000002R000576",
		___s: true
	},
	{
		comment: "/**\n   * Returns a new pattern with the context field of every hap set to an empty object.\n   * @returns Pattern\n   */",
		meta: {
			range: [
				14953,
				15027
			],
			filename: "pattern.mjs",
			lineno: 438,
			columnno: 2,
			path: "/Users/michaelgogins/cloud-music/strudel/packages/core",
			code: {
				id: "astnode100005387",
				name: "Pattern#stripContext",
				type: "MethodDefinition",
				paramnames: [
				]
			},
			vars: {
				"": null
			}
		},
		description: "<p>Returns a new pattern with the context field of every hap set to an empty object.</p>",
		returns: [
			{
				description: "<p>Pattern</p>"
			}
		],
		name: "stripContext",
		longname: "Pattern#stripContext",
		kind: "function",
		memberof: "Pattern",
		scope: "instance",
		params: [
		],
		___id: "T000002R000577",
		___s: true
	},
	{
		comment: "/**\n   * Returns a new pattern with the given location information added to the\n   * context of every hap.\n   * @param {Number} start\n   * @param {Number} end\n   * @returns Pattern\n   */",
		meta: {
			range: [
				15220,
				15571
			],
			filename: "pattern.mjs",
			lineno: 449,
			columnno: 2,
			path: "/Users/michaelgogins/cloud-music/strudel/packages/core",
			code: {
				id: "astnode100005403",
				name: "Pattern#withLocation",
				type: "MethodDefinition",
				paramnames: [
					"start",
					"end"
				]
			},
			vars: {
				"": null
			}
		},
		description: "<p>Returns a new pattern with the given location information added to the\ncontext of every hap.</p>",
		params: [
			{
				type: {
					names: [
						"Number"
					]
				},
				name: "start"
			},
			{
				type: {
					names: [
						"Number"
					]
				},
				name: "end"
			}
		],
		returns: [
			{
				description: "<p>Pattern</p>"
			}
		],
		name: "withLocation",
		longname: "Pattern#withLocation",
		kind: "function",
		memberof: "Pattern",
		scope: "instance",
		___id: "T000002R000578",
		___s: true
	},
	{
		comment: "/**\n   * Returns a new Pattern, which only returns haps that meet the given test.\n   * @param {Function} hap_test - a function which returns false for haps to be removed from the pattern\n   * @returns Pattern\n   */",
		meta: {
			range: [
				16616,
				16713
			],
			filename: "pattern.mjs",
			lineno: 491,
			columnno: 2,
			path: "/Users/michaelgogins/cloud-music/strudel/packages/core",
			code: {
				id: "astnode100005615",
				name: "Pattern#filterHaps",
				type: "MethodDefinition",
				paramnames: [
					"hap_test"
				]
			},
			vars: {
				"": null
			}
		},
		description: "<p>Returns a new Pattern, which only returns haps that meet the given test.</p>",
		params: [
			{
				type: {
					names: [
						"function"
					]
				},
				description: "<p>a function which returns false for haps to be removed from the pattern</p>",
				name: "hap_test"
			}
		],
		returns: [
			{
				description: "<p>Pattern</p>"
			}
		],
		name: "filterHaps",
		longname: "Pattern#filterHaps",
		kind: "function",
		memberof: "Pattern",
		scope: "instance",
		___id: "T000002R000612",
		___s: true
	},
	{
		comment: "/**\n   * As with {@link Pattern#filterHaps}, but the function is applied to values\n   * inside haps.\n   * @param {Function} value_test\n   * @returns Pattern\n   */",
		meta: {
			range: [
				16882,
				17005
			],
			filename: "pattern.mjs",
			lineno: 501,
			columnno: 2,
			path: "/Users/michaelgogins/cloud-music/strudel/packages/core",
			code: {
				id: "astnode100005634",
				name: "Pattern#filterValues",
				type: "MethodDefinition",
				paramnames: [
					"value_test"
				]
			},
			vars: {
				"": null
			}
		},
		description: "<p>As with {@link Pattern#filterHaps}, but the function is applied to values\ninside haps.</p>",
		params: [
			{
				type: {
					names: [
						"function"
					]
				},
				name: "value_test"
			}
		],
		returns: [
			{
				description: "<p>Pattern</p>"
			}
		],
		name: "filterValues",
		longname: "Pattern#filterValues",
		kind: "function",
		memberof: "Pattern",
		scope: "instance",
		___id: "T000002R000613",
		___s: true
	},
	{
		comment: "/**\n   * Returns a new pattern, with haps containing undefined values removed from\n   * query results.\n   * @returns Pattern\n   */",
		meta: {
			range: [
				17142,
				17223
			],
			filename: "pattern.mjs",
			lineno: 510,
			columnno: 2,
			path: "/Users/michaelgogins/cloud-music/strudel/packages/core",
			code: {
				id: "astnode100005659",
				name: "Pattern#removeUndefineds",
				type: "MethodDefinition",
				paramnames: [
				]
			},
			vars: {
				"": null
			}
		},
		description: "<p>Returns a new pattern, with haps containing undefined values removed from\nquery results.</p>",
		returns: [
			{
				description: "<p>Pattern</p>"
			}
		],
		name: "removeUndefineds",
		longname: "Pattern#removeUndefineds",
		kind: "function",
		memberof: "Pattern",
		scope: "instance",
		params: [
		],
		___id: "T000002R000614",
		___s: true
	},
	{
		comment: "/**\n   * Returns a new pattern, with all haps without onsets filtered out. A hap\n   * with an onset is one with a `whole` timespan that begins at the same time\n   * as its `part` timespan.\n   * @returns Pattern\n   */",
		meta: {
			range: [
				17446,
				17711
			],
			filename: "pattern.mjs",
			lineno: 520,
			columnno: 2,
			path: "/Users/michaelgogins/cloud-music/strudel/packages/core",
			code: {
				id: "astnode100005673",
				name: "Pattern#onsetsOnly",
				type: "MethodDefinition",
				paramnames: [
				]
			},
			vars: {
				"": null
			}
		},
		description: "<p>Returns a new pattern, with all haps without onsets filtered out. A hap\nwith an onset is one with a <code>whole</code> timespan that begins at the same time\nas its <code>part</code> timespan.</p>",
		returns: [
			{
				description: "<p>Pattern</p>"
			}
		],
		name: "onsetsOnly",
		longname: "Pattern#onsetsOnly",
		kind: "function",
		memberof: "Pattern",
		scope: "instance",
		params: [
		],
		___id: "T000002R000615",
		___s: true
	},
	{
		comment: "/**\n   * Returns a new pattern, with 'continuous' haps (those without 'whole'\n   * timespans) removed from query results.\n   * @returns Pattern\n   */",
		meta: {
			range: [
				17867,
				18001
			],
			filename: "pattern.mjs",
			lineno: 532,
			columnno: 2,
			path: "/Users/michaelgogins/cloud-music/strudel/packages/core",
			code: {
				id: "astnode100005688",
				name: "Pattern#discreteOnly",
				type: "MethodDefinition",
				paramnames: [
				]
			},
			vars: {
				"": null
			}
		},
		description: "<p>Returns a new pattern, with 'continuous' haps (those without 'whole'\ntimespans) removed from query results.</p>",
		returns: [
			{
				description: "<p>Pattern</p>"
			}
		],
		name: "discreteOnly",
		longname: "Pattern#discreteOnly",
		kind: "function",
		memberof: "Pattern",
		scope: "instance",
		params: [
		],
		___id: "T000002R000616",
		___s: true
	},
	{
		comment: "/**\n   * Combines adjacent haps with the same value and whole.  Only\n   * intended for use in tests.\n   */",
		meta: {
			range: [
				18114,
				19559
			],
			filename: "pattern.mjs",
			lineno: 541,
			columnno: 2,
			path: "/Users/michaelgogins/cloud-music/strudel/packages/core",
			code: {
				id: "astnode100005702",
				name: "Pattern#defragmentHaps",
				type: "MethodDefinition",
				paramnames: [
				]
			},
			vars: {
				"": null
			}
		},
		description: "<p>Combines adjacent haps with the same value and whole.  Only\nintended for use in tests.</p>",
		name: "defragmentHaps",
		longname: "Pattern#defragmentHaps",
		kind: "function",
		memberof: "Pattern",
		scope: "instance",
		params: [
		],
		___id: "T000002R000617",
		___s: true
	},
	{
		comment: "/**\n   * Queries the pattern for the first cycle, returning Haps. Mainly of use when\n   * debugging a pattern.\n   * @param {Boolean} with_context - set to true, otherwise the context field\n   * will be stripped from the resulting haps.\n   * @returns [Hap]\n   */",
		meta: {
			range: [
				19827,
				20025
			],
			filename: "pattern.mjs",
			lineno: 595,
			columnno: 2,
			path: "/Users/michaelgogins/cloud-music/strudel/packages/core",
			code: {
				id: "astnode100005933",
				name: "Pattern#firstCycle",
				type: "MethodDefinition",
				paramnames: [
					"with_context"
				]
			},
			vars: {
				"": null
			}
		},
		description: "<p>Queries the pattern for the first cycle, returning Haps. Mainly of use when\ndebugging a pattern.</p>",
		params: [
			{
				type: {
					names: [
						"Boolean"
					]
				},
				description: "<p>set to true, otherwise the context field\nwill be stripped from the resulting haps.</p>",
				name: "with_context",
				defaultvalue: false
			}
		],
		returns: [
			{
				description: "<p>[Hap]</p>"
			}
		],
		name: "firstCycle",
		longname: "Pattern#firstCycle",
		kind: "function",
		memberof: "Pattern",
		scope: "instance",
		___id: "T000002R000632",
		___s: true
	},
	{
		comment: "/**\n   * Accessor for a list of values returned by querying the first cycle.\n   */",
		meta: {
			range: [
				20114,
				20196
			],
			filename: "pattern.mjs",
			lineno: 606,
			columnno: 2,
			path: "/Users/michaelgogins/cloud-music/strudel/packages/core",
			code: {
				id: "astnode100005970",
				name: "Pattern#firstCycleValues",
				type: "MethodDefinition",
				paramnames: [
				]
			},
			vars: {
				"": null
			}
		},
		description: "<p>Accessor for a list of values returned by querying the first cycle.</p>",
		name: "firstCycleValues",
		longname: "Pattern#firstCycleValues",
		kind: "member",
		memberof: "Pattern",
		scope: "instance",
		params: [
		],
		___id: "T000002R000635",
		___s: true
	},
	{
		comment: "/**\n   * More human-readable version of the {@link Pattern#firstCycleValues} accessor.\n   */",
		meta: {
			range: [
				20295,
				20458
			],
			filename: "pattern.mjs",
			lineno: 613,
			columnno: 2,
			path: "/Users/michaelgogins/cloud-music/strudel/packages/core",
			code: {
				id: "astnode100005987",
				name: "Pattern#showFirstCycle",
				type: "MethodDefinition",
				paramnames: [
				]
			},
			vars: {
				"": null
			}
		},
		description: "<p>More human-readable version of the {@link Pattern#firstCycleValues} accessor.</p>",
		name: "showFirstCycle",
		longname: "Pattern#showFirstCycle",
		kind: "member",
		memberof: "Pattern",
		scope: "instance",
		params: [
		],
		___id: "T000002R000636",
		___s: true
	},
	{
		comment: "/**\n   * Returns a new pattern, which returns haps sorted in temporal order. Mainly\n   * of use when comparing two patterns for equality, in tests.\n   * @returns Pattern\n   */",
		meta: {
			range: [
				20640,
				20913
			],
			filename: "pattern.mjs",
			lineno: 624,
			columnno: 2,
			path: "/Users/michaelgogins/cloud-music/strudel/packages/core",
			code: {
				id: "astnode100006025",
				name: "Pattern#sortHapsByPart",
				type: "MethodDefinition",
				paramnames: [
				]
			},
			vars: {
				"": null
			}
		},
		description: "<p>Returns a new pattern, which returns haps sorted in temporal order. Mainly\nof use when comparing two patterns for equality, in tests.</p>",
		returns: [
			{
				description: "<p>Pattern</p>"
			}
		],
		name: "sortHapsByPart",
		longname: "Pattern#sortHapsByPart",
		kind: "function",
		memberof: "Pattern",
		scope: "instance",
		params: [
		],
		___id: "T000002R000637",
		___s: true
	},
	{
		comment: "/**\n   * Layers the result of the given function(s). Like {@link Pattern.superimpose}, but without the original pattern:\n   * @name layer\n   * @memberof Pattern\n   * @returns Pattern\n   * @example\n   * \"<0 2 4 6 ~ 4 ~ 2 0!3 ~!5>*4\"\n   *   .layer(x=>x.add(\"0,2\"))\n   *   .scale('C minor').note()\n   */",
		meta: {
			filename: "pattern.mjs",
			lineno: 678,
			columnno: 2,
			path: "/Users/michaelgogins/cloud-music/strudel/packages/core",
			code: {
			}
		},
		description: "<p>Layers the result of the given function(s). Like {@link Pattern.superimpose}, but without the original pattern:</p>",
		name: "layer",
		memberof: "Pattern",
		returns: [
			{
				description: "<p>Pattern</p>"
			}
		],
		examples: [
			"\"<0 2 4 6 ~ 4 ~ 2 0!3 ~!5>*4\"\n  .layer(x=>x.add(\"0,2\"))\n  .scale('C minor').note()"
		],
		scope: "static",
		longname: "Pattern.layer",
		kind: "member",
		___id: "T000002R000651",
		___s: true
	},
	{
		comment: "/**\n   * Superimposes the result of the given function(s) on top of the original pattern:\n   * @name superimpose\n   * @memberof Pattern\n   * @returns Pattern\n   * @example\n   * \"<0 2 4 6 ~ 4 ~ 2 0!3 ~!5>*4\"\n   *   .superimpose(x=>x.add(2))\n   *   .scale('C minor').note()\n   */",
		meta: {
			filename: "pattern.mjs",
			lineno: 692,
			columnno: 2,
			path: "/Users/michaelgogins/cloud-music/strudel/packages/core",
			code: {
			}
		},
		description: "<p>Superimposes the result of the given function(s) on top of the original pattern:</p>",
		name: "superimpose",
		memberof: "Pattern",
		returns: [
			{
				description: "<p>Pattern</p>"
			}
		],
		examples: [
			"\"<0 2 4 6 ~ 4 ~ 2 0!3 ~!5>*4\"\n  .superimpose(x=>x.add(2))\n  .scale('C minor').note()"
		],
		scope: "static",
		longname: "Pattern.superimpose",
		kind: "member",
		___id: "T000002R000653",
		___s: true
	},
	{
		comment: "/**\n   * Stacks the given pattern(s) to the current pattern.\n   * @name stack\n   * @memberof Pattern\n   * @example\n   * s(\"hh*2\").stack(\n   *   n(\"c2(3,8)\")\n   * )\n   */",
		meta: {
			filename: "pattern.mjs",
			lineno: 709,
			columnno: 2,
			path: "/Users/michaelgogins/cloud-music/strudel/packages/core",
			code: {
			}
		},
		description: "<p>Stacks the given pattern(s) to the current pattern.</p>",
		name: "stack",
		memberof: "Pattern",
		examples: [
			"s(\"hh*2\").stack(\n  n(\"c2(3,8)\")\n)"
		],
		scope: "static",
		longname: "Pattern.stack",
		kind: "member",
		___id: "T000002R000655",
		___s: true
	},
	{
		comment: "/**\n   * Appends the given pattern(s) to the current pattern. Synonyms: .sequence .fastcat\n   * @name seq\n   * @memberof Pattern\n   * @example\n   * s(\"hh*2\").seq(\n   *   n(\"c2(3,8)\")\n   * )\n   */",
		meta: {
			filename: "pattern.mjs",
			lineno: 726,
			columnno: 2,
			path: "/Users/michaelgogins/cloud-music/strudel/packages/core",
			code: {
			}
		},
		description: "<p>Appends the given pattern(s) to the current pattern. Synonyms: .sequence .fastcat</p>",
		name: "seq",
		memberof: "Pattern",
		examples: [
			"s(\"hh*2\").seq(\n  n(\"c2(3,8)\")\n)"
		],
		scope: "static",
		longname: "Pattern.seq",
		kind: "member",
		___id: "T000002R000658",
		___s: true
	},
	{
		comment: "/**\n   * Appends the given pattern(s) to the next cycle. Synonym: .slowcat\n   * @name cat\n   * @memberof Pattern\n   * @example\n   * s(\"hh*2\").cat(\n   *   n(\"c2(3,8)\")\n   * )\n   */",
		meta: {
			filename: "pattern.mjs",
			lineno: 739,
			columnno: 2,
			path: "/Users/michaelgogins/cloud-music/strudel/packages/core",
			code: {
			}
		},
		description: "<p>Appends the given pattern(s) to the next cycle. Synonym: .slowcat</p>",
		name: "cat",
		memberof: "Pattern",
		examples: [
			"s(\"hh*2\").cat(\n  n(\"c2(3,8)\")\n)"
		],
		scope: "static",
		longname: "Pattern.cat",
		kind: "member",
		___id: "T000002R000660",
		___s: true
	},
	{
		comment: "/**\n     *\n     * Assumes a pattern of numbers. Adds the given number to each item in the pattern.\n     * @name add\n     * @memberof Pattern\n     * @example\n     * // Here, the triad 0, 2, 4 is shifted by different amounts\n     * \"0 2 4\".add(\"<0 3 4 0>\").scale('C major').note()\n     * // Without add, the equivalent would be:\n     * // \"<[0 2 4] [3 5 7] [4 6 8] [0 2 4]>\".scale('C major').note()\n     * @example\n     * // You can also use add with notes:\n     * \"c3 e3 g3\".add(\"<0 5 7 0>\").note()\n     * // Behind the scenes, the notes are converted to midi numbers:\n     * // \"48 52 55\".add(\"<0 5 7 0>\").note()\n     */",
		meta: {
			filename: "pattern.mjs",
			lineno: 865,
			columnno: 4,
			path: "/Users/michaelgogins/cloud-music/strudel/packages/core",
			code: {
			}
		},
		description: "<p>Assumes a pattern of numbers. Adds the given number to each item in the pattern.</p>",
		name: "add",
		memberof: "Pattern",
		examples: [
			"// Here, the triad 0, 2, 4 is shifted by different amounts\n\"0 2 4\".add(\"<0 3 4 0>\").scale('C major').note()\n// Without add, the equivalent would be:\n// \"<[0 2 4] [3 5 7] [4 6 8] [0 2 4]>\".scale('C major').note()",
			"// You can also use add with notes:\n\"c3 e3 g3\".add(\"<0 5 7 0>\").note()\n// Behind the scenes, the notes are converted to midi numbers:\n// \"48 52 55\".add(\"<0 5 7 0>\").note()"
		],
		scope: "static",
		longname: "Pattern.add",
		kind: "member",
		___id: "T000002R000687",
		___s: true
	},
	{
		comment: "/**\n     *\n     * Like add, but the given numbers are subtracted.\n     * @name sub\n     * @memberof Pattern\n     * @example\n     * \"0 2 4\".sub(\"<0 1 2 3>\").scale('C4 minor').note()\n     * // See add for more information.\n     */",
		meta: {
			filename: "pattern.mjs",
			lineno: 882,
			columnno: 4,
			path: "/Users/michaelgogins/cloud-music/strudel/packages/core",
			code: {
			}
		},
		description: "<p>Like add, but the given numbers are subtracted.</p>",
		name: "sub",
		memberof: "Pattern",
		examples: [
			"\"0 2 4\".sub(\"<0 1 2 3>\").scale('C4 minor').note()\n// See add for more information."
		],
		scope: "static",
		longname: "Pattern.sub",
		kind: "member",
		___id: "T000002R000689",
		___s: true
	},
	{
		comment: "/**\n     *\n     * Multiplies each number by the given factor.\n     * @name mul\n     * @memberof Pattern\n     * @example\n     * \"1 1.5 [1.66, <2 2.33>]\".mul(150).freq()\n     */",
		meta: {
			filename: "pattern.mjs",
			lineno: 892,
			columnno: 4,
			path: "/Users/michaelgogins/cloud-music/strudel/packages/core",
			code: {
			}
		},
		description: "<p>Multiplies each number by the given factor.</p>",
		name: "mul",
		memberof: "Pattern",
		examples: [
			"\"1 1.5 [1.66, <2 2.33>]\".mul(150).freq()"
		],
		scope: "static",
		longname: "Pattern.mul",
		kind: "member",
		___id: "T000002R000691",
		___s: true
	},
	{
		comment: "/**\n     *\n     * Divides each number by the given factor.\n     * @name div\n     * @memberof Pattern\n     */",
		meta: {
			filename: "pattern.mjs",
			lineno: 901,
			columnno: 4,
			path: "/Users/michaelgogins/cloud-music/strudel/packages/core",
			code: {
			}
		},
		description: "<p>Divides each number by the given factor.</p>",
		name: "div",
		memberof: "Pattern",
		scope: "static",
		longname: "Pattern.div",
		kind: "member",
		___id: "T000002R000693",
		___s: true
	},
	{
		comment: "/**\n   * Applies the given structure to the pattern:\n   *\n   * @name struct\n   * @memberof Pattern\n   * @returns Pattern\n   * @example\n   * note(\"c3,eb3,g3\")\n   *   .struct(\"x ~ x ~ ~ x ~ x ~ ~ ~ x ~ x ~ ~\")\n   *   .slow(4)\n   */",
		meta: {
			filename: "pattern.mjs",
			lineno: 988,
			columnno: 2,
			path: "/Users/michaelgogins/cloud-music/strudel/packages/core",
			code: {
			}
		},
		description: "<p>Applies the given structure to the pattern:</p>",
		name: "struct",
		memberof: "Pattern",
		returns: [
			{
				description: "<p>Pattern</p>"
			}
		],
		examples: [
			"note(\"c3,eb3,g3\")\n  .struct(\"x ~ x ~ ~ x ~ x ~ ~ ~ x ~ x ~ ~\")\n  .slow(4)"
		],
		scope: "static",
		longname: "Pattern.struct",
		kind: "member",
		___id: "T000002R000731",
		___s: true
	},
	{
		comment: "/** A discrete value that repeats once per cycle.\n *\n * @returns {Pattern}\n * @example\n * pure('e4') // \"e4\"\n */",
		meta: {
			range: [
				32676,
				32880
			],
			filename: "pattern.mjs",
			lineno: 1057,
			columnno: 0,
			path: "/Users/michaelgogins/cloud-music/strudel/packages/core",
			code: {
				id: "astnode100007430",
				name: "exports.pure",
				type: "FunctionDeclaration",
				paramnames: [
					"value"
				]
			}
		},
		description: "<p>A discrete value that repeats once per cycle.</p>",
		returns: [
			{
				type: {
					names: [
						"Pattern"
					]
				}
			}
		],
		examples: [
			"pure('e4') // \"e4\""
		],
		name: "pure",
		longname: "pure",
		kind: "function",
		scope: "global",
		___id: "T000002R000759",
		___s: true
	},
	{
		comment: "/** The given items are played at the same time at the same length.\n *\n * @return {Pattern}\n * @example\n * stack(g3, b3, [e4, d4]).note() // \"g3,b3,[e4,d4]\".note()\n */",
		meta: {
			range: [
				34002,
				34275
			],
			filename: "pattern.mjs",
			lineno: 1097,
			columnno: 0,
			path: "/Users/michaelgogins/cloud-music/strudel/packages/core",
			code: {
				id: "astnode100007509",
				name: "exports.stack",
				type: "FunctionDeclaration",
				paramnames: [
					"pats"
				]
			}
		},
		description: "<p>The given items are played at the same time at the same length.</p>",
		returns: [
			{
				type: {
					names: [
						"Pattern"
					]
				}
			}
		],
		examples: [
			"stack(g3, b3, [e4, d4]).note() // \"g3,b3,[e4,d4]\".note()"
		],
		name: "stack",
		longname: "stack",
		kind: "function",
		scope: "global",
		___id: "T000002R000767",
		___s: true
	},
	{
		comment: "/** Concatenation: combines a list of patterns, switching between them successively, one per cycle:\n *\n * synonyms: {@link cat}\n *\n * @return {Pattern}\n * @example\n * slowcat(e5, b4, [d5, c5])\n *\n */",
		meta: {
			range: [
				34477,
				35388
			],
			filename: "pattern.mjs",
			lineno: 1113,
			columnno: 0,
			path: "/Users/michaelgogins/cloud-music/strudel/packages/core",
			code: {
				id: "astnode100007559",
				name: "exports.slowcat",
				type: "FunctionDeclaration",
				paramnames: [
					"pats"
				]
			}
		},
		description: "<p>Concatenation: combines a list of patterns, switching between them successively, one per cycle:</p>\n<p>synonyms: {@link cat}</p>",
		returns: [
			{
				type: {
					names: [
						"Pattern"
					]
				}
			}
		],
		examples: [
			"slowcat(e5, b4, [d5, c5])"
		],
		name: "slowcat",
		longname: "slowcat",
		kind: "function",
		scope: "global",
		___id: "T000002R000771",
		___s: true
	},
	{
		comment: "/** Concatenation: combines a list of patterns, switching between them successively, one per cycle. Unlike slowcat, this version will skip cycles.\n * @param {...any} items - The items to concatenate\n * @return {Pattern}\n */",
		meta: {
			range: [
				35614,
				35987
			],
			filename: "pattern.mjs",
			lineno: 1138,
			columnno: 0,
			path: "/Users/michaelgogins/cloud-music/strudel/packages/core",
			code: {
				id: "astnode100007686",
				name: "exports.slowcatPrime",
				type: "FunctionDeclaration",
				paramnames: [
					"pats"
				]
			}
		},
		description: "<p>Concatenation: combines a list of patterns, switching between them successively, one per cycle. Unlike slowcat, this version will skip cycles.</p>",
		params: [
			{
				type: {
					names: [
						"any"
					]
				},
				variable: true,
				description: "<p>The items to concatenate</p>",
				name: "items"
			}
		],
		returns: [
			{
				type: {
					names: [
						"Pattern"
					]
				}
			}
		],
		name: "slowcatPrime",
		longname: "slowcatPrime",
		kind: "function",
		scope: "global",
		___id: "T000002R000779",
		___s: true
	},
	{
		comment: "/** Concatenation: as with {@link slowcat}, but squashes a cycle from each pattern into one cycle\n *\n * Synonyms: {@link Pattern.seq}, {@link Pattern.sequence}\n *\n * @param {...any} items - The items to concatenate\n * @return {Pattern}\n * @example\n * fastcat(e5, b4, [d5, c5])\n * // sequence(e5, b4, [d5, c5])\n * // seq(e5, b4, [d5, c5])\n */",
		meta: {
			range: [
				36331,
				36413
			],
			filename: "pattern.mjs",
			lineno: 1159,
			columnno: 0,
			path: "/Users/michaelgogins/cloud-music/strudel/packages/core",
			code: {
				id: "astnode100007739",
				name: "exports.fastcat",
				type: "FunctionDeclaration",
				paramnames: [
					"pats"
				]
			}
		},
		description: "<p>Concatenation: as with {@link slowcat}, but squashes a cycle from each pattern into one cycle</p>\n<p>Synonyms: {@link Pattern.seq}, {@link Pattern.sequence}</p>",
		params: [
			{
				type: {
					names: [
						"any"
					]
				},
				variable: true,
				description: "<p>The items to concatenate</p>",
				name: "items"
			}
		],
		returns: [
			{
				type: {
					names: [
						"Pattern"
					]
				}
			}
		],
		examples: [
			"fastcat(e5, b4, [d5, c5])\n// sequence(e5, b4, [d5, c5])\n// seq(e5, b4, [d5, c5])"
		],
		name: "fastcat",
		longname: "fastcat",
		kind: "function",
		scope: "global",
		___id: "T000002R000785",
		___s: true
	},
	{
		comment: "/** The given items are con**cat**enated, where each one takes one cycle. Synonym: slowcat\n *\n * @param {...any} items - The items to concatenate\n * @return {Pattern}\n * @example\n * cat(e5, b4, [d5, c5]).note() // \"<e5 b4 [d5 c5]>\".note()\n *\n */",
		meta: {
			range: [
				36661,
				36720
			],
			filename: "pattern.mjs",
			lineno: 1171,
			columnno: 0,
			path: "/Users/michaelgogins/cloud-music/strudel/packages/core",
			code: {
				id: "astnode100007756",
				name: "exports.cat",
				type: "FunctionDeclaration",
				paramnames: [
					"pats"
				]
			}
		},
		description: "<p>The given items are con<strong>cat</strong>enated, where each one takes one cycle. Synonym: slowcat</p>",
		params: [
			{
				type: {
					names: [
						"any"
					]
				},
				variable: true,
				description: "<p>The items to concatenate</p>",
				name: "items"
			}
		],
		returns: [
			{
				type: {
					names: [
						"Pattern"
					]
				}
			}
		],
		examples: [
			"cat(e5, b4, [d5, c5]).note() // \"<e5 b4 [d5 c5]>\".note()"
		],
		name: "cat",
		longname: "cat",
		kind: "function",
		scope: "global",
		___id: "T000002R000787",
		___s: true
	},
	{
		comment: "/** Like {@link Pattern.seq}, but each step has a length, relative to the whole.\n * @return {Pattern}\n * @example\n * timeCat([3,e3],[1, g3]).note() // \"e3@3 g3\".note()\n */",
		meta: {
			range: [
				36894,
				37253
			],
			filename: "pattern.mjs",
			lineno: 1180,
			columnno: 0,
			path: "/Users/michaelgogins/cloud-music/strudel/packages/core",
			code: {
				id: "astnode100007767",
				name: "exports.timeCat",
				type: "FunctionDeclaration",
				paramnames: [
					"timepats"
				]
			}
		},
		description: "<p>Like {@link Pattern.seq}, but each step has a length, relative to the whole.</p>",
		returns: [
			{
				type: {
					names: [
						"Pattern"
					]
				}
			}
		],
		examples: [
			"timeCat([3,e3],[1, g3]).note() // \"e3@3 g3\".note()"
		],
		name: "timeCat",
		longname: "timeCat",
		kind: "function",
		scope: "global",
		___id: "T000002R000789",
		___s: true
	},
	{
		comment: "/** See {@link fastcat} */",
		meta: {
			range: [
				37282,
				37346
			],
			filename: "pattern.mjs",
			lineno: 1193,
			columnno: 0,
			path: "/Users/michaelgogins/cloud-music/strudel/packages/core",
			code: {
				id: "astnode100007853",
				name: "exports.sequence",
				type: "FunctionDeclaration",
				paramnames: [
					"pats"
				]
			}
		},
		description: "<p>See {@link fastcat}</p>",
		name: "sequence",
		longname: "sequence",
		kind: "function",
		scope: "global",
		___id: "T000002R000796",
		___s: true
	},
	{
		comment: "/** Like **cat**, but the items are crammed into one cycle. Synonyms: fastcat, sequence\n * @example\n * seq(e5, b4, [d5, c5]).note() // \"e5 b4 [d5 c5]\".note()\n *\n */",
		meta: {
			range: [
				37513,
				37572
			],
			filename: "pattern.mjs",
			lineno: 1202,
			columnno: 0,
			path: "/Users/michaelgogins/cloud-music/strudel/packages/core",
			code: {
				id: "astnode100007864",
				name: "exports.seq",
				type: "FunctionDeclaration",
				paramnames: [
					"pats"
				]
			}
		},
		description: "<p>Like <strong>cat</strong>, but the items are crammed into one cycle. Synonyms: fastcat, sequence</p>",
		examples: [
			"seq(e5, b4, [d5, c5]).note() // \"e5 b4 [d5 c5]\".note()"
		],
		name: "seq",
		longname: "seq",
		kind: "function",
		scope: "global",
		___id: "T000002R000798",
		___s: true
	},
	{
		comment: "/**\n * Assumes a numerical pattern. Returns a new pattern with all values rounded\n * to the nearest integer.\n * @name round\n * @memberof Pattern\n * @returns Pattern\n * @example\n * \"0.5 1.5 2.5\".round().scale('C major').note()\n */",
		meta: {
			filename: "pattern.mjs",
			lineno: 1340,
			columnno: 0,
			path: "/Users/michaelgogins/cloud-music/strudel/packages/core",
			code: {
			}
		},
		description: "<p>Assumes a numerical pattern. Returns a new pattern with all values rounded\nto the nearest integer.</p>",
		name: "round",
		memberof: "Pattern",
		returns: [
			{
				description: "<p>Pattern</p>"
			}
		],
		examples: [
			"\"0.5 1.5 2.5\".round().scale('C major').note()"
		],
		scope: "static",
		longname: "Pattern.round",
		kind: "member",
		___id: "T000002R000883",
		___s: true
	},
	{
		comment: "/**\n * Assumes a numerical pattern. Returns a new pattern with all values set to\n * their mathematical floor. E.g. `3.7` replaced with to `3`, and `-4.2`\n * replaced with `-5`.\n * @returns Pattern\n */",
		meta: {
			range: [
				42428,
				42539
			],
			filename: "pattern.mjs",
			lineno: 1359,
			columnno: 0,
			path: "/Users/michaelgogins/cloud-music/strudel/packages/core",
			code: {
				id: "astnode100008785",
				name: "exports.floor",
				type: "VariableDeclaration"
			}
		},
		description: "<p>Assumes a numerical pattern. Returns a new pattern with all values set to\ntheir mathematical floor. E.g. <code>3.7</code> replaced with to <code>3</code>, and <code>-4.2</code>\nreplaced with <code>-5</code>.</p>",
		returns: [
			{
				description: "<p>Pattern</p>"
			}
		],
		name: "floor",
		longname: "floor",
		kind: "constant",
		scope: "global",
		___id: "T000002R000886",
		___s: true
	},
	{
		comment: "/**\n * Assumes a numerical pattern. Returns a new pattern with all values set to\n * their mathematical ceiling. E.g. `3.2` replaced with `4`, and `-4.2`\n * replaced with `-4`.\n * @returns Pattern\n */",
		meta: {
			range: [
				42741,
				42849
			],
			filename: "pattern.mjs",
			lineno: 1369,
			columnno: 0,
			path: "/Users/michaelgogins/cloud-music/strudel/packages/core",
			code: {
				id: "astnode100008810",
				name: "exports.ceil",
				type: "VariableDeclaration"
			}
		},
		description: "<p>Assumes a numerical pattern. Returns a new pattern with all values set to\ntheir mathematical ceiling. E.g. <code>3.2</code> replaced with <code>4</code>, and <code>-4.2</code>\nreplaced with <code>-4</code>.</p>",
		returns: [
			{
				description: "<p>Pattern</p>"
			}
		],
		name: "ceil",
		longname: "ceil",
		kind: "constant",
		scope: "global",
		___id: "T000002R000888",
		___s: true
	},
	{
		comment: "/**\n * Assumes a numerical pattern, containing unipolar values in the range 0 ..\n * 1. Returns a new pattern with values scaled to the bipolar range -1 .. 1\n * @returns Pattern\n */",
		meta: {
			range: [
				43031,
				43135
			],
			filename: "pattern.mjs",
			lineno: 1377,
			columnno: 0,
			path: "/Users/michaelgogins/cloud-music/strudel/packages/core",
			code: {
				id: "astnode100008835",
				name: "exports.toBipolar",
				type: "VariableDeclaration"
			}
		},
		description: "<p>Assumes a numerical pattern, containing unipolar values in the range 0 ..</p>\n<ol>\n<li>Returns a new pattern with values scaled to the bipolar range -1 .. 1</li>\n</ol>",
		returns: [
			{
				description: "<p>Pattern</p>"
			}
		],
		name: "toBipolar",
		longname: "toBipolar",
		kind: "constant",
		scope: "global",
		___id: "T000002R000890",
		___s: true
	},
	{
		comment: "/**\n * Assumes a numerical pattern, containing bipolar values in the range -1 ..\n * 1. Returns a new pattern with values scaled to the unipolar range 0 .. 1\n * @returns Pattern\n */",
		meta: {
			range: [
				43318,
				43428
			],
			filename: "pattern.mjs",
			lineno: 1386,
			columnno: 0,
			path: "/Users/michaelgogins/cloud-music/strudel/packages/core",
			code: {
				id: "astnode100008857",
				name: "exports.fromBipolar",
				type: "VariableDeclaration"
			}
		},
		description: "<p>Assumes a numerical pattern, containing bipolar values in the range -1 ..</p>\n<ol>\n<li>Returns a new pattern with values scaled to the unipolar range 0 .. 1</li>\n</ol>",
		returns: [
			{
				description: "<p>Pattern</p>"
			}
		],
		name: "fromBipolar",
		longname: "fromBipolar",
		kind: "constant",
		scope: "global",
		___id: "T000002R000892",
		___s: true
	},
	{
		comment: "/**\n * Assumes a numerical pattern, containing unipolar values in the range 0 .. 1.\n * Returns a new pattern with values scaled to the given min/max range.\n * Most useful in combination with continuous patterns.\n * @name range\n * @memberof Pattern\n * @returns Pattern\n * @example\n * s(\"bd sd,hh*4\").cutoff(sine.range(500,2000).slow(4))\n */",
		meta: {
			filename: "pattern.mjs",
			lineno: 1390,
			columnno: 0,
			path: "/Users/michaelgogins/cloud-music/strudel/packages/core",
			code: {
			}
		},
		description: "<p>Assumes a numerical pattern, containing unipolar values in the range 0 .. 1.\nReturns a new pattern with values scaled to the given min/max range.\nMost useful in combination with continuous patterns.</p>",
		name: "range",
		memberof: "Pattern",
		returns: [
			{
				description: "<p>Pattern</p>"
			}
		],
		examples: [
			"s(\"bd sd,hh*4\").cutoff(sine.range(500,2000).slow(4))"
		],
		scope: "static",
		longname: "Pattern.range",
		kind: "member",
		___id: "T000002R000894",
		___s: true
	},
	{
		comment: "/**\n * Assumes a numerical pattern, containing unipolar values in the range 0 ..\n * 1. Returns a new pattern with values scaled to the given min/max range,\n * following an exponential curve.\n * @param {Number} min\n * @param {Number} max\n * @returns Pattern\n */",
		meta: {
			range: [
				44140,
				44277
			],
			filename: "pattern.mjs",
			lineno: 1412,
			columnno: 0,
			path: "/Users/michaelgogins/cloud-music/strudel/packages/core",
			code: {
				id: "astnode100008903",
				name: "exports.rangex",
				type: "VariableDeclaration"
			}
		},
		description: "<p>Assumes a numerical pattern, containing unipolar values in the range 0 ..</p>\n<ol>\n<li>Returns a new pattern with values scaled to the given min/max range,\nfollowing an exponential curve.</li>\n</ol>",
		params: [
			{
				type: {
					names: [
						"Number"
					]
				},
				name: "min"
			},
			{
				type: {
					names: [
						"Number"
					]
				},
				name: "max"
			}
		],
		returns: [
			{
				description: "<p>Pattern</p>"
			}
		],
		name: "rangex",
		longname: "rangex",
		kind: "constant",
		scope: "global",
		___id: "T000002R000897",
		___s: true
	},
	{
		comment: "/**\n * Assumes a numerical pattern, containing bipolar values in the range -1 ..\n * 1. Returns a new pattern with values scaled to the given min/max range.\n * @param {Number} min\n * @param {Number} max\n * @returns Pattern\n */",
		meta: {
			range: [
				44505,
				44621
			],
			filename: "pattern.mjs",
			lineno: 1423,
			columnno: 0,
			path: "/Users/michaelgogins/cloud-music/strudel/packages/core",
			code: {
				id: "astnode100008936",
				name: "exports.range2",
				type: "VariableDeclaration"
			}
		},
		description: "<p>Assumes a numerical pattern, containing bipolar values in the range -1 ..</p>\n<ol>\n<li>Returns a new pattern with values scaled to the given min/max range.</li>\n</ol>",
		params: [
			{
				type: {
					names: [
						"Number"
					]
				},
				name: "min"
			},
			{
				type: {
					names: [
						"Number"
					]
				},
				name: "max"
			}
		],
		returns: [
			{
				description: "<p>Pattern</p>"
			}
		],
		name: "range2",
		longname: "range2",
		kind: "constant",
		scope: "global",
		___id: "T000002R000899",
		___s: true
	},
	{
		comment: "/**\n * Speed up a pattern by the given factor. Used by \"*\" in mini notation.\n *\n * @name fast\n * @memberof Pattern\n * @param {number | Pattern} factor speed up factor\n * @returns Pattern\n * @example\n * s(\"<bd sd> hh\").fast(2) // s(\"[<bd sd> hh]*2\")\n */",
		meta: {
			filename: "pattern.mjs",
			lineno: 1487,
			columnno: 0,
			path: "/Users/michaelgogins/cloud-music/strudel/packages/core",
			code: {
			}
		},
		description: "<p>Speed up a pattern by the given factor. Used by &quot;*&quot; in mini notation.</p>",
		name: "fast",
		memberof: "Pattern",
		params: [
			{
				type: {
					names: [
						"number",
						"Pattern"
					]
				},
				description: "<p>speed up factor</p>",
				name: "factor"
			}
		],
		returns: [
			{
				description: "<p>Pattern</p>"
			}
		],
		examples: [
			"s(\"<bd sd> hh\").fast(2) // s(\"[<bd sd> hh]*2\")"
		],
		scope: "static",
		longname: "Pattern.fast",
		kind: "member",
		___id: "T000002R000928",
		___s: true
	},
	{
		comment: "/**\n * Slow down a pattern over the given number of cycles. Like the \"/\" operator in mini notation.\n *\n * @name slow\n * @memberof Pattern\n * @param {number | Pattern} factor slow down factor\n * @returns Pattern\n * @example\n * s(\"<bd sd> hh\").slow(2) // s(\"[<bd sd> hh]/2\")\n */",
		meta: {
			filename: "pattern.mjs",
			lineno: 1503,
			columnno: 0,
			path: "/Users/michaelgogins/cloud-music/strudel/packages/core",
			code: {
			}
		},
		description: "<p>Slow down a pattern over the given number of cycles. Like the &quot;/&quot; operator in mini notation.</p>",
		name: "slow",
		memberof: "Pattern",
		params: [
			{
				type: {
					names: [
						"number",
						"Pattern"
					]
				},
				description: "<p>slow down factor</p>",
				name: "factor"
			}
		],
		returns: [
			{
				description: "<p>Pattern</p>"
			}
		],
		examples: [
			"s(\"<bd sd> hh\").slow(2) // s(\"[<bd sd> hh]/2\")"
		],
		scope: "static",
		longname: "Pattern.slow",
		kind: "member",
		___id: "T000002R000934",
		___s: true
	},
	{
		comment: "/**\n * Applies the given function every n cycles, starting from the last cycle.\n * @name lastOf\n * @memberof Pattern\n * @param {number} n how many cycles\n * @param {function} func function to apply\n * @returns Pattern\n * @example\n * note(\"c3 d3 e3 g3\").lastOf(4, x=>x.rev())\n */",
		meta: {
			filename: "pattern.mjs",
			lineno: 1527,
			columnno: 0,
			path: "/Users/michaelgogins/cloud-music/strudel/packages/core",
			code: {
			}
		},
		description: "<p>Applies the given function every n cycles, starting from the last cycle.</p>",
		name: "lastOf",
		memberof: "Pattern",
		params: [
			{
				type: {
					names: [
						"number"
					]
				},
				description: "<p>how many cycles</p>",
				name: "n"
			},
			{
				type: {
					names: [
						"function"
					]
				},
				description: "<p>function to apply</p>",
				name: "func"
			}
		],
		returns: [
			{
				description: "<p>Pattern</p>"
			}
		],
		examples: [
			"note(\"c3 d3 e3 g3\").lastOf(4, x=>x.rev())"
		],
		scope: "static",
		longname: "Pattern.lastOf",
		kind: "member",
		___id: "T000002R000942",
		___s: true
	},
	{
		comment: "/**\n * Applies the given function every n cycles, starting from the first cycle.\n * @name firstOf\n * @memberof Pattern\n * @param {number} n how many cycles\n * @param {function} func function to apply\n * @returns Pattern\n * @example\n * note(\"c3 d3 e3 g3\").firstOf(4, x=>x.rev())\n */",
		meta: {
			filename: "pattern.mjs",
			lineno: 1543,
			columnno: 0,
			path: "/Users/michaelgogins/cloud-music/strudel/packages/core",
			code: {
			}
		},
		description: "<p>Applies the given function every n cycles, starting from the first cycle.</p>",
		name: "firstOf",
		memberof: "Pattern",
		params: [
			{
				type: {
					names: [
						"number"
					]
				},
				description: "<p>how many cycles</p>",
				name: "n"
			},
			{
				type: {
					names: [
						"function"
					]
				},
				description: "<p>function to apply</p>",
				name: "func"
			}
		],
		returns: [
			{
				description: "<p>Pattern</p>"
			}
		],
		examples: [
			"note(\"c3 d3 e3 g3\").firstOf(4, x=>x.rev())"
		],
		scope: "static",
		longname: "Pattern.firstOf",
		kind: "member",
		___id: "T000002R000946",
		___s: true
	},
	{
		comment: "/**\n * An alias for {@link firstOf}\n * @name every\n * @memberof Pattern\n * @param {number} n how many cycles\n * @param {function} func function to apply\n * @returns Pattern\n * @example\n * note(\"c3 d3 e3 g3\").every(4, x=>x.rev())\n */",
		meta: {
			filename: "pattern.mjs",
			lineno: 1554,
			columnno: 0,
			path: "/Users/michaelgogins/cloud-music/strudel/packages/core",
			code: {
			}
		},
		description: "<p>An alias for {@link firstOf}</p>",
		name: "every",
		memberof: "Pattern",
		params: [
			{
				type: {
					names: [
						"number"
					]
				},
				description: "<p>how many cycles</p>",
				name: "n"
			},
			{
				type: {
					names: [
						"function"
					]
				},
				description: "<p>function to apply</p>",
				name: "func"
			}
		],
		returns: [
			{
				description: "<p>Pattern</p>"
			}
		],
		examples: [
			"note(\"c3 d3 e3 g3\").every(4, x=>x.rev())"
		],
		scope: "static",
		longname: "Pattern.every",
		kind: "member",
		___id: "T000002R000947",
		___s: true
	},
	{
		comment: "/**\n * Like layer, but with a single function:\n * @name apply\n * @memberof Pattern\n * @example\n * \"<c3 eb3 g3>\".scale('C minor').apply(scaleTranspose(\"0,2,4\")).note()\n */",
		meta: {
			filename: "pattern.mjs",
			lineno: 1570,
			columnno: 0,
			path: "/Users/michaelgogins/cloud-music/strudel/packages/core",
			code: {
			}
		},
		description: "<p>Like layer, but with a single function:</p>",
		name: "apply",
		memberof: "Pattern",
		examples: [
			"\"<c3 eb3 g3>\".scale('C minor').apply(scaleTranspose(\"0,2,4\")).note()"
		],
		scope: "static",
		longname: "Pattern.apply",
		kind: "member",
		___id: "T000002R000952",
		___s: true
	},
	{
		comment: "/**\n * Nudge a pattern to start earlier in time. Equivalent of Tidal's <~ operator\n *\n * @name early\n * @memberof Pattern\n * @param {number | Pattern} cycles number of cycles to nudge left\n * @returns Pattern\n * @example\n * \"bd ~\".stack(\"hh ~\".early(.1)).s()\n */",
		meta: {
			filename: "pattern.mjs",
			lineno: 1587,
			columnno: 0,
			path: "/Users/michaelgogins/cloud-music/strudel/packages/core",
			code: {
			}
		},
		description: "<p>Nudge a pattern to start earlier in time. Equivalent of Tidal's &lt;~ operator</p>",
		name: "early",
		memberof: "Pattern",
		params: [
			{
				type: {
					names: [
						"number",
						"Pattern"
					]
				},
				description: "<p>number of cycles to nudge left</p>",
				name: "cycles"
			}
		],
		returns: [
			{
				description: "<p>Pattern</p>"
			}
		],
		examples: [
			"\"bd ~\".stack(\"hh ~\".early(.1)).s()"
		],
		scope: "static",
		longname: "Pattern.early",
		kind: "member",
		___id: "T000002R000957",
		___s: true
	},
	{
		comment: "/**\n * Nudge a pattern to start later in time. Equivalent of Tidal's ~> operator\n *\n * @name late\n * @memberof Pattern\n * @param {number | Pattern} cycles number of cycles to nudge right\n * @returns Pattern\n * @example\n * \"bd ~\".stack(\"hh ~\".late(.1)).s()\n */",
		meta: {
			filename: "pattern.mjs",
			lineno: 1602,
			columnno: 0,
			path: "/Users/michaelgogins/cloud-music/strudel/packages/core",
			code: {
			}
		},
		description: "<p>Nudge a pattern to start later in time. Equivalent of Tidal's ~&gt; operator</p>",
		name: "late",
		memberof: "Pattern",
		params: [
			{
				type: {
					names: [
						"number",
						"Pattern"
					]
				},
				description: "<p>number of cycles to nudge right</p>",
				name: "cycles"
			}
		],
		returns: [
			{
				description: "<p>Pattern</p>"
			}
		],
		examples: [
			"\"bd ~\".stack(\"hh ~\".late(.1)).s()"
		],
		scope: "static",
		longname: "Pattern.late",
		kind: "member",
		___id: "T000002R000961",
		___s: true
	},
	{
		comment: "/**\n * Applies the given function whenever the given pattern is in a true state.\n * @name when\n * @memberof Pattern\n * @param {Pattern} binary_pat\n * @param {function} func\n * @returns Pattern\n * @example\n * \"c3 eb3 g3\".when(\"<0 1>/2\", x=>x.sub(5)).note()\n */",
		meta: {
			filename: "pattern.mjs",
			lineno: 1649,
			columnno: 0,
			path: "/Users/michaelgogins/cloud-music/strudel/packages/core",
			code: {
			}
		},
		description: "<p>Applies the given function whenever the given pattern is in a true state.</p>",
		name: "when",
		memberof: "Pattern",
		params: [
			{
				type: {
					names: [
						"Pattern"
					]
				},
				name: "binary_pat"
			},
			{
				type: {
					names: [
						"function"
					]
				},
				name: "func"
			}
		],
		returns: [
			{
				description: "<p>Pattern</p>"
			}
		],
		examples: [
			"\"c3 eb3 g3\".when(\"<0 1>/2\", x=>x.sub(5)).note()"
		],
		scope: "static",
		longname: "Pattern.when",
		kind: "member",
		___id: "T000002R000980",
		___s: true
	},
	{
		comment: "/**\n * Superimposes the function result on top of the original pattern, delayed by the given time.\n * @name off\n * @memberof Pattern\n * @param {Pattern | number} time offset time\n * @param {function} func function to apply\n * @returns Pattern\n * @example\n * \"c3 eb3 g3\".off(1/8, x=>x.add(7)).note()\n */",
		meta: {
			filename: "pattern.mjs",
			lineno: 1663,
			columnno: 0,
			path: "/Users/michaelgogins/cloud-music/strudel/packages/core",
			code: {
			}
		},
		description: "<p>Superimposes the function result on top of the original pattern, delayed by the given time.</p>",
		name: "off",
		memberof: "Pattern",
		params: [
			{
				type: {
					names: [
						"Pattern",
						"number"
					]
				},
				description: "<p>offset time</p>",
				name: "time"
			},
			{
				type: {
					names: [
						"function"
					]
				},
				description: "<p>function to apply</p>",
				name: "func"
			}
		],
		returns: [
			{
				description: "<p>Pattern</p>"
			}
		],
		examples: [
			"\"c3 eb3 g3\".off(1/8, x=>x.add(7)).note()"
		],
		scope: "static",
		longname: "Pattern.off",
		kind: "member",
		___id: "T000002R000983",
		___s: true
	},
	{
		comment: "/**\n * Returns a new pattern where every other cycle is played once, twice as\n * fast, and offset in time by one quarter of a cycle. Creates a kind of\n * breakbeat feel.\n * @returns Pattern\n */",
		meta: {
			range: [
				52408,
				52546
			],
			filename: "pattern.mjs",
			lineno: 1683,
			columnno: 0,
			path: "/Users/michaelgogins/cloud-music/strudel/packages/core",
			code: {
				id: "astnode100009931",
				name: "exports.brak",
				type: "VariableDeclaration"
			}
		},
		description: "<p>Returns a new pattern where every other cycle is played once, twice as\nfast, and offset in time by one quarter of a cycle. Creates a kind of\nbreakbeat feel.</p>",
		returns: [
			{
				description: "<p>Pattern</p>"
			}
		],
		name: "brak",
		longname: "brak",
		kind: "constant",
		scope: "global",
		___id: "T000002R000986",
		___s: true
	},
	{
		comment: "/**\n * Reverse all haps in a pattern\n *\n * @name rev\n * @memberof Pattern\n * @returns Pattern\n * @example\n * note(\"c3 d3 e3 g3\").rev()\n */",
		meta: {
			filename: "pattern.mjs",
			lineno: 1687,
			columnno: 0,
			path: "/Users/michaelgogins/cloud-music/strudel/packages/core",
			code: {
			}
		},
		description: "<p>Reverse all haps in a pattern</p>",
		name: "rev",
		memberof: "Pattern",
		returns: [
			{
				description: "<p>Pattern</p>"
			}
		],
		examples: [
			"note(\"c3 d3 e3 g3\").rev()"
		],
		scope: "static",
		longname: "Pattern.rev",
		kind: "member",
		___id: "T000002R000988",
		___s: true
	},
	{
		comment: "/**\n * Superimpose and offset multiple times, applying the given function each time.\n * @name echoWith\n * @memberof Pattern\n * @returns Pattern\n * @param {number} times how many times to repeat\n * @param {number} time cycle offset between iterations\n * @param {function} func function to apply, given the pattern and the iteration index\n * @example\n * \"<0 [2 4]>\"\n * .echoWith(4, 1/8, (p,n) => p.add(n*2))\n * .scale('C minor').note().legato(.2)\n */",
		meta: {
			filename: "pattern.mjs",
			lineno: 1749,
			columnno: 0,
			path: "/Users/michaelgogins/cloud-music/strudel/packages/core",
			code: {
			}
		},
		description: "<p>Superimpose and offset multiple times, applying the given function each time.</p>",
		name: "echoWith",
		memberof: "Pattern",
		returns: [
			{
				description: "<p>Pattern</p>"
			}
		],
		params: [
			{
				type: {
					names: [
						"number"
					]
				},
				description: "<p>how many times to repeat</p>",
				name: "times"
			},
			{
				type: {
					names: [
						"number"
					]
				},
				description: "<p>cycle offset between iterations</p>",
				name: "time"
			},
			{
				type: {
					names: [
						"function"
					]
				},
				description: "<p>function to apply, given the pattern and the iteration index</p>",
				name: "func"
			}
		],
		examples: [
			"\"<0 [2 4]>\"\n.echoWith(4, 1/8, (p,n) => p.add(n*2))\n.scale('C minor').note().legato(.2)"
		],
		scope: "static",
		longname: "Pattern.echoWith",
		kind: "member",
		___id: "T000002R001021",
		___s: true
	},
	{
		comment: "/**\n * Superimpose and offset multiple times, gradually decreasing the velocity\n * @name echo\n * @memberof Pattern\n * @returns Pattern\n * @param {number} times how many times to repeat\n * @param {number} time cycle offset between iterations\n * @param {number} feedback velocity multiplicator for each iteration\n * @example\n * s(\"bd sd\").echo(3, 1/6, .8)\n */",
		meta: {
			filename: "pattern.mjs",
			lineno: 1766,
			columnno: 0,
			path: "/Users/michaelgogins/cloud-music/strudel/packages/core",
			code: {
			}
		},
		description: "<p>Superimpose and offset multiple times, gradually decreasing the velocity</p>",
		name: "echo",
		memberof: "Pattern",
		returns: [
			{
				description: "<p>Pattern</p>"
			}
		],
		params: [
			{
				type: {
					names: [
						"number"
					]
				},
				description: "<p>how many times to repeat</p>",
				name: "times"
			},
			{
				type: {
					names: [
						"number"
					]
				},
				description: "<p>cycle offset between iterations</p>",
				name: "time"
			},
			{
				type: {
					names: [
						"number"
					]
				},
				description: "<p>velocity multiplicator for each iteration</p>",
				name: "feedback"
			}
		],
		examples: [
			"s(\"bd sd\").echo(3, 1/6, .8)"
		],
		scope: "static",
		longname: "Pattern.echo",
		kind: "member",
		___id: "T000002R001025",
		___s: true
	},
	{
		comment: "/**\n * Divides a pattern into a given number of subdivisions, plays the subdivisions in order, but increments the starting subdivision each cycle. The pattern wraps to the first subdivision after the last subdivision is played.\n * @name iter\n * @memberof Pattern\n * @returns Pattern\n * @example\n * note(\"0 1 2 3\".scale('A minor')).iter(4)\n */",
		meta: {
			filename: "pattern.mjs",
			lineno: 1781,
			columnno: 0,
			path: "/Users/michaelgogins/cloud-music/strudel/packages/core",
			code: {
			}
		},
		description: "<p>Divides a pattern into a given number of subdivisions, plays the subdivisions in order, but increments the starting subdivision each cycle. The pattern wraps to the first subdivision after the last subdivision is played.</p>",
		name: "iter",
		memberof: "Pattern",
		returns: [
			{
				description: "<p>Pattern</p>"
			}
		],
		examples: [
			"note(\"0 1 2 3\".scale('A minor')).iter(4)"
		],
		scope: "static",
		longname: "Pattern.iter",
		kind: "member",
		___id: "T000002R001028",
		___s: true
	},
	{
		comment: "/**\n * Like `iter`, but plays the subdivisions in reverse order. Known as iter' in tidalcycles\n * @name iterBack\n * @memberof Pattern\n * @returns Pattern\n * @example\n * note(\"0 1 2 3\".scale('A minor')).iterBack(4)\n */",
		meta: {
			filename: "pattern.mjs",
			lineno: 1803,
			columnno: 0,
			path: "/Users/michaelgogins/cloud-music/strudel/packages/core",
			code: {
			}
		},
		description: "<p>Like <code>iter</code>, but plays the subdivisions in reverse order. Known as iter' in tidalcycles</p>",
		name: "iterBack",
		memberof: "Pattern",
		returns: [
			{
				description: "<p>Pattern</p>"
			}
		],
		examples: [
			"note(\"0 1 2 3\".scale('A minor')).iterBack(4)"
		],
		scope: "static",
		longname: "Pattern.iterBack",
		kind: "member",
		___id: "T000002R001033",
		___s: true
	},
	{
		comment: "/**\n * Divides a pattern into a given number of parts, then cycles through those parts in turn, applying the given function to each part in turn (one part per cycle).\n * @name chunk\n * @memberof Pattern\n * @returns Pattern\n * @example\n * \"0 1 2 3\".chunk(4, x=>x.add(7)).scale('A minor').note()\n */",
		meta: {
			filename: "pattern.mjs",
			lineno: 1815,
			columnno: 0,
			path: "/Users/michaelgogins/cloud-music/strudel/packages/core",
			code: {
			}
		},
		description: "<p>Divides a pattern into a given number of parts, then cycles through those parts in turn, applying the given function to each part in turn (one part per cycle).</p>",
		name: "chunk",
		memberof: "Pattern",
		returns: [
			{
				description: "<p>Pattern</p>"
			}
		],
		examples: [
			"\"0 1 2 3\".chunk(4, x=>x.add(7)).scale('A minor').note()"
		],
		scope: "static",
		longname: "Pattern.chunk",
		kind: "member",
		___id: "T000002R001037",
		___s: true
	},
	{
		comment: "/**\n * Like `chunk`, but cycles through the parts in reverse order. Known as chunk' in tidalcycles\n * @name chunkBack\n * @memberof Pattern\n * @returns Pattern\n * @example\n * \"0 1 2 3\".chunkBack(4, x=>x.add(7)).scale('A minor').note()\n */",
		meta: {
			filename: "pattern.mjs",
			lineno: 1834,
			columnno: 0,
			path: "/Users/michaelgogins/cloud-music/strudel/packages/core",
			code: {
			}
		},
		description: "<p>Like <code>chunk</code>, but cycles through the parts in reverse order. Known as chunk' in tidalcycles</p>",
		name: "chunkBack",
		memberof: "Pattern",
		returns: [
			{
				description: "<p>Pattern</p>"
			}
		],
		examples: [
			"\"0 1 2 3\".chunkBack(4, x=>x.add(7)).scale('A minor').note()"
		],
		scope: "static",
		longname: "Pattern.chunkBack",
		kind: "member",
		___id: "T000002R001043",
		___s: true
	},
	{
		comment: "/**\n *\n * Sets the velocity from 0 to 1. Is multiplied together with gain.\n * @name velocity\n * @example\n * s(\"hh*8\")\n * .gain(\".4!2 1 .4!2 1 .4 1\")\n * .velocity(\".4 1\")\n */",
		meta: {
			filename: "pattern.mjs",
			lineno: 1863,
			columnno: 0,
			path: "/Users/michaelgogins/cloud-music/strudel/packages/core",
			code: {
			}
		},
		description: "<p>Sets the velocity from 0 to 1. Is multiplied together with gain.</p>",
		name: "velocity",
		examples: [
			"s(\"hh*8\")\n.gain(\".4!2 1 .4!2 1 .4 1\")\n.velocity(\".4 1\")"
		],
		longname: "velocity",
		kind: "member",
		scope: "global",
		___id: "T000002R001056",
		___s: true
	},
	{
		comment: "/**\n *\n * Multiplies the hap duration with the given factor.\n * @name legato\n * @memberof Pattern\n * @example\n * note(\"c3 eb3 g3 c4\").legato(\"<.25 .5 1 2>\")\n */",
		meta: {
			filename: "pattern.mjs",
			lineno: 1876,
			columnno: 0,
			path: "/Users/michaelgogins/cloud-music/strudel/packages/core",
			code: {
			}
		},
		description: "<p>Multiplies the hap duration with the given factor.</p>",
		name: "legato",
		memberof: "Pattern",
		examples: [
			"note(\"c3 eb3 g3 c4\").legato(\"<.25 .5 1 2>\")"
		],
		scope: "static",
		longname: "Pattern.legato",
		kind: "member",
		___id: "T000002R001060",
		___s: true
	},
	{
		comment: "/**\n * Cuts each sample into the given number of parts, allowing you to explore a technique known as 'granular synthesis'.\n * It turns a pattern of samples into a pattern of parts of samples.\n * @name chop\n * @memberof Pattern\n * @returns Pattern\n * @example\n * samples({ rhodes: 'https://cdn.freesound.org/previews/132/132051_316502-lq.mp3' })\n * s(\"rhodes\")\n *  .chop(4)\n *  .rev() // reverse order of chops\n *  .loopAt(4) // fit sample into 4 cycles\n *\n */",
		meta: {
			filename: "pattern.mjs",
			lineno: 1893,
			columnno: 0,
			path: "/Users/michaelgogins/cloud-music/strudel/packages/core",
			code: {
			}
		},
		description: "<p>Cuts each sample into the given number of parts, allowing you to explore a technique known as 'granular synthesis'.\nIt turns a pattern of samples into a pattern of parts of samples.</p>",
		name: "chop",
		memberof: "Pattern",
		returns: [
			{
				description: "<p>Pattern</p>"
			}
		],
		examples: [
			"samples({ rhodes: 'https://cdn.freesound.org/previews/132/132051_316502-lq.mp3' })\ns(\"rhodes\")\n .chop(4)\n .rev() // reverse order of chops\n .loopAt(4) // fit sample into 4 cycles"
		],
		scope: "static",
		longname: "Pattern.chop",
		kind: "member",
		___id: "T000002R001063",
		___s: true
	},
	{
		comment: "/**\n * Makes the sample fit the given number of cycles by changing the speed.\n * @name loopAt\n * @memberof Pattern\n * @returns Pattern\n * @example\n * samples({ rhodes: 'https://cdn.freesound.org/previews/132/132051_316502-lq.mp3' })\n * s(\"rhodes\").loopAt(4)\n */",
		meta: {
			filename: "pattern.mjs",
			lineno: 1923,
			columnno: 0,
			path: "/Users/michaelgogins/cloud-music/strudel/packages/core",
			code: {
			}
		},
		description: "<p>Makes the sample fit the given number of cycles by changing the speed.</p>",
		name: "loopAt",
		memberof: "Pattern",
		returns: [
			{
				description: "<p>Pattern</p>"
			}
		],
		examples: [
			"samples({ rhodes: 'https://cdn.freesound.org/previews/132/132051_316502-lq.mp3' })\ns(\"rhodes\").loopAt(4)"
		],
		scope: "static",
		longname: "Pattern.loopAt",
		kind: "member",
		___id: "T000002R001080",
		___s: true
	},
	{
		comment: "/**\n * Makes the sample fit the given number of cycles and cps value, by\n * changing the speed. Please note that at some point cps will be\n * given by a global clock and this function will be\n * deprecated/removed.\n * @name loopAtCps\n * @memberof Pattern\n * @returns Pattern\n * @example\n * samples({ rhodes: 'https://cdn.freesound.org/previews/132/132051_316502-lq.mp3' })\n * s(\"rhodes\").loopAtCps(4,1.5).cps(1.5)\n */",
		meta: {
			filename: "pattern.mjs",
			lineno: 1944,
			columnno: 0,
			path: "/Users/michaelgogins/cloud-music/strudel/packages/core",
			code: {
			}
		},
		description: "<p>Makes the sample fit the given number of cycles and cps value, by\nchanging the speed. Please note that at some point cps will be\ngiven by a global clock and this function will be\ndeprecated/removed.</p>",
		name: "loopAtCps",
		memberof: "Pattern",
		returns: [
			{
				description: "<p>Pattern</p>"
			}
		],
		examples: [
			"samples({ rhodes: 'https://cdn.freesound.org/previews/132/132051_316502-lq.mp3' })\ns(\"rhodes\").loopAtCps(4,1.5).cps(1.5)"
		],
		scope: "static",
		longname: "Pattern.loopAtCps",
		kind: "member",
		___id: "T000002R001084",
		___s: true
	},
	{
		comment: "/**\n *  A sawtooth signal between 0 and 1.\n *\n * @return {Pattern}\n * @example\n * \"c3 [eb3,g3] g2 [g3,bb3]\".legato(saw.slow(4)).note()\n * @example\n * saw.range(0,8).segment(8).scale('C major').slow(4).note()\n *\n */",
		meta: {
			range: [
				1581,
				1621
			],
			filename: "signal.mjs",
			lineno: 35,
			columnno: 0,
			path: "/Users/michaelgogins/cloud-music/strudel/packages/core",
			code: {
				id: "astnode100012698",
				name: "exports.saw",
				type: "VariableDeclaration"
			}
		},
		description: "<p>A sawtooth signal between 0 and 1.</p>",
		returns: [
			{
				type: {
					names: [
						"Pattern"
					]
				}
			}
		],
		examples: [
			"\"c3 [eb3,g3] g2 [g3,bb3]\".legato(saw.slow(4)).note()",
			"saw.range(0,8).segment(8).scale('C major').slow(4).note()"
		],
		name: "saw",
		longname: "saw",
		kind: "constant",
		scope: "global",
		___id: "T000002R001279",
		___s: true
	},
	{
		comment: "/**\n *  A sine signal between 0 and 1.\n *\n * @return {Pattern}\n * @example\n * sine.segment(16).range(0,15).slow(2).scale('C minor').note()\n *\n */",
		meta: {
			range: [
				1870,
				1910
			],
			filename: "signal.mjs",
			lineno: 48,
			columnno: 0,
			path: "/Users/michaelgogins/cloud-music/strudel/packages/core",
			code: {
				id: "astnode100012736",
				name: "exports.sine",
				type: "VariableDeclaration"
			}
		},
		description: "<p>A sine signal between 0 and 1.</p>",
		returns: [
			{
				type: {
					names: [
						"Pattern"
					]
				}
			}
		],
		examples: [
			"sine.segment(16).range(0,15).slow(2).scale('C minor').note()"
		],
		name: "sine",
		longname: "sine",
		kind: "constant",
		scope: "global",
		___id: "T000002R001285",
		___s: true
	},
	{
		comment: "/**\n *  A cosine signal between 0 and 1.\n *\n * @return {Pattern}\n * @example\n * stack(sine,cosine).segment(16).range(0,15).slow(2).scale('C minor').note()\n *\n */",
		meta: {
			range: [
				2074,
				2128
			],
			filename: "signal.mjs",
			lineno: 58,
			columnno: 0,
			path: "/Users/michaelgogins/cloud-music/strudel/packages/core",
			code: {
				id: "astnode100012744",
				name: "exports.cosine",
				type: "VariableDeclaration"
			}
		},
		description: "<p>A cosine signal between 0 and 1.</p>",
		returns: [
			{
				type: {
					names: [
						"Pattern"
					]
				}
			}
		],
		examples: [
			"stack(sine,cosine).segment(16).range(0,15).slow(2).scale('C minor').note()"
		],
		name: "cosine",
		longname: "cosine",
		kind: "constant",
		scope: "global",
		___id: "T000002R001287",
		___s: true
	},
	{
		comment: "/**\n *  A square signal between 0 and 1.\n *\n * @return {Pattern}\n * @example\n * square.segment(2).range(0,7).scale('C minor').note()\n *\n */",
		meta: {
			range: [
				2327,
				2388
			],
			filename: "signal.mjs",
			lineno: 69,
			columnno: 0,
			path: "/Users/michaelgogins/cloud-music/strudel/packages/core",
			code: {
				id: "astnode100012774",
				name: "exports.square",
				type: "VariableDeclaration"
			}
		},
		description: "<p>A square signal between 0 and 1.</p>",
		returns: [
			{
				type: {
					names: [
						"Pattern"
					]
				}
			}
		],
		examples: [
			"square.segment(2).range(0,7).scale('C minor').note()"
		],
		name: "square",
		longname: "square",
		kind: "constant",
		scope: "global",
		___id: "T000002R001291",
		___s: true
	},
	{
		comment: "/**\n *  A triangle signal between 0 and 1.\n *\n * @return {Pattern}\n * @example\n * tri.segment(8).range(0,7).scale('C minor').note()\n *\n */",
		meta: {
			range: [
				2572,
				2610
			],
			filename: "signal.mjs",
			lineno: 80,
			columnno: 0,
			path: "/Users/michaelgogins/cloud-music/strudel/packages/core",
			code: {
				id: "astnode100012799",
				name: "exports.tri",
				type: "VariableDeclaration"
			}
		},
		description: "<p>A triangle signal between 0 and 1.</p>",
		returns: [
			{
				type: {
					names: [
						"Pattern"
					]
				}
			}
		],
		examples: [
			"tri.segment(8).range(0,7).scale('C minor').note()"
		],
		name: "tri",
		longname: "tri",
		kind: "constant",
		scope: "global",
		___id: "T000002R001295",
		___s: true
	},
	{
		comment: "/**\n * A continuous pattern of random numbers, between 0 and 1.\n *\n * @name rand\n * @example\n * // randomly change the cutoff\n * s(\"bd sd,hh*4\").cutoff(rand.range(500,2000))\n *\n */",
		meta: {
			filename: "signal.mjs",
			lineno: 117,
			columnno: 0,
			path: "/Users/michaelgogins/cloud-music/strudel/packages/core",
			code: {
			}
		},
		description: "<p>A continuous pattern of random numbers, between 0 and 1.</p>",
		name: "rand",
		examples: [
			"// randomly change the cutoff\ns(\"bd sd,hh*4\").cutoff(rand.range(500,2000))"
		],
		longname: "rand",
		kind: "member",
		scope: "global",
		___id: "T000002R001313",
		___s: true
	},
	{
		comment: "/**\n * A continuous pattern of random numbers, between -1 and 1\n */",
		meta: {
			range: [
				3711,
				3749
			],
			filename: "signal.mjs",
			lineno: 130,
			columnno: 0,
			path: "/Users/michaelgogins/cloud-music/strudel/packages/core",
			code: {
				id: "astnode100012961",
				name: "exports.rand2",
				type: "VariableDeclaration"
			}
		},
		description: "<p>A continuous pattern of random numbers, between -1 and 1</p>",
		name: "rand2",
		longname: "rand2",
		kind: "constant",
		scope: "global",
		___id: "T000002R001316",
		___s: true
	},
	{
		comment: "/**\n * A continuous pattern of random integers, between 0 and n-1.\n *\n * @name irand\n * @param {number} n max value (exclusive)\n * @example\n * // randomly select scale notes from 0 - 7 (= C to C)\n * irand(8).struct(\"x(3,8)\").scale('C minor').note()\n *\n */",
		meta: {
			filename: "signal.mjs",
			lineno: 138,
			columnno: 0,
			path: "/Users/michaelgogins/cloud-music/strudel/packages/core",
			code: {
			}
		},
		description: "<p>A continuous pattern of random integers, between 0 and n-1.</p>",
		name: "irand",
		params: [
			{
				type: {
					names: [
						"number"
					]
				},
				description: "<p>max value (exclusive)</p>",
				name: "n"
			}
		],
		examples: [
			"// randomly select scale notes from 0 - 7 (= C to C)\nirand(8).struct(\"x(3,8)\").scale('C minor').note()"
		],
		longname: "irand",
		kind: "member",
		scope: "global",
		___id: "T000002R001326",
		___s: true
	},
	{
		comment: "/**\n * Choose from the list of values (or patterns of values) using the given\n * pattern of numbers, which should be in the range of 0..1\n * @param {Pattern} pat\n * @param {*} xs\n * @returns {Pattern}\n */",
		meta: {
			range: [
				4696,
				4783
			],
			filename: "signal.mjs",
			lineno: 164,
			columnno: 0,
			path: "/Users/michaelgogins/cloud-music/strudel/packages/core",
			code: {
				id: "astnode100013088",
				name: "exports.chooseWith",
				type: "VariableDeclaration"
			}
		},
		description: "<p>Choose from the list of values (or patterns of values) using the given\npattern of numbers, which should be in the range of 0..1</p>",
		params: [
			{
				type: {
					names: [
						"Pattern"
					]
				},
				name: "pat"
			},
			{
				type: {
					names: [
						"*"
					]
				},
				name: "xs"
			}
		],
		returns: [
			{
				type: {
					names: [
						"Pattern"
					]
				}
			}
		],
		name: "chooseWith",
		longname: "chooseWith",
		kind: "constant",
		scope: "global",
		___id: "T000002R001332",
		___s: true
	},
	{
		comment: "/**\n * As with {chooseWith}, but the structure comes from the chosen values, rather\n * than the pattern you're using to choose with.\n * @param {Pattern} pat\n * @param {*} xs\n * @returns {Pattern}\n */",
		meta: {
			range: [
				4985,
				5074
			],
			filename: "signal.mjs",
			lineno: 175,
			columnno: 0,
			path: "/Users/michaelgogins/cloud-music/strudel/packages/core",
			code: {
				id: "astnode100013104",
				name: "exports.chooseInWith",
				type: "VariableDeclaration"
			}
		},
		description: "<p>As with {chooseWith}, but the structure comes from the chosen values, rather\nthan the pattern you're using to choose with.</p>",
		params: [
			{
				type: {
					names: [
						"Pattern"
					]
				},
				name: "pat"
			},
			{
				type: {
					names: [
						"*"
					]
				},
				name: "xs"
			}
		],
		returns: [
			{
				type: {
					names: [
						"Pattern"
					]
				}
			}
		],
		name: "chooseInWith",
		longname: "chooseInWith",
		kind: "constant",
		scope: "global",
		___id: "T000002R001334",
		___s: true
	},
	{
		comment: "/**\n * Chooses randomly from the given list of elements.\n * @param  {...any} xs values / patterns to choose from.\n * @returns {Pattern} - a continuous pattern.\n */",
		meta: {
			range: [
				5240,
				5294
			],
			filename: "signal.mjs",
			lineno: 184,
			columnno: 0,
			path: "/Users/michaelgogins/cloud-music/strudel/packages/core",
			code: {
				id: "astnode100013120",
				name: "exports.choose",
				type: "VariableDeclaration"
			}
		},
		description: "<p>Chooses randomly from the given list of elements.</p>",
		params: [
			{
				type: {
					names: [
						"any"
					]
				},
				variable: true,
				description: "<p>values / patterns to choose from.</p>",
				name: "xs"
			}
		],
		returns: [
			{
				type: {
					names: [
						"Pattern"
					]
				},
				description: "<ul>\n<li>a continuous pattern.</li>\n</ul>"
			}
		],
		name: "choose",
		longname: "choose",
		kind: "constant",
		scope: "global",
		___id: "T000002R001336",
		___s: true
	},
	{
		comment: "/**\n * Chooses from the given list of values (or patterns of values), according\n * to the pattern that the method is called on. The pattern should be in\n * the range 0 .. 1.\n * @param  {...any} xs\n * @returns {Pattern}\n */",
		meta: {
			range: [
				5519,
				5597
			],
			filename: "signal.mjs",
			lineno: 193,
			columnno: 0,
			path: "/Users/michaelgogins/cloud-music/strudel/packages/core",
			code: {
				id: "astnode100013132",
				name: "Pattern.prototype.choose",
				type: "FunctionExpression",
				paramnames: [
					"xs"
				]
			}
		},
		description: "<p>Chooses from the given list of values (or patterns of values), according\nto the pattern that the method is called on. The pattern should be in\nthe range 0 .. 1.</p>",
		params: [
			{
				type: {
					names: [
						"any"
					]
				},
				variable: true,
				name: "xs"
			}
		],
		returns: [
			{
				type: {
					names: [
						"Pattern"
					]
				}
			}
		],
		name: "choose",
		longname: "Pattern#choose",
		kind: "function",
		memberof: "Pattern",
		scope: "instance",
		___id: "T000002R001338",
		___s: true
	},
	{
		comment: "/**\n * As with choose, but the pattern that this method is called on should be\n * in the range -1 .. 1\n * @param  {...any} xs\n * @returns {Pattern}\n */",
		meta: {
			range: [
				5752,
				5845
			],
			filename: "signal.mjs",
			lineno: 203,
			columnno: 0,
			path: "/Users/michaelgogins/cloud-music/strudel/packages/core",
			code: {
				id: "astnode100013148",
				name: "Pattern.prototype.choose2",
				type: "FunctionExpression",
				paramnames: [
					"xs"
				]
			}
		},
		description: "<p>As with choose, but the pattern that this method is called on should be\nin the range -1 .. 1</p>",
		params: [
			{
				type: {
					names: [
						"any"
					]
				},
				variable: true,
				name: "xs"
			}
		],
		returns: [
			{
				type: {
					names: [
						"Pattern"
					]
				}
			}
		],
		name: "choose2",
		longname: "Pattern#choose2",
		kind: "function",
		memberof: "Pattern",
		scope: "instance",
		___id: "T000002R001339",
		___s: true
	},
	{
		comment: "/**\n * Picks one of the elements at random each cycle.\n * @returns {Pattern}\n * @example\n * chooseCycles(\"bd\", \"hh\", \"sd\").s().fast(4)\n * @example\n * \"bd | hh | sd\".s().fast(4)\n */",
		meta: {
			range: [
				6029,
				6102
			],
			filename: "signal.mjs",
			lineno: 215,
			columnno: 0,
			path: "/Users/michaelgogins/cloud-music/strudel/packages/core",
			code: {
				id: "astnode100013166",
				name: "exports.chooseCycles",
				type: "VariableDeclaration"
			}
		},
		description: "<p>Picks one of the elements at random each cycle.</p>",
		returns: [
			{
				type: {
					names: [
						"Pattern"
					]
				}
			}
		],
		examples: [
			"chooseCycles(\"bd\", \"hh\", \"sd\").s().fast(4)",
			"\"bd | hh | sd\".s().fast(4)"
		],
		name: "chooseCycles",
		longname: "chooseCycles",
		kind: "constant",
		scope: "global",
		___id: "T000002R001340",
		___s: true
	},
	{
		comment: "/**\n * Generates a continuous pattern of [perlin noise](https://en.wikipedia.org/wiki/Perlin_noise), in the range 0..1.\n *\n * @name perlin\n * @example\n * // randomly change the cutoff\n * s(\"bd sd,hh*4\").cutoff(perlin.range(500,2000))\n *\n */",
		meta: {
			filename: "signal.mjs",
			lineno: 250,
			columnno: 0,
			path: "/Users/michaelgogins/cloud-music/strudel/packages/core",
			code: {
			}
		},
		description: "<p>Generates a continuous pattern of <a href=\"https://en.wikipedia.org/wiki/Perlin_noise\">perlin noise</a>, in the range 0..1.</p>",
		name: "perlin",
		examples: [
			"// randomly change the cutoff\ns(\"bd sd,hh*4\").cutoff(perlin.range(500,2000))"
		],
		longname: "perlin",
		kind: "member",
		scope: "global",
		___id: "T000002R001364",
		___s: true
	},
	{
		comment: "/**\n * Randomly removes events from the pattern by a given amount.\n * 0 = 0% chance of removal\n * 1 = 100% chance of removal\n *\n * @name degradeBy\n * @memberof Pattern\n * @param {number} amount - a number between 0 and 1\n * @returns Pattern\n * @example\n * s(\"hh*8\").degradeBy(0.2)\n * @example\n * s(\"[hh?0.2]*8\")\n */",
		meta: {
			filename: "signal.mjs",
			lineno: 265,
			columnno: 0,
			path: "/Users/michaelgogins/cloud-music/strudel/packages/core",
			code: {
			}
		},
		description: "<p>Randomly removes events from the pattern by a given amount.\n0 = 0% chance of removal\n1 = 100% chance of removal</p>",
		name: "degradeBy",
		memberof: "Pattern",
		params: [
			{
				type: {
					names: [
						"number"
					]
				},
				description: "<p>a number between 0 and 1</p>",
				name: "amount"
			}
		],
		returns: [
			{
				description: "<p>Pattern</p>"
			}
		],
		examples: [
			"s(\"hh*8\").degradeBy(0.2)",
			"s(\"[hh?0.2]*8\")"
		],
		scope: "static",
		longname: "Pattern.degradeBy",
		kind: "member",
		___id: "T000002R001369",
		___s: true
	},
	{
		comment: "/**\n *\n * Randomly removes 50% of events from the pattern. Shorthand for `.degradeBy(0.5)`\n *\n * @name degrade\n * @memberof Pattern\n * @returns Pattern\n * @example\n * s(\"hh*8\").degrade()\n * @example\n * s(\"[hh?]*8\")\n */",
		meta: {
			filename: "signal.mjs",
			lineno: 283,
			columnno: 0,
			path: "/Users/michaelgogins/cloud-music/strudel/packages/core",
			code: {
			}
		},
		description: "<p>Randomly removes 50% of events from the pattern. Shorthand for <code>.degradeBy(0.5)</code></p>",
		name: "degrade",
		memberof: "Pattern",
		returns: [
			{
				description: "<p>Pattern</p>"
			}
		],
		examples: [
			"s(\"hh*8\").degrade()",
			"s(\"[hh?]*8\")"
		],
		scope: "static",
		longname: "Pattern.degrade",
		kind: "member",
		___id: "T000002R001372",
		___s: true
	},
	{
		comment: "/**\n * Inverse of {@link Pattern#degradeBy}: Randomly removes events from the pattern by a given amount.\n * 0 = 100% chance of removal\n * 1 = 0% chance of removal\n * Events that would be removed by degradeBy are let through by undegradeBy and vice versa (see second example).\n *\n * @name undegradeBy\n * @memberof Pattern\n * @param {number} amount - a number between 0 and 1\n * @returns Pattern\n * @example\n * s(\"hh*8\").undegradeBy(0.2)\n */",
		meta: {
			filename: "signal.mjs",
			lineno: 297,
			columnno: 0,
			path: "/Users/michaelgogins/cloud-music/strudel/packages/core",
			code: {
			}
		},
		description: "<p>Inverse of {@link Pattern#degradeBy}: Randomly removes events from the pattern by a given amount.\n0 = 100% chance of removal\n1 = 0% chance of removal\nEvents that would be removed by degradeBy are let through by undegradeBy and vice versa (see second example).</p>",
		name: "undegradeBy",
		memberof: "Pattern",
		params: [
			{
				type: {
					names: [
						"number"
					]
				},
				description: "<p>a number between 0 and 1</p>",
				name: "amount"
			}
		],
		returns: [
			{
				description: "<p>Pattern</p>"
			}
		],
		examples: [
			"s(\"hh*8\").undegradeBy(0.2)"
		],
		scope: "static",
		longname: "Pattern.undegradeBy",
		kind: "member",
		___id: "T000002R001375",
		___s: true
	},
	{
		comment: "/**\n *\n * Randomly applies the given function by the given probability.\n * Similar to {@link Pattern#someCyclesBy}\n *\n * @name sometimesBy\n * @memberof Pattern\n * @param {number | Pattern} probability - a number between 0 and 1\n * @param {function} function - the transformation to apply\n * @returns Pattern\n * @example\n * s(\"hh(3,8)\").sometimesBy(.4, x=>x.speed(\"0.5\"))\n */",
		meta: {
			filename: "signal.mjs",
			lineno: 319,
			columnno: 0,
			path: "/Users/michaelgogins/cloud-music/strudel/packages/core",
			code: {
			}
		},
		description: "<p>Randomly applies the given function by the given probability.\nSimilar to {@link Pattern#someCyclesBy}</p>",
		name: "sometimesBy",
		memberof: "Pattern",
		params: [
			{
				type: {
					names: [
						"number",
						"Pattern"
					]
				},
				description: "<p>a number between 0 and 1</p>",
				name: "probability"
			},
			{
				type: {
					names: [
						"function"
					]
				},
				description: "<p>the transformation to apply</p>",
				name: "function"
			}
		],
		returns: [
			{
				description: "<p>Pattern</p>"
			}
		],
		examples: [
			"s(\"hh(3,8)\").sometimesBy(.4, x=>x.speed(\"0.5\"))"
		],
		scope: "static",
		longname: "Pattern.sometimesBy",
		kind: "member",
		___id: "T000002R001380",
		___s: true
	},
	{
		comment: "/**\n *\n * Applies the given function with a 50% chance\n *\n * @name sometimes\n * @memberof Pattern\n * @param {function} function - the transformation to apply\n * @returns Pattern\n * @example\n * s(\"hh*4\").sometimes(x=>x.speed(\"0.5\"))\n */",
		meta: {
			filename: "signal.mjs",
			lineno: 339,
			columnno: 0,
			path: "/Users/michaelgogins/cloud-music/strudel/packages/core",
			code: {
			}
		},
		description: "<p>Applies the given function with a 50% chance</p>",
		name: "sometimes",
		memberof: "Pattern",
		params: [
			{
				type: {
					names: [
						"function"
					]
				},
				description: "<p>the transformation to apply</p>",
				name: "function"
			}
		],
		returns: [
			{
				description: "<p>Pattern</p>"
			}
		],
		examples: [
			"s(\"hh*4\").sometimes(x=>x.speed(\"0.5\"))"
		],
		scope: "static",
		longname: "Pattern.sometimes",
		kind: "member",
		___id: "T000002R001383",
		___s: true
	},
	{
		comment: "/**\n *\n * Randomly applies the given function by the given probability on a cycle by cycle basis.\n * Similar to {@link Pattern#sometimesBy}\n *\n * @name someCyclesBy\n * @memberof Pattern\n * @param {number | Pattern} probability - a number between 0 and 1\n * @param {function} function - the transformation to apply\n * @returns Pattern\n * @example\n * s(\"hh(3,8)\").someCyclesBy(.3, x=>x.speed(\"0.5\"))\n */",
		meta: {
			filename: "signal.mjs",
			lineno: 354,
			columnno: 0,
			path: "/Users/michaelgogins/cloud-music/strudel/packages/core",
			code: {
			}
		},
		description: "<p>Randomly applies the given function by the given probability on a cycle by cycle basis.\nSimilar to {@link Pattern#sometimesBy}</p>",
		name: "someCyclesBy",
		memberof: "Pattern",
		params: [
			{
				type: {
					names: [
						"number",
						"Pattern"
					]
				},
				description: "<p>a number between 0 and 1</p>",
				name: "probability"
			},
			{
				type: {
					names: [
						"function"
					]
				},
				description: "<p>the transformation to apply</p>",
				name: "function"
			}
		],
		returns: [
			{
				description: "<p>Pattern</p>"
			}
		],
		examples: [
			"s(\"hh(3,8)\").someCyclesBy(.3, x=>x.speed(\"0.5\"))"
		],
		scope: "static",
		longname: "Pattern.someCyclesBy",
		kind: "member",
		___id: "T000002R001386",
		___s: true
	},
	{
		comment: "/**\n *\n * Shorthand for `.someCyclesBy(0.5, fn)`\n *\n * @name someCycles\n * @memberof Pattern\n * @returns Pattern\n * @example\n * s(\"hh(3,8)\").someCycles(x=>x.speed(\"0.5\"))\n */",
		meta: {
			filename: "signal.mjs",
			lineno: 379,
			columnno: 0,
			path: "/Users/michaelgogins/cloud-music/strudel/packages/core",
			code: {
			}
		},
		description: "<p>Shorthand for <code>.someCyclesBy(0.5, fn)</code></p>",
		name: "someCycles",
		memberof: "Pattern",
		returns: [
			{
				description: "<p>Pattern</p>"
			}
		],
		examples: [
			"s(\"hh(3,8)\").someCycles(x=>x.speed(\"0.5\"))"
		],
		scope: "static",
		longname: "Pattern.someCycles",
		kind: "member",
		___id: "T000002R001389",
		___s: true
	},
	{
		comment: "/**\n *\n * Shorthand for `.sometimesBy(0.75, fn)`\n *\n * @name often\n * @memberof Pattern\n * @returns Pattern\n * @example\n * s(\"hh*8\").often(x=>x.speed(\"0.5\"))\n */",
		meta: {
			filename: "signal.mjs",
			lineno: 393,
			columnno: 0,
			path: "/Users/michaelgogins/cloud-music/strudel/packages/core",
			code: {
			}
		},
		description: "<p>Shorthand for <code>.sometimesBy(0.75, fn)</code></p>",
		name: "often",
		memberof: "Pattern",
		returns: [
			{
				description: "<p>Pattern</p>"
			}
		],
		examples: [
			"s(\"hh*8\").often(x=>x.speed(\"0.5\"))"
		],
		scope: "static",
		longname: "Pattern.often",
		kind: "member",
		___id: "T000002R001392",
		___s: true
	},
	{
		comment: "/**\n *\n * Shorthand for `.sometimesBy(0.25, fn)`\n *\n * @name rarely\n * @memberof Pattern\n * @returns Pattern\n * @example\n * s(\"hh*8\").rarely(x=>x.speed(\"0.5\"))\n */",
		meta: {
			filename: "signal.mjs",
			lineno: 407,
			columnno: 0,
			path: "/Users/michaelgogins/cloud-music/strudel/packages/core",
			code: {
			}
		},
		description: "<p>Shorthand for <code>.sometimesBy(0.25, fn)</code></p>",
		name: "rarely",
		memberof: "Pattern",
		returns: [
			{
				description: "<p>Pattern</p>"
			}
		],
		examples: [
			"s(\"hh*8\").rarely(x=>x.speed(\"0.5\"))"
		],
		scope: "static",
		longname: "Pattern.rarely",
		kind: "member",
		___id: "T000002R001395",
		___s: true
	},
	{
		comment: "/**\n *\n * Shorthand for `.sometimesBy(0.1, fn)`\n *\n * @name almostNever\n * @memberof Pattern\n * @returns Pattern\n * @example\n * s(\"hh*8\").almostNever(x=>x.speed(\"0.5\"))\n */",
		meta: {
			filename: "signal.mjs",
			lineno: 421,
			columnno: 0,
			path: "/Users/michaelgogins/cloud-music/strudel/packages/core",
			code: {
			}
		},
		description: "<p>Shorthand for <code>.sometimesBy(0.1, fn)</code></p>",
		name: "almostNever",
		memberof: "Pattern",
		returns: [
			{
				description: "<p>Pattern</p>"
			}
		],
		examples: [
			"s(\"hh*8\").almostNever(x=>x.speed(\"0.5\"))"
		],
		scope: "static",
		longname: "Pattern.almostNever",
		kind: "member",
		___id: "T000002R001398",
		___s: true
	},
	{
		comment: "/**\n *\n * Shorthand for `.sometimesBy(0.9, fn)`\n *\n * @name almostAlways\n * @memberof Pattern\n * @returns Pattern\n * @example\n * s(\"hh*8\").almostAlways(x=>x.speed(\"0.5\"))\n */",
		meta: {
			filename: "signal.mjs",
			lineno: 435,
			columnno: 0,
			path: "/Users/michaelgogins/cloud-music/strudel/packages/core",
			code: {
			}
		},
		description: "<p>Shorthand for <code>.sometimesBy(0.9, fn)</code></p>",
		name: "almostAlways",
		memberof: "Pattern",
		returns: [
			{
				description: "<p>Pattern</p>"
			}
		],
		examples: [
			"s(\"hh*8\").almostAlways(x=>x.speed(\"0.5\"))"
		],
		scope: "static",
		longname: "Pattern.almostAlways",
		kind: "member",
		___id: "T000002R001401",
		___s: true
	},
	{
		comment: "/**\n *\n * Shorthand for `.sometimesBy(0, fn)` (never calls fn)\n *\n * @name never\n * @memberof Pattern\n * @returns Pattern\n * @example\n * s(\"hh*8\").never(x=>x.speed(\"0.5\"))\n */",
		meta: {
			filename: "signal.mjs",
			lineno: 449,
			columnno: 0,
			path: "/Users/michaelgogins/cloud-music/strudel/packages/core",
			code: {
			}
		},
		description: "<p>Shorthand for <code>.sometimesBy(0, fn)</code> (never calls fn)</p>",
		name: "never",
		memberof: "Pattern",
		returns: [
			{
				description: "<p>Pattern</p>"
			}
		],
		examples: [
			"s(\"hh*8\").never(x=>x.speed(\"0.5\"))"
		],
		scope: "static",
		longname: "Pattern.never",
		kind: "member",
		___id: "T000002R001404",
		___s: true
	},
	{
		comment: "/**\n *\n * Shorthand for `.sometimesBy(1, fn)` (always calls fn)\n *\n * @name always\n * @memberof Pattern\n * @returns Pattern\n * @example\n * s(\"hh*8\").always(x=>x.speed(\"0.5\"))\n */",
		meta: {
			filename: "signal.mjs",
			lineno: 463,
			columnno: 0,
			path: "/Users/michaelgogins/cloud-music/strudel/packages/core",
			code: {
			}
		},
		description: "<p>Shorthand for <code>.sometimesBy(1, fn)</code> (always calls fn)</p>",
		name: "always",
		memberof: "Pattern",
		returns: [
			{
				description: "<p>Pattern</p>"
			}
		],
		examples: [
			"s(\"hh*8\").always(x=>x.speed(\"0.5\"))"
		],
		scope: "static",
		longname: "Pattern.always",
		kind: "member",
		___id: "T000002R001407",
		___s: true
	},
	{
		comment: "/**\n * @deprecated does not appear to be referenced or invoked anywhere in the codebase\n */",
		meta: {
			range: [
				2462,
				2621
			],
			filename: "util.mjs",
			lineno: 62,
			columnno: 0,
			path: "/Users/michaelgogins/cloud-music/strudel/packages/core",
			code: {
				id: "astnode100022850",
				name: "exports.getFreq",
				type: "VariableDeclaration"
			}
		},
		deprecated: "does not appear to be referenced or invoked anywhere in the codebase",
		name: "getFreq",
		longname: "getFreq",
		kind: "constant",
		scope: "global",
		___id: "T000002R001636",
		___s: true
	},
	{
		comment: "/**\n * @deprecated does not appear to be referenced or invoked anywhere in the codebase\n */",
		meta: {
			range: [
				2715,
				2896
			],
			filename: "util.mjs",
			lineno: 72,
			columnno: 0,
			path: "/Users/michaelgogins/cloud-music/strudel/packages/core",
			code: {
				id: "astnode100022873",
				name: "exports.midi2note",
				type: "VariableDeclaration"
			}
		},
		deprecated: "does not appear to be referenced or invoked anywhere in the codebase",
		name: "midi2note",
		longname: "midi2note",
		kind: "constant",
		scope: "global",
		___id: "T000002R001638",
		___s: true
	},
	{
		comment: "/**\n * Sends notes to Csound for rendering with MIDI semantics. The hap value is\n * translated to these Csound pfields:\n *\n *  p1 -- Csound instrument either as a number (1-based, can be a fraction),\n *        or as a string name.\n *  p2 -- time in beats (usually seconds) from start of performance.\n *  p3 -- duration in beats (usually seconds).\n *  p4 -- MIDI key number (as a real number, not an integer but in [0, 127].\n *  p5 -- MIDI velocity (as a real number, not an integer but in [0, 127].\n *  p6 -- Strudel controls, as a string.\n */",
		meta: {
			range: [
				4631,
				5953
			],
			filename: "csound.mjs",
			lineno: 138,
			columnno: 0,
			path: "/Users/michaelgogins/cloud-music/strudel/packages/csound",
			code: {
				id: "astnode100024496",
				name: "exports.csoundm",
				type: "VariableDeclaration"
			}
		},
		description: "<p>Sends notes to Csound for rendering with MIDI semantics. The hap value is\ntranslated to these Csound pfields:</p>\n<p>p1 -- Csound instrument either as a number (1-based, can be a fraction),\nor as a string name.\np2 -- time in beats (usually seconds) from start of performance.\np3 -- duration in beats (usually seconds).\np4 -- MIDI key number (as a real number, not an integer but in [0, 127].\np5 -- MIDI velocity (as a real number, not an integer but in [0, 127].\np6 -- Strudel controls, as a string.</p>",
		name: "csoundm",
		longname: "csoundm",
		kind: "constant",
		scope: "global",
		___id: "T000002R001793",
		___s: true
	},
	{
		comment: "/**\n  * C S O U N D A C   M O D U L E   F O R   S T R U D E L\n  * Author: Michael Gogins\n  * \n  * [csound-ac](https://github.com/gogins/csound-ac), or CsoundAC, is a C++ \n  * algorithmic composition library designed for use with Csound.\n  *\n  * [csound-wasm](https://github.com/gogins/csound-wasm) is a WebAssembly \n  * library containing both Csound and CsoundAC, with a JavaScript API, \n  * designed for use in Web browsers and npm applications.\n  *\n  * This module brings chords and scales, and operations upon them, \n  * from the CsoundAC library for algorithmic composition into the \n  * Strudel (Tidal Cycles-based) JavaScript pattern language.\n  *\n  * The operations herein act upon the pitch values in Patterns. The resulting \n  * Patterns must still go through the Strudel note Pattern in order to trigger \n  * an audio output.\n  *\n  * Please note, the CsoundAC objects such as Chords, Scales, and PITV \n  * groups must be created before any Patterns, and passed into the \n  * appropriate Patterns, where they may be modified by reference.\n  */",
		meta: {
			range: [
				1242,
				1250
			],
			filename: "csoundac.mjs",
			lineno: 29,
			columnno: 4,
			path: "/Users/michaelgogins/cloud-music/strudel/packages/csoundac",
			code: {
				id: "astnode100024690",
				name: "csoundac"
			}
		},
		description: "<p>C S O U N D A C   M O D U L E   F O R   S T R U D E L\nAuthor: Michael Gogins</p>\n<p><a href=\"https://github.com/gogins/csound-ac\">csound-ac</a>, or CsoundAC, is a C++\nalgorithmic composition library designed for use with Csound.</p>\n<p><a href=\"https://github.com/gogins/csound-wasm\">csound-wasm</a> is a WebAssembly\nlibrary containing both Csound and CsoundAC, with a JavaScript API,\ndesigned for use in Web browsers and npm applications.</p>\n<p>This module brings chords and scales, and operations upon them,\nfrom the CsoundAC library for algorithmic composition into the\nStrudel (Tidal Cycles-based) JavaScript pattern language.</p>\n<p>The operations herein act upon the pitch values in Patterns. The resulting\nPatterns must still go through the Strudel note Pattern in order to trigger\nan audio output.</p>\n<p>Please note, the CsoundAC objects such as Chords, Scales, and PITV\ngroups must be created before any Patterns, and passed into the\nappropriate Patterns, where they may be modified by reference.</p>",
		name: "csoundac",
		longname: "csoundac",
		kind: "member",
		scope: "global",
		params: [
		],
		___id: "T000002R001807",
		___s: true
	},
	{
		comment: "/**\n * Enables or disables print statement debugging in this module.\n */",
		meta: {
			range: [
				1354,
				1426
			],
			filename: "csoundac.mjs",
			lineno: 35,
			columnno: 0,
			path: "/Users/michaelgogins/cloud-music/strudel/packages/csoundac",
			code: {
				id: "astnode100024696",
				name: "exports.csacDebugging",
				type: "FunctionDeclaration",
				paramnames: [
					"enabled"
				]
			}
		},
		description: "<p>Enables or disables print statement debugging in this module.</p>",
		name: "csacDebugging",
		longname: "csacDebugging",
		kind: "function",
		scope: "global",
		___id: "T000002R001809",
		___s: true
	},
	{
		comment: "/**\n * A utility that returns the MIDI key number for a frequency in Hz, \n * as a real number allowing fractions for microtones.\n */",
		meta: {
			range: [
				1561,
				1766
			],
			filename: "csoundac.mjs",
			lineno: 43,
			columnno: 0,
			path: "/Users/michaelgogins/cloud-music/strudel/packages/csoundac",
			code: {
				id: "astnode100024705",
				name: "exports.frequencyToMidiReal",
				type: "FunctionDeclaration",
				paramnames: [
					"frequency"
				]
			}
		},
		description: "<p>A utility that returns the MIDI key number for a frequency in Hz,\nas a real number allowing fractions for microtones.</p>",
		name: "frequencyToMidiReal",
		longname: "frequencyToMidiReal",
		kind: "function",
		scope: "global",
		___id: "T000002R001812",
		___s: true
	},
	{
		comment: "/**\n  * A utility that returns the MIDI key number for a frequency in Hz, \n  * as the nearest integer.\n  */",
		meta: {
			range: [
				1876,
				2009
			],
			filename: "csoundac.mjs",
			lineno: 54,
			columnno: 0,
			path: "/Users/michaelgogins/cloud-music/strudel/packages/csoundac",
			code: {
				id: "astnode100024742",
				name: "exports.frequencyToMidiInteger",
				type: "FunctionDeclaration",
				paramnames: [
					"frequency"
				]
			}
		},
		description: "<p>A utility that returns the MIDI key number for a frequency in Hz,\nas the nearest integer.</p>",
		name: "frequencyToMidiInteger",
		longname: "frequencyToMidiInteger",
		kind: "function",
		scope: "global",
		___id: "T000002R001817",
		___s: true
	},
	{
		comment: "/**\n  * Initializes the CsoundAC WebAssembly library. Normally, \n  * this is set in globalThis by a containing program. \n  * This function should be called from module scope in \n  * Tidal code before creating any Patterns.\n  */",
		meta: {
			range: [
				2239,
				2447
			],
			filename: "csoundac.mjs",
			lineno: 65,
			columnno: 0,
			path: "/Users/michaelgogins/cloud-music/strudel/packages/csoundac",
			code: {
				id: "astnode100024759",
				name: "exports.csacLoad",
				type: "FunctionDeclaration",
				paramnames: [
				]
			}
		},
		description: "<p>Initializes the CsoundAC WebAssembly library. Normally,\nthis is set in globalThis by a containing program.\nThis function should be called from module scope in\nTidal code before creating any Patterns.</p>",
		name: "csacLoad",
		longname: "csacLoad",
		kind: "function",
		scope: "global",
		___id: "T000002R001820",
		___s: true
	},
	{
		comment: "/**\n  * A utility for making a _value_ copy of a Chord (or a Scale, which \n  * is derived from Chord). Object b is resized to the size of a, and a's \n  * pitches are copied to b. Currently, only pitches are copied.\n  */",
		meta: {
			range: [
				2669,
				3003
			],
			filename: "csoundac.mjs",
			lineno: 80,
			columnno: 0,
			path: "/Users/michaelgogins/cloud-music/strudel/packages/csoundac",
			code: {
				id: "astnode100024786",
				name: "exports.csacCopy",
				type: "FunctionDeclaration",
				paramnames: [
					"a",
					"b"
				]
			}
		},
		description: "<p>A utility for making a <em>value</em> copy of a Chord (or a Scale, which\nis derived from Chord). Object b is resized to the size of a, and a's\npitches are copied to b. Currently, only pitches are copied.</p>",
		name: "csacCopy",
		longname: "csacCopy",
		kind: "function",
		scope: "global",
		___id: "T000002R001823",
		___s: true
	},
	{
		comment: "/**\n  * Creates and initializes a CsoundAC Chord object. This function should be \n  * called from module scope in Tidal code before creating any Patterns. The \n  * Chord class is based on Dmitri Tymoczko's model of chord space, and \n  * represents an equally tempered chord of the specified number of voices as \n  * a single point in chord space, where each dimension of the space \n  * corresponds to one voice of the Chord. Chords are equipped with numerous \n  * operations from pragmatic music theory, atonal music theory, and \n  * neo-Riemannian music theory.\n  */",
		meta: {
			range: [
				3573,
				3830
			],
			filename: "csoundac.mjs",
			lineno: 100,
			columnno: 0,
			path: "/Users/michaelgogins/cloud-music/strudel/packages/csoundac",
			code: {
				id: "astnode100024838",
				name: "exports.csacChord",
				type: "FunctionDeclaration",
				paramnames: [
					"name"
				]
			}
		},
		description: "<p>Creates and initializes a CsoundAC Chord object. This function should be\ncalled from module scope in Tidal code before creating any Patterns. The\nChord class is based on Dmitri Tymoczko's model of chord space, and\nrepresents an equally tempered chord of the specified number of voices as\na single point in chord space, where each dimension of the space\ncorresponds to one voice of the Chord. Chords are equipped with numerous\noperations from pragmatic music theory, atonal music theory, and\nneo-Riemannian music theory.</p>",
		name: "csacChord",
		longname: "csacChord",
		kind: "function",
		scope: "global",
		___id: "T000002R001828",
		___s: true
	},
	{
		comment: "/**\n  * A Pattern that transposes the specified Chord by the specified number \n  * of semitones. This enables transposing Chords in a patternified way.\n  */",
		meta: {
			range: [
				3989,
				4471
			],
			filename: "csoundac.mjs",
			lineno: 112,
			columnno: 0,
			path: "/Users/michaelgogins/cloud-music/strudel/packages/csoundac",
			code: {
				id: "astnode100024876",
				name: "exports.chordT",
				type: "VariableDeclaration"
			}
		},
		description: "<p>A Pattern that transposes the specified Chord by the specified number\nof semitones. This enables transposing Chords in a patternified way.</p>",
		name: "chordT",
		longname: "chordT",
		kind: "constant",
		scope: "global",
		___id: "T000002R001831",
		___s: true
	},
	{
		comment: "/**\n  * A Pattern that reflects the specified Chord in the specified center. \n  * This enables inverting Chords in a patternified way.\n  */",
		meta: {
			range: [
				4613,
				5126
			],
			filename: "csoundac.mjs",
			lineno: 128,
			columnno: 0,
			path: "/Users/michaelgogins/cloud-music/strudel/packages/csoundac",
			code: {
				id: "astnode100024956",
				name: "exports.chordI",
				type: "VariableDeclaration"
			}
		},
		description: "<p>A Pattern that reflects the specified Chord in the specified center.\nThis enables inverting Chords in a patternified way.</p>",
		name: "chordI",
		longname: "chordI",
		kind: "constant",
		scope: "global",
		___id: "T000002R001835",
		___s: true
	},
	{
		comment: "/**\n  * A Pattern that transforms the specified Chord using the interchange by \n  * inversion operation of the Generalized Contextual Group of Fiore and \n  * Satyendra. This enables exchanging a \"major\" sounding pitch-class set with \n  * the corresponding \"minor\" sounding pitch-class set, and vice versa, in a \n  * patternified way.\n  */",
		meta: {
			range: [
				5467,
				5921
			],
			filename: "csoundac.mjs",
			lineno: 148,
			columnno: 0,
			path: "/Users/michaelgogins/cloud-music/strudel/packages/csoundac",
			code: {
				id: "astnode100025039",
				name: "exports.chordK",
				type: "VariableDeclaration"
			}
		},
		description: "<p>A Pattern that transforms the specified Chord using the interchange by\ninversion operation of the Generalized Contextual Group of Fiore and\nSatyendra. This enables exchanging a &quot;major&quot; sounding pitch-class set with\nthe corresponding &quot;minor&quot; sounding pitch-class set, and vice versa, in a\npatternified way.</p>",
		name: "chordK",
		longname: "chordK",
		kind: "constant",
		scope: "global",
		___id: "T000002R001839",
		___s: true
	},
	{
		comment: "/**\n  * A Pattern that transforms the specified Chord using the contextual \n  * transposition operation of the Generalized Contextual Group of Fiore and \n  * Satyendra. This enables tranposing the specified Chord by the specified \n  * number of semitones _up_ if the Chord is a _transposed_ form of the \n  * modality Chord, and by the specified number of semitones _down_ if the \n  * Chord is an _inverted_ form of the modality Chord. This enables applying \n  * contextual transpositions to Chords in a patternified way.\n  */",
		meta: {
			range: [
				6449,
				6961
			],
			filename: "csoundac.mjs",
			lineno: 169,
			columnno: 0,
			path: "/Users/michaelgogins/cloud-music/strudel/packages/csoundac",
			code: {
				id: "astnode100025118",
				name: "exports.chordQ",
				type: "VariableDeclaration"
			}
		},
		description: "<p>A Pattern that transforms the specified Chord using the contextual\ntransposition operation of the Generalized Contextual Group of Fiore and\nSatyendra. This enables tranposing the specified Chord by the specified\nnumber of semitones <em>up</em> if the Chord is a <em>transposed</em> form of the\nmodality Chord, and by the specified number of semitones <em>down</em> if the\nChord is an <em>inverted</em> form of the modality Chord. This enables applying\ncontextual transpositions to Chords in a patternified way.</p>",
		name: "chordQ",
		longname: "chordQ",
		kind: "constant",
		scope: "global",
		___id: "T000002R001843",
		___s: true
	},
	{
		comment: "/**\n  * A Pattern that conforms _notes_ to the closest _note_ of the \n  * specified (presumably voiced) Chord.\n  */",
		meta: {
			range: [
				7079,
				7699
			],
			filename: "csoundac.mjs",
			lineno: 185,
			columnno: 0,
			path: "/Users/michaelgogins/cloud-music/strudel/packages/csoundac",
			code: {
				id: "astnode100025204",
				name: "exports.chordNV",
				type: "VariableDeclaration"
			}
		},
		description: "<p>A Pattern that conforms <em>notes</em> to the closest <em>note</em> of the\nspecified (presumably voiced) Chord.</p>",
		name: "chordNV",
		longname: "chordNV",
		kind: "constant",
		scope: "global",
		___id: "T000002R001847",
		___s: true
	},
	{
		comment: "/**\n  * A Pattern that conforms _pitch-classes_ to the closest _pitch-class set_ \n  * of the specified Chord.\n  */",
		meta: {
			range: [
				7816,
				8449
			],
			filename: "csoundac.mjs",
			lineno: 206,
			columnno: 0,
			path: "/Users/michaelgogins/cloud-music/strudel/packages/csoundac",
			code: {
				id: "astnode100025294",
				name: "exports.chordN",
				type: "VariableDeclaration"
			}
		},
		description: "<p>A Pattern that conforms <em>pitch-classes</em> to the closest <em>pitch-class set</em>\nof the specified Chord.</p>",
		name: "chordN",
		longname: "chordN",
		kind: "constant",
		scope: "global",
		___id: "T000002R001854",
		___s: true
	},
	{
		comment: "/**\n  * Creates and initializes a CsoundAC Scale object. This function should be \n  * called from module scope in Tidal code before creating any Patterns. The \n  * Scale class is derived from the CsoundAC Chord class, but has been \n  * equipped with additional methods based on Dimitri Tymoczko's model of \n  * functional harmony. This enables algorithmically generating Chords from \n  * scale degrees, transposing Chords by scale degrees, generating all \n  * possible modulations given a pivot chord, and implementing secondary \n  * dominants and tonicizations based on scale degree.\n  */",
		meta: {
			range: [
				9041,
				9294
			],
			filename: "csoundac.mjs",
			lineno: 233,
			columnno: 0,
			path: "/Users/michaelgogins/cloud-music/strudel/packages/csoundac",
			code: {
				id: "astnode100025387",
				name: "exports.csacScale",
				type: "FunctionDeclaration",
				paramnames: [
					"name"
				]
			}
		},
		description: "<p>Creates and initializes a CsoundAC Scale object. This function should be\ncalled from module scope in Tidal code before creating any Patterns. The\nScale class is derived from the CsoundAC Chord class, but has been\nequipped with additional methods based on Dimitri Tymoczko's model of\nfunctional harmony. This enables algorithmically generating Chords from\nscale degrees, transposing Chords by scale degrees, generating all\npossible modulations given a pivot chord, and implementing secondary\ndominants and tonicizations based on scale degree.</p>",
		name: "csacScale",
		longname: "csacScale",
		kind: "function",
		scope: "global",
		___id: "T000002R001861",
		___s: true
	},
	{
		comment: "/**\n  * A Pattern that returns the Chord corresponding to the specified scale step \n  * of the Scale object. This enables generating tonal chord progressions in a \n  * patternified way. The Chord is returned in the argument and can then be \n  * used in Chord-based Patterns.\n  */",
		meta: {
			range: [
				9576,
				10006
			],
			filename: "csoundac.mjs",
			lineno: 247,
			columnno: 0,
			path: "/Users/michaelgogins/cloud-music/strudel/packages/csoundac",
			code: {
				id: "astnode100025425",
				name: "exports.scaleS",
				type: "VariableDeclaration"
			}
		},
		description: "<p>A Pattern that returns the Chord corresponding to the specified scale step\nof the Scale object. This enables generating tonal chord progressions in a\npatternified way. The Chord is returned in the argument and can then be\nused in Chord-based Patterns.</p>",
		name: "scaleS",
		longname: "scaleS",
		kind: "constant",
		scope: "global",
		___id: "T000002R001864",
		___s: true
	},
	{
		comment: "/**\n  * A Pattern that transposes the specified Chord by the specified number of \n  * scale degrees, in the specified Scale. This enables generating tonal chord  \n  * progressions within the Scale in a patternified way. The transposed Chord \n  * is returned in the argument and can then be used in Chord-based Patterns.\n  */",
		meta: {
			range: [
				10333,
				10778
			],
			filename: "csoundac.mjs",
			lineno: 262,
			columnno: 0,
			path: "/Users/michaelgogins/cloud-music/strudel/packages/csoundac",
			code: {
				id: "astnode100025492",
				name: "exports.scaleT",
				type: "VariableDeclaration"
			}
		},
		description: "<p>A Pattern that transposes the specified Chord by the specified number of\nscale degrees, in the specified Scale. This enables generating tonal chord<br>\nprogressions within the Scale in a patternified way. The transposed Chord\nis returned in the argument and can then be used in Chord-based Patterns.</p>",
		name: "scaleT",
		longname: "scaleT",
		kind: "constant",
		scope: "global",
		___id: "T000002R001867",
		___s: true
	},
	{
		comment: "/**\n  * A Pattern that modulates from one Scale to another, assuming that the \n  * specified Chord is a pivot chord in the specified Scale. This enables \n  * generating correct tonal key changes in a patternified way. The new \n  * Scale is returned in the argument and can then be used in Scale-based \n  * Patterns. The specified index picks one of the possible modulations.\n  */",
		meta: {
			range: [
				11160,
				12147
			],
			filename: "csoundac.mjs",
			lineno: 278,
			columnno: 0,
			path: "/Users/michaelgogins/cloud-music/strudel/packages/csoundac",
			code: {
				id: "astnode100025557",
				name: "exports.scaleM",
				type: "VariableDeclaration"
			}
		},
		description: "<p>A Pattern that modulates from one Scale to another, assuming that the\nspecified Chord is a pivot chord in the specified Scale. This enables\ngenerating correct tonal key changes in a patternified way. The new\nScale is returned in the argument and can then be used in Scale-based\nPatterns. The specified index picks one of the possible modulations.</p>",
		name: "scaleM",
		longname: "scaleM",
		kind: "constant",
		scope: "global",
		___id: "T000002R001870",
		___s: true
	},
	{
		comment: "/**\n  * A Pattern that conforms notes to the closest pitch-class of the \n  * specified Scale.\n  */",
		meta: {
			range: [
				12248,
				12830
			],
			filename: "csoundac.mjs",
			lineno: 307,
			columnno: 0,
			path: "/Users/michaelgogins/cloud-music/strudel/packages/csoundac",
			code: {
				id: "astnode100025689",
				name: "exports.scaleN",
				type: "VariableDeclaration"
			}
		},
		description: "<p>A Pattern that conforms notes to the closest pitch-class of the\nspecified Scale.</p>",
		name: "scaleN",
		longname: "scaleN",
		kind: "constant",
		scope: "global",
		___id: "T000002R001880",
		___s: true
	},
	{
		comment: "/**\n  * Creates and initializes a CsoundAC PITV object. This function should be \n  * called from module scope in Tidal code before creating any Patterns. The \n  * PITV object is a 4 dimensional cyclic group whose dimensions are TI set \n  * class (P), chord inversion (I), pitch-class transposition (T), and index \n  * of octavewise revoicing within the specified range (V). The elements of \n  * the group are chords in 12 tone equal temperament with the specified \n  * number of voices. There is a one-to-one mapping between PITV indices and \n  * chords, such that each voiced chord corresponds to a PITV index, and each \n  * PITV index corresponds to a voiced chord. This enables algorithmically \n  * generating harmonies and voicings by independently varying P, I, T, and V.\n  */",
		meta: {
			range: [
				13614,
				13930
			],
			filename: "csoundac.mjs",
			lineno: 336,
			columnno: 0,
			path: "/Users/michaelgogins/cloud-music/strudel/packages/csoundac",
			code: {
				id: "astnode100025764",
				name: "exports.csacPitv",
				type: "FunctionDeclaration",
				paramnames: [
					"voices",
					"range"
				]
			}
		},
		description: "<p>Creates and initializes a CsoundAC PITV object. This function should be\ncalled from module scope in Tidal code before creating any Patterns. The\nPITV object is a 4 dimensional cyclic group whose dimensions are TI set\nclass (P), chord inversion (I), pitch-class transposition (T), and index\nof octavewise revoicing within the specified range (V). The elements of\nthe group are chords in 12 tone equal temperament with the specified\nnumber of voices. There is a one-to-one mapping between PITV indices and\nchords, such that each voiced chord corresponds to a PITV index, and each\nPITV index corresponds to a voiced chord. This enables algorithmically\ngenerating harmonies and voicings by independently varying P, I, T, and V.</p>",
		name: "csacPitv",
		longname: "csacPitv",
		kind: "function",
		scope: "global",
		___id: "T000002R001887",
		___s: true
	},
	{
		comment: "/**\n  * A Pattern that sets the indicated set-type index in the PITV object. This \n  * enables mutating Chords in a patternified way.\n  */",
		meta: {
			range: [
				14071,
				14293
			],
			filename: "csoundac.mjs",
			lineno: 353,
			columnno: 0,
			path: "/Users/michaelgogins/cloud-music/strudel/packages/csoundac",
			code: {
				id: "astnode100025830",
				name: "exports.pitvP",
				type: "VariableDeclaration"
			}
		},
		description: "<p>A Pattern that sets the indicated set-type index in the PITV object. This\nenables mutating Chords in a patternified way.</p>",
		name: "pitvP",
		longname: "pitvP",
		kind: "constant",
		scope: "global",
		___id: "T000002R001894",
		___s: true
	},
	{
		comment: "/**\n  * A Pattern that sets the indicated index of inversion in the PITV object. \n  * This enables inverting a PITV element in a patternified way.\n  */",
		meta: {
			range: [
				14447,
				14649
			],
			filename: "csoundac.mjs",
			lineno: 365,
			columnno: 0,
			path: "/Users/michaelgogins/cloud-music/strudel/packages/csoundac",
			code: {
				id: "astnode100025877",
				name: "exports.pitvI",
				type: "VariableDeclaration"
			}
		},
		description: "<p>A Pattern that sets the indicated index of inversion in the PITV object.\nThis enables inverting a PITV element in a patternified way.</p>",
		name: "pitvI",
		longname: "pitvI",
		kind: "constant",
		scope: "global",
		___id: "T000002R001897",
		___s: true
	},
	{
		comment: "/**\n  * A Pattern that sets the indicated index of pitch-class transposition in \n  * the PITV object. This enables transposing a PITV element in a patternified \n  * way.\n  */",
		meta: {
			range: [
				14826,
				15048
			],
			filename: "csoundac.mjs",
			lineno: 378,
			columnno: 0,
			path: "/Users/michaelgogins/cloud-music/strudel/packages/csoundac",
			code: {
				id: "astnode100025922",
				name: "exports.pitvT",
				type: "VariableDeclaration"
			}
		},
		description: "<p>A Pattern that sets the indicated index of pitch-class transposition in\nthe PITV object. This enables transposing a PITV element in a patternified\nway.</p>",
		name: "pitvT",
		longname: "pitvT",
		kind: "constant",
		scope: "global",
		___id: "T000002R001900",
		___s: true
	},
	{
		comment: "/**\n  * A Pattern that sets the indicated index of octavewise revoicing in the \n  * PITV object. This enables revoicing a PITV element in a patternified way.\n  */",
		meta: {
			range: [
				15213,
				15435
			],
			filename: "csoundac.mjs",
			lineno: 390,
			columnno: 0,
			path: "/Users/michaelgogins/cloud-music/strudel/packages/csoundac",
			code: {
				id: "astnode100025969",
				name: "exports.pitvV",
				type: "VariableDeclaration"
			}
		},
		description: "<p>A Pattern that sets the indicated index of octavewise revoicing in the\nPITV object. This enables revoicing a PITV element in a patternified way.</p>",
		name: "pitvV",
		longname: "pitvV",
		kind: "constant",
		scope: "global",
		___id: "T000002R001903",
		___s: true
	},
	{
		comment: "/**\n  * A Pattern that that conforms the notes of a Pattern to the current \n  * element of the PITV object. The notes are moved to the closest _note_ \n  * of the chord _voicing_ of the PITV element.\n  */",
		meta: {
			range: [
				15641,
				16329
			],
			filename: "csoundac.mjs",
			lineno: 403,
			columnno: 0,
			path: "/Users/michaelgogins/cloud-music/strudel/packages/csoundac",
			code: {
				id: "astnode100026016",
				name: "exports.pitvNV",
				type: "VariableDeclaration"
			}
		},
		description: "<p>A Pattern that that conforms the notes of a Pattern to the current\nelement of the PITV object. The notes are moved to the closest <em>note</em>\nof the chord <em>voicing</em> of the PITV element.</p>",
		name: "pitvNV",
		longname: "pitvNV",
		kind: "constant",
		scope: "global",
		___id: "T000002R001906",
		___s: true
	},
	{
		comment: "/**\n  * A Pattern that that conforms the notes of a Pattern to the current \n  * element of the PITV object. The notes are moved to the closest _pitch- \n  * class_ of the _pitch-class set_ of the PITV element.\n  */",
		meta: {
			range: [
				16545,
				17376
			],
			filename: "csoundac.mjs",
			lineno: 426,
			columnno: 0,
			path: "/Users/michaelgogins/cloud-music/strudel/packages/csoundac",
			code: {
				id: "astnode100026119",
				name: "exports.pitvN",
				type: "VariableDeclaration"
			}
		},
		description: "<p>A Pattern that that conforms the notes of a Pattern to the current\nelement of the PITV object. The notes are moved to the closest <em>pitch-\nclass</em> of the <em>pitch-class set</em> of the PITV element.</p>",
		name: "pitvN",
		longname: "pitvN",
		kind: "constant",
		scope: "global",
		___id: "T000002R001914",
		___s: true
	},
	{
		comment: "/**\n *\n * Sends each hap as an OSC message, which can be picked up by SuperCollider or any other OSC-enabled software.\n *\n * @name osc\n * @memberof Pattern\n * @returns Pattern\n */",
		meta: {
			filename: "osc.mjs",
			lineno: 39,
			columnno: 0,
			path: "/Users/michaelgogins/cloud-music/strudel/packages/osc",
			code: {
			}
		},
		description: "<p>Sends each hap as an OSC message, which can be picked up by SuperCollider or any other OSC-enabled software.</p>",
		name: "osc",
		memberof: "Pattern",
		returns: [
			{
				description: "<p>Pattern</p>"
			}
		],
		scope: "static",
		longname: "Pattern.osc",
		kind: "member",
		___id: "T000002R003335",
		___s: true
	},
	{
		comment: "/**\n * Change the pitch of each value by the given amount. Expects numbers or note strings as values.\n * The amount can be given as a number of semitones or as a string in interval short notation.\n * If you don't care about enharmonic correctness, just use numbers. Otherwise, pass the interval of\n * the form: ST where S is the degree number and T the type of interval with\n *\n * - M = major\n * - m = minor\n * - P = perfect\n * - A = augmented\n * - d = diminished\n *\n * Examples intervals:\n *\n * - 1P = unison\n * - 3M = major third\n * - 3m = minor third\n * - 4P = perfect fourth\n * - 4A = augmented fourth\n * - 5P = perfect fifth\n * - 5d = diminished fifth\n *\n * @param {string | number} amount Either number of semitones or interval string.\n * @returns Pattern\n * @memberof Pattern\n * @name transpose\n * @example\n * \"c2 c3\".fast(2).transpose(\"<0 -2 5 3>\".slow(2)).note()\n * @example\n * \"c2 c3\".fast(2).transpose(\"<1P -2M 4P 3m>\".slow(2)).note()\n */",
		meta: {
			filename: "tonal.mjs",
			lineno: 45,
			columnno: 0,
			path: "/Users/michaelgogins/cloud-music/strudel/packages/tonal",
			code: {
			}
		},
		description: "<p>Change the pitch of each value by the given amount. Expects numbers or note strings as values.\nThe amount can be given as a number of semitones or as a string in interval short notation.\nIf you don't care about enharmonic correctness, just use numbers. Otherwise, pass the interval of\nthe form: ST where S is the degree number and T the type of interval with</p>\n<ul>\n<li>M = major</li>\n<li>m = minor</li>\n<li>P = perfect</li>\n<li>A = augmented</li>\n<li>d = diminished</li>\n</ul>\n<p>Examples intervals:</p>\n<ul>\n<li>1P = unison</li>\n<li>3M = major third</li>\n<li>3m = minor third</li>\n<li>4P = perfect fourth</li>\n<li>4A = augmented fourth</li>\n<li>5P = perfect fifth</li>\n<li>5d = diminished fifth</li>\n</ul>",
		params: [
			{
				type: {
					names: [
						"string",
						"number"
					]
				},
				description: "<p>Either number of semitones or interval string.</p>",
				name: "amount"
			}
		],
		returns: [
			{
				description: "<p>Pattern</p>"
			}
		],
		memberof: "Pattern",
		name: "transpose",
		examples: [
			"\"c2 c3\".fast(2).transpose(\"<0 -2 5 3>\".slow(2)).note()",
			"\"c2 c3\".fast(2).transpose(\"<1P -2M 4P 3m>\".slow(2)).note()"
		],
		scope: "static",
		longname: "Pattern.transpose",
		kind: "member",
		___id: "T000002R004002",
		___s: true
	},
	{
		comment: "/**\n * Transposes notes inside the scale by the number of steps.\n * Expected to be called on a Pattern which already has a {@link Pattern#scale}\n *\n * @memberof Pattern\n * @name scaleTranspose\n * @param {offset} offset number of steps inside the scale\n * @returns Pattern\n * @example\n * \"-8 [2,4,6]\"\n * .scale('C4 bebop major')\n * .scaleTranspose(\"<0 -1 -2 -3 -4 -5 -6 -4>\")\n * .note()\n */",
		meta: {
			filename: "tonal.mjs",
			lineno: 96,
			columnno: 0,
			path: "/Users/michaelgogins/cloud-music/strudel/packages/tonal",
			code: {
			}
		},
		description: "<p>Transposes notes inside the scale by the number of steps.\nExpected to be called on a Pattern which already has a {@link Pattern#scale}</p>",
		memberof: "Pattern",
		name: "scaleTranspose",
		params: [
			{
				type: {
					names: [
						"offset"
					]
				},
				description: "<p>number of steps inside the scale</p>",
				name: "offset"
			}
		],
		returns: [
			{
				description: "<p>Pattern</p>"
			}
		],
		examples: [
			"\"-8 [2,4,6]\"\n.scale('C4 bebop major')\n.scaleTranspose(\"<0 -1 -2 -3 -4 -5 -6 -4>\")\n.note()"
		],
		scope: "static",
		longname: "Pattern.scaleTranspose",
		kind: "member",
		___id: "T000002R004007",
		___s: true
	},
	{
		comment: "/**\n * Turns numbers into notes in the scale (zero indexed). Also sets scale for other scale operations, like {@link Pattern#scaleTranspose}.\n *\n * The scale name has the form \"TO? N\" wher\n *\n * - T = Tonic\n * - O = Octave (optional, defaults to 3)\n * - N = Name of scale, available names can be found [here](https://github.com/tonaljs/tonal/blob/main/packages/scale-type/data.ts).\n *\n * @memberof Pattern\n * @name scale\n * @param {string} scale Name of scale\n * @returns Pattern\n * @example\n * \"0 2 4 6 4 2\"\n * .scale(seq('C2 major', 'C2 minor').slow(2))\n * .note()\n */",
		meta: {
			filename: "tonal.mjs",
			lineno: 123,
			columnno: 0,
			path: "/Users/michaelgogins/cloud-music/strudel/packages/tonal",
			code: {
			}
		},
		description: "<p>Turns numbers into notes in the scale (zero indexed). Also sets scale for other scale operations, like {@link Pattern#scaleTranspose}.</p>\n<p>The scale name has the form &quot;TO? N&quot; wher</p>\n<ul>\n<li>T = Tonic</li>\n<li>O = Octave (optional, defaults to 3)</li>\n<li>N = Name of scale, available names can be found <a href=\"https://github.com/tonaljs/tonal/blob/main/packages/scale-type/data.ts\">here</a>.</li>\n</ul>",
		memberof: "Pattern",
		name: "scale",
		params: [
			{
				type: {
					names: [
						"string"
					]
				},
				description: "<p>Name of scale</p>",
				name: "scale"
			}
		],
		returns: [
			{
				description: "<p>Pattern</p>"
			}
		],
		examples: [
			"\"0 2 4 6 4 2\"\n.scale(seq('C2 major', 'C2 minor').slow(2))\n.note()"
		],
		scope: "static",
		longname: "Pattern.scale",
		kind: "member",
		___id: "T000002R004010",
		___s: true
	},
	{
		comment: "/**\n * Adds a new custom voicing dictionary.\n *\n * @name addVoicings\n * @memberof Pattern\n * @param {string} name identifier for the voicing dictionary\n * @param {Object} dictionary maps chord symbol to possible voicings\n * @param {Array} range min, max note\n * @returns Pattern\n * @example\n * addVoicings('cookie', {\n *   7: ['3M 7m 9M 12P 15P', '7m 10M 13M 16M 19P'],\n *   '^7': ['3M 6M 9M 12P 14M', '7M 10M 13M 16M 19P'],\n *   m7: ['8P 11P 14m 17m 19P', '5P 8P 11P 14m 17m'],\n *   m7b5: ['3m 5d 8P 11P 14m', '5d 8P 11P 14m 17m'],\n *   o7: ['3m 6M 9M 11A 15P'],\n *   '7alt': ['3M 7m 10m 13m 15P'],\n *   '7#11': ['7m 10m 13m 15P 17m'],\n * }, ['C3', 'C6'])\n * \"<C^7 A7 Dm7 G7>\".voicings('cookie').note()\n */",
		meta: {
			filename: "voicings.mjs",
			lineno: 16,
			columnno: 0,
			path: "/Users/michaelgogins/cloud-music/strudel/packages/tonal",
			code: {
			}
		},
		description: "<p>Adds a new custom voicing dictionary.</p>",
		name: "addVoicings",
		memberof: "Pattern",
		params: [
			{
				type: {
					names: [
						"string"
					]
				},
				description: "<p>identifier for the voicing dictionary</p>",
				name: "name"
			},
			{
				type: {
					names: [
						"Object"
					]
				},
				description: "<p>maps chord symbol to possible voicings</p>",
				name: "dictionary"
			},
			{
				type: {
					names: [
						"Array"
					]
				},
				description: "<p>min, max note</p>",
				name: "range"
			}
		],
		returns: [
			{
				description: "<p>Pattern</p>"
			}
		],
		examples: [
			"addVoicings('cookie', {\n  7: ['3M 7m 9M 12P 15P', '7m 10M 13M 16M 19P'],\n  '^7': ['3M 6M 9M 12P 14M', '7M 10M 13M 16M 19P'],\n  m7: ['8P 11P 14m 17m 19P', '5P 8P 11P 14m 17m'],\n  m7b5: ['3m 5d 8P 11P 14m', '5d 8P 11P 14m 17m'],\n  o7: ['3m 6M 9M 11A 15P'],\n  '7alt': ['3M 7m 10m 13m 15P'],\n  '7#11': ['7m 10m 13m 15P 17m'],\n}, ['C3', 'C6'])\n\"<C^7 A7 Dm7 G7>\".voicings('cookie').note()"
		],
		scope: "static",
		longname: "Pattern.addVoicings",
		kind: "member",
		___id: "T000002R004031",
		___s: true
	},
	{
		comment: "/**\n * Turns chord symbols into voicings, using the smoothest voice leading possible.\n * Uses [chord-voicings package](https://github.com/felixroos/chord-voicings#chord-voicings).\n *\n * @name voicings\n * @memberof Pattern\n * @param {string} dictionary which voicing dictionary to use.\n * @returns Pattern\n * @example\n * stack(\"<C^7 A7 Dm7 G7>\".voicings('lefthand'), \"<C3 A2 D3 G2>\").note()\n */",
		meta: {
			filename: "voicings.mjs",
			lineno: 52,
			columnno: 0,
			path: "/Users/michaelgogins/cloud-music/strudel/packages/tonal",
			code: {
			}
		},
		description: "<p>Turns chord symbols into voicings, using the smoothest voice leading possible.\nUses <a href=\"https://github.com/felixroos/chord-voicings#chord-voicings\">chord-voicings package</a>.</p>",
		name: "voicings",
		memberof: "Pattern",
		params: [
			{
				type: {
					names: [
						"string"
					]
				},
				description: "<p>which voicing dictionary to use.</p>",
				name: "dictionary"
			}
		],
		returns: [
			{
				description: "<p>Pattern</p>"
			}
		],
		examples: [
			"stack(\"<C^7 A7 Dm7 G7>\".voicings('lefthand'), \"<C3 A2 D3 G2>\").note()"
		],
		scope: "static",
		longname: "Pattern.voicings",
		kind: "member",
		___id: "T000002R004045",
		___s: true
	},
	{
		comment: "/**\n * Maps the chords of the incoming pattern to root notes in the given octave.\n *\n * @name rootNotes\n * @memberof Pattern\n * @param {octave} octave octave to use\n * @returns Pattern\n * @example\n * \"<C^7 A7 Dm7 G7>\".rootNotes(2).note()\n */",
		meta: {
			filename: "voicings.mjs",
			lineno: 77,
			columnno: 0,
			path: "/Users/michaelgogins/cloud-music/strudel/packages/tonal",
			code: {
			}
		},
		description: "<p>Maps the chords of the incoming pattern to root notes in the given octave.</p>",
		name: "rootNotes",
		memberof: "Pattern",
		params: [
			{
				type: {
					names: [
						"octave"
					]
				},
				description: "<p>octave to use</p>",
				name: "octave"
			}
		],
		returns: [
			{
				description: "<p>Pattern</p>"
			}
		],
		examples: [
			"\"<C^7 A7 Dm7 G7>\".rootNotes(2).note()"
		],
		scope: "static",
		longname: "Pattern.rootNotes",
		kind: "member",
		___id: "T000002R004050",
		___s: true
	},
	{
		comment: "/**\n * Loads a collection of samples to use with `s`\n *\n * @example\n * samples({\n *  bd: '808bd/BD0000.WAV',\n *  sd: '808sd/SD0010.WAV'\n *  }, 'https://raw.githubusercontent.com/tidalcycles/Dirt-Samples/master/');\n * s(\"[bd ~]*2, [~ hh]*2, ~ sd\")\n *\n */",
		meta: {
			range: [
				3909,
				5590
			],
			filename: "sampler.mjs",
			lineno: 124,
			columnno: 0,
			path: "/Users/michaelgogins/cloud-music/strudel/packages/webaudio",
			code: {
				id: "astnode100047838",
				name: "exports.samples",
				type: "VariableDeclaration"
			}
		},
		description: "<p>Loads a collection of samples to use with <code>s</code></p>",
		examples: [
			"samples({\n bd: '808bd/BD0000.WAV',\n sd: '808sd/SD0010.WAV'\n }, 'https://raw.githubusercontent.com/tidalcycles/Dirt-Samples/master/');\ns(\"[bd ~]*2, [~ hh]*2, ~ sd\")"
		],
		name: "samples",
		longname: "samples",
		kind: "constant",
		scope: "global",
		___id: "T000002R004290",
		___s: true
	},
	{
		comment: "/**\n *\n * Uses [webdirt](https://github.com/dktr0/WebDirt) as output.\n *\n * <details>\n * <summary>show supported Webdirt controls</summary>\n *\n * - s :: String, -- name of sample bank\n * - n :: Int, -- number of sample within a bank\n * - {@link gain} :: Number, -- clamped from 0 to 2; 1 is default and full-scale\n * - overgain :: Number, -- additional gain added to gain to go past clamp at 2\n * - {@link pan} :: Number, -- range: 0 to 1\n * - nudge :: Number, -- nudge the time of the sample forwards/backwards in seconds\n * - {@link speed} :: Number, -- speed / pitch of the sample\n * - {@link unit} :: String\n * - note :: Number, -- pitch offset in semitones\n * - {@link begin} :: Number, -- cut from sample start, normalized\n * - {@link end} :: Number, -- cut from sample end, normalized\n * - {@link cut} :: Int, -- samples with same cut number will interupt each other\n * - {@link cutoff} :: Number, -- lowpass filter frequency\n * - {@link resonance} :: Number, -- lowpass filter resonance\n * - {@link hcutoff} :: Number, -- highpass filter frequency\n * - {@link hresonance} :: Number, -- highpass filter resonance\n * - {@link bandf} :: Number, -- bandpass filter frequency\n * - {@link bandq} :: Number, -- bandpass filter resonance\n * - {@link vowel} :: String, -- name of vowel ('a' | 'e' | 'i' | 'o' | 'u')\n * - delay :: Number, -- delay wet/dry mix\n * - delaytime :: Number, -- delay time in seconds\n * - delayfeedback :: Number, -- delay feedback\n * - {@link loop} :: Number, -- loop sample n times (relative to sample length)\n * - {@link crush} :: Number, -- bitcrusher (currently not working)\n * - {@link coarse} :: Number, -- coarse effect (currently not working)\n * - {@link shape} :: Number, -- (currently not working)\n\n *\n * </details>\n *\n * @name webdirt\n * @memberof Pattern\n * @returns Pattern\n * @example\n * s(\"bd*2 hh sd hh\").n(\"<0 1>\").webdirt()\n */",
		meta: {
			filename: "webdirt.mjs",
			lineno: 20,
			columnno: 0,
			path: "/Users/michaelgogins/cloud-music/strudel/packages/webdirt",
			code: {
			}
		},
		description: "<p>Uses <a href=\"https://github.com/dktr0/WebDirt\">webdirt</a> as output.</p>\n<details>\n<summary>show supported Webdirt controls</summary>\n<ul>\n<li>s :: String, -- name of sample bank</li>\n<li>n :: Int, -- number of sample within a bank</li>\n<li>{@link gain} :: Number, -- clamped from 0 to 2; 1 is default and full-scale</li>\n<li>overgain :: Number, -- additional gain added to gain to go past clamp at 2</li>\n<li>{@link pan} :: Number, -- range: 0 to 1</li>\n<li>nudge :: Number, -- nudge the time of the sample forwards/backwards in seconds</li>\n<li>{@link speed} :: Number, -- speed / pitch of the sample</li>\n<li>{@link unit} :: String</li>\n<li>note :: Number, -- pitch offset in semitones</li>\n<li>{@link begin} :: Number, -- cut from sample start, normalized</li>\n<li>{@link end} :: Number, -- cut from sample end, normalized</li>\n<li>{@link cut} :: Int, -- samples with same cut number will interupt each other</li>\n<li>{@link cutoff} :: Number, -- lowpass filter frequency</li>\n<li>{@link resonance} :: Number, -- lowpass filter resonance</li>\n<li>{@link hcutoff} :: Number, -- highpass filter frequency</li>\n<li>{@link hresonance} :: Number, -- highpass filter resonance</li>\n<li>{@link bandf} :: Number, -- bandpass filter frequency</li>\n<li>{@link bandq} :: Number, -- bandpass filter resonance</li>\n<li>{@link vowel} :: String, -- name of vowel ('a' | 'e' | 'i' | 'o' | 'u')</li>\n<li>delay :: Number, -- delay wet/dry mix</li>\n<li>delaytime :: Number, -- delay time in seconds</li>\n<li>delayfeedback :: Number, -- delay feedback</li>\n<li>{@link loop} :: Number, -- loop sample n times (relative to sample length)</li>\n<li>{@link crush} :: Number, -- bitcrusher (currently not working)</li>\n<li>{@link coarse} :: Number, -- coarse effect (currently not working)</li>\n<li>{@link shape} :: Number, -- (currently not working)</li>\n</ul>\n</details>",
		name: "webdirt",
		memberof: "Pattern",
		returns: [
			{
				description: "<p>Pattern</p>"
			}
		],
		examples: [
			"s(\"bd*2 hh sd hh\").n(\"<0 1>\").webdirt()"
		],
		scope: "static",
		longname: "Pattern.webdirt",
		kind: "member",
		___id: "T000002R004567",
		___s: true
	},
	{
		kind: "package",
		longname: "package:undefined",
		files: [
			"/Users/michaelgogins/cloud-music/strudel/packages/core/animate.mjs",
			"/Users/michaelgogins/cloud-music/strudel/packages/core/color.mjs",
			"/Users/michaelgogins/cloud-music/strudel/packages/core/controls.mjs",
			"/Users/michaelgogins/cloud-music/strudel/packages/core/cyclist.mjs",
			"/Users/michaelgogins/cloud-music/strudel/packages/core/draw.mjs",
			"/Users/michaelgogins/cloud-music/strudel/packages/core/drawLine.mjs",
			"/Users/michaelgogins/cloud-music/strudel/packages/core/euclid.mjs",
			"/Users/michaelgogins/cloud-music/strudel/packages/core/evaluate.mjs",
			"/Users/michaelgogins/cloud-music/strudel/packages/core/examples/vite-vanilla-repl/main.js",
			"/Users/michaelgogins/cloud-music/strudel/packages/core/examples/vite-vanilla-repl/tune.mjs",
			"/Users/michaelgogins/cloud-music/strudel/packages/core/fraction.mjs",
			"/Users/michaelgogins/cloud-music/strudel/packages/core/gist.js",
			"/Users/michaelgogins/cloud-music/strudel/packages/core/hap.mjs",
			"/Users/michaelgogins/cloud-music/strudel/packages/core/index.mjs",
			"/Users/michaelgogins/cloud-music/strudel/packages/core/logger.mjs",
			"/Users/michaelgogins/cloud-music/strudel/packages/core/pattern.mjs",
			"/Users/michaelgogins/cloud-music/strudel/packages/core/pianoroll.mjs",
			"/Users/michaelgogins/cloud-music/strudel/packages/core/repl.mjs",
			"/Users/michaelgogins/cloud-music/strudel/packages/core/signal.mjs",
			"/Users/michaelgogins/cloud-music/strudel/packages/core/speak.mjs",
			"/Users/michaelgogins/cloud-music/strudel/packages/core/state.mjs",
			"/Users/michaelgogins/cloud-music/strudel/packages/core/test/drawLine.test.mjs",
			"/Users/michaelgogins/cloud-music/strudel/packages/core/test/fraction.test.mjs",
			"/Users/michaelgogins/cloud-music/strudel/packages/core/test/pattern.test.mjs",
			"/Users/michaelgogins/cloud-music/strudel/packages/core/test/util.test.mjs",
			"/Users/michaelgogins/cloud-music/strudel/packages/core/test/value.test.mjs",
			"/Users/michaelgogins/cloud-music/strudel/packages/core/time.mjs",
			"/Users/michaelgogins/cloud-music/strudel/packages/core/timespan.mjs",
			"/Users/michaelgogins/cloud-music/strudel/packages/core/ui.mjs",
			"/Users/michaelgogins/cloud-music/strudel/packages/core/util.mjs",
			"/Users/michaelgogins/cloud-music/strudel/packages/core/value.mjs",
			"/Users/michaelgogins/cloud-music/strudel/packages/core/zyklus.mjs",
			"/Users/michaelgogins/cloud-music/strudel/packages/csound/csound.mjs",
			"/Users/michaelgogins/cloud-music/strudel/packages/csoundac/csoundac.mjs",
			"/Users/michaelgogins/cloud-music/strudel/packages/embed/embed.js",
			"/Users/michaelgogins/cloud-music/strudel/packages/eval/evaluate.mjs",
			"/Users/michaelgogins/cloud-music/strudel/packages/eval/index.mjs",
			"/Users/michaelgogins/cloud-music/strudel/packages/eval/shapeshifter.mjs",
			"/Users/michaelgogins/cloud-music/strudel/packages/eval/test/evaluate.test.mjs",
			"/Users/michaelgogins/cloud-music/strudel/packages/eval/test/shapeshifter.test.mjs",
			"/Users/michaelgogins/cloud-music/strudel/packages/midi/index.mjs",
			"/Users/michaelgogins/cloud-music/strudel/packages/midi/midi.mjs",
			"/Users/michaelgogins/cloud-music/strudel/packages/mini/index.mjs",
			"/Users/michaelgogins/cloud-music/strudel/packages/mini/krill-parser.js",
			"/Users/michaelgogins/cloud-music/strudel/packages/mini/mini.mjs",
			"/Users/michaelgogins/cloud-music/strudel/packages/mini/test/mini.test.mjs",
			"/Users/michaelgogins/cloud-music/strudel/packages/osc/osc.mjs",
			"/Users/michaelgogins/cloud-music/strudel/packages/osc/server.js",
			"/Users/michaelgogins/cloud-music/strudel/packages/osc/tidal-sniffer.js",
			"/Users/michaelgogins/cloud-music/strudel/packages/react/examples/nano-repl/src/App.jsx",
			"/Users/michaelgogins/cloud-music/strudel/packages/react/examples/nano-repl/src/main.jsx",
			"/Users/michaelgogins/cloud-music/strudel/packages/react/examples/nano-repl/vite.config.js",
			"/Users/michaelgogins/cloud-music/strudel/packages/react/postcss.config.js",
			"/Users/michaelgogins/cloud-music/strudel/packages/react/src/App.jsx",
			"/Users/michaelgogins/cloud-music/strudel/packages/react/src/components/CodeMirror6.jsx",
			"/Users/michaelgogins/cloud-music/strudel/packages/react/src/components/MiniRepl.jsx",
			"/Users/michaelgogins/cloud-music/strudel/packages/react/src/cx.js",
			"/Users/michaelgogins/cloud-music/strudel/packages/react/src/hooks/useFrame.mjs",
			"/Users/michaelgogins/cloud-music/strudel/packages/react/src/hooks/useHighlighting.mjs",
			"/Users/michaelgogins/cloud-music/strudel/packages/react/src/hooks/useKeydown.mjs",
			"/Users/michaelgogins/cloud-music/strudel/packages/react/src/hooks/usePatternFrame.mjs",
			"/Users/michaelgogins/cloud-music/strudel/packages/react/src/hooks/usePostMessage.mjs",
			"/Users/michaelgogins/cloud-music/strudel/packages/react/src/hooks/useStrudel.mjs",
			"/Users/michaelgogins/cloud-music/strudel/packages/react/src/index.js",
			"/Users/michaelgogins/cloud-music/strudel/packages/react/src/main.jsx",
			"/Users/michaelgogins/cloud-music/strudel/packages/react/src/themes/strudel-theme.js",
			"/Users/michaelgogins/cloud-music/strudel/packages/react/tailwind.config.js",
			"/Users/michaelgogins/cloud-music/strudel/packages/react/vite.config.js",
			"/Users/michaelgogins/cloud-music/strudel/packages/serial/serial.mjs",
			"/Users/michaelgogins/cloud-music/strudel/packages/soundfonts/convert.js",
			"/Users/michaelgogins/cloud-music/strudel/packages/soundfonts/fontloader.mjs",
			"/Users/michaelgogins/cloud-music/strudel/packages/soundfonts/index.mjs",
			"/Users/michaelgogins/cloud-music/strudel/packages/soundfonts/list.mjs",
			"/Users/michaelgogins/cloud-music/strudel/packages/soundfonts/sfumato.mjs",
			"/Users/michaelgogins/cloud-music/strudel/packages/tonal/index.mjs",
			"/Users/michaelgogins/cloud-music/strudel/packages/tonal/test/tonal.test.mjs",
			"/Users/michaelgogins/cloud-music/strudel/packages/tonal/tonal.mjs",
			"/Users/michaelgogins/cloud-music/strudel/packages/tonal/voicings.mjs",
			"/Users/michaelgogins/cloud-music/strudel/packages/tone/index.mjs",
			"/Users/michaelgogins/cloud-music/strudel/packages/tone/test/tone.test.mjs",
			"/Users/michaelgogins/cloud-music/strudel/packages/tone/tone.mjs",
			"/Users/michaelgogins/cloud-music/strudel/packages/transpiler/index.mjs",
			"/Users/michaelgogins/cloud-music/strudel/packages/transpiler/test/transpiler.test.mjs",
			"/Users/michaelgogins/cloud-music/strudel/packages/transpiler/transpiler.mjs",
			"/Users/michaelgogins/cloud-music/strudel/packages/webaudio/feedbackdelay.mjs",
			"/Users/michaelgogins/cloud-music/strudel/packages/webaudio/index.mjs",
			"/Users/michaelgogins/cloud-music/strudel/packages/webaudio/reverb.mjs",
			"/Users/michaelgogins/cloud-music/strudel/packages/webaudio/sampler.mjs",
			"/Users/michaelgogins/cloud-music/strudel/packages/webaudio/vite.config.js",
			"/Users/michaelgogins/cloud-music/strudel/packages/webaudio/vowel.mjs",
			"/Users/michaelgogins/cloud-music/strudel/packages/webaudio/webaudio.mjs",
			"/Users/michaelgogins/cloud-music/strudel/packages/webaudio/worklets.mjs",
			"/Users/michaelgogins/cloud-music/strudel/packages/webdirt/index.mjs",
			"/Users/michaelgogins/cloud-music/strudel/packages/webdirt/webdirt.mjs",
			"/Users/michaelgogins/cloud-music/strudel/packages/xen/index.mjs",
			"/Users/michaelgogins/cloud-music/strudel/packages/xen/test/xen.test.mjs",
			"/Users/michaelgogins/cloud-music/strudel/packages/xen/tune.mjs",
			"/Users/michaelgogins/cloud-music/strudel/packages/xen/tunejs.js",
			"/Users/michaelgogins/cloud-music/strudel/packages/xen/xen.mjs"
		],
		___id: "T000002R014584",
		___s: true
	}
];
const jsdoc = {
	docs: docs$1
};

const docs = jsdoc.docs.reduce((acc, obj) => Object.assign(acc, {
  [obj.longname]: obj
}), {});
function JsDoc({
  name,
  h = 3
}) {
  const item = docs[name];
  if (!item) {
    console.warn("Not found: " + name);
    return /* @__PURE__ */ jsx("div", {});
  }
  const CustomHeading = `h${h}`;
  const description = item.description.replaceAll(/\{@link ([a-zA-Z\.]+)?#?([a-zA-Z]*)\}/g, (_, a, b) => {
    return `<a href="#${a.replaceAll(".", "").toLowerCase()}${b ? `-${b}` : ""}">${a}${b ? `#${b}` : ""}</a>`;
  });
  return /* @__PURE__ */ jsxs(Fragment$1, {
    children: [!!h && /* @__PURE__ */ jsx(CustomHeading, {
      children: item.longname
    }), /* @__PURE__ */ jsx("div", {
      dangerouslySetInnerHTML: {
        __html: description
      }
    }), /* @__PURE__ */ jsx("ul", {
      children: item.params?.map((param, i) => /* @__PURE__ */ jsxs("li", {
        children: [param.name, " (", param.type?.names?.join("|"), "): ", param.description?.replace(/(<([^>]+)>)/gi, "")]
      }, i))
    }), item.examples?.length ? /* @__PURE__ */ jsx("div", {
      className: "space-y-2",
      children: item.examples?.map((example, k) => /* @__PURE__ */ jsx(MiniRepl, {
        tune: example
      }, k))
    }) : /* @__PURE__ */ jsx("div", {})]
  });
}
__astro_tag_component__(JsDoc, "@astrojs/react");

const MDXLayout$j = async function ({
  children
}) {
  const Layout = (await import('./chunks/MainLayout.c7eab378.mjs')).default;
  const {
    layout,
    ...content
  } = frontmatter$l;
  content.file = file$l;
  content.url = url$l;
  content.astro = {};
  Object.defineProperty(content.astro, "headings", {
    get() {
      throw new Error('The "astro" property is no longer supported! To access "headings" from your layout, try using "Astro.props.headings."');
    }
  });
  Object.defineProperty(content.astro, "html", {
    get() {
      throw new Error('The "astro" property is no longer supported! To access "html" from your layout, try using "Astro.props.compiledContent()."');
    }
  });
  Object.defineProperty(content.astro, "source", {
    get() {
      throw new Error('The "astro" property is no longer supported! To access "source" from your layout, try using "Astro.props.rawContent()."');
    }
  });
  return createVNode(Layout, {
    file: file$l,
    url: url$l,
    content,
    frontmatter: content,
    headings: getHeadings$k(),
    "server:root": true,
    children
  });
};
const frontmatter$l = {
  "title": "Patterns",
  "layout": "../../layouts/MainLayout.astro"
};
const _internal$k = {
  injectedFrontmatter: {}
};
function getHeadings$k() {
  return [{
    "depth": 1,
    "slug": "patterns",
    "text": "Patterns"
  }];
}
function _createMdxContent$k(props) {
  const _components = Object.assign({
    h1: "h1",
    a: "a",
    span: "span",
    p: "p",
    strong: "strong",
    code: "code",
    pre: "pre"
  }, props.components);
  return createVNode(Fragment, {
    children: [createVNode(_components.h1, {
      id: "patterns",
      children: [createVNode(_components.a, {
        "aria-hidden": "true",
        tabIndex: "-1",
        href: "#patterns",
        children: createVNode(_components.span, {
          className: "icon icon-link"
        })
      }), "Patterns"]
    }), "\n", createVNode(_components.p, {
      children: ["Patterns are the essence of Tidal. Its patterns are abstract entities that represent flows of time as functions, adapting a technique called pure functional reactive programming. Taking a time span as its input, a Pattern can output a set of events that happen within that time span. It depends on the structure of the Pattern how the events are located in time.\nFrom now on, this process of generating events from a time span will be called ", createVNode(_components.strong, {
        children: "querying"
      }), ".\nExample:"]
    }), "\n", createVNode(MiniRepl, {
      "client:idle": true,
      tune: `const pattern = sequence(c3, [e3, g3])
const events = pattern.queryArc(0, 1)
console.log(events.map((e) => e.show()))
silence`,
      "client:component-path": "/Users/michaelgogins/cloud-music/strudel/website/src/docs/MiniRepl",
      "client:component-export": "MiniRepl",
      "client:component-hydration": true
    }), "\n", createVNode(_components.p, {
      children: ["In this example, we create a pattern using the ", createVNode(_components.code, {
        children: "sequence"
      }), " function and ", createVNode(_components.strong, {
        children: "query"
      }), " it for the time span from ", createVNode(_components.code, {
        children: "0"
      }), " to ", createVNode(_components.code, {
        children: "1"
      }), ".\nThose numbers represent units of time called ", createVNode(_components.strong, {
        children: "cycles"
      }), ". The length of one cycle depends on the tempo, which defaults to one cycle per second.\nThe resulting events are:"]
    }), "\n", createVNode(_components.pre, {
      className: "astro-code",
      style: {
        backgroundColor: "#0d1117",
        overflowX: "auto"
      },
      children: createVNode(_components.code, {
        children: [createVNode(_components.span, {
          className: "line",
          children: createVNode(_components.span, {
            style: {
              color: "#C9D1D9"
            },
            children: "["
          })
        }), "\n", createVNode(_components.span, {
          className: "line",
          children: [createVNode(_components.span, {
            style: {
              color: "#C9D1D9"
            },
            children: "  "
          }), createVNode(_components.span, {
            style: {
              color: "#A5D6FF"
            },
            children: "'[ 0/1 -> 1/2 | c3 ]'"
          }), createVNode(_components.span, {
            style: {
              color: "#C9D1D9"
            },
            children: ", "
          }), createVNode(_components.span, {
            style: {
              color: "#8B949E"
            },
            children: "//"
          })]
        }), "\n", createVNode(_components.span, {
          className: "line",
          children: [createVNode(_components.span, {
            style: {
              color: "#C9D1D9"
            },
            children: "  "
          }), createVNode(_components.span, {
            style: {
              color: "#A5D6FF"
            },
            children: "'[ 1/2 -> 3/4 | e3 ]'"
          }), createVNode(_components.span, {
            style: {
              color: "#C9D1D9"
            },
            children: ","
          })]
        }), "\n", createVNode(_components.span, {
          className: "line",
          children: [createVNode(_components.span, {
            style: {
              color: "#C9D1D9"
            },
            children: "  "
          }), createVNode(_components.span, {
            style: {
              color: "#A5D6FF"
            },
            children: "'[ 3/4 -> 1/1 | g3 ]'"
          }), createVNode(_components.span, {
            style: {
              color: "#C9D1D9"
            },
            children: ","
          })]
        }), "\n", createVNode(_components.span, {
          className: "line",
          children: createVNode(_components.span, {
            style: {
              color: "#C9D1D9"
            },
            children: "];"
          })
        })]
      })
    }), "\n", createVNode(_components.p, {
      children: ["Each event has a value, a begin time and an end time, where time is represented as a fraction. In the above case, the events are placed in sequential order, where c3 takes the first half, and e3 and g3 together take the second half. This temporal placement is the result of the ", createVNode(_components.code, {
        children: "sequence"
      }), " function, which divides its arguments equally over one cycle. If an argument is an array, the same rule applies to that part of the cycle. In the example, e3 and g3 are divided equally over the second half of the whole cycle."]
    }), "\n", createVNode(_components.p, {
      children: "Note that the query function is not just a way to access a pattern, but true to the principles of functional programming, is the pattern itself. This means that in theory there is no way to change a pattern, it is opaque as a pure function. In practice though, Strudel and Tidal are all about transforming patterns, so how is this done? The answer is, by replacing the pattern with a new one, that calls the old one. This new one is only able to manipulate the query before passing it to the old pattern, and manipulate the results from it before returning them to caller. But, this is enough to support all the temporal and structural manipulations provided by Strudel (and Tidal\u2019s) extensive library of functions."
    }), "\n", createVNode(_components.p, {
      children: "The above examples do not represent how Strudel is used in practice. In the live coding editor, the user only has to type in the pattern itself, the querying will be handled by the scheduler. The scheduler will repeatedly query the pattern for events, which are then scheduled as sound synthesis or other event triggers."
    })]
  });
}
function MDXContent$k(props = {}) {
  return createVNode(MDXLayout$j, {
    ...props,
    children: createVNode(_createMdxContent$k, {
      ...props
    })
  });
}

__astro_tag_component__(getHeadings$k, "astro:jsx");
__astro_tag_component__(MDXContent$k, "astro:jsx");
const url$l = "/technical-manual/patterns";
const file$l = "/Users/michaelgogins/cloud-music/strudel/website/src/pages/technical-manual/patterns.mdx";
function rawContent$k() { throw new Error("MDX does not support rawContent()! If you need to read the Markdown contents to calculate values (ex. reading time), we suggest injecting frontmatter via remark plugins. Learn more on our docs: https://docs.astro.build/en/guides/integrations-guide/mdx/#inject-frontmatter-via-remark-or-rehype-plugins") }function compiledContent$k() { throw new Error("MDX does not support compiledContent()! If you need to read the HTML contents to calculate values (ex. reading time), we suggest injecting frontmatter via rehype plugins. Learn more on our docs: https://docs.astro.build/en/guides/integrations-guide/mdx/#inject-frontmatter-via-remark-or-rehype-plugins") }const Content$l = (props = {}) => MDXContent$k({
											...props,
											components: { Fragment, ...props.components },
										});
Content$l[Symbol.for('astro.needsHeadRendering')] = !Boolean(frontmatter$l.layout);

const _page3 = /*#__PURE__*/Object.freeze(/*#__PURE__*/Object.defineProperty({
	__proto__: null,
	frontmatter: frontmatter$l,
	_internal: _internal$k,
	getHeadings: getHeadings$k,
	url: url$l,
	file: file$l,
	rawContent: rawContent$k,
	compiledContent: compiledContent$k,
	Content: Content$l,
	default: Content$l
}, Symbol.toStringTag, { value: 'Module' }));

const MDXLayout$i = async function ({
  children
}) {
  const Layout = (await import('./chunks/MainLayout.c7eab378.mjs')).default;
  const {
    layout,
    ...content
  } = frontmatter$k;
  content.file = file$k;
  content.url = url$k;
  content.astro = {};
  Object.defineProperty(content.astro, "headings", {
    get() {
      throw new Error('The "astro" property is no longer supported! To access "headings" from your layout, try using "Astro.props.headings."');
    }
  });
  Object.defineProperty(content.astro, "html", {
    get() {
      throw new Error('The "astro" property is no longer supported! To access "html" from your layout, try using "Astro.props.compiledContent()."');
    }
  });
  Object.defineProperty(content.astro, "source", {
    get() {
      throw new Error('The "astro" property is no longer supported! To access "source" from your layout, try using "Astro.props.rawContent()."');
    }
  });
  return createVNode(Layout, {
    file: file$k,
    url: url$k,
    content,
    frontmatter: content,
    headings: getHeadings$j(),
    "server:root": true,
    children
  });
};
const frontmatter$k = {
  "title": "Testing",
  "layout": "../../layouts/MainLayout.astro"
};
const _internal$j = {
  injectedFrontmatter: {}
};
function getHeadings$j() {
  return [{
    "depth": 1,
    "slug": "testing",
    "text": "Testing"
  }, {
    "depth": 2,
    "slug": "unit-tests",
    "text": "Unit Tests"
  }, {
    "depth": 2,
    "slug": "snapshot-tests",
    "text": "Snapshot Tests"
  }];
}
function _createMdxContent$j(props) {
  const _components = Object.assign({
    h1: "h1",
    a: "a",
    span: "span",
    p: "p",
    ul: "ul",
    li: "li",
    h2: "h2",
    code: "code"
  }, props.components);
  return createVNode(Fragment, {
    children: [createVNode(_components.h1, {
      id: "testing",
      children: [createVNode(_components.a, {
        "aria-hidden": "true",
        tabIndex: "-1",
        href: "#testing",
        children: createVNode(_components.span, {
          className: "icon icon-link"
        })
      }), "Testing"]
    }), "\n", createVNode(_components.p, {
      children: ["Strudel uses ", createVNode(_components.a, {
        href: "https://vitest.dev/",
        children: "vitest"
      }), " for testing, with 2 types of testing strategies:"]
    }), "\n", createVNode(_components.ul, {
      children: ["\n", createVNode(_components.li, {
        children: "unit tests for fine grained testing"
      }), "\n", createVNode(_components.li, {
        children: "automated snapshot tests for broader testing"
      }), "\n"]
    }), "\n", createVNode(_components.h2, {
      id: "unit-tests",
      children: [createVNode(_components.a, {
        "aria-hidden": "true",
        tabIndex: "-1",
        href: "#unit-tests",
        children: createVNode(_components.span, {
          className: "icon icon-link"
        })
      }), "Unit Tests"]
    }), "\n", createVNode(_components.p, {
      children: ["Each package has a ", createVNode(_components.code, {
        children: "test"
      }), " folder where tests are written on a file by file basis, e.g. ", createVNode(_components.code, {
        children: "util.test.mjs"
      }), " implements all tests for ", createVNode(_components.code, {
        children: "util.mjs"
      }), "."]
    }), "\n", createVNode(_components.h2, {
      id: "snapshot-tests",
      children: [createVNode(_components.a, {
        "aria-hidden": "true",
        tabIndex: "-1",
        href: "#snapshot-tests",
        children: createVNode(_components.span, {
          className: "icon icon-link"
        })
      }), "Snapshot Tests"]
    }), "\n", createVNode(_components.p, {
      children: "Snapshot tests allow testing larger chunks of data. Strudel uses snapshot tests for:"
    }), "\n", createVNode(_components.ul, {
      children: ["\n", createVNode(_components.li, {
        children: ["Example Snippets: ", createVNode(_components.code, {
          children: "examples.test.mjs"
        }), ", using snippets under ", createVNode(_components.code, {
          children: "@example"
        }), " inside jsdoc comments"]
      }), "\n", createVNode(_components.li, {
        children: ["Example Tunes: ", createVNode(_components.code, {
          children: "tunes.test.mjs"
        }), ", using all patterns in ", createVNode(_components.code, {
          children: "tunes.mjs"
        })]
      }), "\n"]
    }), "\n", createVNode(_components.p, {
      children: ["The snapshot (", createVNode(_components.code, {
        children: ".snap"
      }), ") files contain all haps within a certain number of cycles for each tested pattern.\nThey allow testing for breaking changes on a larger scale.\nIf breaking changes are intentional, the snapshots can be updated with ", createVNode(_components.code, {
        children: "npm run snapshot"
      }), ".\nJust make sure to verify that all affected patterns behave as expected."]
    })]
  });
}
function MDXContent$j(props = {}) {
  return createVNode(MDXLayout$i, {
    ...props,
    children: createVNode(_createMdxContent$j, {
      ...props
    })
  });
}

__astro_tag_component__(getHeadings$j, "astro:jsx");
__astro_tag_component__(MDXContent$j, "astro:jsx");
const url$k = "/technical-manual/testing";
const file$k = "/Users/michaelgogins/cloud-music/strudel/website/src/pages/technical-manual/testing.mdx";
function rawContent$j() { throw new Error("MDX does not support rawContent()! If you need to read the Markdown contents to calculate values (ex. reading time), we suggest injecting frontmatter via remark plugins. Learn more on our docs: https://docs.astro.build/en/guides/integrations-guide/mdx/#inject-frontmatter-via-remark-or-rehype-plugins") }function compiledContent$j() { throw new Error("MDX does not support compiledContent()! If you need to read the HTML contents to calculate values (ex. reading time), we suggest injecting frontmatter via rehype plugins. Learn more on our docs: https://docs.astro.build/en/guides/integrations-guide/mdx/#inject-frontmatter-via-remark-or-rehype-plugins") }const Content$k = (props = {}) => MDXContent$j({
											...props,
											components: { Fragment, ...props.components },
										});
Content$k[Symbol.for('astro.needsHeadRendering')] = !Boolean(frontmatter$k.layout);

const _page4 = /*#__PURE__*/Object.freeze(/*#__PURE__*/Object.defineProperty({
	__proto__: null,
	frontmatter: frontmatter$k,
	_internal: _internal$j,
	getHeadings: getHeadings$j,
	url: url$k,
	file: file$k,
	rawContent: rawContent$j,
	compiledContent: compiledContent$j,
	Content: Content$k,
	default: Content$k
}, Symbol.toStringTag, { value: 'Module' }));

const frontmatter$j = {};
const _internal$i = {
  injectedFrontmatter: {}
};
function getHeadings$i() {
  return [];
}
function _createMdxContent$i(props) {
  const _components = Object.assign({
    p: "p",
    em: "em",
    a: "a"
  }, props.components);
  return createVNode(Fragment, {
    children: [createVNode(_components.p, {
      children: ["This section introduces you to Strudel in a technical sense. If you just want to ", createVNode(_components.em, {
        children: "use"
      }), " Strudel, have a look at the ", createVNode(_components.a, {
        href: "/learn/getting-started",
        children: "Tutorial"
      }), "."]
    }), "\n", createVNode(_components.p, {
      children: "TODO"
    })]
  });
}
function MDXContent$i(props = {}) {
  const {
    wrapper: MDXLayout
  } = props.components || {};
  return MDXLayout ? createVNode(MDXLayout, {
    ...props,
    children: createVNode(_createMdxContent$i, {
      ...props
    })
  }) : _createMdxContent$i(props);
}

__astro_tag_component__(getHeadings$i, "astro:jsx");
__astro_tag_component__(MDXContent$i, "astro:jsx");
const url$j = "/technical-manual/about";
const file$j = "/Users/michaelgogins/cloud-music/strudel/website/src/pages/technical-manual/about.mdx";
function rawContent$i() { throw new Error("MDX does not support rawContent()! If you need to read the Markdown contents to calculate values (ex. reading time), we suggest injecting frontmatter via remark plugins. Learn more on our docs: https://docs.astro.build/en/guides/integrations-guide/mdx/#inject-frontmatter-via-remark-or-rehype-plugins") }function compiledContent$i() { throw new Error("MDX does not support compiledContent()! If you need to read the HTML contents to calculate values (ex. reading time), we suggest injecting frontmatter via rehype plugins. Learn more on our docs: https://docs.astro.build/en/guides/integrations-guide/mdx/#inject-frontmatter-via-remark-or-rehype-plugins") }const Content$j = (props = {}) => MDXContent$i({
											...props,
											components: { Fragment, ...props.components },
										});
Content$j[Symbol.for('astro.needsHeadRendering')] = !Boolean(frontmatter$j.layout);

const _page5 = /*#__PURE__*/Object.freeze(/*#__PURE__*/Object.defineProperty({
	__proto__: null,
	frontmatter: frontmatter$j,
	_internal: _internal$i,
	getHeadings: getHeadings$i,
	url: url$j,
	file: file$j,
	rawContent: rawContent$i,
	compiledContent: compiledContent$i,
	Content: Content$j,
	default: Content$j
}, Symbol.toStringTag, { value: 'Module' }));

const MDXLayout$h = async function ({
  children
}) {
  const Layout = (await import('./chunks/MainLayout.c7eab378.mjs')).default;
  const {
    layout,
    ...content
  } = frontmatter$i;
  content.file = file$i;
  content.url = url$i;
  content.astro = {};
  Object.defineProperty(content.astro, "headings", {
    get() {
      throw new Error('The "astro" property is no longer supported! To access "headings" from your layout, try using "Astro.props.headings."');
    }
  });
  Object.defineProperty(content.astro, "html", {
    get() {
      throw new Error('The "astro" property is no longer supported! To access "html" from your layout, try using "Astro.props.compiledContent()."');
    }
  });
  Object.defineProperty(content.astro, "source", {
    get() {
      throw new Error('The "astro" property is no longer supported! To access "source" from your layout, try using "Astro.props.rawContent()."');
    }
  });
  return createVNode(Layout, {
    file: file$i,
    url: url$i,
    content,
    frontmatter: content,
    headings: getHeadings$h(),
    "server:root": true,
    children
  });
};
const frontmatter$i = {
  "title": "Docs",
  "layout": "../../layouts/MainLayout.astro"
};
const _internal$h = {
  injectedFrontmatter: {}
};
function getHeadings$h() {
  return [{
    "depth": 1,
    "slug": "docs",
    "text": "Docs"
  }, {
    "depth": 2,
    "slug": "adding-a-new-docs-page",
    "text": "Adding a new Docs Page"
  }, {
    "depth": 2,
    "slug": "using-the-mini-repl",
    "text": "Using the Mini REPL"
  }, {
    "depth": 2,
    "slug": "in-source-documentation",
    "text": "In-Source Documentation"
  }, {
    "depth": 3,
    "slug": "writing-jsdoc",
    "text": "Writing jsdoc"
  }];
}
function _createMdxContent$h(props) {
  const _components = Object.assign({
    h1: "h1",
    a: "a",
    span: "span",
    p: "p",
    h2: "h2",
    ol: "ol",
    li: "li",
    code: "code",
    pre: "pre",
    ul: "ul",
    h3: "h3"
  }, props.components);
  return createVNode(Fragment, {
    children: [createVNode(_components.h1, {
      id: "docs",
      children: [createVNode(_components.a, {
        "aria-hidden": "true",
        tabIndex: "-1",
        href: "#docs",
        children: createVNode(_components.span, {
          className: "icon icon-link"
        })
      }), "Docs"]
    }), "\n", createVNode(_components.p, {
      children: ["The docs page is built ontop of astro\u2019s ", createVNode(_components.a, {
        href: "https://github.com/withastro/astro/tree/main/examples/docs",
        children: "docs site"
      }), "."]
    }), "\n", createVNode(_components.h2, {
      id: "adding-a-new-docs-page",
      children: [createVNode(_components.a, {
        "aria-hidden": "true",
        tabIndex: "-1",
        href: "#adding-a-new-docs-page",
        children: createVNode(_components.span, {
          className: "icon icon-link"
        })
      }), "Adding a new Docs Page"]
    }), "\n", createVNode(_components.ol, {
      children: ["\n", createVNode(_components.li, {
        children: ["add a ", createVNode(_components.code, {
          children: ".mdx"
        }), " file in a path under ", createVNode(_components.code, {
          children: "website/src/pages/"
        }), ", e.g. ", createVNode(_components.a, {
          href: "https://raw.githubusercontent.com/tidalcycles/strudel/main/website/src/pages/learn/code.mdx",
          children: "website/src/pages/learn/code.mdx"
        }), " will be available under ", createVNode(_components.a, {
          href: "https://strudel.tidalcycles.org/learn/code",
          children: "https://strudel.tidalcycles.org/learn/code"
        }), " (or locally under ", createVNode(_components.code, {
          children: "http://localhost:3000/learn/code"
        }), ")"]
      }), "\n", createVNode(_components.li, {
        children: "make sure to copy the top part of another existing docs page. Adjust the title accordingly"
      }), "\n", createVNode(_components.li, {
        children: ["To add a link to the sidebar, add a new entry to ", createVNode(_components.code, {
          children: "SIDEBAR"
        }), " to ", createVNode(_components.a, {
          href: "https://github.com/tidalcycles/strudel/blob/main/website/src/config.ts",
          children: createVNode(_components.code, {
            children: "config.ts"
          })
        })]
      }), "\n"]
    }), "\n", createVNode(_components.h2, {
      id: "using-the-mini-repl",
      children: [createVNode(_components.a, {
        "aria-hidden": "true",
        tabIndex: "-1",
        href: "#using-the-mini-repl",
        children: createVNode(_components.span, {
          className: "icon icon-link"
        })
      }), "Using the Mini REPL"]
    }), "\n", createVNode(_components.p, {
      children: "To add a Mini REPL, make sure to import:"
    }), "\n", createVNode(_components.pre, {
      className: "astro-code",
      style: {
        backgroundColor: "#0d1117",
        overflowX: "auto"
      },
      children: createVNode(_components.code, {
        children: createVNode(_components.span, {
          className: "line",
          children: [createVNode(_components.span, {
            style: {
              color: "#FF7B72"
            },
            children: "import"
          }), createVNode(_components.span, {
            style: {
              color: "#C9D1D9"
            },
            children: " { MiniRepl } "
          }), createVNode(_components.span, {
            style: {
              color: "#FF7B72"
            },
            children: "from"
          }), createVNode(_components.span, {
            style: {
              color: "#C9D1D9"
            },
            children: " "
          }), createVNode(_components.span, {
            style: {
              color: "#A5D6FF"
            },
            children: "'../../docs/MiniRepl'"
          }), createVNode(_components.span, {
            style: {
              color: "#C9D1D9"
            },
            children: ";"
          })]
        })
      })
    }), "\n", createVNode(_components.p, {
      children: "add a mini repl with"
    }), "\n", createVNode(_components.pre, {
      className: "astro-code",
      style: {
        backgroundColor: "#0d1117",
        overflowX: "auto"
      },
      children: createVNode(_components.code, {
        children: createVNode(_components.span, {
          className: "line",
          children: [createVNode(_components.span, {
            style: {
              color: "#C9D1D9"
            },
            children: "<"
          }), createVNode(_components.span, {
            style: {
              color: "#7EE787"
            },
            children: "MiniRepl"
          }), createVNode(_components.span, {
            style: {
              color: "#C9D1D9"
            },
            children: " "
          }), createVNode(_components.span, {
            style: {
              color: "#79C0FF"
            },
            children: "client"
          }), createVNode(_components.span, {
            style: {
              color: "#C9D1D9"
            },
            children: ":"
          }), createVNode(_components.span, {
            style: {
              color: "#79C0FF"
            },
            children: "idle"
          }), createVNode(_components.span, {
            style: {
              color: "#C9D1D9"
            },
            children: " "
          }), createVNode(_components.span, {
            style: {
              color: "#79C0FF"
            },
            children: "tune"
          }), createVNode(_components.span, {
            style: {
              color: "#FF7B72"
            },
            children: "={"
          }), createVNode(_components.span, {
            style: {
              color: "#A5D6FF"
            },
            children: "`note(\"a3 c#4 e4 a4\")`"
          }), createVNode(_components.span, {
            style: {
              color: "#FF7B72"
            },
            children: "}"
          }), createVNode(_components.span, {
            style: {
              color: "#C9D1D9"
            },
            children: " />"
          })]
        })
      })
    }), "\n", createVNode(_components.ul, {
      children: ["\n", createVNode(_components.li, {
        children: [createVNode(_components.code, {
          children: "client:idle"
        }), " is required to tell astro that the repl should be interactive, see ", createVNode(_components.a, {
          href: "https://docs.astro.build/en/reference/directives-reference/#client-directives",
          children: "Client Directive"
        })]
      }), "\n", createVNode(_components.li, {
        children: [createVNode(_components.code, {
          children: "tune"
        }), ": be any valid pattern code"]
      }), "\n", createVNode(_components.li, {
        children: [createVNode(_components.code, {
          children: "withCanvas"
        }), ": If set, a canvas will be rendered below that shows a pianoroll (WIP)"]
      }), "\n"]
    }), "\n", createVNode(_components.h2, {
      id: "in-source-documentation",
      children: [createVNode(_components.a, {
        "aria-hidden": "true",
        tabIndex: "-1",
        href: "#in-source-documentation",
        children: createVNode(_components.span, {
          className: "icon icon-link"
        })
      }), "In-Source Documentation"]
    }), "\n", createVNode(_components.p, {
      children: ["You can add the in-source documentation for a function by using the ", createVNode(_components.code, {
        children: "JsDoc"
      }), " component. Import:"]
    }), "\n", createVNode(_components.pre, {
      className: "astro-code",
      style: {
        backgroundColor: "#0d1117",
        overflowX: "auto"
      },
      children: createVNode(_components.code, {
        children: createVNode(_components.span, {
          className: "line",
          children: [createVNode(_components.span, {
            style: {
              color: "#FF7B72"
            },
            children: "import"
          }), createVNode(_components.span, {
            style: {
              color: "#C9D1D9"
            },
            children: " { JsDoc } "
          }), createVNode(_components.span, {
            style: {
              color: "#FF7B72"
            },
            children: "from"
          }), createVNode(_components.span, {
            style: {
              color: "#C9D1D9"
            },
            children: " "
          }), createVNode(_components.span, {
            style: {
              color: "#A5D6FF"
            },
            children: "'../../docs/JsDoc'"
          }), createVNode(_components.span, {
            style: {
              color: "#C9D1D9"
            },
            children: ";"
          })]
        })
      })
    }), "\n", createVNode(_components.p, {
      children: "Usage:"
    }), "\n", createVNode(_components.pre, {
      className: "astro-code",
      style: {
        backgroundColor: "#0d1117",
        overflowX: "auto"
      },
      children: createVNode(_components.code, {
        children: createVNode(_components.span, {
          className: "line",
          children: [createVNode(_components.span, {
            style: {
              color: "#C9D1D9"
            },
            children: "<"
          }), createVNode(_components.span, {
            style: {
              color: "#7EE787"
            },
            children: "JsDoc"
          }), createVNode(_components.span, {
            style: {
              color: "#C9D1D9"
            },
            children: " "
          }), createVNode(_components.span, {
            style: {
              color: "#79C0FF"
            },
            children: "client"
          }), createVNode(_components.span, {
            style: {
              color: "#C9D1D9"
            },
            children: ":"
          }), createVNode(_components.span, {
            style: {
              color: "#79C0FF"
            },
            children: "idle"
          }), createVNode(_components.span, {
            style: {
              color: "#C9D1D9"
            },
            children: " "
          }), createVNode(_components.span, {
            style: {
              color: "#79C0FF"
            },
            children: "name"
          }), createVNode(_components.span, {
            style: {
              color: "#FF7B72"
            },
            children: "="
          }), createVNode(_components.span, {
            style: {
              color: "#A5D6FF"
            },
            children: "\"bandf\""
          }), createVNode(_components.span, {
            style: {
              color: "#C9D1D9"
            },
            children: " "
          }), createVNode(_components.span, {
            style: {
              color: "#79C0FF"
            },
            children: "h"
          }), createVNode(_components.span, {
            style: {
              color: "#FF7B72"
            },
            children: "={"
          }), createVNode(_components.span, {
            style: {
              color: "#79C0FF"
            },
            children: "0"
          }), createVNode(_components.span, {
            style: {
              color: "#FF7B72"
            },
            children: "}"
          }), createVNode(_components.span, {
            style: {
              color: "#C9D1D9"
            },
            children: " />"
          })]
        })
      })
    }), "\n", createVNode(_components.ul, {
      children: ["\n", createVNode(_components.li, {
        children: [createVNode(_components.code, {
          children: "name"
        }), ": function name, as named with ", createVNode(_components.code, {
          children: "@name"
        }), " in jsdoc"]
      }), "\n", createVNode(_components.li, {
        children: [createVNode(_components.code, {
          children: "h"
        }), ": level of heading. ", createVNode(_components.code, {
          children: "0"
        }), " will hide the heading. Hiding it allows using a manual heading which results in a nav link being generated in the right sidebar."]
      }), "\n"]
    }), "\n", createVNode(_components.h3, {
      id: "writing-jsdoc",
      children: [createVNode(_components.a, {
        "aria-hidden": "true",
        tabIndex: "-1",
        href: "#writing-jsdoc",
        children: createVNode(_components.span, {
          className: "icon icon-link"
        })
      }), "Writing jsdoc"]
    }), "\n", createVNode(_components.p, {
      children: ["Documentation is written with ", createVNode(_components.a, {
        href: "https://jsdoc.app/",
        children: "jsdoc"
      }), " comments. Example:"]
    }), "\n", createVNode(_components.pre, {
      className: "astro-code",
      style: {
        backgroundColor: "#0d1117",
        overflowX: "auto"
      },
      children: createVNode(_components.code, {
        children: [createVNode(_components.span, {
          className: "line",
          children: createVNode(_components.span, {
            style: {
              color: "#8B949E"
            },
            children: "/**"
          })
        }), "\n", createVNode(_components.span, {
          className: "line",
          children: createVNode(_components.span, {
            style: {
              color: "#8B949E"
            },
            children: " * Select a sound / sample by name."
          })
        }), "\n", createVNode(_components.span, {
          className: "line",
          children: createVNode(_components.span, {
            style: {
              color: "#8B949E"
            },
            children: " *"
          })
        }), "\n", createVNode(_components.span, {
          className: "line",
          children: [createVNode(_components.span, {
            style: {
              color: "#8B949E"
            },
            children: " * "
          }), createVNode(_components.span, {
            style: {
              color: "#FF7B72"
            },
            children: "@name"
          }), createVNode(_components.span, {
            style: {
              color: "#8B949E"
            },
            children: " "
          }), createVNode(_components.span, {
            style: {
              color: "#FFA657"
            },
            children: "s"
          })]
        }), "\n", createVNode(_components.span, {
          className: "line",
          children: [createVNode(_components.span, {
            style: {
              color: "#8B949E"
            },
            children: " * "
          }), createVNode(_components.span, {
            style: {
              color: "#FF7B72"
            },
            children: "@param"
          }), createVNode(_components.span, {
            style: {
              color: "#8B949E"
            },
            children: " "
          }), createVNode(_components.span, {
            style: {
              color: "#FFA657"
            },
            children: "{string | Pattern}"
          }), createVNode(_components.span, {
            style: {
              color: "#8B949E"
            },
            children: " "
          }), createVNode(_components.span, {
            style: {
              color: "#C9D1D9"
            },
            children: "sound"
          }), createVNode(_components.span, {
            style: {
              color: "#8B949E"
            },
            children: " The sound / pattern of sounds to pick"
          })]
        }), "\n", createVNode(_components.span, {
          className: "line",
          children: [createVNode(_components.span, {
            style: {
              color: "#8B949E"
            },
            children: " * "
          }), createVNode(_components.span, {
            style: {
              color: "#FF7B72"
            },
            children: "@example"
          })]
        }), "\n", createVNode(_components.span, {
          className: "line",
          children: createVNode(_components.span, {
            style: {
              color: "#8B949E"
            },
            children: " * s(\"bd hh\")"
          })
        }), "\n", createVNode(_components.span, {
          className: "line",
          children: createVNode(_components.span, {
            style: {
              color: "#8B949E"
            },
            children: " *"
          })
        }), "\n", createVNode(_components.span, {
          className: "line",
          children: createVNode(_components.span, {
            style: {
              color: "#8B949E"
            },
            children: " */"
          })
        }), "\n", createVNode(_components.span, {
          className: "line",
          children: createVNode(_components.span, {
            style: {
              color: "#8B949E"
            },
            children: "// implementation of s function"
          })
        })]
      })
    }), "\n", createVNode(_components.ul, {
      children: ["\n", createVNode(_components.li, {
        children: ["Before each build, these comments will be rendered into ", createVNode(_components.code, {
          children: "doc.json"
        }), " using ", createVNode(_components.a, {
          href: "https://www.npmjs.com/package/jsdoc-json",
          children: "jsdoc-json"
        }), " as a template"]
      }), "\n", createVNode(_components.li, {
        children: ["To regenerate the ", createVNode(_components.code, {
          children: "doc.json"
        }), " file manually, run ", createVNode(_components.code, {
          children: "npm run jsdoc-json"
        })]
      }), "\n", createVNode(_components.li, {
        children: ["The file is used by the ", createVNode(_components.code, {
          children: "JsDoc"
        }), " component to find the documentation by name"]
      }), "\n", createVNode(_components.li, {
        children: ["Also, it is used for the ", createVNode(_components.code, {
          children: "examples.test.mjs"
        }), " snapshot test"]
      }), "\n"]
    })]
  });
}
function MDXContent$h(props = {}) {
  return createVNode(MDXLayout$h, {
    ...props,
    children: createVNode(_createMdxContent$h, {
      ...props
    })
  });
}

__astro_tag_component__(getHeadings$h, "astro:jsx");
__astro_tag_component__(MDXContent$h, "astro:jsx");
const url$i = "/technical-manual/docs";
const file$i = "/Users/michaelgogins/cloud-music/strudel/website/src/pages/technical-manual/docs.mdx";
function rawContent$h() { throw new Error("MDX does not support rawContent()! If you need to read the Markdown contents to calculate values (ex. reading time), we suggest injecting frontmatter via remark plugins. Learn more on our docs: https://docs.astro.build/en/guides/integrations-guide/mdx/#inject-frontmatter-via-remark-or-rehype-plugins") }function compiledContent$h() { throw new Error("MDX does not support compiledContent()! If you need to read the HTML contents to calculate values (ex. reading time), we suggest injecting frontmatter via rehype plugins. Learn more on our docs: https://docs.astro.build/en/guides/integrations-guide/mdx/#inject-frontmatter-via-remark-or-rehype-plugins") }const Content$i = (props = {}) => MDXContent$h({
											...props,
											components: { Fragment, ...props.components },
										});
Content$i[Symbol.for('astro.needsHeadRendering')] = !Boolean(frontmatter$i.layout);

const _page6 = /*#__PURE__*/Object.freeze(/*#__PURE__*/Object.defineProperty({
	__proto__: null,
	frontmatter: frontmatter$i,
	_internal: _internal$h,
	getHeadings: getHeadings$h,
	url: url$i,
	file: file$i,
	rawContent: rawContent$h,
	compiledContent: compiledContent$h,
	Content: Content$i,
	default: Content$i
}, Symbol.toStringTag, { value: 'Module' }));

const MDXLayout$g = async function ({
  children
}) {
  const Layout = (await import('./chunks/MainLayout.c7eab378.mjs')).default;
  const {
    layout,
    ...content
  } = frontmatter$h;
  content.file = file$h;
  content.url = url$h;
  content.astro = {};
  Object.defineProperty(content.astro, "headings", {
    get() {
      throw new Error('The "astro" property is no longer supported! To access "headings" from your layout, try using "Astro.props.headings."');
    }
  });
  Object.defineProperty(content.astro, "html", {
    get() {
      throw new Error('The "astro" property is no longer supported! To access "html" from your layout, try using "Astro.props.compiledContent()."');
    }
  });
  Object.defineProperty(content.astro, "source", {
    get() {
      throw new Error('The "astro" property is no longer supported! To access "source" from your layout, try using "Astro.props.rawContent()."');
    }
  });
  return createVNode(Layout, {
    file: file$h,
    url: url$h,
    content,
    frontmatter: content,
    headings: getHeadings$g(),
    "server:root": true,
    children
  });
};
const frontmatter$h = {
  "title": "REPL",
  "layout": "../../layouts/MainLayout.astro"
};
const _internal$g = {
  injectedFrontmatter: {}
};
function getHeadings$g() {
  return [{
    "depth": 1,
    "slug": "repl",
    "text": "REPL"
  }, {
    "depth": 2,
    "slug": "user-code",
    "text": "User Code"
  }, {
    "depth": 3,
    "slug": "transpilation--evaluation",
    "text": "Transpilation & Evaluation"
  }, {
    "depth": 3,
    "slug": "mini-notation",
    "text": "Mini-notation"
  }, {
    "depth": 3,
    "slug": "highlighting-locations",
    "text": "Highlighting Locations"
  }, {
    "depth": 3,
    "slug": "mini-notation-1",
    "text": "Mini Notation"
  }, {
    "depth": 2,
    "slug": "scheduling-events",
    "text": "Scheduling Events"
  }, {
    "depth": 2,
    "slug": "output",
    "text": "Output"
  }, {
    "depth": 3,
    "slug": "control-parameters",
    "text": "Control Parameters"
  }, {
    "depth": 3,
    "slug": "outputs",
    "text": "Outputs"
  }];
}
function _createMdxContent$g(props) {
  const _components = Object.assign({
    h1: "h1",
    a: "a",
    span: "span",
    p: "p",
    ol: "ol",
    li: "li",
    code: "code",
    h2: "h2",
    h3: "h3",
    pre: "pre",
    ul: "ul"
  }, props.components);
  return createVNode(Fragment, {
    children: [createVNode(_components.h1, {
      id: "repl",
      children: [createVNode(_components.a, {
        "aria-hidden": "true",
        tabIndex: "-1",
        href: "#repl",
        children: createVNode(_components.span, {
          className: "icon icon-link"
        })
      }), "REPL"]
    }), "\n", "\n", createVNode(_components.p, {
      children: "While Strudel can be used as a library in any JavaScript codebase, its main, reference user interface is the Strudel REPL^[REPL stands for read, evaluate, print/play, loop. It is friendly jargon for an interactive programming interface from computing heritage, usually for a commandline interface but also applied to live coding editors.], which is a browser-based live coding environment. This live code editor is dedicated to manipulating Strudel patterns while they play. The REPL features built-in visual feedback, highlighting which elements in the patterned (mini-notation) sequences are influencing the event that is currently being played. This feedback is designed to support both learning and live use of Strudel."
    }), "\n", createVNode(_components.p, {
      children: "Besides a UI for playback control and meta information, the main part of the REPL interface is the code editor powered by CodeMirror. In it, the user can edit and evaluate pattern code live, using one of the available synthesis outputs to create music and/or sound art. The control flow of the REPL follows 3 basic steps:"
    }), "\n", createVNode(_components.ol, {
      children: ["\n", createVNode(_components.li, {
        children: ["The user writes and updates code. Each update transpiles and evaluates it to create a ", createVNode(_components.code, {
          children: "Pattern"
        }), " instance"]
      }), "\n", createVNode(_components.li, {
        children: ["While the REPL is running, the ", createVNode(_components.code, {
          children: "Scheduler"
        }), " queries the active ", createVNode(_components.code, {
          children: "Pattern"
        }), " by a regular interval, generating ", createVNode(_components.code, {
          children: "Events"
        }), " (also known as ", createVNode(_components.code, {
          children: "Haps"
        }), " in Strudel) for the next time span."]
      }), "\n", createVNode(_components.li, {
        children: ["For each scheduling tick, all generated ", createVNode(_components.code, {
          children: "Events"
        }), " are triggered by calling their ", createVNode(_components.code, {
          children: "onTrigger"
        }), " method, which is set by the output."]
      }), "\n"]
    }), "\n", createVNode("img", {
      src: "https://github.com/tidalcycles/strudel/blob/talk/talk/public/strudelflow.png?raw=true",
      width: "600"
    }), "\n", createVNode(_components.h2, {
      id: "user-code",
      children: [createVNode(_components.a, {
        "aria-hidden": "true",
        tabIndex: "-1",
        href: "#user-code",
        children: createVNode(_components.span, {
          className: "icon icon-link"
        })
      }), "User Code"]
    }), "\n", createVNode(_components.p, {
      children: ["To create a ", createVNode(_components.code, {
        children: "Pattern"
      }), " from the user code, two steps are needed:"]
    }), "\n", createVNode(_components.ol, {
      children: ["\n", createVNode(_components.li, {
        children: "Transpile the JS input code to make it functional"
      }), "\n", createVNode(_components.li, {
        children: "Evaluate the transpiled code"
      }), "\n"]
    }), "\n", createVNode(_components.h3, {
      id: "transpilation--evaluation",
      children: [createVNode(_components.a, {
        "aria-hidden": "true",
        tabIndex: "-1",
        href: "#transpilation--evaluation",
        children: createVNode(_components.span, {
          className: "icon icon-link"
        })
      }), "Transpilation & Evaluation"]
    }), "\n", createVNode(_components.p, {
      children: ["In the JavaScript world, using transpilation is a common practise to be able to use language features that are not supported by the base language. Tools like ", createVNode(_components.code, {
        children: "babel"
      }), " will transpile code that contains unsupported language features into a version of the code without those features."]
    }), "\n", createVNode(_components.p, {
      children: "In the same tradition, Strudel can add a transpilation step to simplify the user code in the context of live coding. For example, the Strudel REPL lets the user create mini-notation patterns using just double quoted strings, while single quoted strings remain what they are:"
    }), "\n", createVNode(_components.pre, {
      className: "astro-code",
      style: {
        backgroundColor: "#0d1117",
        overflowX: "auto"
      },
      children: createVNode(_components.code, {
        children: createVNode(_components.span, {
          className: "line",
          children: [createVNode(_components.span, {
            style: {
              color: "#A5D6FF"
            },
            children: "'c3 [e3 g3]*2'"
          }), createVNode(_components.span, {
            style: {
              color: "#C9D1D9"
            },
            children: ";"
          })]
        })
      })
    }), "\n", createVNode(_components.p, {
      children: "is transpiled to:"
    }), "\n", createVNode(_components.pre, {
      className: "astro-code",
      style: {
        backgroundColor: "#0d1117",
        overflowX: "auto"
      },
      children: createVNode(_components.code, {
        children: createVNode(_components.span, {
          className: "line",
          children: [createVNode(_components.span, {
            style: {
              color: "#D2A8FF"
            },
            children: "mini"
          }), createVNode(_components.span, {
            style: {
              color: "#C9D1D9"
            },
            children: "("
          }), createVNode(_components.span, {
            style: {
              color: "#A5D6FF"
            },
            children: "'c3 [e3 g3]*2'"
          }), createVNode(_components.span, {
            style: {
              color: "#C9D1D9"
            },
            children: ")."
          }), createVNode(_components.span, {
            style: {
              color: "#D2A8FF"
            },
            children: "withMiniLocation"
          }), createVNode(_components.span, {
            style: {
              color: "#C9D1D9"
            },
            children: "(["
          }), createVNode(_components.span, {
            style: {
              color: "#79C0FF"
            },
            children: "1"
          }), createVNode(_components.span, {
            style: {
              color: "#C9D1D9"
            },
            children: ", "
          }), createVNode(_components.span, {
            style: {
              color: "#79C0FF"
            },
            children: "0"
          }), createVNode(_components.span, {
            style: {
              color: "#C9D1D9"
            },
            children: ", "
          }), createVNode(_components.span, {
            style: {
              color: "#79C0FF"
            },
            children: "0"
          }), createVNode(_components.span, {
            style: {
              color: "#C9D1D9"
            },
            children: "], ["
          }), createVNode(_components.span, {
            style: {
              color: "#79C0FF"
            },
            children: "1"
          }), createVNode(_components.span, {
            style: {
              color: "#C9D1D9"
            },
            children: ", "
          }), createVNode(_components.span, {
            style: {
              color: "#79C0FF"
            },
            children: "14"
          }), createVNode(_components.span, {
            style: {
              color: "#C9D1D9"
            },
            children: ", "
          }), createVNode(_components.span, {
            style: {
              color: "#79C0FF"
            },
            children: "14"
          }), createVNode(_components.span, {
            style: {
              color: "#C9D1D9"
            },
            children: "]);"
          })]
        })
      })
    }), "\n", createVNode(_components.p, {
      children: ["Here, the string is wrapped in ", createVNode(_components.code, {
        children: "mini"
      }), ", which will create a pattern from a mini-notation string. Additionally, the ", createVNode(_components.code, {
        children: "withMiniLocation"
      }), " method passes the original source code location of the string to the pattern, which enables highlighting active events."]
    }), "\n", createVNode(_components.p, {
      children: "Other convenient features like pseudo variables, operator overloading and top level await are possible with transpilation."
    }), "\n", createVNode(_components.p, {
      children: ["After the transpilation, the code is ready to be evaluated into a ", createVNode(_components.code, {
        children: "Pattern"
      }), "."]
    }), "\n", createVNode(_components.p, {
      children: ["Behind the scenes, the user code string is parsed with ", createVNode(_components.code, {
        children: "acorn"
      }), ", turning it into an Abstract Syntax Tree (AST). The AST allows changing the structure of the code before generating the transpiled version using ", createVNode(_components.code, {
        children: "escodegen"
      }), "."]
    }), "\n", createVNode(_components.h3, {
      id: "mini-notation",
      children: [createVNode(_components.a, {
        "aria-hidden": "true",
        tabIndex: "-1",
        href: "#mini-notation",
        children: createVNode(_components.span, {
          className: "icon icon-link"
        })
      }), "Mini-notation"]
    }), "\n", createVNode(_components.p, {
      children: "While the transpilation allows JavaScript to express Patterns in a less verbose way, it is still preferable to use the mini-notation as a more compact way to express rhythm. Strudel aims to provide the same mini-notation features and syntax as used in Tidal."
    }), "\n", createVNode(_components.p, {
      children: ["The mini-notation parser is implemented using ", createVNode(_components.code, {
        children: "peggy"
      }), ", which allows generating performant parsers for Domain Specific Languages (DSLs) using a concise grammar notation. The generated parser turns the mini-notation string into an AST which is used to call the respective Strudel functions with the given structure. For example, ", createVNode(_components.code, {
        children: "\"c3 [e3 g3]*2\""
      }), " will result in the following calls:"]
    }), "\n", createVNode(_components.pre, {
      className: "astro-code",
      style: {
        backgroundColor: "#0d1117",
        overflowX: "auto"
      },
      children: createVNode(_components.code, {
        children: [createVNode(_components.span, {
          className: "line",
          children: [createVNode(_components.span, {
            style: {
              color: "#D2A8FF"
            },
            children: "seq"
          }), createVNode(_components.span, {
            style: {
              color: "#C9D1D9"
            },
            children: "("
          })]
        }), "\n", createVNode(_components.span, {
          className: "line",
          children: [createVNode(_components.span, {
            style: {
              color: "#C9D1D9"
            },
            children: "  "
          }), createVNode(_components.span, {
            style: {
              color: "#D2A8FF"
            },
            children: "reify"
          }), createVNode(_components.span, {
            style: {
              color: "#C9D1D9"
            },
            children: "("
          }), createVNode(_components.span, {
            style: {
              color: "#A5D6FF"
            },
            children: "'c3'"
          }), createVNode(_components.span, {
            style: {
              color: "#C9D1D9"
            },
            children: ")."
          }), createVNode(_components.span, {
            style: {
              color: "#D2A8FF"
            },
            children: "withLocation"
          }), createVNode(_components.span, {
            style: {
              color: "#C9D1D9"
            },
            children: "(["
          }), createVNode(_components.span, {
            style: {
              color: "#79C0FF"
            },
            children: "1"
          }), createVNode(_components.span, {
            style: {
              color: "#C9D1D9"
            },
            children: ", "
          }), createVNode(_components.span, {
            style: {
              color: "#79C0FF"
            },
            children: "1"
          }), createVNode(_components.span, {
            style: {
              color: "#C9D1D9"
            },
            children: ", "
          }), createVNode(_components.span, {
            style: {
              color: "#79C0FF"
            },
            children: "1"
          }), createVNode(_components.span, {
            style: {
              color: "#C9D1D9"
            },
            children: "], ["
          }), createVNode(_components.span, {
            style: {
              color: "#79C0FF"
            },
            children: "1"
          }), createVNode(_components.span, {
            style: {
              color: "#C9D1D9"
            },
            children: ", "
          }), createVNode(_components.span, {
            style: {
              color: "#79C0FF"
            },
            children: "4"
          }), createVNode(_components.span, {
            style: {
              color: "#C9D1D9"
            },
            children: ", "
          }), createVNode(_components.span, {
            style: {
              color: "#79C0FF"
            },
            children: "4"
          }), createVNode(_components.span, {
            style: {
              color: "#C9D1D9"
            },
            children: "]),"
          })]
        }), "\n", createVNode(_components.span, {
          className: "line",
          children: [createVNode(_components.span, {
            style: {
              color: "#C9D1D9"
            },
            children: "  "
          }), createVNode(_components.span, {
            style: {
              color: "#D2A8FF"
            },
            children: "seq"
          }), createVNode(_components.span, {
            style: {
              color: "#C9D1D9"
            },
            children: "("
          }), createVNode(_components.span, {
            style: {
              color: "#D2A8FF"
            },
            children: "reify"
          }), createVNode(_components.span, {
            style: {
              color: "#C9D1D9"
            },
            children: "("
          }), createVNode(_components.span, {
            style: {
              color: "#A5D6FF"
            },
            children: "'e3'"
          }), createVNode(_components.span, {
            style: {
              color: "#C9D1D9"
            },
            children: ")."
          }), createVNode(_components.span, {
            style: {
              color: "#D2A8FF"
            },
            children: "withLocation"
          }), createVNode(_components.span, {
            style: {
              color: "#C9D1D9"
            },
            children: "(["
          }), createVNode(_components.span, {
            style: {
              color: "#79C0FF"
            },
            children: "1"
          }), createVNode(_components.span, {
            style: {
              color: "#C9D1D9"
            },
            children: ", "
          }), createVNode(_components.span, {
            style: {
              color: "#79C0FF"
            },
            children: "5"
          }), createVNode(_components.span, {
            style: {
              color: "#C9D1D9"
            },
            children: ", "
          }), createVNode(_components.span, {
            style: {
              color: "#79C0FF"
            },
            children: "5"
          }), createVNode(_components.span, {
            style: {
              color: "#C9D1D9"
            },
            children: "], ["
          }), createVNode(_components.span, {
            style: {
              color: "#79C0FF"
            },
            children: "1"
          }), createVNode(_components.span, {
            style: {
              color: "#C9D1D9"
            },
            children: ", "
          }), createVNode(_components.span, {
            style: {
              color: "#79C0FF"
            },
            children: "8"
          }), createVNode(_components.span, {
            style: {
              color: "#C9D1D9"
            },
            children: ", "
          }), createVNode(_components.span, {
            style: {
              color: "#79C0FF"
            },
            children: "8"
          }), createVNode(_components.span, {
            style: {
              color: "#C9D1D9"
            },
            children: "]), "
          }), createVNode(_components.span, {
            style: {
              color: "#D2A8FF"
            },
            children: "reify"
          }), createVNode(_components.span, {
            style: {
              color: "#C9D1D9"
            },
            children: "("
          }), createVNode(_components.span, {
            style: {
              color: "#A5D6FF"
            },
            children: "'g3'"
          }), createVNode(_components.span, {
            style: {
              color: "#C9D1D9"
            },
            children: ")."
          }), createVNode(_components.span, {
            style: {
              color: "#D2A8FF"
            },
            children: "withLocation"
          }), createVNode(_components.span, {
            style: {
              color: "#C9D1D9"
            },
            children: "(["
          }), createVNode(_components.span, {
            style: {
              color: "#79C0FF"
            },
            children: "1"
          }), createVNode(_components.span, {
            style: {
              color: "#C9D1D9"
            },
            children: ", "
          }), createVNode(_components.span, {
            style: {
              color: "#79C0FF"
            },
            children: "8"
          }), createVNode(_components.span, {
            style: {
              color: "#C9D1D9"
            },
            children: ", "
          }), createVNode(_components.span, {
            style: {
              color: "#79C0FF"
            },
            children: "8"
          }), createVNode(_components.span, {
            style: {
              color: "#C9D1D9"
            },
            children: "], ["
          }), createVNode(_components.span, {
            style: {
              color: "#79C0FF"
            },
            children: "1"
          }), createVNode(_components.span, {
            style: {
              color: "#C9D1D9"
            },
            children: ", "
          }), createVNode(_components.span, {
            style: {
              color: "#79C0FF"
            },
            children: "10"
          }), createVNode(_components.span, {
            style: {
              color: "#C9D1D9"
            },
            children: ", "
          }), createVNode(_components.span, {
            style: {
              color: "#79C0FF"
            },
            children: "10"
          }), createVNode(_components.span, {
            style: {
              color: "#C9D1D9"
            },
            children: "]))."
          }), createVNode(_components.span, {
            style: {
              color: "#D2A8FF"
            },
            children: "fast"
          }), createVNode(_components.span, {
            style: {
              color: "#C9D1D9"
            },
            children: "("
          }), createVNode(_components.span, {
            style: {
              color: "#79C0FF"
            },
            children: "2"
          }), createVNode(_components.span, {
            style: {
              color: "#C9D1D9"
            },
            children: "),"
          })]
        }), "\n", createVNode(_components.span, {
          className: "line",
          children: createVNode(_components.span, {
            style: {
              color: "#C9D1D9"
            },
            children: ");"
          })
        })]
      })
    }), "\n", createVNode(_components.h3, {
      id: "highlighting-locations",
      children: [createVNode(_components.a, {
        "aria-hidden": "true",
        tabIndex: "-1",
        href: "#highlighting-locations",
        children: createVNode(_components.span, {
          className: "icon icon-link"
        })
      }), "Highlighting Locations"]
    }), "\n", createVNode(_components.p, {
      children: ["As seen in the examples above, both the JS and the mini-notation parser add source code locations using ", createVNode(_components.code, {
        children: "withMiniLocation"
      }), " and ", createVNode(_components.code, {
        children: "withLocation"
      }), " methods. While the JS parser adds locations relative to the user code as a whole, the mini-notation adds locations relative to the position of the mini-notation string. The absolute location of elements within mini-notation can be calculated by simply adding both locations together. This absolute location can be used to highlight active events in real time."]
    }), "\n", createVNode(_components.h3, {
      id: "mini-notation-1",
      children: [createVNode(_components.a, {
        "aria-hidden": "true",
        tabIndex: "-1",
        href: "#mini-notation-1",
        children: createVNode(_components.span, {
          className: "icon icon-link"
        })
      }), "Mini Notation"]
    }), "\n", createVNode(_components.p, {
      children: "Another important part of the user code is the mini notation, which allows to express rhythms in a short manner."
    }), "\n", createVNode(_components.ul, {
      children: ["\n", createVNode(_components.li, {
        children: ["the mini notation is ", createVNode(_components.a, {
          href: "https://github.com/tidalcycles/strudel/blob/main/packages/mini/krill.pegjs",
          children: "implemented as a PEG grammar"
        }), ", living in the ", createVNode(_components.a, {
          href: "https://github.com/tidalcycles/strudel/tree/main/packages/mini",
          children: "mini package"
        })]
      }), "\n", createVNode(_components.li, {
        children: ["it is based on ", createVNode(_components.a, {
          href: "https://github.com/Mdashdotdashn/krill",
          children: "krill"
        }), " by Mdashdotdashn"]
      }), "\n", createVNode(_components.li, {
        children: ["the peg grammar is used to generate a parser with ", createVNode(_components.a, {
          href: "https://peggyjs.org/",
          children: "peggyjs"
        })]
      }), "\n", createVNode(_components.li, {
        children: "the generated parser takes a mini notation string and outputs an AST"
      }), "\n", createVNode(_components.li, {
        children: "the AST can then be used to construct a pattern using the regular Strudel API"
      }), "\n"]
    }), "\n", createVNode(_components.p, {
      children: ["Here\u2019s an example AST for ", createVNode(_components.code, {
        children: "c3 [e3 g3]"
      })]
    }), "\n", createVNode(_components.pre, {
      className: "astro-code",
      style: {
        backgroundColor: "#0d1117",
        overflowX: "auto"
      },
      children: createVNode(_components.code, {
        children: [createVNode(_components.span, {
          className: "line",
          children: createVNode(_components.span, {
            style: {
              color: "#C9D1D9"
            },
            children: "{"
          })
        }), "\n", createVNode(_components.span, {
          className: "line",
          children: [createVNode(_components.span, {
            style: {
              color: "#C9D1D9"
            },
            children: "  "
          }), createVNode(_components.span, {
            style: {
              color: "#7EE787"
            },
            children: "\"type_\""
          }), createVNode(_components.span, {
            style: {
              color: "#C9D1D9"
            },
            children: ": "
          }), createVNode(_components.span, {
            style: {
              color: "#A5D6FF"
            },
            children: "\"pattern\""
          }), createVNode(_components.span, {
            style: {
              color: "#C9D1D9"
            },
            children: ","
          })]
        }), "\n", createVNode(_components.span, {
          className: "line",
          children: [createVNode(_components.span, {
            style: {
              color: "#C9D1D9"
            },
            children: "  "
          }), createVNode(_components.span, {
            style: {
              color: "#7EE787"
            },
            children: "\"arguments_\""
          }), createVNode(_components.span, {
            style: {
              color: "#C9D1D9"
            },
            children: ": { "
          }), createVNode(_components.span, {
            style: {
              color: "#7EE787"
            },
            children: "\"alignment\""
          }), createVNode(_components.span, {
            style: {
              color: "#C9D1D9"
            },
            children: ": "
          }), createVNode(_components.span, {
            style: {
              color: "#A5D6FF"
            },
            children: "\"h\""
          }), createVNode(_components.span, {
            style: {
              color: "#C9D1D9"
            },
            children: " },"
          })]
        }), "\n", createVNode(_components.span, {
          className: "line",
          children: [createVNode(_components.span, {
            style: {
              color: "#C9D1D9"
            },
            children: "  "
          }), createVNode(_components.span, {
            style: {
              color: "#7EE787"
            },
            children: "\"source_\""
          }), createVNode(_components.span, {
            style: {
              color: "#C9D1D9"
            },
            children: ": ["
          })]
        }), "\n", createVNode(_components.span, {
          className: "line",
          children: createVNode(_components.span, {
            style: {
              color: "#C9D1D9"
            },
            children: "    {"
          })
        }), "\n", createVNode(_components.span, {
          className: "line",
          children: [createVNode(_components.span, {
            style: {
              color: "#C9D1D9"
            },
            children: "      "
          }), createVNode(_components.span, {
            style: {
              color: "#7EE787"
            },
            children: "\"type_\""
          }), createVNode(_components.span, {
            style: {
              color: "#C9D1D9"
            },
            children: ": "
          }), createVNode(_components.span, {
            style: {
              color: "#A5D6FF"
            },
            children: "\"element\""
          }), createVNode(_components.span, {
            style: {
              color: "#C9D1D9"
            },
            children: ", "
          }), createVNode(_components.span, {
            style: {
              color: "#7EE787"
            },
            children: "\"source_\""
          }), createVNode(_components.span, {
            style: {
              color: "#C9D1D9"
            },
            children: ": "
          }), createVNode(_components.span, {
            style: {
              color: "#A5D6FF"
            },
            children: "\"c3\""
          }), createVNode(_components.span, {
            style: {
              color: "#C9D1D9"
            },
            children: ","
          })]
        }), "\n", createVNode(_components.span, {
          className: "line",
          children: [createVNode(_components.span, {
            style: {
              color: "#C9D1D9"
            },
            children: "      "
          }), createVNode(_components.span, {
            style: {
              color: "#7EE787"
            },
            children: "\"location_\""
          }), createVNode(_components.span, {
            style: {
              color: "#C9D1D9"
            },
            children: ": { "
          }), createVNode(_components.span, {
            style: {
              color: "#7EE787"
            },
            children: "\"start\""
          }), createVNode(_components.span, {
            style: {
              color: "#C9D1D9"
            },
            children: ": { "
          }), createVNode(_components.span, {
            style: {
              color: "#7EE787"
            },
            children: "\"offset\""
          }), createVNode(_components.span, {
            style: {
              color: "#C9D1D9"
            },
            children: ": "
          }), createVNode(_components.span, {
            style: {
              color: "#79C0FF"
            },
            children: "1"
          }), createVNode(_components.span, {
            style: {
              color: "#C9D1D9"
            },
            children: ", "
          }), createVNode(_components.span, {
            style: {
              color: "#7EE787"
            },
            children: "\"line\""
          }), createVNode(_components.span, {
            style: {
              color: "#C9D1D9"
            },
            children: ": "
          }), createVNode(_components.span, {
            style: {
              color: "#79C0FF"
            },
            children: "1"
          }), createVNode(_components.span, {
            style: {
              color: "#C9D1D9"
            },
            children: ", "
          }), createVNode(_components.span, {
            style: {
              color: "#7EE787"
            },
            children: "\"column\""
          }), createVNode(_components.span, {
            style: {
              color: "#C9D1D9"
            },
            children: ": "
          }), createVNode(_components.span, {
            style: {
              color: "#79C0FF"
            },
            children: "2"
          }), createVNode(_components.span, {
            style: {
              color: "#C9D1D9"
            },
            children: " }, "
          }), createVNode(_components.span, {
            style: {
              color: "#7EE787"
            },
            children: "\"end\""
          }), createVNode(_components.span, {
            style: {
              color: "#C9D1D9"
            },
            children: ": { "
          }), createVNode(_components.span, {
            style: {
              color: "#7EE787"
            },
            children: "\"offset\""
          }), createVNode(_components.span, {
            style: {
              color: "#C9D1D9"
            },
            children: ": "
          }), createVNode(_components.span, {
            style: {
              color: "#79C0FF"
            },
            children: "4"
          }), createVNode(_components.span, {
            style: {
              color: "#C9D1D9"
            },
            children: ", "
          }), createVNode(_components.span, {
            style: {
              color: "#7EE787"
            },
            children: "\"line\""
          }), createVNode(_components.span, {
            style: {
              color: "#C9D1D9"
            },
            children: ": "
          }), createVNode(_components.span, {
            style: {
              color: "#79C0FF"
            },
            children: "1"
          }), createVNode(_components.span, {
            style: {
              color: "#C9D1D9"
            },
            children: ", "
          }), createVNode(_components.span, {
            style: {
              color: "#7EE787"
            },
            children: "\"column\""
          }), createVNode(_components.span, {
            style: {
              color: "#C9D1D9"
            },
            children: ": "
          }), createVNode(_components.span, {
            style: {
              color: "#79C0FF"
            },
            children: "5"
          }), createVNode(_components.span, {
            style: {
              color: "#C9D1D9"
            },
            children: " } }"
          })]
        }), "\n", createVNode(_components.span, {
          className: "line",
          children: createVNode(_components.span, {
            style: {
              color: "#C9D1D9"
            },
            children: "    },"
          })
        }), "\n", createVNode(_components.span, {
          className: "line",
          children: createVNode(_components.span, {
            style: {
              color: "#C9D1D9"
            },
            children: "    {"
          })
        }), "\n", createVNode(_components.span, {
          className: "line",
          children: [createVNode(_components.span, {
            style: {
              color: "#C9D1D9"
            },
            children: "      "
          }), createVNode(_components.span, {
            style: {
              color: "#7EE787"
            },
            children: "\"type_\""
          }), createVNode(_components.span, {
            style: {
              color: "#C9D1D9"
            },
            children: ": "
          }), createVNode(_components.span, {
            style: {
              color: "#A5D6FF"
            },
            children: "\"element\""
          }), createVNode(_components.span, {
            style: {
              color: "#C9D1D9"
            },
            children: ","
          })]
        }), "\n", createVNode(_components.span, {
          className: "line",
          children: [createVNode(_components.span, {
            style: {
              color: "#C9D1D9"
            },
            children: "      "
          }), createVNode(_components.span, {
            style: {
              color: "#7EE787"
            },
            children: "\"location_\""
          }), createVNode(_components.span, {
            style: {
              color: "#C9D1D9"
            },
            children: ": { "
          }), createVNode(_components.span, {
            style: {
              color: "#7EE787"
            },
            children: "\"start\""
          }), createVNode(_components.span, {
            style: {
              color: "#C9D1D9"
            },
            children: ": { "
          }), createVNode(_components.span, {
            style: {
              color: "#7EE787"
            },
            children: "\"offset\""
          }), createVNode(_components.span, {
            style: {
              color: "#C9D1D9"
            },
            children: ": "
          }), createVNode(_components.span, {
            style: {
              color: "#79C0FF"
            },
            children: "4"
          }), createVNode(_components.span, {
            style: {
              color: "#C9D1D9"
            },
            children: ", "
          }), createVNode(_components.span, {
            style: {
              color: "#7EE787"
            },
            children: "\"line\""
          }), createVNode(_components.span, {
            style: {
              color: "#C9D1D9"
            },
            children: ": "
          }), createVNode(_components.span, {
            style: {
              color: "#79C0FF"
            },
            children: "1"
          }), createVNode(_components.span, {
            style: {
              color: "#C9D1D9"
            },
            children: ", "
          }), createVNode(_components.span, {
            style: {
              color: "#7EE787"
            },
            children: "\"column\""
          }), createVNode(_components.span, {
            style: {
              color: "#C9D1D9"
            },
            children: ": "
          }), createVNode(_components.span, {
            style: {
              color: "#79C0FF"
            },
            children: "5"
          }), createVNode(_components.span, {
            style: {
              color: "#C9D1D9"
            },
            children: " }, "
          }), createVNode(_components.span, {
            style: {
              color: "#7EE787"
            },
            children: "\"end\""
          }), createVNode(_components.span, {
            style: {
              color: "#C9D1D9"
            },
            children: ": { "
          }), createVNode(_components.span, {
            style: {
              color: "#7EE787"
            },
            children: "\"offset\""
          }), createVNode(_components.span, {
            style: {
              color: "#C9D1D9"
            },
            children: ": "
          }), createVNode(_components.span, {
            style: {
              color: "#79C0FF"
            },
            children: "11"
          }), createVNode(_components.span, {
            style: {
              color: "#C9D1D9"
            },
            children: ", "
          }), createVNode(_components.span, {
            style: {
              color: "#7EE787"
            },
            children: "\"line\""
          }), createVNode(_components.span, {
            style: {
              color: "#C9D1D9"
            },
            children: ": "
          }), createVNode(_components.span, {
            style: {
              color: "#79C0FF"
            },
            children: "1"
          }), createVNode(_components.span, {
            style: {
              color: "#C9D1D9"
            },
            children: ", "
          }), createVNode(_components.span, {
            style: {
              color: "#7EE787"
            },
            children: "\"column\""
          }), createVNode(_components.span, {
            style: {
              color: "#C9D1D9"
            },
            children: ": "
          }), createVNode(_components.span, {
            style: {
              color: "#79C0FF"
            },
            children: "12"
          }), createVNode(_components.span, {
            style: {
              color: "#C9D1D9"
            },
            children: " } }"
          })]
        }), "\n", createVNode(_components.span, {
          className: "line",
          children: [createVNode(_components.span, {
            style: {
              color: "#C9D1D9"
            },
            children: "      "
          }), createVNode(_components.span, {
            style: {
              color: "#A5D6FF"
            },
            children: "\"source_\""
          }), createVNode(_components.span, {
            style: {
              color: "#FFA198"
            },
            children: ":"
          }), createVNode(_components.span, {
            style: {
              color: "#C9D1D9"
            },
            children: " {"
          })]
        }), "\n", createVNode(_components.span, {
          className: "line",
          children: [createVNode(_components.span, {
            style: {
              color: "#C9D1D9"
            },
            children: "        "
          }), createVNode(_components.span, {
            style: {
              color: "#7EE787"
            },
            children: "\"type_\""
          }), createVNode(_components.span, {
            style: {
              color: "#C9D1D9"
            },
            children: ": "
          }), createVNode(_components.span, {
            style: {
              color: "#A5D6FF"
            },
            children: "\"pattern\""
          }), createVNode(_components.span, {
            style: {
              color: "#C9D1D9"
            },
            children: ", "
          }), createVNode(_components.span, {
            style: {
              color: "#7EE787"
            },
            children: "\"arguments_\""
          }), createVNode(_components.span, {
            style: {
              color: "#C9D1D9"
            },
            children: ": { "
          }), createVNode(_components.span, {
            style: {
              color: "#7EE787"
            },
            children: "\"alignment\""
          }), createVNode(_components.span, {
            style: {
              color: "#C9D1D9"
            },
            children: ": "
          }), createVNode(_components.span, {
            style: {
              color: "#A5D6FF"
            },
            children: "\"h\""
          }), createVNode(_components.span, {
            style: {
              color: "#C9D1D9"
            },
            children: " },"
          })]
        }), "\n", createVNode(_components.span, {
          className: "line",
          children: [createVNode(_components.span, {
            style: {
              color: "#C9D1D9"
            },
            children: "        "
          }), createVNode(_components.span, {
            style: {
              color: "#7EE787"
            },
            children: "\"source_\""
          }), createVNode(_components.span, {
            style: {
              color: "#C9D1D9"
            },
            children: ": ["
          })]
        }), "\n", createVNode(_components.span, {
          className: "line",
          children: createVNode(_components.span, {
            style: {
              color: "#C9D1D9"
            },
            children: "          {"
          })
        }), "\n", createVNode(_components.span, {
          className: "line",
          children: [createVNode(_components.span, {
            style: {
              color: "#C9D1D9"
            },
            children: "            "
          }), createVNode(_components.span, {
            style: {
              color: "#7EE787"
            },
            children: "\"type_\""
          }), createVNode(_components.span, {
            style: {
              color: "#C9D1D9"
            },
            children: ": "
          }), createVNode(_components.span, {
            style: {
              color: "#A5D6FF"
            },
            children: "\"element\""
          }), createVNode(_components.span, {
            style: {
              color: "#C9D1D9"
            },
            children: ", "
          }), createVNode(_components.span, {
            style: {
              color: "#7EE787"
            },
            children: "\"source_\""
          }), createVNode(_components.span, {
            style: {
              color: "#C9D1D9"
            },
            children: ": "
          }), createVNode(_components.span, {
            style: {
              color: "#A5D6FF"
            },
            children: "\"e3\""
          }), createVNode(_components.span, {
            style: {
              color: "#C9D1D9"
            },
            children: ","
          })]
        }), "\n", createVNode(_components.span, {
          className: "line",
          children: [createVNode(_components.span, {
            style: {
              color: "#C9D1D9"
            },
            children: "            "
          }), createVNode(_components.span, {
            style: {
              color: "#7EE787"
            },
            children: "\"location_\""
          }), createVNode(_components.span, {
            style: {
              color: "#C9D1D9"
            },
            children: ": { "
          }), createVNode(_components.span, {
            style: {
              color: "#7EE787"
            },
            children: "\"start\""
          }), createVNode(_components.span, {
            style: {
              color: "#C9D1D9"
            },
            children: ": { "
          }), createVNode(_components.span, {
            style: {
              color: "#7EE787"
            },
            children: "\"offset\""
          }), createVNode(_components.span, {
            style: {
              color: "#C9D1D9"
            },
            children: ": "
          }), createVNode(_components.span, {
            style: {
              color: "#79C0FF"
            },
            children: "5"
          }), createVNode(_components.span, {
            style: {
              color: "#C9D1D9"
            },
            children: ", "
          }), createVNode(_components.span, {
            style: {
              color: "#7EE787"
            },
            children: "\"line\""
          }), createVNode(_components.span, {
            style: {
              color: "#C9D1D9"
            },
            children: ": "
          }), createVNode(_components.span, {
            style: {
              color: "#79C0FF"
            },
            children: "1"
          }), createVNode(_components.span, {
            style: {
              color: "#C9D1D9"
            },
            children: ", "
          }), createVNode(_components.span, {
            style: {
              color: "#7EE787"
            },
            children: "\"column\""
          }), createVNode(_components.span, {
            style: {
              color: "#C9D1D9"
            },
            children: ": "
          }), createVNode(_components.span, {
            style: {
              color: "#79C0FF"
            },
            children: "6"
          }), createVNode(_components.span, {
            style: {
              color: "#C9D1D9"
            },
            children: " }, "
          }), createVNode(_components.span, {
            style: {
              color: "#7EE787"
            },
            children: "\"end\""
          }), createVNode(_components.span, {
            style: {
              color: "#C9D1D9"
            },
            children: ": { "
          }), createVNode(_components.span, {
            style: {
              color: "#7EE787"
            },
            children: "\"offset\""
          }), createVNode(_components.span, {
            style: {
              color: "#C9D1D9"
            },
            children: ": "
          }), createVNode(_components.span, {
            style: {
              color: "#79C0FF"
            },
            children: "8"
          }), createVNode(_components.span, {
            style: {
              color: "#C9D1D9"
            },
            children: ", "
          }), createVNode(_components.span, {
            style: {
              color: "#7EE787"
            },
            children: "\"line\""
          }), createVNode(_components.span, {
            style: {
              color: "#C9D1D9"
            },
            children: ": "
          }), createVNode(_components.span, {
            style: {
              color: "#79C0FF"
            },
            children: "1"
          }), createVNode(_components.span, {
            style: {
              color: "#C9D1D9"
            },
            children: ", "
          }), createVNode(_components.span, {
            style: {
              color: "#7EE787"
            },
            children: "\"column\""
          }), createVNode(_components.span, {
            style: {
              color: "#C9D1D9"
            },
            children: ": "
          }), createVNode(_components.span, {
            style: {
              color: "#79C0FF"
            },
            children: "9"
          }), createVNode(_components.span, {
            style: {
              color: "#C9D1D9"
            },
            children: " } }"
          })]
        }), "\n", createVNode(_components.span, {
          className: "line",
          children: createVNode(_components.span, {
            style: {
              color: "#C9D1D9"
            },
            children: "          },"
          })
        }), "\n", createVNode(_components.span, {
          className: "line",
          children: createVNode(_components.span, {
            style: {
              color: "#C9D1D9"
            },
            children: "          {"
          })
        }), "\n", createVNode(_components.span, {
          className: "line",
          children: [createVNode(_components.span, {
            style: {
              color: "#C9D1D9"
            },
            children: "            "
          }), createVNode(_components.span, {
            style: {
              color: "#7EE787"
            },
            children: "\"type_\""
          }), createVNode(_components.span, {
            style: {
              color: "#C9D1D9"
            },
            children: ": "
          }), createVNode(_components.span, {
            style: {
              color: "#A5D6FF"
            },
            children: "\"element\""
          }), createVNode(_components.span, {
            style: {
              color: "#C9D1D9"
            },
            children: ", "
          }), createVNode(_components.span, {
            style: {
              color: "#7EE787"
            },
            children: "\"source_\""
          }), createVNode(_components.span, {
            style: {
              color: "#C9D1D9"
            },
            children: ": "
          }), createVNode(_components.span, {
            style: {
              color: "#A5D6FF"
            },
            children: "\"g3\""
          }), createVNode(_components.span, {
            style: {
              color: "#C9D1D9"
            },
            children: ","
          })]
        }), "\n", createVNode(_components.span, {
          className: "line",
          children: [createVNode(_components.span, {
            style: {
              color: "#C9D1D9"
            },
            children: "            "
          }), createVNode(_components.span, {
            style: {
              color: "#7EE787"
            },
            children: "\"location_\""
          }), createVNode(_components.span, {
            style: {
              color: "#C9D1D9"
            },
            children: ": { "
          }), createVNode(_components.span, {
            style: {
              color: "#7EE787"
            },
            children: "\"start\""
          }), createVNode(_components.span, {
            style: {
              color: "#C9D1D9"
            },
            children: ": { "
          }), createVNode(_components.span, {
            style: {
              color: "#7EE787"
            },
            children: "\"offset\""
          }), createVNode(_components.span, {
            style: {
              color: "#C9D1D9"
            },
            children: ": "
          }), createVNode(_components.span, {
            style: {
              color: "#79C0FF"
            },
            children: "8"
          }), createVNode(_components.span, {
            style: {
              color: "#C9D1D9"
            },
            children: ", "
          }), createVNode(_components.span, {
            style: {
              color: "#7EE787"
            },
            children: "\"line\""
          }), createVNode(_components.span, {
            style: {
              color: "#C9D1D9"
            },
            children: ": "
          }), createVNode(_components.span, {
            style: {
              color: "#79C0FF"
            },
            children: "1"
          }), createVNode(_components.span, {
            style: {
              color: "#C9D1D9"
            },
            children: ", "
          }), createVNode(_components.span, {
            style: {
              color: "#7EE787"
            },
            children: "\"column\""
          }), createVNode(_components.span, {
            style: {
              color: "#C9D1D9"
            },
            children: ": "
          }), createVNode(_components.span, {
            style: {
              color: "#79C0FF"
            },
            children: "9"
          }), createVNode(_components.span, {
            style: {
              color: "#C9D1D9"
            },
            children: " }, "
          }), createVNode(_components.span, {
            style: {
              color: "#7EE787"
            },
            children: "\"end\""
          }), createVNode(_components.span, {
            style: {
              color: "#C9D1D9"
            },
            children: ": { "
          }), createVNode(_components.span, {
            style: {
              color: "#7EE787"
            },
            children: "\"offset\""
          }), createVNode(_components.span, {
            style: {
              color: "#C9D1D9"
            },
            children: ": "
          }), createVNode(_components.span, {
            style: {
              color: "#79C0FF"
            },
            children: "10"
          }), createVNode(_components.span, {
            style: {
              color: "#C9D1D9"
            },
            children: ", "
          }), createVNode(_components.span, {
            style: {
              color: "#7EE787"
            },
            children: "\"line\""
          }), createVNode(_components.span, {
            style: {
              color: "#C9D1D9"
            },
            children: ": "
          }), createVNode(_components.span, {
            style: {
              color: "#79C0FF"
            },
            children: "1"
          }), createVNode(_components.span, {
            style: {
              color: "#C9D1D9"
            },
            children: ", "
          }), createVNode(_components.span, {
            style: {
              color: "#7EE787"
            },
            children: "\"column\""
          }), createVNode(_components.span, {
            style: {
              color: "#C9D1D9"
            },
            children: ": "
          }), createVNode(_components.span, {
            style: {
              color: "#79C0FF"
            },
            children: "11"
          }), createVNode(_components.span, {
            style: {
              color: "#C9D1D9"
            },
            children: " } }"
          })]
        }), "\n", createVNode(_components.span, {
          className: "line",
          children: createVNode(_components.span, {
            style: {
              color: "#C9D1D9"
            },
            children: "          }"
          })
        }), "\n", createVNode(_components.span, {
          className: "line",
          children: createVNode(_components.span, {
            style: {
              color: "#C9D1D9"
            },
            children: "        ]"
          })
        }), "\n", createVNode(_components.span, {
          className: "line",
          children: createVNode(_components.span, {
            style: {
              color: "#C9D1D9"
            },
            children: "      },"
          })
        }), "\n", createVNode(_components.span, {
          className: "line",
          children: createVNode(_components.span, {
            style: {
              color: "#C9D1D9"
            },
            children: "    }"
          })
        }), "\n", createVNode(_components.span, {
          className: "line",
          children: createVNode(_components.span, {
            style: {
              color: "#C9D1D9"
            },
            children: "  ]"
          })
        }), "\n", createVNode(_components.span, {
          className: "line",
          children: createVNode(_components.span, {
            style: {
              color: "#C9D1D9"
            },
            children: "}"
          })
        })]
      })
    }), "\n", createVNode(_components.p, {
      children: ["which translates to ", createVNode(_components.code, {
        children: "seq(c3, seq(e3, g3))"
      })]
    }), "\n", createVNode(_components.h2, {
      id: "scheduling-events",
      children: [createVNode(_components.a, {
        "aria-hidden": "true",
        tabIndex: "-1",
        href: "#scheduling-events",
        children: createVNode(_components.span, {
          className: "icon icon-link"
        })
      }), "Scheduling Events"]
    }), "\n", createVNode(_components.p, {
      children: ["After an instance of ", createVNode(_components.code, {
        children: "Pattern"
      }), " is obtained from the user code,\nit is used by the scheduler to get queried for events. Once started, the scheduler runs at a fixed interval to query the active pattern for events within the current interval\u2019s time span. A simplified implementation looks like this:"]
    }), "\n", createVNode(_components.pre, {
      className: "astro-code",
      style: {
        backgroundColor: "#0d1117",
        overflowX: "auto"
      },
      children: createVNode(_components.code, {
        children: [createVNode(_components.span, {
          className: "line",
          children: [createVNode(_components.span, {
            style: {
              color: "#FF7B72"
            },
            children: "let"
          }), createVNode(_components.span, {
            style: {
              color: "#C9D1D9"
            },
            children: " pattern "
          }), createVNode(_components.span, {
            style: {
              color: "#FF7B72"
            },
            children: "="
          }), createVNode(_components.span, {
            style: {
              color: "#C9D1D9"
            },
            children: " "
          }), createVNode(_components.span, {
            style: {
              color: "#D2A8FF"
            },
            children: "seq"
          }), createVNode(_components.span, {
            style: {
              color: "#C9D1D9"
            },
            children: "("
          }), createVNode(_components.span, {
            style: {
              color: "#A5D6FF"
            },
            children: "'c3'"
          }), createVNode(_components.span, {
            style: {
              color: "#C9D1D9"
            },
            children: ", ["
          }), createVNode(_components.span, {
            style: {
              color: "#A5D6FF"
            },
            children: "'e3'"
          }), createVNode(_components.span, {
            style: {
              color: "#C9D1D9"
            },
            children: ", "
          }), createVNode(_components.span, {
            style: {
              color: "#A5D6FF"
            },
            children: "'g3'"
          }), createVNode(_components.span, {
            style: {
              color: "#C9D1D9"
            },
            children: "]); "
          }), createVNode(_components.span, {
            style: {
              color: "#8B949E"
            },
            children: "// pattern from user"
          })]
        }), "\n", createVNode(_components.span, {
          className: "line",
          children: [createVNode(_components.span, {
            style: {
              color: "#FF7B72"
            },
            children: "let"
          }), createVNode(_components.span, {
            style: {
              color: "#C9D1D9"
            },
            children: " interval "
          }), createVNode(_components.span, {
            style: {
              color: "#FF7B72"
            },
            children: "="
          }), createVNode(_components.span, {
            style: {
              color: "#C9D1D9"
            },
            children: " "
          }), createVNode(_components.span, {
            style: {
              color: "#79C0FF"
            },
            children: "0.5"
          }), createVNode(_components.span, {
            style: {
              color: "#C9D1D9"
            },
            children: "; "
          }), createVNode(_components.span, {
            style: {
              color: "#8B949E"
            },
            children: "// query interval in seconds"
          })]
        }), "\n", createVNode(_components.span, {
          className: "line",
          children: [createVNode(_components.span, {
            style: {
              color: "#FF7B72"
            },
            children: "let"
          }), createVNode(_components.span, {
            style: {
              color: "#C9D1D9"
            },
            children: " time "
          }), createVNode(_components.span, {
            style: {
              color: "#FF7B72"
            },
            children: "="
          }), createVNode(_components.span, {
            style: {
              color: "#C9D1D9"
            },
            children: " "
          }), createVNode(_components.span, {
            style: {
              color: "#79C0FF"
            },
            children: "0"
          }), createVNode(_components.span, {
            style: {
              color: "#C9D1D9"
            },
            children: "; "
          }), createVNode(_components.span, {
            style: {
              color: "#8B949E"
            },
            children: "// beginning of current time span"
          })]
        }), "\n", createVNode(_components.span, {
          className: "line",
          children: [createVNode(_components.span, {
            style: {
              color: "#FF7B72"
            },
            children: "let"
          }), createVNode(_components.span, {
            style: {
              color: "#C9D1D9"
            },
            children: " minLatency "
          }), createVNode(_components.span, {
            style: {
              color: "#FF7B72"
            },
            children: "="
          }), createVNode(_components.span, {
            style: {
              color: "#C9D1D9"
            },
            children: " "
          }), createVNode(_components.span, {
            style: {
              color: "#79C0FF"
            },
            children: "0.1"
          }), createVNode(_components.span, {
            style: {
              color: "#C9D1D9"
            },
            children: "; "
          }), createVNode(_components.span, {
            style: {
              color: "#8B949E"
            },
            children: "// min time before a hap should trigger"
          })]
        }), "\n", createVNode(_components.span, {
          className: "line",
          children: [createVNode(_components.span, {
            style: {
              color: "#D2A8FF"
            },
            children: "setInterval"
          }), createVNode(_components.span, {
            style: {
              color: "#C9D1D9"
            },
            children: "(() "
          }), createVNode(_components.span, {
            style: {
              color: "#FF7B72"
            },
            children: "=>"
          }), createVNode(_components.span, {
            style: {
              color: "#C9D1D9"
            },
            children: " {"
          })]
        }), "\n", createVNode(_components.span, {
          className: "line",
          children: [createVNode(_components.span, {
            style: {
              color: "#C9D1D9"
            },
            children: "  "
          }), createVNode(_components.span, {
            style: {
              color: "#FF7B72"
            },
            children: "const"
          }), createVNode(_components.span, {
            style: {
              color: "#C9D1D9"
            },
            children: " "
          }), createVNode(_components.span, {
            style: {
              color: "#79C0FF"
            },
            children: "haps"
          }), createVNode(_components.span, {
            style: {
              color: "#C9D1D9"
            },
            children: " "
          }), createVNode(_components.span, {
            style: {
              color: "#FF7B72"
            },
            children: "="
          }), createVNode(_components.span, {
            style: {
              color: "#C9D1D9"
            },
            children: " pattern."
          }), createVNode(_components.span, {
            style: {
              color: "#D2A8FF"
            },
            children: "queryArc"
          }), createVNode(_components.span, {
            style: {
              color: "#C9D1D9"
            },
            children: "(time, time "
          }), createVNode(_components.span, {
            style: {
              color: "#FF7B72"
            },
            children: "+"
          }), createVNode(_components.span, {
            style: {
              color: "#C9D1D9"
            },
            children: " interval);"
          })]
        }), "\n", createVNode(_components.span, {
          className: "line",
          children: [createVNode(_components.span, {
            style: {
              color: "#C9D1D9"
            },
            children: "  time "
          }), createVNode(_components.span, {
            style: {
              color: "#FF7B72"
            },
            children: "+="
          }), createVNode(_components.span, {
            style: {
              color: "#C9D1D9"
            },
            children: " interval; "
          }), createVNode(_components.span, {
            style: {
              color: "#8B949E"
            },
            children: "// increment time"
          })]
        }), "\n", createVNode(_components.span, {
          className: "line",
          children: [createVNode(_components.span, {
            style: {
              color: "#C9D1D9"
            },
            children: "  haps."
          }), createVNode(_components.span, {
            style: {
              color: "#D2A8FF"
            },
            children: "forEach"
          }), createVNode(_components.span, {
            style: {
              color: "#C9D1D9"
            },
            children: "(("
          }), createVNode(_components.span, {
            style: {
              color: "#FFA657"
            },
            children: "hap"
          }), createVNode(_components.span, {
            style: {
              color: "#C9D1D9"
            },
            children: ") "
          }), createVNode(_components.span, {
            style: {
              color: "#FF7B72"
            },
            children: "=>"
          }), createVNode(_components.span, {
            style: {
              color: "#C9D1D9"
            },
            children: " {"
          })]
        }), "\n", createVNode(_components.span, {
          className: "line",
          children: [createVNode(_components.span, {
            style: {
              color: "#C9D1D9"
            },
            children: "    "
          }), createVNode(_components.span, {
            style: {
              color: "#FF7B72"
            },
            children: "const"
          }), createVNode(_components.span, {
            style: {
              color: "#C9D1D9"
            },
            children: " "
          }), createVNode(_components.span, {
            style: {
              color: "#79C0FF"
            },
            children: "deadline"
          }), createVNode(_components.span, {
            style: {
              color: "#C9D1D9"
            },
            children: " "
          }), createVNode(_components.span, {
            style: {
              color: "#FF7B72"
            },
            children: "="
          }), createVNode(_components.span, {
            style: {
              color: "#C9D1D9"
            },
            children: " hap.whole.begin "
          }), createVNode(_components.span, {
            style: {
              color: "#FF7B72"
            },
            children: "-"
          }), createVNode(_components.span, {
            style: {
              color: "#C9D1D9"
            },
            children: " time "
          }), createVNode(_components.span, {
            style: {
              color: "#FF7B72"
            },
            children: "+"
          }), createVNode(_components.span, {
            style: {
              color: "#C9D1D9"
            },
            children: " minLatency;"
          })]
        }), "\n", createVNode(_components.span, {
          className: "line",
          children: [createVNode(_components.span, {
            style: {
              color: "#C9D1D9"
            },
            children: "    "
          }), createVNode(_components.span, {
            style: {
              color: "#D2A8FF"
            },
            children: "onTrigger"
          }), createVNode(_components.span, {
            style: {
              color: "#C9D1D9"
            },
            children: "(hap, deadline, duration);"
          })]
        }), "\n", createVNode(_components.span, {
          className: "line",
          children: createVNode(_components.span, {
            style: {
              color: "#C9D1D9"
            },
            children: "  });"
          })
        }), "\n", createVNode(_components.span, {
          className: "line",
          children: [createVNode(_components.span, {
            style: {
              color: "#C9D1D9"
            },
            children: "}, interval "
          }), createVNode(_components.span, {
            style: {
              color: "#FF7B72"
            },
            children: "*"
          }), createVNode(_components.span, {
            style: {
              color: "#C9D1D9"
            },
            children: " "
          }), createVNode(_components.span, {
            style: {
              color: "#79C0FF"
            },
            children: "1000"
          }), createVNode(_components.span, {
            style: {
              color: "#C9D1D9"
            },
            children: "); "
          }), createVNode(_components.span, {
            style: {
              color: "#8B949E"
            },
            children: "// query each \"interval\" seconds"
          })]
        })]
      })
    }), "\n", createVNode(_components.p, {
      children: ["Note that the above code is simplified for illustrative purposes. The actual implementation has to work around imprecise callbacks of ", createVNode(_components.code, {
        children: "setInterval"
      }), ". More about the implementation details can be read in ", createVNode(_components.a, {
        href: "https://loophole-letters.vercel.app/web-audio-scheduling",
        children: "this blog post"
      }), "."]
    }), "\n", createVNode(_components.p, {
      children: ["The fact that ", createVNode(_components.code, {
        children: "Pattern.queryArc"
      }), " is a pure function that maps a time span to a set of events allows us to choose any interval we like without changing the resulting output. It also means that when the pattern is changed from outside, the next scheduling callback will work with the new pattern, keeping its clock running."]
    }), "\n", createVNode(_components.p, {
      children: ["The latency between the time the pattern is evaluated and the change is heard is between ", createVNode(_components.code, {
        children: "minLatency"
      }), " and ", createVNode(_components.code, {
        children: "interval + minLatency"
      }), ", in our example between 100ms and 600ms. In Strudel, the current query interval is 50ms with a minLatency of 100ms, meaning the latency is between 50ms and 150ms."]
    }), "\n", createVNode(_components.h2, {
      id: "output",
      children: [createVNode(_components.a, {
        "aria-hidden": "true",
        tabIndex: "-1",
        href: "#output",
        children: createVNode(_components.span, {
          className: "icon icon-link"
        })
      }), "Output"]
    }), "\n", createVNode(_components.p, {
      children: "The last step is to trigger each event in the chosen output.\nThis is where the given time and value of each event is used to generate audio or any other form of time based output. The default output of the Strudel REPL is the WebAudio output. To understand what an output does, we first have to understand what control parameters are."
    }), "\n", createVNode(_components.h3, {
      id: "control-parameters",
      children: [createVNode(_components.a, {
        "aria-hidden": "true",
        tabIndex: "-1",
        href: "#control-parameters",
        children: createVNode(_components.span, {
          className: "icon icon-link"
        })
      }), "Control Parameters"]
    }), "\n", createVNode(_components.p, {
      children: "To be able to manipulate multiple aspects of sound in parallel, so called control parameters are used to shape the value of each event. Example:"
    }), "\n", createVNode(_components.pre, {
      className: "astro-code",
      style: {
        backgroundColor: "#0d1117",
        overflowX: "auto"
      },
      children: createVNode(_components.code, {
        children: [createVNode(_components.span, {
          className: "line",
          children: [createVNode(_components.span, {
            style: {
              color: "#D2A8FF"
            },
            children: "note"
          }), createVNode(_components.span, {
            style: {
              color: "#C9D1D9"
            },
            children: "("
          }), createVNode(_components.span, {
            style: {
              color: "#A5D6FF"
            },
            children: "'c3 e3'"
          }), createVNode(_components.span, {
            style: {
              color: "#C9D1D9"
            },
            children: ")"
          })]
        }), "\n", createVNode(_components.span, {
          className: "line",
          children: [createVNode(_components.span, {
            style: {
              color: "#C9D1D9"
            },
            children: "  ."
          }), createVNode(_components.span, {
            style: {
              color: "#D2A8FF"
            },
            children: "cutoff"
          }), createVNode(_components.span, {
            style: {
              color: "#C9D1D9"
            },
            children: "("
          }), createVNode(_components.span, {
            style: {
              color: "#79C0FF"
            },
            children: "1000"
          }), createVNode(_components.span, {
            style: {
              color: "#C9D1D9"
            },
            children: ")"
          })]
        }), "\n", createVNode(_components.span, {
          className: "line",
          children: [createVNode(_components.span, {
            style: {
              color: "#C9D1D9"
            },
            children: "  ."
          }), createVNode(_components.span, {
            style: {
              color: "#D2A8FF"
            },
            children: "s"
          }), createVNode(_components.span, {
            style: {
              color: "#C9D1D9"
            },
            children: "("
          }), createVNode(_components.span, {
            style: {
              color: "#A5D6FF"
            },
            children: "'sawtooth'"
          }), createVNode(_components.span, {
            style: {
              color: "#C9D1D9"
            },
            children: ")"
          })]
        }), "\n", createVNode(_components.span, {
          className: "line",
          children: [createVNode(_components.span, {
            style: {
              color: "#C9D1D9"
            },
            children: "  ."
          }), createVNode(_components.span, {
            style: {
              color: "#D2A8FF"
            },
            children: "queryArc"
          }), createVNode(_components.span, {
            style: {
              color: "#C9D1D9"
            },
            children: "("
          }), createVNode(_components.span, {
            style: {
              color: "#79C0FF"
            },
            children: "0"
          }), createVNode(_components.span, {
            style: {
              color: "#C9D1D9"
            },
            children: ", "
          }), createVNode(_components.span, {
            style: {
              color: "#79C0FF"
            },
            children: "1"
          }), createVNode(_components.span, {
            style: {
              color: "#C9D1D9"
            },
            children: ")"
          })]
        }), "\n", createVNode(_components.span, {
          className: "line",
          children: [createVNode(_components.span, {
            style: {
              color: "#C9D1D9"
            },
            children: "  ."
          }), createVNode(_components.span, {
            style: {
              color: "#D2A8FF"
            },
            children: "map"
          }), createVNode(_components.span, {
            style: {
              color: "#C9D1D9"
            },
            children: "(("
          }), createVNode(_components.span, {
            style: {
              color: "#FFA657"
            },
            children: "hap"
          }), createVNode(_components.span, {
            style: {
              color: "#C9D1D9"
            },
            children: ") "
          }), createVNode(_components.span, {
            style: {
              color: "#FF7B72"
            },
            children: "=>"
          }), createVNode(_components.span, {
            style: {
              color: "#C9D1D9"
            },
            children: " hap.value);"
          })]
        }), "\n", createVNode(_components.span, {
          className: "line",
          children: createVNode(_components.span, {
            style: {
              color: "#8B949E"
            },
            children: "/* ["
          })
        }), "\n", createVNode(_components.span, {
          className: "line",
          children: createVNode(_components.span, {
            style: {
              color: "#8B949E"
            },
            children: "  { note: 'c3', cutoff: 1000, s: 'sawtooth' }"
          })
        }), "\n", createVNode(_components.span, {
          className: "line",
          children: createVNode(_components.span, {
            style: {
              color: "#8B949E"
            },
            children: "  { note: 'e3', cutoff: 1000, s: 'sawtooth' }"
          })
        }), "\n", createVNode(_components.span, {
          className: "line",
          children: createVNode(_components.span, {
            style: {
              color: "#8B949E"
            },
            children: "] */"
          })
        })]
      })
    }), "\n", createVNode(_components.p, {
      children: ["Here, the control parameter functions ", createVNode(_components.code, {
        children: "note"
      }), ", ", createVNode(_components.code, {
        children: "cutoff"
      }), " and ", createVNode(_components.code, {
        children: "s"
      }), " are used, where each controls a different property in the value object. Each control parameter function accepts a primitive value, a list of values to be sequenced into a ", createVNode(_components.code, {
        children: "Pattern"
      }), ", or a ", createVNode(_components.code, {
        children: "Pattern"
      }), ". In the example, ", createVNode(_components.code, {
        children: "note"
      }), " gets a ", createVNode(_components.code, {
        children: "Pattern"
      }), " from a mini-notation expression (double quoted), while ", createVNode(_components.code, {
        children: "cutoff"
      }), " and ", createVNode(_components.code, {
        children: "s"
      }), " are given a ", createVNode(_components.code, {
        children: "Number"
      }), " and a (single quoted) ", createVNode(_components.code, {
        children: "String"
      }), " respectively."]
    }), "\n", createVNode(_components.p, {
      children: "Strudel comes with a large default set of control parameter functions that are based on the ones used by Tidal and SuperDirt, focusing on music and audio terminology. It is however possible to create custom control parameters for any purpose:"
    }), "\n", createVNode(_components.pre, {
      className: "astro-code",
      style: {
        backgroundColor: "#0d1117",
        overflowX: "auto"
      },
      children: createVNode(_components.code, {
        children: [createVNode(_components.span, {
          className: "line",
          children: [createVNode(_components.span, {
            style: {
              color: "#FF7B72"
            },
            children: "const"
          }), createVNode(_components.span, {
            style: {
              color: "#C9D1D9"
            },
            children: " { "
          }), createVNode(_components.span, {
            style: {
              color: "#79C0FF"
            },
            children: "x"
          }), createVNode(_components.span, {
            style: {
              color: "#C9D1D9"
            },
            children: ", "
          }), createVNode(_components.span, {
            style: {
              color: "#79C0FF"
            },
            children: "y"
          }), createVNode(_components.span, {
            style: {
              color: "#C9D1D9"
            },
            children: " } "
          }), createVNode(_components.span, {
            style: {
              color: "#FF7B72"
            },
            children: "="
          }), createVNode(_components.span, {
            style: {
              color: "#C9D1D9"
            },
            children: " "
          }), createVNode(_components.span, {
            style: {
              color: "#D2A8FF"
            },
            children: "createParams"
          }), createVNode(_components.span, {
            style: {
              color: "#C9D1D9"
            },
            children: "("
          }), createVNode(_components.span, {
            style: {
              color: "#A5D6FF"
            },
            children: "'x'"
          }), createVNode(_components.span, {
            style: {
              color: "#C9D1D9"
            },
            children: ", "
          }), createVNode(_components.span, {
            style: {
              color: "#A5D6FF"
            },
            children: "'y'"
          }), createVNode(_components.span, {
            style: {
              color: "#C9D1D9"
            },
            children: ");"
          })]
        }), "\n", createVNode(_components.span, {
          className: "line",
          children: [createVNode(_components.span, {
            style: {
              color: "#D2A8FF"
            },
            children: "x"
          }), createVNode(_components.span, {
            style: {
              color: "#C9D1D9"
            },
            children: "(sine."
          }), createVNode(_components.span, {
            style: {
              color: "#D2A8FF"
            },
            children: "range"
          }), createVNode(_components.span, {
            style: {
              color: "#C9D1D9"
            },
            children: "("
          }), createVNode(_components.span, {
            style: {
              color: "#79C0FF"
            },
            children: "0"
          }), createVNode(_components.span, {
            style: {
              color: "#C9D1D9"
            },
            children: ", "
          }), createVNode(_components.span, {
            style: {
              color: "#79C0FF"
            },
            children: "200"
          }), createVNode(_components.span, {
            style: {
              color: "#C9D1D9"
            },
            children: "))."
          }), createVNode(_components.span, {
            style: {
              color: "#D2A8FF"
            },
            children: "y"
          }), createVNode(_components.span, {
            style: {
              color: "#C9D1D9"
            },
            children: "(cosine."
          }), createVNode(_components.span, {
            style: {
              color: "#D2A8FF"
            },
            children: "range"
          }), createVNode(_components.span, {
            style: {
              color: "#C9D1D9"
            },
            children: "("
          }), createVNode(_components.span, {
            style: {
              color: "#79C0FF"
            },
            children: "0"
          }), createVNode(_components.span, {
            style: {
              color: "#C9D1D9"
            },
            children: ", "
          }), createVNode(_components.span, {
            style: {
              color: "#79C0FF"
            },
            children: "200"
          }), createVNode(_components.span, {
            style: {
              color: "#C9D1D9"
            },
            children: "));"
          })]
        })]
      })
    }), "\n", createVNode(_components.p, {
      children: ["This example creates the custom control parameters ", createVNode(_components.code, {
        children: "x"
      }), " and ", createVNode(_components.code, {
        children: "y"
      }), " which are then used to form a pattern that descibes the coordinates of a circle."]
    }), "\n", createVNode(_components.h3, {
      id: "outputs",
      children: [createVNode(_components.a, {
        "aria-hidden": "true",
        tabIndex: "-1",
        href: "#outputs",
        children: createVNode(_components.span, {
          className: "icon icon-link"
        })
      }), "Outputs"]
    }), "\n", createVNode(_components.p, {
      children: ["Now that we know how the value of an event is manipulated using control parameters, we can look at how outputs can use that value to generate anything. The scheduler above was calling the ", createVNode(_components.code, {
        children: "onTrigger"
      }), " function which is used to implement the output. A very simple version of the web audio output could look like this:"]
    }), "\n", createVNode(_components.pre, {
      className: "astro-code",
      style: {
        backgroundColor: "#0d1117",
        overflowX: "auto"
      },
      children: createVNode(_components.code, {
        children: [createVNode(_components.span, {
          className: "line",
          children: [createVNode(_components.span, {
            style: {
              color: "#FF7B72"
            },
            children: "function"
          }), createVNode(_components.span, {
            style: {
              color: "#C9D1D9"
            },
            children: " "
          }), createVNode(_components.span, {
            style: {
              color: "#D2A8FF"
            },
            children: "onTrigger"
          }), createVNode(_components.span, {
            style: {
              color: "#C9D1D9"
            },
            children: "("
          }), createVNode(_components.span, {
            style: {
              color: "#FFA657"
            },
            children: "hap"
          }), createVNode(_components.span, {
            style: {
              color: "#C9D1D9"
            },
            children: ", "
          }), createVNode(_components.span, {
            style: {
              color: "#FFA657"
            },
            children: "deadline"
          }), createVNode(_components.span, {
            style: {
              color: "#C9D1D9"
            },
            children: ", "
          }), createVNode(_components.span, {
            style: {
              color: "#FFA657"
            },
            children: "duration"
          }), createVNode(_components.span, {
            style: {
              color: "#C9D1D9"
            },
            children: ") {"
          })]
        }), "\n", createVNode(_components.span, {
          className: "line",
          children: [createVNode(_components.span, {
            style: {
              color: "#C9D1D9"
            },
            children: "  "
          }), createVNode(_components.span, {
            style: {
              color: "#FF7B72"
            },
            children: "const"
          }), createVNode(_components.span, {
            style: {
              color: "#C9D1D9"
            },
            children: " { "
          }), createVNode(_components.span, {
            style: {
              color: "#79C0FF"
            },
            children: "note"
          }), createVNode(_components.span, {
            style: {
              color: "#C9D1D9"
            },
            children: " } "
          }), createVNode(_components.span, {
            style: {
              color: "#FF7B72"
            },
            children: "="
          }), createVNode(_components.span, {
            style: {
              color: "#C9D1D9"
            },
            children: " hap.value;"
          })]
        }), "\n", createVNode(_components.span, {
          className: "line",
          children: [createVNode(_components.span, {
            style: {
              color: "#C9D1D9"
            },
            children: "  "
          }), createVNode(_components.span, {
            style: {
              color: "#FF7B72"
            },
            children: "const"
          }), createVNode(_components.span, {
            style: {
              color: "#C9D1D9"
            },
            children: " "
          }), createVNode(_components.span, {
            style: {
              color: "#79C0FF"
            },
            children: "time"
          }), createVNode(_components.span, {
            style: {
              color: "#C9D1D9"
            },
            children: " "
          }), createVNode(_components.span, {
            style: {
              color: "#FF7B72"
            },
            children: "="
          }), createVNode(_components.span, {
            style: {
              color: "#C9D1D9"
            },
            children: " "
          }), createVNode(_components.span, {
            style: {
              color: "#D2A8FF"
            },
            children: "getAudioContext"
          }), createVNode(_components.span, {
            style: {
              color: "#C9D1D9"
            },
            children: "().currentTime "
          }), createVNode(_components.span, {
            style: {
              color: "#FF7B72"
            },
            children: "+"
          }), createVNode(_components.span, {
            style: {
              color: "#C9D1D9"
            },
            children: " deadline;"
          })]
        }), "\n", createVNode(_components.span, {
          className: "line",
          children: [createVNode(_components.span, {
            style: {
              color: "#C9D1D9"
            },
            children: "  "
          }), createVNode(_components.span, {
            style: {
              color: "#FF7B72"
            },
            children: "const"
          }), createVNode(_components.span, {
            style: {
              color: "#C9D1D9"
            },
            children: " "
          }), createVNode(_components.span, {
            style: {
              color: "#79C0FF"
            },
            children: "o"
          }), createVNode(_components.span, {
            style: {
              color: "#C9D1D9"
            },
            children: " "
          }), createVNode(_components.span, {
            style: {
              color: "#FF7B72"
            },
            children: "="
          }), createVNode(_components.span, {
            style: {
              color: "#C9D1D9"
            },
            children: " "
          }), createVNode(_components.span, {
            style: {
              color: "#D2A8FF"
            },
            children: "getAudioContext"
          }), createVNode(_components.span, {
            style: {
              color: "#C9D1D9"
            },
            children: "()."
          }), createVNode(_components.span, {
            style: {
              color: "#D2A8FF"
            },
            children: "createOscillator"
          }), createVNode(_components.span, {
            style: {
              color: "#C9D1D9"
            },
            children: "();"
          })]
        }), "\n", createVNode(_components.span, {
          className: "line",
          children: [createVNode(_components.span, {
            style: {
              color: "#C9D1D9"
            },
            children: "  o.frequency.value "
          }), createVNode(_components.span, {
            style: {
              color: "#FF7B72"
            },
            children: "="
          }), createVNode(_components.span, {
            style: {
              color: "#C9D1D9"
            },
            children: " "
          }), createVNode(_components.span, {
            style: {
              color: "#D2A8FF"
            },
            children: "getFreq"
          }), createVNode(_components.span, {
            style: {
              color: "#C9D1D9"
            },
            children: "(note);"
          })]
        }), "\n", createVNode(_components.span, {
          className: "line",
          children: [createVNode(_components.span, {
            style: {
              color: "#C9D1D9"
            },
            children: "  o."
          }), createVNode(_components.span, {
            style: {
              color: "#D2A8FF"
            },
            children: "start"
          }), createVNode(_components.span, {
            style: {
              color: "#C9D1D9"
            },
            children: "(time);"
          })]
        }), "\n", createVNode(_components.span, {
          className: "line",
          children: [createVNode(_components.span, {
            style: {
              color: "#C9D1D9"
            },
            children: "  o."
          }), createVNode(_components.span, {
            style: {
              color: "#D2A8FF"
            },
            children: "stop"
          }), createVNode(_components.span, {
            style: {
              color: "#C9D1D9"
            },
            children: "(time "
          }), createVNode(_components.span, {
            style: {
              color: "#FF7B72"
            },
            children: "+"
          }), createVNode(_components.span, {
            style: {
              color: "#C9D1D9"
            },
            children: " event.duration);"
          })]
        }), "\n", createVNode(_components.span, {
          className: "line",
          children: [createVNode(_components.span, {
            style: {
              color: "#C9D1D9"
            },
            children: "  o."
          }), createVNode(_components.span, {
            style: {
              color: "#D2A8FF"
            },
            children: "connect"
          }), createVNode(_components.span, {
            style: {
              color: "#C9D1D9"
            },
            children: "("
          }), createVNode(_components.span, {
            style: {
              color: "#D2A8FF"
            },
            children: "getAudioContext"
          }), createVNode(_components.span, {
            style: {
              color: "#C9D1D9"
            },
            children: "().destination);"
          })]
        }), "\n", createVNode(_components.span, {
          className: "line",
          children: createVNode(_components.span, {
            style: {
              color: "#C9D1D9"
            },
            children: "}"
          })
        })]
      })
    }), "\n", createVNode(_components.p, {
      children: ["The above example will create an ", createVNode(_components.code, {
        children: "OscillatorNode"
      }), " for each event, where the frequency is controlled by the ", createVNode(_components.code, {
        children: "note"
      }), " param. In essence, this is how the WebAudio API output of Strudel works, only with many more parameters to control synths, samples and effects."]
    })]
  });
}
function MDXContent$g(props = {}) {
  return createVNode(MDXLayout$g, {
    ...props,
    children: createVNode(_createMdxContent$g, {
      ...props
    })
  });
}

__astro_tag_component__(getHeadings$g, "astro:jsx");
__astro_tag_component__(MDXContent$g, "astro:jsx");
const url$h = "/technical-manual/repl";
const file$h = "/Users/michaelgogins/cloud-music/strudel/website/src/pages/technical-manual/repl.mdx";
function rawContent$g() { throw new Error("MDX does not support rawContent()! If you need to read the Markdown contents to calculate values (ex. reading time), we suggest injecting frontmatter via remark plugins. Learn more on our docs: https://docs.astro.build/en/guides/integrations-guide/mdx/#inject-frontmatter-via-remark-or-rehype-plugins") }function compiledContent$g() { throw new Error("MDX does not support compiledContent()! If you need to read the HTML contents to calculate values (ex. reading time), we suggest injecting frontmatter via rehype plugins. Learn more on our docs: https://docs.astro.build/en/guides/integrations-guide/mdx/#inject-frontmatter-via-remark-or-rehype-plugins") }const Content$h = (props = {}) => MDXContent$g({
											...props,
											components: { Fragment, ...props.components },
										});
Content$h[Symbol.for('astro.needsHeadRendering')] = !Boolean(frontmatter$h.layout);

const _page7 = /*#__PURE__*/Object.freeze(/*#__PURE__*/Object.defineProperty({
	__proto__: null,
	frontmatter: frontmatter$h,
	_internal: _internal$g,
	getHeadings: getHeadings$g,
	url: url$h,
	file: file$h,
	rawContent: rawContent$g,
	compiledContent: compiledContent$g,
	Content: Content$h,
	default: Content$h
}, Symbol.toStringTag, { value: 'Module' }));

/*
tunes.mjs - <short description TODO>
Copyright (C) 2022 Strudel contributors - see <https://github.com/tidalcycles/strudel/blob/main/repl/src/tunes.mjs>
This program is free software: you can redistribute it and/or modify it under the terms of the GNU Affero General Public License as published by the Free Software Foundation, either version 3 of the License, or (at your option) any later version. This program is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU Affero General Public License for more details. You should have received a copy of the GNU Affero General Public License along with this program.  If not, see <https://www.gnu.org/licenses/>.
*/

const swimming = `// Koji Kondo - Swimming (Super Mario World)
stack(
  seq(
    "~",
    "~",
    "~",
    "A5 [F5@2 C5] [D5@2 F5] F5",
    "[C5@2 F5] [F5@2 C6] A5 G5",
    "A5 [F5@2 C5] [D5@2 F5] F5",
    "[C5@2 F5] [Bb5 A5 G5] F5@2",
    "A5 [F5@2 C5] [D5@2 F5] F5",
    "[C5@2 F5] [F5@2 C6] A5 G5",
    "A5 [F5@2 C5] [D5@2 F5] F5",
    "[C5@2 F5] [Bb5 A5 G5] F5@2",
    "A5 [F5@2 C5] A5 F5",
    "Ab5 [F5@2 Ab5] G5@2",
    "A5 [F5@2 C5] A5 F5",
    "Ab5 [F5@2 C5] C6@2",
    "A5 [F5@2 C5] [D5@2 F5] F5",
    "[C5@2 F5] [Bb5 A5 G5] F5@2"
  ).color('#FFEBB5'),
  seq(
    "[F4,Bb4,D5] [[D4,G4,Bb4]@2 [Bb3,D4,F4]] [[G3,C4,E4]@2 [[Ab3,F4] [A3,Gb4]]] [Bb3,E4,G4]",
    "[~ [F3, A3, C3] [F3, A3, C3]] [~ [F3, A3, C3] [F3, A3, C3]] [~ [F3, Bb3, D3] [F3, Bb3, D3]] [~ [F3, Bb3, Db3] [F3, Bb3, Db3]]",
    "[~ [F3, A3, C3] [F3, A3, C3]] [~ [F3, A3, C3] [F3, A3, C3]] [~ [F3, Bb3, D3] [F3, Bb3, D3]] [~ [F3, B3, D3] [F3, B3, D3]]",
    "[~ [F3, A3, C3] [F3, A3, C3]] [~ [F3, A3, C3] [F3, A3, C3]] [~ [F3, Bb3, D3] [F3, Bb3, D3]] [~ [F3, B3, D3] [F3, B3, D3]]",
    "[~ [A3, C4, E4] [A3, C4, E4]] [~ [Ab3, C4, Eb4] [Ab3, C4, Eb4]] [~ [F3, Bb3, D3] [F3, Bb3, D3]] [~ [G3, C4, E4] [G3, C4, E4]]",
    "[~ [F3, A3, C4] [F3, A3, C4]] [~ [F3, A3, C4] [F3, A3, C4]] [~ [F3, Bb3, D3] [F3, Bb3, D3]] [~ [F3, B3, D3] [F3, B3, D3]]",
    "[~ [F3, Bb3, D4] [F3, Bb3, D4]] [~ [F3, Bb3, C4] [F3, Bb3, C4]] [~ [F3, A3, C4] [F3, A3, C4]] [~ [F3, A3, C4] [F3, A3, C4]]",
    "[~ [F3, A3, C3] [F3, A3, C3]] [~ [F3, A3, C3] [F3, A3, C3]] [~ [F3, Bb3, D3] [F3, Bb3, D3]] [~ [F3, B3, D3] [F3, B3, D3]]",
    "[~ [A3, C4, E4] [A3, C4, E4]] [~ [Ab3, C4, Eb4] [Ab3, C4, Eb4]] [~ [F3, Bb3, D3] [F3, Bb3, D3]] [~ [G3, C4, E4] [G3, C4, E4]]",
    "[~ [F3, A3, C3] [F3, A3, C3]] [~ [F3, A3, C3] [F3, A3, C3]] [~ [F3, Bb3, D3] [F3, Bb3, D3]] [~ [F3, B3, D3] [F3, B3, D3]]",
    "[~ [F3, Bb3, D4] [F3, Bb3, D4]] [~ [F3, Bb3, C4] [F3, Bb3, C4]] [~ [F3, A3, C4] [F3, A3, C4]] [~ [F3, A3, C4] [F3, A3, C4]]",
    "[~ [Bb3, D3, F4] [Bb3, D3, F4]] [~ [Bb3, D3, F4] [Bb3, D3, F4]] [~ [A3, C4, F4] [A3, C4, F4]] [~ [A3, C4, F4] [A3, C4, F4]]",
    "[~ [Ab3, B3, F4] [Ab3, B3, F4]] [~ [Ab3, B3, F4] [Ab3, B3, F4]] [~ [G3, Bb3, F4] [G3, Bb3, F4]] [~ [G3, Bb3, E4] [G3, Bb3, E4]]",
    "[~ [Bb3, D3, F4] [Bb3, D3, F4]] [~ [Bb3, D3, F4] [Bb3, D3, F4]] [~ [A3, C4, F4] [A3, C4, F4]] [~ [A3, C4, F4] [A3, C4, F4]]",
    "[~ [Ab3, B3, F4] [Ab3, B3, F4]] [~ [Ab3, B3, F4] [Ab3, B3, F4]] [~ [G3, Bb3, F4] [G3, Bb3, F4]] [~ [G3, Bb3, E4] [G3, Bb3, E4]]",
    "[~ [F3, A3, C3] [F3, A3, C3]] [~ [F3, A3, C3] [F3, A3, C3]] [~ [F3, Bb3, D3] [F3, Bb3, D3]] [~ [F3, B3, D3] [F3, B3, D3]]",
    "[~ [F3, Bb3, D4] [F3, Bb3, D4]] [~ [F3, Bb3, C4] [F3, Bb3, C4]] [~ [F3, A3, C4] [F3, A3, C4]] [~ [F3, A3, C4] [F3, A3, C4]]"
  ).color('#54C571'),
  seq(
    "[G3 G3 C3 E3]",
    "[F2 D2 G2 C2]",
    "[F2 D2 G2 C2]",
    "[F2 A2 Bb2 B2]",
    "[A2 Ab2 G2 C2]",
    "[F2 A2 Bb2 B2]",
    "[G2 C2 F2 F2]",
    "[F2 A2 Bb2 B2]",
    "[A2 Ab2 G2 C2]",
    "[F2 A2 Bb2 B2]",
    "[G2 C2 F2 F2]",
    "[Bb2 Bb2 A2 A2]",
    "[Ab2 Ab2 G2 [C2 D2 E2]]",
    "[Bb2 Bb2 A2 A2]",
    "[Ab2 Ab2 G2 [C2 D2 E2]]",
    "[F2 A2 Bb2 B2]",
    "[G2 C2 F2 F2]"
  ).color('#0077C9')
).note().slow(51)
//.pianoroll({fold:1})
`;

const giantSteps = `// John Coltrane - Giant Steps
setVoicingRange('lefthand', ['E3', 'G4']);

stack(
  // melody
  seq(
    "[F#5 D5] [B4 G4] Bb4 [B4 A4]",
    "[D5 Bb4] [G4 Eb4] F#4 [G4 F4]",
    "Bb4 [B4 A4] D5 [D#5 C#5]",
    "F#5 [G5 F5] Bb5 [F#5 F#5]",
  ).color('#F8E71C'),
  // chords
  seq(
    "[B^7 D7] [G^7 Bb7] Eb^7 [Am7 D7]",
    "[G^7 Bb7] [Eb^7 F#7] B^7 [Fm7 Bb7]",
    "Eb^7 [Am7 D7] G^7 [C#m7 F#7]",
    "B^7 [Fm7 Bb7] Eb^7 [C#m7 F#7]"
  ).voicings('lefthand').color('#7ED321'),
  // bass
  seq(
    "[B2 D2] [G2 Bb2] [Eb2 Bb3] [A2 D2]",
    "[G2 Bb2] [Eb2 F#2] [B2 F#2] [F2 Bb2]",
    "[Eb2 Bb2] [A2 D2] [G2 D2] [C#2 F#2]",
    "[B2 F#2] [F2 Bb2] [Eb2 Bb3] [C#2 F#2]"
  ).color('#00B8D4')
).slow(20).note()
//.pianoroll({fold:1})`;

const zeldasRescue = `// Koji Kondo - Princess Zelda's Rescue
stack(
  // melody
  \`[B3@2 D4] [A3@2 [G3 A3]] [B3@2 D4] [A3] 
  [B3@2 D4] [A4@2 G4] [D4@2 [C4 B3]] [A3]
  [B3@2 D4] [A3@2 [G3 A3]] [B3@2 D4] [A3]
  [B3@2 D4] [A4@2 G4] D5@2 
  [D5@2 [C5 B4]] [[C5 B4] G4@2] [C5@2 [B4 A4]] [[B4 A4] E4@2]
  [D5@2 [C5 B4]] [[C5 B4] G4 C5] [G5] [~ ~ B3]\`
  .color('#9C7C38'),
  // bass
  \`[[C2 G2] E3@2] [[C2 G2] F#3@2] [[C2 G2] E3@2] [[C2 G2] F#3@2]
  [[B1 D3] G3@2] [[Bb1 Db3] G3@2] [[A1 C3] G3@2] [[D2 C3] F#3@2]
  [[C2 G2] E3@2] [[C2 G2] F#3@2] [[C2 G2] E3@2] [[C2 G2] F#3@2]
  [[B1 D3] G3@2] [[Bb1 Db3] G3@2] [[A1 C3] G3@2] [[D2 C3] F#3@2]
  [[F2 C3] E3@2] [[E2 B2] D3@2] [[D2 A2] C3@2] [[C2 G2] B2@2]
  [[F2 C3] E3@2] [[E2 B2] D3@2] [[Eb2 Bb2] Db3@2] [[D2 A2] C3 [F3,G2]]\`
  .color('#4C4646')
).transpose(12).slow(48)
  .superimpose(x=>x.add(0.06)) // add slightly detuned voice
  .note()
  .gain(.1)
  .s('triangle')
  .room(1)
  //.pianoroll({fold:1})`;

const caverave = `// licensed with CC BY-NC-SA 4.0 https://creativecommons.org/licenses/by-nc-sa/4.0/
// by Felix Roos
const keys = x => x.s('sawtooth').cutoff(1200).gain(.5)
  .attack(0).decay(.16).sustain(.3).release(.1);

const drums = stack(
  s("bd*2").mask("<x@7 ~>/8").gain(.8),
  s("~ <sd!7 [sd@3 ~]>").mask("<x@7 ~>/4").gain(.5),
  s("[~ hh]*2").delay(.3).delayfeedback(.5).delaytime(.125).gain(.4)
);

const thru = (x) => x.transpose("<0 1>/8").transpose(-1);
const synths = stack(
  "<eb4 d4 c4 b3>/2"
  .scale(timeCat([3,'C minor'],[1,'C melodic minor'])
  .slow(8)).struct("[~ x]*2")
  .layer(
    x=>x.scaleTranspose(0).early(0),
    x=>x.scaleTranspose(2).early(1/8),
    x=>x.scaleTranspose(7).early(1/4),
    x=>x.scaleTranspose(8).early(3/8)
  ).apply(thru).note().apply(keys).mask("<~ x>/16")
  .color('darkseagreen'),
  note("<C2 Bb1 Ab1 [G1 [G2 G1]]>/2".apply(thru))
  .struct("[x [~ x] <[~ [~ x]]!3 [x x]>@2]/2".fast(2))
  .s('sawtooth').attack(0.001).decay(0.2).sustain(1).cutoff(500)
  .color('brown'),
  "<Cm7 Bb7 Fm7 G7b13>/2".struct("~ [x@0.2 ~]".fast(2))
  .voicings('lefthand')
  .apply(thru).every(2, early(1/8)).note().apply(keys).sustain(0)
  .delay(.4).delaytime(.12)
  .mask("<x@7 ~>/8".early(1/4))
)
stack(
  drums.fast(2).color('tomato'), 
  synths
).slow(2)
  //.pianoroll({fold:1})`;

const sampleDrums = `samples({
  bd: 'bd/BT0A0D0.wav',
  sn: 'sn/ST0T0S3.wav',
  hh: 'hh/000_hh3closedhh.wav'
}, 'https://loophole-letters.vercel.app/samples/tidal/')

stack(
  "<bd!3 bd(3,4,2)>".color('#F5A623'),
  "hh*4".color('#673AB7'),
  "~ <sn!3 sn(3,4,1)>".color('#4CAF50')
).s()
.pianoroll({fold:1})
`;

const barryHarris = `// adapted from a Barry Harris excercise
"0,2,[7 6]"
  .add("<0 1 2 3 4 5 7 8>")
  .scale('C bebop major')
  .transpose("<0 1 2 1>/8")
  .slow(2)
  .note().piano()
  .color('#00B8D4')
`;

const blippyRhodes = `// licensed with CC BY-NC-SA 4.0 https://creativecommons.org/licenses/by-nc-sa/4.0/
// by Felix Roos
samples({
  bd: 'samples/tidal/bd/BT0A0D0.wav',
  sn: 'samples/tidal/sn/ST0T0S3.wav',
  hh: 'samples/tidal/hh/000_hh3closedhh.wav',
  rhodes: {
  E1: 'samples/rhodes/MK2Md2000.mp3',
  E2: 'samples/rhodes/MK2Md2012.mp3',
  E3: 'samples/rhodes/MK2Md2024.mp3',
  E4: 'samples/rhodes/MK2Md2036.mp3',
  E5: 'samples/rhodes/MK2Md2048.mp3',
  E6: 'samples/rhodes/MK2Md2060.mp3',
  E7: 'samples/rhodes/MK2Md2072.mp3'
  }
}, 'https://loophole-letters.vercel.app/')

const scales = cat('C major', 'C mixolydian', 'F lydian', ['F minor', cat('Db major','Db mixolydian')])

stack(
  s("<bd sn> <hh hh*2 hh*3>").color('#00B8D4'),
  "<g4 c5 a4 [ab4 <eb5 f5>]>"
  .scale(scales)
  .struct("x*8")
  .scaleTranspose("0 [-5,-2] -7 [-9,-2]")
  .legato(.3)
  .slow(2)
  .note()
  .s('rhodes')
  .clip(1)
  .room(.5)
  .delay(.3)
  .delayfeedback(.4)
  .delaytime(1/12).gain(.5).color('#7ED321'),
  "<c2 c3 f2 [[F2 C2] db2]>"
  .legato("<1@3 [.3 1]>")
  .slow(2).superimpose(x=>x.add(.02))
  .note().gain(.3)
  .s('sawtooth').cutoff(600).color('#F8E71C'),
).fast(3/2)
//.pianoroll({fold:1})`;

const wavyKalimba = `// licensed with CC BY-NC-SA 4.0 https://creativecommons.org/licenses/by-nc-sa/4.0/
// by Felix Roos
samples({
  'kalimba': { c5:'https://freesound.org/data/previews/536/536549_11935698-lq.mp3' }
})
const scales = cat('C major', 'C mixolydian', 'F lydian', ['F minor', 'Db major'])

stack(
  "[0 2 4 6 9 2 0 -2]*3"
  .add("<0 2>/4")
  .scale(scales)
  .struct("x*8")
  .velocity("<.8 .3 .6>*8")
  .slow(2),
  "<c2 c2 f2 [[F2 C2] db2]>"
  .scale(scales)
  .scaleTranspose("[0 <2 4>]*2")
  .struct("x*4")
  .velocity("<.8 .5>*4")
  .velocity(0.8)
  .slow(2)
)
  .legato("<.4 .8 1 1.2 1.4 1.6 1.8 2>/8")
  .fast(1)
  .note()
  .clip(1)
  .s('kalimba')
  .delay(.2)
  `;

const festivalOfFingers = `// licensed with CC BY-NC-SA 4.0 https://creativecommons.org/licenses/by-nc-sa/4.0/
// by Felix Roos
const chords = "<Cm7 Fm7 G7 F#7>";
stack(
  chords.voicings('lefthand').struct("x(3,8,-1)").velocity(.5).off(1/7,x=>x.transpose(12).velocity(.2)),
  chords.rootNotes(2).struct("x(4,8,-2)"),
  chords.rootNotes(4)
  .scale(cat('C minor','F dorian','G dorian','F# mixolydian'))
  .struct("x(3,8,-2)".fast(2))
  .scaleTranspose("0 4 0 6".early(".125 .5")).layer(scaleTranspose("0,<2 [4,6] [5,7]>/4"))
).slow(2)
 .velocity(sine.struct("x*8").add(3/5).mul(2/5).fast(8))
 .note().piano()`;

// iter, echo, echoWith
const undergroundPlumber = `// licensed with CC BY-NC-SA 4.0 https://creativecommons.org/licenses/by-nc-sa/4.0/
// by Felix Roos, inspired by Friendship - Let's not talk about it (1979) :)

samples({ bd: 'bd/BT0A0D0.wav', sn: 'sn/ST0T0S3.wav', hh: 'hh/000_hh3closedhh.wav', cp: 'cp/HANDCLP0.wav',
}, 'https://loophole-letters.vercel.app/samples/tidal/')

const h = x=>x.transpose("<0@2 5 0 7 5 0 -5>/2")

stack(
  s("<<bd*2 bd> sn> hh").fast(2).gain(.7),
  "[c2 a1 bb1 ~] ~"
  .echo(2, 1/16, 1)
  .legato(.4)
  .slow(2)
  .layer(h)
  .note().s('square')
  .cutoff(400).decay(.12).sustain(0)
  ,
  "[g2,[c3 eb3]]".iter(4)
  .echoWith(4, 1/8, (x,n)=>x.transpose(n*12).velocity(Math.pow(.4,n)))
  .legato(.1)
  .layer(h).note()
)
  .fast(2/3)
  .pianoroll({})`;

const bridgeIsOver = `// licensed with CC BY-NC-SA 4.0 https://creativecommons.org/licenses/by-nc-sa/4.0/
// by Felix Roos, bassline by BDP - The Bridge Is Over
samples({mad:'https://freesound.org/data/previews/22/22274_109943-lq.mp3'})
stack(
  stack(
  "c3*2 [[c3@1.4 bb2] ab2] gb2*2 <[[gb2@1.4 ab2] bb2] gb2>".legato(".5 1".fast(2)).velocity(.8),
  "0 ~".scale('c4 whole tone')
    .euclidLegato(3,8).slow(2).mask("x ~")
    .stutWith(8, 1/16, (x,n)=>x.scaleTranspose(n).velocity(Math.pow(.7,n)))
    .scaleTranspose("<0 1 2 3 4 3 2 1>")
    .fast(2)
    .velocity(.7)
    .legato(.5)
    .stut(3, .5, 1/8)
  ).transpose(-1).note().piano(),
  s("mad").slow(2)
).cpm(78).slow(4)
  
  .pianoroll()
`;

const goodTimes = `// licensed with CC BY-NC-SA 4.0 https://creativecommons.org/licenses/by-nc-sa/4.0/
// by Felix Roos
const scale = cat('C3 dorian','Bb2 major').slow(4);
stack(
  "2*4".add(12).scale(scale)
  .off(1/8, scaleTranspose("2")).fast(2)
  .scaleTranspose("<0 1 2 1>").hush(),
  "<0 1 2 3>(3,8,2)"
  .scale(scale)
  .off(1/4, scaleTranspose("2,4")),
  "<0 4>(5,8)".scale(scale).transpose(-12)
)
  .velocity(".6 .7".fast(4))
  .legato("2")
  .scaleTranspose("<0>".slow(4))
  .transpose(5)
  .note().piano()
  .velocity(.8)
  .slow(2)
  .pianoroll({maxMidi:100,minMidi:20})`;

/* // new style notation:
export const goodTimes = `// licensed with CC BY-NC-SA 4.0 https://creativecommons.org/licenses/by-nc-sa/4.0/
// by Felix Roos
const scale = cat('C3 dorian','Bb2 major').slow(4);
stack(
  n("2*4").add(12)
  .off(1/8, add("2")).fast(2)
  .add("<0 1 2 1>").hush(),
  n("<0 1 2 3>(3,8,2)")
  .off(1/4, add("2,4")),
  n("<0 4>(5,8)").sub(7)
)
  .scale(scale)
  .gain(".6 .7".fast(4))
  .legato(2)
  .add(note(5))
  .piano()
  .mul(gain(.8))
  .slow(2)
  .pianoroll({maxMidi:100,minMidi:20})`;
*/

const echoPiano = `// licensed with CC BY-NC-SA 4.0 https://creativecommons.org/licenses/by-nc-sa/4.0/
// by Felix Roos
"<0 2 [4 6](3,4,1) 3*2>"
.scale('D minor')
.color('salmon')
.off(1/4, x=>x.scaleTranspose(2).color('green'))
.off(1/2, x=>x.scaleTranspose(6).color('steelblue'))
.legato(.5)
.echo(4, 1/8, .5)
.note().piano()
.pianoroll()`;

const sml1 = `// Hirokazu Tanaka - World 1-1
stack(
  // melody
  \`<
  [e5 ~] [[d5@2 c5] [~@2 e5]] ~ [~ [c5@2 d5]] [e5 e5] [d5 c5] [e5 f5] [g5 a5]
  [~ c5] [c5 d5] [e5 [c5@2 c5]] [~ c5] [f5 e5] [c5 d5] [~ g6] [g6 ~]
  [e5 ~] [[d5@2 c5] [~@2 e5]] ~ [~ [c5@2 d5]] [e5 e5] [d5 c5] [a5 g5] [c6 [e5@2 d5]]
  [~ c5] [c5 d5] [e5 [c5@2 c5]] [~ c5] [f5 e5] [c5 d5] [~ [g6@2 ~] ~@2] [g5 ~] 
  [~ a5] [b5 c6] [b5@2 ~@2 g5] ~
  [f5 ~] [[g5@2 f5] ~] [[e5 ~] [f5 ~]] [[f#5 ~] [g5 ~]]
  [~ a5] [b5 c6] [b5@2 ~@2 g5] ~
  [eb6 d6] [~ c6] ~!2
  >\`
  .legato(.95),
  // sub melody
  \`<
  [~ g4]!2 [~ ab4]!2 [~ a4]!2 [~ bb4]!2 
  [~ a4]!2 [~ g4]!2 [d4 e4] [f4 gb4] ~!2
  [~ g4]!2 [~ ab4]!2 [~ a4]!2 [~ bb4]!2 
  [~ a4]!2 [~ g4]!2 [d4 e4] [f4 gb4] ~!2
  [~ c5]!4 [~ a4]!2 [[c4 ~] [d4 ~]] [[eb4 ~] [e4 ~]]
  [~ c5]!4 [~ eb5]!2 [g4*2 [f4 ~]] [[e4 ~] [d4 ~]]
  >\`,
  // bass
  \`<
  c3!7 a3 f3!2
  e3!2 ~!4
  c3!7 a3 f3!2
  e3!2 ~!4
  f3!2 e3!2 d3!2 ~!2
  f3!2 e3!2 ab3!2 ~!2
  >\`
  .legato(.5)
).fast(2).note()`;

const randomBells = `// licensed with CC BY-NC-SA 4.0 https://creativecommons.org/licenses/by-nc-sa/4.0/
// by Felix Roos
samples({
  bell: { c6: 'https://freesound.org/data/previews/411/411089_5121236-lq.mp3' },
  bass: { d2: 'https://freesound.org/data/previews/608/608286_13074022-lq.mp3' }
})

stack(
  // bells
  "0".euclidLegato(3,8)
  .echo(3, 1/16, .5)
  .add(rand.range(0,12))
  .velocity(rand.range(.5,1))
  .legato(rand.range(.4,3))
  .scale(cat('D minor pentatonic')).note()
  .s('bell').gain(.6).delay(.2).delaytime(1/3).delayfeedback(.8),
  // bass
  "<D2 A2 G2 F2>".euclidLegatoRot(6,8,1).note().s('bass').clip(1).gain(.8)
)
  .slow(6)
  .pianoroll({minMidi:20,maxMidi:120,background:'transparent'})
  `;

const waa2 = `// licensed with CC BY-NC-SA 4.0 https://creativecommons.org/licenses/by-nc-sa/4.0/
// by Felix Roos
n(
  "a4 [a3 c3] a3 c3"
  .sub("<7 12 5 12>".slow(2))
  .off(1/4,x=>x.add(7))
  .off(1/8,x=>x.add(12))
)
  .slow(2)
  .legato(sine.range(0.3, 2).slow(28))
  .s("sawtooth square".fast(2))
  .cutoff(cosine.range(500,4000).slow(16))
  .gain(.5)
  .room(.5)
  `;

const hyperpop = `// licensed with CC BY-NC-SA 4.0 https://creativecommons.org/licenses/by-nc-sa/4.0/
// by Felix Roos
const lfo = cosine.slow(15);
const lfo2 = sine.slow(16);
const filter1 = x=>x.cutoff(lfo2.range(300,3000));
const filter2 = x=>x.hcutoff(lfo.range(1000,6000)).cutoff(4000)
const scales = cat('D3 major', 'G3 major').slow(8)

samples({
  bd: '344/344757_1676145-lq.mp3',
  sn: '387/387186_7255534-lq.mp3',
  hh: '561/561241_12517458-lq.mp3',
  hh2:'44/44944_236326-lq.mp3',
  hh3: '44/44944_236326-lq.mp3',
}, 'https://freesound.org/data/previews/')

stack(
  "-7 0 -7 7".struct("x(5,8,2)").fast(2).sub(7)
  .scale(scales)
  .n()
  .s("sawtooth,square")
  .gain(.3).attack(0.01).decay(0.1).sustain(.5)
  .apply(filter1),
  "~@3 [<2 3>,<4 5>]"
  .echo(4,1/16,.7)
  .scale(scales)
  .n()
  .s('square').gain(.7)
  .attack(0.01).decay(0.1).sustain(0)
  .apply(filter1),
  "6 4 2".add(14)
  .superimpose(sub("5"))
  .fast(1).euclidLegato(3,8)
  .mask("<1 0@7>")
  .fast(2)
  .echo(32, 1/8, .8)
  .scale(scales)
  .n()
  .s("sawtooth")
  .gain(sine.range(.1,.4).slow(8))
  .attack(.001).decay(.2).sustain(0)
  .apply(filter2)
).stack(
  stack(
    "bd <~@7 [~ bd]>".fast(2),
    "~ sn",
    "[~ hh3]*2"
  ).s().fast(2).gain(.7)
).slow(2)
// strudel disable-highlighting`;

const festivalOfFingers3 = `// licensed with CC BY-NC-SA 4.0 https://creativecommons.org/licenses/by-nc-sa/4.0/
// by Felix Roos
"[-7*3],0,2,6,[8 7]"
.echoWith(4,1/4, (x,n)=>x
          .add(n*7)
          .velocity(1/(n+1))
          .legato(1/(n+1)))
.velocity(perlin.range(.5,.9).slow(8))
.stack("[22 25]*3"
       .legato(sine.range(.5,2).slow(8))
       .velocity(sine.range(.4,.8).slow(5))
       .echo(4,1/12,.5))
.scale(cat('D dorian','G mixolydian','C dorian','F mixolydian'))
.legato(1)
.slow(2)
.note().piano()
//.pianoroll({maxMidi:160})`;

const meltingsubmarine = `// licensed with CC BY-NC-SA 4.0 https://creativecommons.org/licenses/by-nc-sa/4.0/
// by Felix Roos
await samples('github:tidalcycles/Dirt-Samples/master/')
stack(
  s("bd:5,[~ <sd:1!3 sd:1(3,4,2)>],hh27(3,4)") // drums
  .speed(perlin.range(.7,.9)) // random sample speed variation
  //.hush()
  ,"<a1 b1*2 a1(3,8) e2>" // bassline
  .off(1/8,x=>x.add(12).degradeBy(.5)) // random octave jumps
  .add(perlin.range(0,.5)) // random pitch variation
  .superimpose(add(.05)) // add second, slightly detuned voice
  .n() // wrap in "n"
  .decay(.15).sustain(0) // make each note of equal length
  .s('sawtooth') // waveform
  .gain(.4) // turn down
  .cutoff(sine.slow(7).range(300,5000)) // automate cutoff
  //.hush()
  ,"<Am7!3 <Em7 E7b13 Em7 Ebm7b5>>".voicings('lefthand') // chords
  .superimpose(x=>x.add(.04)) // add second, slightly detuned voice
  .add(perlin.range(0,.5)) // random pitch variation
  .n() // wrap in "n"
  .s('sawtooth') // waveform
  .gain(.16) // turn down
  .cutoff(500) // fixed cutoff
  .attack(1) // slowly fade in
  //.hush()
  ,"a4 c5 <e6 a6>".struct("x(5,8)")
  .superimpose(x=>x.add(.04)) // add second, slightly detuned voice
  .add(perlin.range(0,.5)) // random pitch variation
  .n() // wrap in "n"
  .decay(.1).sustain(0) // make notes short
  .s('triangle') // waveform
  .degradeBy(perlin.range(0,.5)) // randomly controlled random removal :)
  .echoWith(4,.125,(x,n)=>x.gain(.15*1/(n+1))) // echo notes
  //.hush()
)
  .slow(3/2)`;

const outroMusic = `// licensed with CC BY-NC-SA 4.0 https://creativecommons.org/licenses/by-nc-sa/4.0/
// by Felix Roos
samples({
  bd: ['bd/BT0AADA.wav','bd/BT0AAD0.wav','bd/BT0A0DA.wav','bd/BT0A0D3.wav','bd/BT0A0D0.wav','bd/BT0A0A7.wav'],
  sd: ['sd/rytm-01-classic.wav','sd/rytm-00-hard.wav'],
  hh: ['hh27/000_hh27closedhh.wav','hh/000_hh3closedhh.wav'],
  perc: ['perc/002_perc2.wav'],
}, 'github:tidalcycles/Dirt-Samples/master/');

"C^7 Am7 Dm7 G7".slow(2).voicings('lefthand')
  .stack("0@6 [<1 2> <2 0> 1]@2".scale('C5 major'))
  .n().slow(4)
  .s('0040_FluidR3_GM_sf2_file')
  .color('steelblue')
  .stack(
   "<-7 ~@2 [~@2 -7] -9 ~@2 [~@2 -9] -10!2 ~ [~@2 -10] -5 ~ [-3 -2 -10]@2>*2".scale('C3 major')
    .n().s('sawtooth').color('brown')
  )
  .attack(0.05).decay(.1).sustain(.7)
  .cutoff(perlin.range(800,2000))
  .gain(.3)
  .stack(
    s("<bd!3 [bd ~ bd]> sd,hh*3,~@5 <perc perc*3>")
    .speed(perlin.range(.9,1.1))
    .n(3).color('gray')
  ).slow(3/2)
  //.pianoroll({autorange:1,vertical:1,fold:0})
  `;

const bassFuge = `// licensed with CC BY-NC-SA 4.0 https://creativecommons.org/licenses/by-nc-sa/4.0/
// by Felix Roos
samples({ flbass: ['00_c2_finger_long_neck.wav','01_c2_finger_short_neck.wav','02_c2_finger_long_bridge.wav','03_c2_finger_short_bridge.wav','04_c2_pick_long.wav','05_c2_pick_short.wav','06_c2_palm_mute.wav'] }, 
  'github:cleary/samples-flbass/main/')
samples({
bd: ['bd/BT0AADA.wav','bd/BT0AAD0.wav','bd/BT0A0DA.wav','bd/BT0A0D3.wav','bd/BT0A0D0.wav','bd/BT0A0A7.wav'],
sd: ['sd/rytm-01-classic.wav','sd/rytm-00-hard.wav'],
hh: ['hh27/000_hh27closedhh.wav','hh/000_hh3closedhh.wav'],
}, 'github:tidalcycles/Dirt-Samples/master/');

note("<8(3,8) <7 7*2> [4 5@3] 8>".sub(1) // sub 1 -> 1-indexed
.layer(
x=>x,
x=>x.add(7).color('steelblue')
.off(1/8,x=>x.add("2,4").off(1/8,x=>x.add(5).echo(4,.125,.5)))
.slow(2),
).scale('A1 minor'))
.s("flbass").n(0)
.gain(.3)
.cutoff(sine.slow(7).range(200,4000))
.resonance(10)
//.hcutoff(400)
.clip(1)
.stack(s("bd:1*2,~ sd:0,[~ hh:0]*2"))
.pianoroll({vertical:1})`;

const chop = `// licensed with CC BY-NC-SA 4.0 https://creativecommons.org/licenses/by-nc-sa/4.0/
// by Felix Roos
samples({ p: 'https://cdn.freesound.org/previews/648/648433_11943129-lq.mp3' })

s("p")
  .loopAt(32)
  .chop(128)
  .jux(rev)
  .shape(.4)
  .decay(.1)
  .sustain(.6)
  `;

const delay = `// licensed with CC BY-NC-SA 4.0 https://creativecommons.org/licenses/by-nc-sa/4.0/
// by Felix Roos
stack(
    s("bd <sd cp>")
    .delay("<0 .5>")
    .delaytime(".16 | .33")
    .delayfeedback(".6 | .8")
  ).sometimes(x=>x.speed("-1"))`;

const orbit = `// licensed with CC BY-NC-SA 4.0 https://creativecommons.org/licenses/by-nc-sa/4.0/
// by Felix Roos
stack(
    s("bd <sd cp>")
    .delay(.5)
    .delaytime(.33)
    .delayfeedback(.6),
    s("hh*2")
    .delay(.8)
    .delaytime(.08)
    .delayfeedback(.7)
    .orbit(2)
  ).sometimes(x=>x.speed("-1"))`;

const belldub = `// licensed with CC BY-NC-SA 4.0 https://creativecommons.org/licenses/by-nc-sa/4.0/
// by Felix Roos
samples({ bell: {b4:'https://cdn.freesound.org/previews/339/339809_5121236-lq.mp3'}})
// "Hand Bells, B, Single.wav" by InspectorJ (www.jshaw.co.uk) of Freesound.org
stack(
  // bass
  note("[0 ~] [2 [0 2]] [4 4*2] [[4 ~] [2 ~] 0@2]".scale('g1 dorian').superimpose(x=>x.add(.02)))
  .s('sawtooth').cutoff(200).resonance(20).gain(.15).shape(.6).release(.05),
  // perc
  s("[~ hh]*4").room("0 0.5".fast(2)).end(perlin.range(0.02,1)),
  s("mt lt ht").struct("x(3,8)").fast(2).gain(.5).room(.5).sometimes(x=>x.speed(".5")),
  s("misc:2").speed(1).delay(.5).delaytime(1/3).gain(.4),
  // chords
  note("[~ Gm7] ~ [~ Dm7] ~".voicings('lefthand').superimpose(x=>x.add(.1)))
  .s('sawtooth').gain(.5)
  .cutoff(perlin.range(400,3000).slow(8))
  .decay(perlin.range(0.05,.2)).sustain(0)
  .delay(.9).room(1),
  // blips
  note(
    "0 5 4 2".iter(4)
    .off(1/3, add(7))
    .scale('g4 dorian')
  ).s('square').cutoff(2000).decay(.03).sustain(0)
  .degradeBy(.2)
  .orbit(2).delay(.2).delaytime(".33 | .6 | .166 | .25")
  .room(1).gain(.5).mask("<0 1>/8"),
  // bell
  note(rand.range(0,12).struct("x(5,8)").scale('g2 minor pentatonic')).s('bell').begin(.05)
  .delay(.2).degradeBy(.4).gain(.4)
  .mask("<1 0>/8")
).slow(5)`;

const dinofunk = `// licensed with CC BY-NC-SA 4.0 https://creativecommons.org/licenses/by-nc-sa/4.0/
// by Felix Roos
samples({bass:'https://cdn.freesound.org/previews/614/614637_2434927-hq.mp3',
dino:{b4:'https://cdn.freesound.org/previews/316/316403_5123851-hq.mp3'}})
setVoicingRange('lefthand', ['c3','a4'])

stack(
s('bass').loopAt(8).clip(1),
s("bd*2, ~ sd,hh*4"),
note("Abm7".voicings('lefthand').struct("x(3,8,1)".slow(2))),
"0 1 2 3".scale('ab4 minor pentatonic')
.superimpose(x=>x.add(.1))
.sometimes(x=>x.add(12))
.note().s('sawtooth')
.cutoff(sine.range(400,2000).slow(16)).gain(.8)
.decay(perlin.range(.05,.2)).sustain(0)
.delay(sine.range(0,.5).slow(32))
.degradeBy(.4).room(1),
note("<b4 eb4>").s('dino').delay(.8).slow(8).room(.5)
)`;

const sampleDemo = `// licensed with CC BY-NC-SA 4.0 https://creativecommons.org/licenses/by-nc-sa/4.0/
// by Felix Roos
stack(
  // percussion
  s("[woodblock:1 woodblock:2*2] snare_rim:0,gong/8,brakedrum:1(3,8),~@3 cowbell:3")
  .sometimes(x=>x.speed(2)),
  // melody
  note("<0 4 1 3 2>".off(".25 | .125",add(2)).scale('D3 hirajoshi'))
  .s("clavisynth").gain(.2).delay(.25).jux(rev)
  .degradeBy(sine.range(0,.5).slow(32)),
  // bass
  note("<0@3 <2(3,8) 3(3,8)>>".scale('D1 hirajoshi'))
  .s('psaltery_pluck').gain(.6).clip(1)
  .release(.1).room(.5)
)`;

const holyflute = `// licensed with CC BY-NC-SA 4.0 https://creativecommons.org/licenses/by-nc-sa/4.0/
// by Felix Roos
"c3 eb3(3,8) c4/2 g3*2"
.superimpose(
  x=>x.slow(2).add(12),
  x=>x.slow(4).sub(5)
).add("<0 1>/16")
.note().s('ocarina_vib').clip(1)
.release(.1).room(1).gain(.2)
.color("salmon | orange | darkseagreen")
.pianoroll({fold:0,autorange:0,vertical:0,cycles:12,smear:0,minMidi:40})
`;

const flatrave = `// licensed with CC BY-NC-SA 4.0 https://creativecommons.org/licenses/by-nc-sa/4.0/
// by Felix Roos
stack(
  s("bd*2,~ [cp,sd]").bank('RolandTR909'),
  
  s("hh:1*4").sometimes(fast("2"))
  .rarely(x=>x.speed(".5").delay(.5))
  .end(perlin.range(0.02,.05).slow(8))
  .bank('RolandTR909').room(.5)
  .gain("0.4,0.4(5,8)"),
  
  note("<0 2 5 3>".scale('G1 minor')).struct("x(5,8)")
  .s('sawtooth').decay(.1).sustain(0),
  
  note("<G4 A4 Bb4 A4>,Bb3,D3").struct("~ x*2").s('square').clip(1)
  .cutoff(sine.range(500,4000).slow(16)).resonance(10)
  .decay(sine.slow(15).range(.05,.2)).sustain(0)
  .room(.5).gain(.3).delay(.2).mask("<0 1@3>/8"),
  
  "0 5 3 2".sometimes(slow(2)).off(1/8,add(5)).scale('G4 minor').note()
  .decay(.05).sustain(0).delay(.2).degradeBy(.5).mask("<0 1>/16")
)`;

const amensister = `// licensed with CC BY-NC-SA 4.0 https://creativecommons.org/licenses/by-nc-sa/4.0/
// by Felix Roos
await samples('github:tidalcycles/Dirt-Samples/master')

stack(
  // amen
  n("0 1 2 3 4 5 6 7")
  .sometimes(x=>x.ply(2))
  .rarely(x=>x.speed("2 | -2"))
  .sometimesBy(.4, x=>x.delay(".5"))
  .s("amencutup")
  .slow(2)
  .room(.5)
  ,
  // bass
  sine.add(saw.slow(4)).range(0,7).segment(8)
  .superimpose(x=>x.add(.1))
  .scale('G0 minor').note()
  .s("sawtooth").decay(.1).sustain(0)
  .gain(.4).cutoff(perlin.range(300,3000).slow(8)).resonance(10)
  .degradeBy("0 0.1 .5 .1")
  .rarely(add(note("12")))
  ,
  // chord
  note("Bb3,D4".superimpose(x=>x.add(.2)))
  .s('sawtooth').cutoff(1000).struct("<~@3 [~ x]>")
  .decay(.05).sustain(.0).delay(.8).delaytime(.125).room(.8)
  ,
  // alien
  s("breath").room(1).shape(.6).chop(16).rev().mask("<x ~@7>")
  ,
  n("0 1").s("east").delay(.5).degradeBy(.8).speed(rand.range(.5,1.5))
).reset("<x@7 x(5,8)>")`;

const juxUndTollerei = `// licensed with CC BY-NC-SA 4.0 https://creativecommons.org/licenses/by-nc-sa/4.0/
// by Felix Roos
note("c3 eb3 g3 bb3").palindrome()
.s('sawtooth')
.jux(x=>x.rev().color('green').s('sawtooth'))
.off(1/4, x=>x.add(note("<7 12>/2")).slow(2).late(.005).s('triangle'))
//.delay(.5)
.fast(1).cutoff(sine.range(200,2000).slow(8))
.decay(.05).sustain(0)
.room(.6)
.delay(.5).delaytime(.1).delayfeedback(.4)
.pianoroll()`;

const csoundDemo = `// licensed with CC BY-NC-SA 4.0 https://creativecommons.org/licenses/by-nc-sa/4.0/
// by Felix Roos
await loadCsound\`
instr CoolSynth
    iduration = p3
    ifreq = p4
    igain = p5
    ioct = octcps(ifreq)

    kpwm = oscili(.05, 8)
    asig = vco2(igain, ifreq, 4, .5 + kpwm)
    asig += vco2(igain, ifreq * 2)

    idepth = 2
    acut = transegr:a(0, .005, 0, idepth, .06, -4.2, 0.001, .01, -4.2, 0) ; filter envelope
    asig = zdf_2pole(asig, cpsoct(ioct + acut + 2), 0.5)

    iattack = .01
    isustain = .5
    idecay = .1
    irelease = .1
    asig *= linsegr:a(0, iattack, 1, idecay, isustain, iduration, isustain, irelease, 0)
    
    out(asig, asig)
endin\`

"<0 2 [4 6](3,4,1) 3*2>"
.off(1/4, add(2))
.off(1/2, add(6))
.scale('D minor')
.note()
//.pianoroll()
.csound('CoolSynth')`;

const loungeSponge = `
// licensed with CC BY-NC-SA 4.0 https://creativecommons.org/licenses/by-nc-sa/4.0/
// by Felix Roos
// livecode.orc by Steven Yi
await loadOrc('github:kunstmusik/csound-live-code/master/livecode.orc')

stack(
  note("<C^7 A7 Dm7 Fm7>/2".voicings('lefthand'))
  .cutoff(sine.range(500,2000).round().slow(16))
  .euclidLegato(3,8).csound('FM1')
  ,
  note("<C2 A1 D2 F2>/2").ply(8).csound('Bass').gain("1 4 1 4")
  ,
  note("0 7 [4 3] 2".fast(2/3).off(".25 .125",add("<2 4 -3 -1>"))
  .slow(2).scale('A4 minor'))
  .legato(.25).csound('SynHarp')
  ,
  s("bd*2,[~ hh]*2,~ cp").bank('RolandTR909')
)`;

const arpoon = `// licensed with CC BY-NC-SA 4.0 https://creativecommons.org/licenses/by-nc-sa/4.0/
// "Arpoon" by Felix Roos
await samples('github:tidalcycles/Dirt-Samples/master')

"<<Am7 C^7> C7 F^7 [Fm7 E7b9]>".voicings('lefthand')
  .arp("[0,3] 2 [1,3] 2".fast(3)).legato(2)
  .add(perlin.range(0,0.2)).sub("<0 -12>/8")
  .note().cutoff(perlin.range(500,4000)).resonance(12)
  .gain("<.5 .8>*16")
  .decay(.16).sustain(0.5)
  .delay(.2)
  .room(.5).pan(sine.range(.3,.6))
  .s('piano').clip(1)
  .stack("<<A1 C2>!2 F2 [F2 E2]>".add.out("0 -5".fast(2)).add("0,.12").note().s('sawtooth').clip(1).cutoff(300))
  .slow(4)
  .stack(s("bd*4, [~ [hh hh? hh?]]*2,~ [sd ~ [sd:2? bd?]]").arp("0|1").bank('RolandTR909').gain(.5).slow(2))
`;

const tunes = /*#__PURE__*/Object.freeze(/*#__PURE__*/Object.defineProperty({
	__proto__: null,
	swimming,
	giantSteps,
	zeldasRescue,
	caverave,
	sampleDrums,
	barryHarris,
	blippyRhodes,
	wavyKalimba,
	festivalOfFingers,
	undergroundPlumber,
	bridgeIsOver,
	goodTimes,
	echoPiano,
	sml1,
	randomBells,
	waa2,
	hyperpop,
	festivalOfFingers3,
	meltingsubmarine,
	outroMusic,
	bassFuge,
	chop,
	delay,
	orbit,
	belldub,
	dinofunk,
	sampleDemo,
	holyflute,
	flatrave,
	amensister,
	juxUndTollerei,
	csoundDemo,
	loungeSponge,
	arpoon
}, Symbol.toStringTag, { value: 'Module' }));

const $$Astro$4 = createAstro("/Users/michaelgogins/cloud-music/strudel/website/src/pages/examples/index.astro", "https://strudel.tidalcycles.org/", "file:///Users/michaelgogins/cloud-music/strudel/website/");
const $$Index$3 = createComponent(async ($$result, $$props, $$slots) => {
  const Astro2 = $$result.createAstro($$Astro$4, $$props, $$slots);
  Astro2.self = $$Index$3;
  return renderTemplate`<head>
  ${renderComponent($$result, "HeadCommon", $$HeadCommon, {})}
${renderHead($$result)}</head>
<body class="bg-slate-800">
  <div class="grid grid-cols-2 sm:grid-cols-3 md:grid-cols-4 lg:grid-cols-6 gap-2 p-2 select-none">
    ${Object.entries(tunes).map(([name, tune]) => renderTemplate`<a class="rounded-md bg-slate-900 hover:bg-slate-700 cursor-pointer relative"${addAttribute(`./#${btoa(tune)}`, "href")}>
          <div class="absolute w-full h-full flex justify-center items-center">
            <span class="bg-slate-800 p-2 rounded-md text-white">${name}</span>
          </div>
          <img${addAttribute(`./img/example-${name}.png`, "src")}>
        </a>`)}
  </div>
</body>`;
}, "/Users/michaelgogins/cloud-music/strudel/website/src/pages/examples/index.astro");

const $$file$4 = "/Users/michaelgogins/cloud-music/strudel/website/src/pages/examples/index.astro";
const $$url$4 = "/examples";

const _page8 = /*#__PURE__*/Object.freeze(/*#__PURE__*/Object.defineProperty({
	__proto__: null,
	default: $$Index$3,
	file: $$file$4,
	url: $$url$4
}, Symbol.toStringTag, { value: 'Module' }));

var __freeze$1 = Object.freeze;
var __defProp$1 = Object.defineProperty;
var __template$1 = (cooked, raw) => __freeze$1(__defProp$1(cooked, "raw", { value: __freeze$1(raw || cooked.slice()) }));
var _a$1;
const $$Astro$3 = createAstro("/Users/michaelgogins/cloud-music/strudel/website/src/pages/tutorial/index.astro", "https://strudel.tidalcycles.org/", "file:///Users/michaelgogins/cloud-music/strudel/website/");
const $$Index$2 = createComponent(async ($$result, $$props, $$slots) => {
  const Astro2 = $$result.createAstro($$Astro$3, $$props, $$slots);
  Astro2.self = $$Index$2;
  return renderTemplate(_a$1 || (_a$1 = __template$1(["<script>\n  window.location.pathname = `/learn/getting-started`;\n<\/script>\n"], ["<script>\n  window.location.pathname = \\`/learn/getting-started\\`;\n<\/script>\n"])));
}, "/Users/michaelgogins/cloud-music/strudel/website/src/pages/tutorial/index.astro");

const $$file$3 = "/Users/michaelgogins/cloud-music/strudel/website/src/pages/tutorial/index.astro";
const $$url$3 = "/tutorial";

const _page9 = /*#__PURE__*/Object.freeze(/*#__PURE__*/Object.defineProperty({
	__proto__: null,
	default: $$Index$2,
	file: $$file$3,
	url: $$url$3
}, Symbol.toStringTag, { value: 'Module' }));

const MDXLayout$f = async function ({
  children
}) {
  const Layout = (await import('./chunks/MainLayout.c7eab378.mjs')).default;
  const {
    layout,
    ...content
  } = frontmatter$g;
  content.file = file$g;
  content.url = url$g;
  content.astro = {};
  Object.defineProperty(content.astro, "headings", {
    get() {
      throw new Error('The "astro" property is no longer supported! To access "headings" from your layout, try using "Astro.props.headings."');
    }
  });
  Object.defineProperty(content.astro, "html", {
    get() {
      throw new Error('The "astro" property is no longer supported! To access "html" from your layout, try using "Astro.props.compiledContent()."');
    }
  });
  Object.defineProperty(content.astro, "source", {
    get() {
      throw new Error('The "astro" property is no longer supported! To access "source" from your layout, try using "Astro.props.rawContent()."');
    }
  });
  return createVNode(Layout, {
    file: file$g,
    url: url$g,
    content,
    frontmatter: content,
    headings: getHeadings$f(),
    "server:root": true,
    children
  });
};
const frontmatter$g = {
  "title": "Microrhythms",
  "layout": "../../layouts/MainLayout.astro"
};
const _internal$f = {
  injectedFrontmatter: {}
};
function getHeadings$f() {
  return [{
    "depth": 1,
    "slug": "microrhythms",
    "text": "Microrhythms"
  }];
}
function _createMdxContent$f(props) {
  const _components = Object.assign({
    p: "p",
    a: "a",
    h1: "h1",
    span: "span",
    code: "code",
    ul: "ul",
    li: "li"
  }, props.components);
  return createVNode(Fragment, {
    children: [createVNode(_components.p, {
      children: ["see ", createVNode(_components.a, {
        href: "https://strudel.tidalcycles.org?zMEo5kowGrFc",
        children: "https://strudel.tidalcycles.org?zMEo5kowGrFc"
      })]
    }), "\n", createVNode(_components.h1, {
      id: "microrhythms",
      children: [createVNode(_components.a, {
        "aria-hidden": "true",
        tabIndex: "-1",
        href: "#microrhythms",
        children: createVNode(_components.span, {
          className: "icon icon-link"
        })
      }), "Microrhythms"]
    }), "\n", createVNode(_components.p, {
      children: ["Inspired by this ", createVNode(_components.a, {
        href: "https://www.youtube.com/watch?v=or7B6vI3jOo",
        children: "Mini-Lecture on Microrhythm Notation"
      }), ", let\u2019s look at how we can express microrhythms with Strudel."]
    }), "\n", createVNode(_components.p, {
      children: ["The timestamps of the first rhythm are ", createVNode(_components.code, {
        children: "0 1/5 1/2 2/3 1"
      }), ". We could naively express this with a stack:"]
    }), "\n", createVNode(MiniRepl, {
      "client:idle": true,
      tune: `s("hh").struct(
  stack(
    "x", // 0
    "~ x ~@3", // 1/5
    "~ x", // 1/2
    "~@2 x" // 2/3
))`,
      "client:component-path": "/Users/michaelgogins/cloud-music/strudel/website/src/docs/MiniRepl",
      "client:component-export": "MiniRepl",
      "client:component-hydration": true
    }), "\n", createVNode(_components.p, {
      children: "While this works, it has two problems:"
    }), "\n", createVNode(_components.ul, {
      children: ["\n", createVNode(_components.li, {
        children: "it is not very compact"
      }), "\n", createVNode(_components.li, {
        children: "the durations are wrong, e.g. the first note takes up the whole cycle"
      }), "\n"]
    }), "\n", createVNode(_components.p, {
      children: "In the video, the duration of a timestamp is calculated by subtracting it from the next timestamp:"
    }), "\n", createVNode(_components.ul, {
      children: ["\n", createVNode(_components.li, {
        children: "1/5 - 0 = 1/5 = 6/30"
      }), "\n", createVNode(_components.li, {
        children: "1/2 - 1/5 = 3/10 = 9/30"
      }), "\n", createVNode(_components.li, {
        children: "2/3 - 1/2 = 1/6 = 5/30"
      }), "\n", createVNode(_components.li, {
        children: "1 - 2/3 = 1/3 = 10/30"
      }), "\n"]
    }), "\n", createVNode(_components.p, {
      children: "Using those, we can now express the rhythm much shorter:"
    }), "\n", createVNode(MiniRepl, {
      "client:idle": true,
      tune: "s(\"hh\").struct(\"x@6 x@9 x@5 x@10\")",
      "client:component-path": "/Users/michaelgogins/cloud-music/strudel/website/src/docs/MiniRepl",
      "client:component-export": "MiniRepl",
      "client:component-hydration": true
    }), "\n", createVNode(_components.p, {
      children: "The problems of the first notation are now fixed: it is much shorter and the durations are correct.\nStill, this notation involved calculating the durations by hand, which could be automated:"
    }), "\n", createVNode(MiniRepl, {
      "client:idle": true,
      tune: `Pattern.prototype.micro = function (...timestamps) {
  const durations = timestamps.map((x, i, a) => {
    const next = i < a.length-1 ? a[i+1] : 1;
    return next - a[i]
  })
  return this.struct(timeCat(...durations.map(d => [d, 1]))).late(timestamps[0])
}
s('hh').micro(0, 1/5, 1/2, 2/3)`,
      "client:component-path": "/Users/michaelgogins/cloud-music/strudel/website/src/docs/MiniRepl",
      "client:component-export": "MiniRepl",
      "client:component-hydration": true
    }), "\n", createVNode(_components.p, {
      children: "This notation is even shorter and it allows directly filling in the timestamps!"
    }), "\n", createVNode(_components.p, {
      children: "This is the second example of the video:"
    }), "\n", createVNode(MiniRepl, {
      "client:idle": true,
      tune: `Pattern.prototype.micro = function (...timestamps) {
  const durations = timestamps.map((x, i, a) => {
    const next = i < a.length-1 ? a[i+1] : 1;
    return next - a[i]
  })
  return this.struct(timeCat(...durations.map(d => [d, 1]))).late(timestamps[0])
}
s('hh').micro(0, 1/6, 2/5, 2/3, 3/4)`,
      "client:component-path": "/Users/michaelgogins/cloud-music/strudel/website/src/docs/MiniRepl",
      "client:component-export": "MiniRepl",
      "client:component-hydration": true
    }), "\n", createVNode(_components.p, {
      children: ["with bass: ", createVNode(_components.a, {
        href: "https://strudel.tidalcycles.org?sTglgJJCPIeY",
        children: "https://strudel.tidalcycles.org?sTglgJJCPIeY"
      })]
    })]
  });
}
function MDXContent$f(props = {}) {
  return createVNode(MDXLayout$f, {
    ...props,
    children: createVNode(_createMdxContent$f, {
      ...props
    })
  });
}

__astro_tag_component__(getHeadings$f, "astro:jsx");
__astro_tag_component__(MDXContent$f, "astro:jsx");
const url$g = "/recipes/microrhythms";
const file$g = "/Users/michaelgogins/cloud-music/strudel/website/src/pages/recipes/microrhythms.mdx";
function rawContent$f() { throw new Error("MDX does not support rawContent()! If you need to read the Markdown contents to calculate values (ex. reading time), we suggest injecting frontmatter via remark plugins. Learn more on our docs: https://docs.astro.build/en/guides/integrations-guide/mdx/#inject-frontmatter-via-remark-or-rehype-plugins") }function compiledContent$f() { throw new Error("MDX does not support compiledContent()! If you need to read the HTML contents to calculate values (ex. reading time), we suggest injecting frontmatter via rehype plugins. Learn more on our docs: https://docs.astro.build/en/guides/integrations-guide/mdx/#inject-frontmatter-via-remark-or-rehype-plugins") }const Content$g = (props = {}) => MDXContent$f({
											...props,
											components: { Fragment, ...props.components },
										});
Content$g[Symbol.for('astro.needsHeadRendering')] = !Boolean(frontmatter$g.layout);

const _page10 = /*#__PURE__*/Object.freeze(/*#__PURE__*/Object.defineProperty({
	__proto__: null,
	frontmatter: frontmatter$g,
	_internal: _internal$f,
	getHeadings: getHeadings$f,
	url: url$g,
	file: file$g,
	rawContent: rawContent$f,
	compiledContent: compiledContent$f,
	Content: Content$g,
	default: Content$g
}, Symbol.toStringTag, { value: 'Module' }));

const MDXLayout$e = async function ({
  children
}) {
  const Layout = (await import('./chunks/MainLayout.c7eab378.mjs')).default;
  const {
    layout,
    ...content
  } = frontmatter$f;
  content.file = file$f;
  content.url = url$f;
  content.astro = {};
  Object.defineProperty(content.astro, "headings", {
    get() {
      throw new Error('The "astro" property is no longer supported! To access "headings" from your layout, try using "Astro.props.headings."');
    }
  });
  Object.defineProperty(content.astro, "html", {
    get() {
      throw new Error('The "astro" property is no longer supported! To access "html" from your layout, try using "Astro.props.compiledContent()."');
    }
  });
  Object.defineProperty(content.astro, "source", {
    get() {
      throw new Error('The "astro" property is no longer supported! To access "source" from your layout, try using "Astro.props.rawContent()."');
    }
  });
  return createVNode(Layout, {
    file: file$f,
    url: url$f,
    content,
    frontmatter: content,
    headings: getHeadings$e(),
    "server:root": true,
    children
  });
};
const frontmatter$f = {
  "title": "Build Arpeggios",
  "layout": "../../layouts/MainLayout.astro"
};
const _internal$e = {
  injectedFrontmatter: {}
};
function getHeadings$e() {
  return [{
    "depth": 1,
    "slug": "build-arpeggios",
    "text": "Build Arpeggios"
  }, {
    "depth": 2,
    "slug": "arpeggios-from-notes",
    "text": "Arpeggios from notes"
  }, {
    "depth": 2,
    "slug": "arpeggios-from-chords",
    "text": "Arpeggios from chords"
  }];
}
function _createMdxContent$e(props) {
  const _components = Object.assign({
    p: "p",
    a: "a",
    h1: "h1",
    span: "span",
    h2: "h2",
    ul: "ul",
    li: "li"
  }, props.components);
  return createVNode(Fragment, {
    children: [createVNode(_components.p, {
      children: ["Note: This has been (partly) translated from ", createVNode(_components.a, {
        href: "https://tidalcycles.org/docs/patternlib/howtos/buildarpeggios",
        children: "https://tidalcycles.org/docs/patternlib/howtos/buildarpeggios"
      })]
    }), "\n", createVNode(_components.h1, {
      id: "build-arpeggios",
      children: [createVNode(_components.a, {
        "aria-hidden": "true",
        tabIndex: "-1",
        href: "#build-arpeggios",
        children: createVNode(_components.span, {
          className: "icon icon-link"
        })
      }), "Build Arpeggios"]
    }), "\n", createVNode(_components.p, {
      children: "This page will teach you how to get started writing arpeggios using different techniques. It is a good way to learn Strudel in a more intuitive way."
    }), "\n", createVNode(_components.h2, {
      id: "arpeggios-from-notes",
      children: [createVNode(_components.a, {
        "aria-hidden": "true",
        tabIndex: "-1",
        href: "#arpeggios-from-notes",
        children: createVNode(_components.span, {
          className: "icon icon-link"
        })
      }), "Arpeggios from notes"]
    }), "\n", createVNode(_components.p, {
      children: "Start with a simple sequence of notes:"
    }), "\n", createVNode(MiniRepl, {
      tune: "note(\"c a f e\").piano().slow(2)",
      "client:idle": true,
      "client:component-path": "/Users/michaelgogins/cloud-music/strudel/website/src/docs/MiniRepl",
      "client:component-export": "MiniRepl",
      "client:component-hydration": true
    }), "\n", createVNode(_components.p, {
      children: "Now, let\u2019s play one per cycle:"
    }), "\n", createVNode(MiniRepl, {
      tune: "note(\"<c a f e>\").piano().slow(2)",
      "client:idle": true,
      "client:component-path": "/Users/michaelgogins/cloud-music/strudel/website/src/docs/MiniRepl",
      "client:component-export": "MiniRepl",
      "client:component-hydration": true
    }), "\n", createVNode(_components.p, {
      children: "On top of that, put a copy of the sequence, offset in time and pitch:"
    }), "\n", createVNode(MiniRepl, {
      tune: `"<c a f e>".off(1/8, add(7))
  .note().piano().slow(2)`,
      "client:idle": true,
      "client:component-path": "/Users/michaelgogins/cloud-music/strudel/website/src/docs/MiniRepl",
      "client:component-export": "MiniRepl",
      "client:component-hydration": true
    }), "\n", createVNode(_components.p, {
      children: "Add some structure to the original sequence:"
    }), "\n", createVNode(MiniRepl, {
      tune: `"<c*2 a(3,8) f(3,8,2) e*2>"
  .off(1/8, add(7))
  .note().piano().slow(2)`,
      "client:idle": true,
      "client:component-path": "/Users/michaelgogins/cloud-music/strudel/website/src/docs/MiniRepl",
      "client:component-export": "MiniRepl",
      "client:component-hydration": true
    }), "\n", createVNode(_components.p, {
      children: "Reverse in one speaker:"
    }), "\n", createVNode(MiniRepl, {
      tune: `"<c*2 a(3,8) f(3,8,2) e*2>"
  .off(1/8, add(7))
  .note().piano()
  .jux(rev).slow(2)`,
      "client:idle": true,
      "client:component-path": "/Users/michaelgogins/cloud-music/strudel/website/src/docs/MiniRepl",
      "client:component-export": "MiniRepl",
      "client:component-hydration": true
    }), "\n", createVNode(_components.p, {
      children: "Let\u2019s add another layer:"
    }), "\n", createVNode(MiniRepl, {
      tune: `"<c*2 a(3,8) f(3,8,2) e*2>"
  .off(1/8, add(7))
  .off(1/8, add(12))
  .note().piano()
  .jux(rev).slow(2)`,
      "client:idle": true,
      "client:component-path": "/Users/michaelgogins/cloud-music/strudel/website/src/docs/MiniRepl",
      "client:component-export": "MiniRepl",
      "client:component-hydration": true
    }), "\n", createVNode(_components.ul, {
      children: ["\n", createVNode(_components.li, {
        children: "added slow(2) to approximate tidals cps"
      }), "\n", createVNode(_components.li, {
        children: "n was replaced with note, because using n does not work as note for samples"
      }), "\n", createVNode(_components.li, {
        children: "legato 2 was removed because it does not work in combination with rev (bug)"
      }), "\n"]
    }), "\n", createVNode(_components.h2, {
      id: "arpeggios-from-chords",
      children: [createVNode(_components.a, {
        "aria-hidden": "true",
        tabIndex: "-1",
        href: "#arpeggios-from-chords",
        children: createVNode(_components.span, {
          className: "icon icon-link"
        })
      }), "Arpeggios from chords"]
    }), "\n", createVNode(_components.p, {
      children: "TODO"
    })]
  });
}
function MDXContent$e(props = {}) {
  return createVNode(MDXLayout$e, {
    ...props,
    children: createVNode(_createMdxContent$e, {
      ...props
    })
  });
}

__astro_tag_component__(getHeadings$e, "astro:jsx");
__astro_tag_component__(MDXContent$e, "astro:jsx");
const url$f = "/recipes/arpeggios";
const file$f = "/Users/michaelgogins/cloud-music/strudel/website/src/pages/recipes/arpeggios.mdx";
function rawContent$e() { throw new Error("MDX does not support rawContent()! If you need to read the Markdown contents to calculate values (ex. reading time), we suggest injecting frontmatter via remark plugins. Learn more on our docs: https://docs.astro.build/en/guides/integrations-guide/mdx/#inject-frontmatter-via-remark-or-rehype-plugins") }function compiledContent$e() { throw new Error("MDX does not support compiledContent()! If you need to read the HTML contents to calculate values (ex. reading time), we suggest injecting frontmatter via rehype plugins. Learn more on our docs: https://docs.astro.build/en/guides/integrations-guide/mdx/#inject-frontmatter-via-remark-or-rehype-plugins") }const Content$f = (props = {}) => MDXContent$e({
											...props,
											components: { Fragment, ...props.components },
										});
Content$f[Symbol.for('astro.needsHeadRendering')] = !Boolean(frontmatter$f.layout);

const _page11 = /*#__PURE__*/Object.freeze(/*#__PURE__*/Object.defineProperty({
	__proto__: null,
	frontmatter: frontmatter$f,
	_internal: _internal$e,
	getHeadings: getHeadings$e,
	url: url$f,
	file: file$f,
	rawContent: rawContent$e,
	compiledContent: compiledContent$e,
	Content: Content$f,
	default: Content$f
}, Symbol.toStringTag, { value: 'Module' }));

const MDXLayout$d = async function ({
  children
}) {
  const Layout = (await import('./chunks/MainLayout.c7eab378.mjs')).default;
  const {
    layout,
    ...content
  } = frontmatter$e;
  content.file = file$e;
  content.url = url$e;
  content.astro = {};
  Object.defineProperty(content.astro, "headings", {
    get() {
      throw new Error('The "astro" property is no longer supported! To access "headings" from your layout, try using "Astro.props.headings."');
    }
  });
  Object.defineProperty(content.astro, "html", {
    get() {
      throw new Error('The "astro" property is no longer supported! To access "html" from your layout, try using "Astro.props.compiledContent()."');
    }
  });
  Object.defineProperty(content.astro, "source", {
    get() {
      throw new Error('The "astro" property is no longer supported! To access "source" from your layout, try using "Astro.props.rawContent()."');
    }
  });
  return createVNode(Layout, {
    file: file$e,
    url: url$e,
    content,
    frontmatter: content,
    headings: getHeadings$d(),
    "server:root": true,
    children
  });
};
const frontmatter$e = {
  "title": "Build Rhythms",
  "layout": "../../layouts/MainLayout.astro"
};
const _internal$d = {
  injectedFrontmatter: {}
};
function getHeadings$d() {
  return [{
    "depth": 1,
    "slug": "build-rhythms",
    "text": "Build Rhythms"
  }, {
    "depth": 2,
    "slug": "from-a-simple-to-a-complex-rhythm",
    "text": "From a simple to a complex rhythm"
  }, {
    "depth": 2,
    "slug": "another-rhythmic-construction",
    "text": "Another rhythmic construction"
  }];
}
function _createMdxContent$d(props) {
  const _components = Object.assign({
    p: "p",
    ul: "ul",
    li: "li",
    a: "a",
    code: "code",
    h1: "h1",
    span: "span",
    h2: "h2"
  }, props.components);
  return createVNode(Fragment, {
    children: [createVNode(_components.p, {
      children: "Note:"
    }), "\n", createVNode(_components.ul, {
      children: ["\n", createVNode(_components.li, {
        children: ["this has been (partly) translated from ", createVNode(_components.a, {
          href: "https://tidalcycles.org/docs/patternlib/howtos/buildrhythms",
          children: "https://tidalcycles.org/docs/patternlib/howtos/buildrhythms"
        })]
      }), "\n", createVNode(_components.li, {
        children: ["this only sounds good with ", createVNode(_components.code, {
          children: "samples('github:tidalcycles/Dirt-Samples/master')"
        }), " in prebake"]
      }), "\n"]
    }), "\n", createVNode(_components.h1, {
      id: "build-rhythms",
      children: [createVNode(_components.a, {
        "aria-hidden": "true",
        tabIndex: "-1",
        href: "#build-rhythms",
        children: createVNode(_components.span, {
          className: "icon icon-link"
        })
      }), "Build Rhythms"]
    }), "\n", createVNode(_components.p, {
      children: "This page will teach you how to get started writing rhythms using different techniques. It is a good way to learn Strudel in a more intuitive way."
    }), "\n", createVNode(_components.h2, {
      id: "from-a-simple-to-a-complex-rhythm",
      children: [createVNode(_components.a, {
        "aria-hidden": "true",
        tabIndex: "-1",
        href: "#from-a-simple-to-a-complex-rhythm",
        children: createVNode(_components.span, {
          className: "icon icon-link"
        })
      }), "From a simple to a complex rhythm"]
    }), "\n", createVNode(_components.p, {
      children: "Simple bass drum - snare:"
    }), "\n", createVNode(MiniRepl, {
      "client:idle": true,
      tune: "s(\"bd sd\").slow(2)",
      "client:component-path": "/Users/michaelgogins/cloud-music/strudel/website/src/docs/MiniRepl",
      "client:component-export": "MiniRepl",
      "client:component-hydration": true
    }), "\n", createVNode(_components.p, {
      children: "Let\u2019s pick a different snare sample:"
    }), "\n", createVNode(MiniRepl, {
      "client:idle": true,
      tune: "s(\"bd sd:3\").slow(2)",
      "client:component-path": "/Users/michaelgogins/cloud-music/strudel/website/src/docs/MiniRepl",
      "client:component-export": "MiniRepl",
      "client:component-hydration": true
    }), "\n", createVNode(_components.p, {
      children: "Now, we are going to change the rhythm:"
    }), "\n", createVNode(MiniRepl, {
      "client:idle": true,
      tune: "s(\"bd*2 [~ sd:3]\").slow(2)",
      "client:component-path": "/Users/michaelgogins/cloud-music/strudel/website/src/docs/MiniRepl",
      "client:component-export": "MiniRepl",
      "client:component-hydration": true
    }), "\n", createVNode(_components.p, {
      children: "And add some toms:"
    }), "\n", createVNode(MiniRepl, {
      "client:idle": true,
      tune: "s(\"bd*2 [[~ lt] sd:3] lt:1 [ht mt*2]\").slow(2)",
      "client:component-path": "/Users/michaelgogins/cloud-music/strudel/website/src/docs/MiniRepl",
      "client:component-export": "MiniRepl",
      "client:component-hydration": true
    }), "\n", createVNode(_components.p, {
      children: "Start to transform, shift a quarter cycle every other cycle:"
    }), "\n", createVNode(MiniRepl, {
      "client:idle": true,
      tune: `s("bd*2 [[~ lt] sd:3] lt:1 [ht mt*2]")
.every(2, early(.25)).slow(2)`,
      "client:component-path": "/Users/michaelgogins/cloud-music/strudel/website/src/docs/MiniRepl",
      "client:component-export": "MiniRepl",
      "client:component-hydration": true
    }), "\n", createVNode(_components.p, {
      children: "Pattern the shift amount:"
    }), "\n", createVNode(MiniRepl, {
      "client:idle": true,
      tune: `s("bd*2 [[~ lt] sd:3] lt:1 [ht mt*2]")
.every(2, early("<.25 .125 .5>")).slow(2)`,
      "client:component-path": "/Users/michaelgogins/cloud-music/strudel/website/src/docs/MiniRepl",
      "client:component-export": "MiniRepl",
      "client:component-hydration": true
    }), "\n", createVNode(_components.p, {
      children: "Add some patterned effects:"
    }), "\n", createVNode(MiniRepl, {
      "client:idle": true,
      tune: `s("bd*2 [[~ lt] sd:3] lt:1 [ht mt*2]")
.every(2, early("<.25 .125 .5>"))
.shape("<0 .5 .3>")
.room(saw.range(0,.2).slow(4))
.slow(2)`,
      "client:component-path": "/Users/michaelgogins/cloud-music/strudel/website/src/docs/MiniRepl",
      "client:component-export": "MiniRepl",
      "client:component-hydration": true
    }), "\n", createVNode(_components.p, {
      children: "More transformation:"
    }), "\n", createVNode(MiniRepl, {
      "client:idle": true,
      tune: `s("bd*2 [[~ lt] sd:3] lt:1 [ht mt*2]")
.every(2, early("<.25 .125 .5>"))
.shape("<0 .5 .3>")
.room(saw.range(0,.2).slow(4))
.jux(id, rev, x=>x.speed(2))
.slow(2)`,
      "client:component-path": "/Users/michaelgogins/cloud-music/strudel/website/src/docs/MiniRepl",
      "client:component-export": "MiniRepl",
      "client:component-hydration": true
    }), "\n", createVNode(_components.h2, {
      id: "another-rhythmic-construction",
      children: [createVNode(_components.a, {
        "aria-hidden": "true",
        tabIndex: "-1",
        href: "#another-rhythmic-construction",
        children: createVNode(_components.span, {
          className: "icon icon-link"
        })
      }), "Another rhythmic construction"]
    }), "\n", createVNode(_components.p, {
      children: "Let\u2019s start with a sequence:"
    }), "\n", createVNode(MiniRepl, {
      "client:idle": true,
      tune: "n(\"0 0 [2 0] [2 3]\").s(\"feel\").speed(1.5).slow(2)",
      "client:component-path": "/Users/michaelgogins/cloud-music/strudel/website/src/docs/MiniRepl",
      "client:component-export": "MiniRepl",
      "client:component-hydration": true
    }), "\n", createVNode(_components.p, {
      children: "We add a bit of flavour:"
    }), "\n", createVNode(MiniRepl, {
      "client:idle": true,
      tune: "n(\"0 <0 4> [2 0] [2 3]\").s(\"feel\").speed(1.5).slow(2)",
      "client:component-path": "/Users/michaelgogins/cloud-music/strudel/website/src/docs/MiniRepl",
      "client:component-export": "MiniRepl",
      "client:component-hydration": true
    }), "\n", createVNode(_components.p, {
      children: "Swap the samples round every other cycle:"
    }), "\n", createVNode(_components.p, {
      children: ["TODO: implement ", createVNode(_components.code, {
        children: "rot"
      })]
    })]
  });
}
function MDXContent$d(props = {}) {
  return createVNode(MDXLayout$d, {
    ...props,
    children: createVNode(_createMdxContent$d, {
      ...props
    })
  });
}

__astro_tag_component__(getHeadings$d, "astro:jsx");
__astro_tag_component__(MDXContent$d, "astro:jsx");
const url$e = "/recipes/rhythms";
const file$e = "/Users/michaelgogins/cloud-music/strudel/website/src/pages/recipes/rhythms.mdx";
function rawContent$d() { throw new Error("MDX does not support rawContent()! If you need to read the Markdown contents to calculate values (ex. reading time), we suggest injecting frontmatter via remark plugins. Learn more on our docs: https://docs.astro.build/en/guides/integrations-guide/mdx/#inject-frontmatter-via-remark-or-rehype-plugins") }function compiledContent$d() { throw new Error("MDX does not support compiledContent()! If you need to read the HTML contents to calculate values (ex. reading time), we suggest injecting frontmatter via rehype plugins. Learn more on our docs: https://docs.astro.build/en/guides/integrations-guide/mdx/#inject-frontmatter-via-remark-or-rehype-plugins") }const Content$e = (props = {}) => MDXContent$d({
											...props,
											components: { Fragment, ...props.components },
										});
Content$e[Symbol.for('astro.needsHeadRendering')] = !Boolean(frontmatter$e.layout);

const _page12 = /*#__PURE__*/Object.freeze(/*#__PURE__*/Object.defineProperty({
	__proto__: null,
	frontmatter: frontmatter$e,
	_internal: _internal$d,
	getHeadings: getHeadings$d,
	url: url$e,
	file: file$e,
	rawContent: rawContent$d,
	compiledContent: compiledContent$d,
	Content: Content$e,
	default: Content$e
}, Symbol.toStringTag, { value: 'Module' }));

const __vite_glob_0_0 = "# my-patterns\n\nThis directory can be used to save your own patterns, which then get\nmade into a pattern swatch.\n\n0. fork and clone the strudel repository\n1. run `npm run setup` in the strudel folder\n1. Save one or more .txt files in this folder\n2. run `npm run repl` in the top-level strudel folder\n3. open `http://localhost:3000/swatch/` !\n\n## deploy\n\n1. in your fork, go to settings -> pages and select \"Github Actions\" as source\n2. edit `website/public/CNAME` to contain `<your-username>.github.io/strudel`\n3. edit `website/astro.config.mjs` to use site: `<your-username>.github.io/strudel` and base `/strudel`\n4. go to Actions -> `Build and Deploy` and click `Run workflow`\n5. view your patterns at `<your-username>.github.io/strudel/swatch/`\n\nAlternatively, github pages allows you to use a custom domain, like https://mycooldomain.org/swatch/. [See their documentation for details](https://docs.github.com/en/pages/configuring-a-custom-domain-for-your-github-pages-site).\n";

function getMyPatterns() {
  const my = /* #__PURE__ */ Object.assign({"../../../../my-patterns/README.md": __vite_glob_0_0});
  return Object.fromEntries(
    Object.entries(my) //
      .filter(([name]) => name.endsWith('.txt')) //
      .map(([name, raw]) => [name.split('/').slice(-1), raw]), //
  );
}

async function get$2() {
  const all = await getMyPatterns();
  return {
    body: JSON.stringify(all),
  };
}

const _page14 = /*#__PURE__*/Object.freeze(/*#__PURE__*/Object.defineProperty({
	__proto__: null,
	getMyPatterns,
	get: get$2
}, Symbol.toStringTag, { value: 'Module' }));

const html = "<h1 id=\"my-patterns\">my-patterns</h1>\n<p>This directory can be used to save your own patterns, which then get\nmade into a pattern swatch.</p>\n<ol start=\"0\">\n<li>fork and clone the strudel repository</li>\n<li>run <code>npm run setup</code> in the strudel folder</li>\n<li>Save one or more .txt files in this folder</li>\n<li>run <code>npm run repl</code> in the top-level strudel folder</li>\n<li>open <code>http://localhost:3000/swatch/</code> !</li>\n</ol>\n<h2 id=\"deploy\">deploy</h2>\n<ol>\n<li>in your fork, go to settings -> pages and select “Github Actions” as source</li>\n<li>edit <code>website/public/CNAME</code> to contain <code>&#x3C;your-username>.github.io/strudel</code></li>\n<li>edit <code>website/astro.config.mjs</code> to use site: <code>&#x3C;your-username>.github.io/strudel</code> and base <code>/strudel</code></li>\n<li>go to Actions -> <code>Build and Deploy</code> and click <code>Run workflow</code></li>\n<li>view your patterns at <code>&#x3C;your-username>.github.io/strudel/swatch/</code></li>\n</ol>\n<p>Alternatively, github pages allows you to use a custom domain, like <a href=\"https://mycooldomain.org/swatch/\">https://mycooldomain.org/swatch/</a>. <a href=\"https://docs.github.com/en/pages/configuring-a-custom-domain-for-your-github-pages-site\">See their documentation for details</a>.</p>";
				const frontmatter$d = {};
				const file$d = "/Users/michaelgogins/cloud-music/strudel/my-patterns/README.md";
				const url$d = undefined;
				async function Content$d() {
					const { layout, ...content } = frontmatter$d;
					content.file = file$d;
					content.url = url$d;
					content.astro = {};
					Object.defineProperty(content.astro, 'headings', {
						get() {
							throw new Error('The "astro" property is no longer supported! To access "headings" from your layout, try using "Astro.props.headings."')
						}
					});
					Object.defineProperty(content.astro, 'html', {
						get() {
							throw new Error('The "astro" property is no longer supported! To access "html" from your layout, try using "Astro.props.compiledContent()."')
						}
					});
					Object.defineProperty(content.astro, 'source', {
						get() {
							throw new Error('The "astro" property is no longer supported! To access "source" from your layout, try using "Astro.props.rawContent()."')
						}
					});
					const contentFragment = createVNode(Fragment, { 'set:html': html });
					return contentFragment;
				}
				Content$d[Symbol.for('astro.needsHeadRendering')] = true;

const $$Astro$2 = createAstro("/Users/michaelgogins/cloud-music/strudel/website/src/pages/swatch/index.astro", "https://strudel.tidalcycles.org/", "file:///Users/michaelgogins/cloud-music/strudel/website/");
const $$Index$1 = createComponent(async ($$result, $$props, $$slots) => {
  const Astro2 = $$result.createAstro($$Astro$2, $$props, $$slots);
  Astro2.self = $$Index$1;
  const myPatterns = await getMyPatterns();
  return renderTemplate`<head>
  ${renderComponent($$result, "HeadCommon", $$HeadCommon, {})}
${renderHead($$result)}</head>
<body class="bg-slate-800">
  ${Object.keys(myPatterns).length === 0 && renderTemplate`<div class="prose prose-invert p-2">
        ${renderComponent($$result, "Content", Content$d, {})}
      </div>`}
  <div class="grid grid-cols-2 sm:grid-cols-3 md:grid-cols-4 lg:grid-cols-6 gap-2 p-2 select-none">
    ${Object.entries(myPatterns).map(([name, tune]) => renderTemplate`<a class="rounded-md bg-slate-900 hover:bg-slate-700 cursor-pointer relative"${addAttribute(`./#${btoa(tune)}`, "href")}>
          <div class="absolute w-full h-full flex justify-center items-center">
            <span class="bg-slate-800 p-2 rounded-md text-white">${name}</span>
          </div>
          <img${addAttribute(`./swatch/${name}.png`, "src")}>
        </a>`)}
  </div>
</body>`;
}, "/Users/michaelgogins/cloud-music/strudel/website/src/pages/swatch/index.astro");

const $$file$2 = "/Users/michaelgogins/cloud-music/strudel/website/src/pages/swatch/index.astro";
const $$url$2 = "/swatch";

const _page13 = /*#__PURE__*/Object.freeze(/*#__PURE__*/Object.defineProperty({
	__proto__: null,
	default: $$Index$1,
	file: $$file$2,
	url: $$url$2
}, Symbol.toStringTag, { value: 'Module' }));

function transpiler(input, options = {}) {
  const { wrapAsync = false, addReturn = true, simpleLocs = false } = options;

  let ast = parse(input, {
    ecmaVersion: 2022,
    allowAwaitOutsideFunction: true,
    locations: true,
  });

  walk(ast, {
    enter(node, parent, prop, index) {
      if (isBackTickString(node, parent)) {
        const { quasis, start, end } = node;
        const { raw } = quasis[0].value;
        this.skip();
        return this.replace(miniWithLocation(raw, node, simpleLocs));
      }
      if (isStringWithDoubleQuotes(node)) {
        const { value, start, end } = node;
        this.skip();
        return this.replace(miniWithLocation(value, node, simpleLocs));
      }
      // TODO: remove pseudo note variables?
      if (node.type === 'Identifier' && isNoteWithOctave(node.name)) {
        this.skip();
        return this.replace({ type: 'Literal', value: node.name });
      }
    },
    leave(node, parent, prop, index) {},
  });

  const { body } = ast;
  if (!body?.[body.length - 1]?.expression) {
    throw new Error('unexpected ast format without body expression');
  }

  // add return to last statement
  if (addReturn) {
    const { expression } = body[body.length - 1];
    body[body.length - 1] = {
      type: 'ReturnStatement',
      argument: expression,
    };
  }
  const output = escodegen.generate(ast);
  if (wrapAsync) {
    return `(async ()=>{${output}})()`;
  }
  return output;
}

function isStringWithDoubleQuotes(node, locations, code) {
  const { raw, type } = node;
  if (type !== 'Literal') {
    return false;
  }
  return raw[0] === '"';
}

function isBackTickString(node, parent) {
  return node.type === 'TemplateLiteral' && parent.type !== 'TaggedTemplateExpression';
}

function miniWithLocation(value, node, simpleLocs) {
  let locs;
  const { start: fromOffset, end: toOffset } = node;
  if (simpleLocs) {
    locs = [
      {
        type: 'Literal',
        value: fromOffset,
      },
      {
        type: 'Literal',
        value: toOffset,
      },
    ];
  } else {
    const {
      loc: {
        start: { line: fromLine, column: fromColumn },
        end: { line: toLine, column: toColumn },
      },
    } = node;
    locs = [
      {
        type: 'ArrayExpression',
        elements: [fromLine, fromColumn, fromOffset].map((value) => ({
          type: 'Literal',
          value,
        })),
      },
      {
        type: 'ArrayExpression',
        elements: [toLine, toColumn, toOffset].map((value) => ({
          type: 'Literal',
          value,
        })),
      },
    ];
  }
  // with location
  return {
    type: 'CallExpression',
    callee: {
      type: 'MemberExpression',
      object: {
        type: 'CallExpression',
        callee: {
          type: 'Identifier',
          name: 'mini',
        },
        arguments: [{ type: 'Literal', value }],
        optional: false,
      },
      property: {
        type: 'Identifier',
        name: 'withMiniLocation',
      },
    },
    arguments: locs,
    optional: false,
  };
}

const evaluate = (code) => evaluate$1(code, transpiler);

// Generated by Peggy 2.0.1.
//
// https://peggyjs.org/

function peg$subclass(child, parent) {
  function C() { this.constructor = child; }
  C.prototype = parent.prototype;
  child.prototype = new C();
}

function peg$SyntaxError(message, expected, found, location) {
  var self = Error.call(this, message);
  // istanbul ignore next Check is a necessary evil to support older environments
  if (Object.setPrototypeOf) {
    Object.setPrototypeOf(self, peg$SyntaxError.prototype);
  }
  self.expected = expected;
  self.found = found;
  self.location = location;
  self.name = "SyntaxError";
  return self;
}

peg$subclass(peg$SyntaxError, Error);

function peg$padEnd(str, targetLength, padString) {
  padString = padString || " ";
  if (str.length > targetLength) { return str; }
  targetLength -= str.length;
  padString += padString.repeat(targetLength);
  return str + padString.slice(0, targetLength);
}

peg$SyntaxError.prototype.format = function(sources) {
  var str = "Error: " + this.message;
  if (this.location) {
    var src = null;
    var k;
    for (k = 0; k < sources.length; k++) {
      if (sources[k].source === this.location.source) {
        src = sources[k].text.split(/\r\n|\n|\r/g);
        break;
      }
    }
    var s = this.location.start;
    var loc = this.location.source + ":" + s.line + ":" + s.column;
    if (src) {
      var e = this.location.end;
      var filler = peg$padEnd("", s.line.toString().length, ' ');
      var line = src[s.line - 1];
      var last = s.line === e.line ? e.column : line.length + 1;
      var hatLen = (last - s.column) || 1;
      str += "\n --> " + loc + "\n"
          + filler + " |\n"
          + s.line + " | " + line + "\n"
          + filler + " | " + peg$padEnd("", s.column - 1, ' ')
          + peg$padEnd("", hatLen, "^");
    } else {
      str += "\n at " + loc;
    }
  }
  return str;
};

peg$SyntaxError.buildMessage = function(expected, found) {
  var DESCRIBE_EXPECTATION_FNS = {
    literal: function(expectation) {
      return "\"" + literalEscape(expectation.text) + "\"";
    },

    class: function(expectation) {
      var escapedParts = expectation.parts.map(function(part) {
        return Array.isArray(part)
          ? classEscape(part[0]) + "-" + classEscape(part[1])
          : classEscape(part);
      });

      return "[" + (expectation.inverted ? "^" : "") + escapedParts.join("") + "]";
    },

    any: function() {
      return "any character";
    },

    end: function() {
      return "end of input";
    },

    other: function(expectation) {
      return expectation.description;
    }
  };

  function hex(ch) {
    return ch.charCodeAt(0).toString(16).toUpperCase();
  }

  function literalEscape(s) {
    return s
      .replace(/\\/g, "\\\\")
      .replace(/"/g,  "\\\"")
      .replace(/\0/g, "\\0")
      .replace(/\t/g, "\\t")
      .replace(/\n/g, "\\n")
      .replace(/\r/g, "\\r")
      .replace(/[\x00-\x0F]/g,          function(ch) { return "\\x0" + hex(ch); })
      .replace(/[\x10-\x1F\x7F-\x9F]/g, function(ch) { return "\\x"  + hex(ch); });
  }

  function classEscape(s) {
    return s
      .replace(/\\/g, "\\\\")
      .replace(/\]/g, "\\]")
      .replace(/\^/g, "\\^")
      .replace(/-/g,  "\\-")
      .replace(/\0/g, "\\0")
      .replace(/\t/g, "\\t")
      .replace(/\n/g, "\\n")
      .replace(/\r/g, "\\r")
      .replace(/[\x00-\x0F]/g,          function(ch) { return "\\x0" + hex(ch); })
      .replace(/[\x10-\x1F\x7F-\x9F]/g, function(ch) { return "\\x"  + hex(ch); });
  }

  function describeExpectation(expectation) {
    return DESCRIBE_EXPECTATION_FNS[expectation.type](expectation);
  }

  function describeExpected(expected) {
    var descriptions = expected.map(describeExpectation);
    var i, j;

    descriptions.sort();

    if (descriptions.length > 0) {
      for (i = 1, j = 1; i < descriptions.length; i++) {
        if (descriptions[i - 1] !== descriptions[i]) {
          descriptions[j] = descriptions[i];
          j++;
        }
      }
      descriptions.length = j;
    }

    switch (descriptions.length) {
      case 1:
        return descriptions[0];

      case 2:
        return descriptions[0] + " or " + descriptions[1];

      default:
        return descriptions.slice(0, -1).join(", ")
          + ", or "
          + descriptions[descriptions.length - 1];
    }
  }

  function describeFound(found) {
    return found ? "\"" + literalEscape(found) + "\"" : "end of input";
  }

  return "Expected " + describeExpected(expected) + " but " + describeFound(found) + " found.";
};

function peg$parse(input, options) {
  options = options !== undefined ? options : {};

  var peg$FAILED = {};
  var peg$source = options.grammarSource;

  var peg$startRuleFunctions = { start: peg$parsestart };
  var peg$startRuleFunction = peg$parsestart;

  var peg$c0 = ".";
  var peg$c1 = "-";
  var peg$c2 = "+";
  var peg$c3 = "0";
  var peg$c4 = ",";
  var peg$c5 = "|";
  var peg$c6 = "\"";
  var peg$c7 = "'";
  var peg$c8 = "#";
  var peg$c9 = "^";
  var peg$c10 = "_";
  var peg$c11 = ":";
  var peg$c12 = "[";
  var peg$c13 = "]";
  var peg$c14 = "{";
  var peg$c15 = "}";
  var peg$c16 = "%";
  var peg$c17 = "<";
  var peg$c18 = ">";
  var peg$c19 = "@";
  var peg$c20 = "!";
  var peg$c21 = "(";
  var peg$c22 = ")";
  var peg$c23 = "/";
  var peg$c24 = "*";
  var peg$c25 = "?";
  var peg$c26 = "struct";
  var peg$c27 = "target";
  var peg$c28 = "euclid";
  var peg$c29 = "slow";
  var peg$c30 = "rotL";
  var peg$c31 = "rotR";
  var peg$c32 = "fast";
  var peg$c33 = "scale";
  var peg$c34 = "//";
  var peg$c35 = "cat";
  var peg$c36 = "$";
  var peg$c37 = "setcps";
  var peg$c38 = "setbpm";
  var peg$c39 = "hush";

  var peg$r0 = /^[1-9]/;
  var peg$r1 = /^[eE]/;
  var peg$r2 = /^[0-9]/;
  var peg$r3 = /^[ \n\r\t]/;
  var peg$r4 = /^[0-9a-zA-Z~]/;
  var peg$r5 = /^[^\n]/;

  var peg$e0 = peg$otherExpectation("number");
  var peg$e1 = peg$literalExpectation(".", false);
  var peg$e2 = peg$classExpectation([["1", "9"]], false, false);
  var peg$e3 = peg$classExpectation(["e", "E"], false, false);
  var peg$e4 = peg$literalExpectation("-", false);
  var peg$e5 = peg$literalExpectation("+", false);
  var peg$e6 = peg$literalExpectation("0", false);
  var peg$e7 = peg$classExpectation([["0", "9"]], false, false);
  var peg$e8 = peg$otherExpectation("whitespace");
  var peg$e9 = peg$classExpectation([" ", "\n", "\r", "\t"], false, false);
  var peg$e10 = peg$literalExpectation(",", false);
  var peg$e11 = peg$literalExpectation("|", false);
  var peg$e12 = peg$literalExpectation("\"", false);
  var peg$e13 = peg$literalExpectation("'", false);
  var peg$e14 = peg$classExpectation([["0", "9"], ["a", "z"], ["A", "Z"], "~"], false, false);
  var peg$e15 = peg$literalExpectation("#", false);
  var peg$e16 = peg$literalExpectation("^", false);
  var peg$e17 = peg$literalExpectation("_", false);
  var peg$e18 = peg$literalExpectation(":", false);
  var peg$e19 = peg$literalExpectation("[", false);
  var peg$e20 = peg$literalExpectation("]", false);
  var peg$e21 = peg$literalExpectation("{", false);
  var peg$e22 = peg$literalExpectation("}", false);
  var peg$e23 = peg$literalExpectation("%", false);
  var peg$e24 = peg$literalExpectation("<", false);
  var peg$e25 = peg$literalExpectation(">", false);
  var peg$e26 = peg$literalExpectation("@", false);
  var peg$e27 = peg$literalExpectation("!", false);
  var peg$e28 = peg$literalExpectation("(", false);
  var peg$e29 = peg$literalExpectation(")", false);
  var peg$e30 = peg$literalExpectation("/", false);
  var peg$e31 = peg$literalExpectation("*", false);
  var peg$e32 = peg$literalExpectation("?", false);
  var peg$e33 = peg$literalExpectation("struct", false);
  var peg$e34 = peg$literalExpectation("target", false);
  var peg$e35 = peg$literalExpectation("euclid", false);
  var peg$e36 = peg$literalExpectation("slow", false);
  var peg$e37 = peg$literalExpectation("rotL", false);
  var peg$e38 = peg$literalExpectation("rotR", false);
  var peg$e39 = peg$literalExpectation("fast", false);
  var peg$e40 = peg$literalExpectation("scale", false);
  var peg$e41 = peg$literalExpectation("//", false);
  var peg$e42 = peg$classExpectation(["\n"], true, false);
  var peg$e43 = peg$literalExpectation("cat", false);
  var peg$e44 = peg$literalExpectation("$", false);
  var peg$e45 = peg$literalExpectation("setcps", false);
  var peg$e46 = peg$literalExpectation("setbpm", false);
  var peg$e47 = peg$literalExpectation("hush", false);

  var peg$f0 = function() { return parseFloat(text()); };
  var peg$f1 = function(chars) { return new AtomStub(chars.join("")) };
  var peg$f2 = function(s) { return s };
  var peg$f3 = function(s, stepsPerCycle) { s.arguments_.stepsPerCycle = stepsPerCycle ; return s; };
  var peg$f4 = function(a) { return a };
  var peg$f5 = function(s) { s.arguments_.alignment = 'slowcat'; return s; };
  var peg$f6 = function(a) { return { weight: a} };
  var peg$f7 = function(a) { return { replicate: a } };
  var peg$f8 = function(p, s, r) { return { operator : { type_: "bjorklund", arguments_ :{ pulse: p, step:s, rotation:r } } } };
  var peg$f9 = function(a) { return { operator : { type_: "stretch", arguments_ :{ amount:a, type: 'slow' } } } };
  var peg$f10 = function(a) { return { operator : { type_: "stretch", arguments_ :{ amount:a, type: 'fast' } } } };
  var peg$f11 = function(a) { return { operator : { type_: "degradeBy", arguments_ :{ amount:a } } } };
  var peg$f12 = function(s, o) { return new ElementStub(s, o);};
  var peg$f13 = function(s) { return new PatternStub(s, 'fastcat'); };
  var peg$f14 = function(tail) { return { alignment: 'stack', list: tail }; };
  var peg$f15 = function(tail) { return { alignment: 'rand', list: tail }; };
  var peg$f16 = function(head, tail) { if (tail && tail.list.length > 0) { return new PatternStub([head, ...tail.list], tail.alignment); } else { return head; } };
  var peg$f17 = function(head, tail) { return new PatternStub(tail ? [head, ...tail.list] : [head], 'polymeter'); };
  var peg$f18 = function(sc) { return sc; };
  var peg$f19 = function(s) { return { name: "struct", args: { mini:s }}};
  var peg$f20 = function(s) { return { name: "target", args : { name:s}}};
  var peg$f21 = function(p, s, r) { return { name: "bjorklund", args :{ pulse: p, step:parseInt(s) }}};
  var peg$f22 = function(a) { return { name: "stretch", args :{ amount: a}}};
  var peg$f23 = function(a) { return { name: "shift", args :{ amount: "-"+a}}};
  var peg$f24 = function(a) { return { name: "shift", args :{ amount: a}}};
  var peg$f25 = function(a) { return { name: "stretch", args :{ amount: "1/"+a}}};
  var peg$f26 = function(s) { return { name: "scale", args :{ scale: s.join("")}}};
  var peg$f27 = function(s, v) { return v};
  var peg$f28 = function(s, ss) { ss.unshift(s); return new PatternStub(ss, 'slowcat'); };
  var peg$f29 = function(sg) {return sg};
  var peg$f30 = function(o, soc) { return new OperatorStub(o.name,o.args,soc)};
  var peg$f31 = function(sc) { return sc };
  var peg$f32 = function(c) { return c };
  var peg$f33 = function(v) { return new CommandStub("setcps", { value: v})};
  var peg$f34 = function(v) { return new CommandStub("setcps", { value: (v/120/2)})};
  var peg$f35 = function() { return new CommandStub("hush")};
  var peg$currPos = 0;
  var peg$savedPos = 0;
  var peg$posDetailsCache = [{ line: 1, column: 1 }];
  var peg$maxFailPos = 0;
  var peg$maxFailExpected = [];
  var peg$silentFails = 0;

  var peg$result;

  if ("startRule" in options) {
    if (!(options.startRule in peg$startRuleFunctions)) {
      throw new Error("Can't start parsing from rule \"" + options.startRule + "\".");
    }

    peg$startRuleFunction = peg$startRuleFunctions[options.startRule];
  }

  function text() {
    return input.substring(peg$savedPos, peg$currPos);
  }

  function location() {
    return peg$computeLocation(peg$savedPos, peg$currPos);
  }

  function peg$literalExpectation(text, ignoreCase) {
    return { type: "literal", text: text, ignoreCase: ignoreCase };
  }

  function peg$classExpectation(parts, inverted, ignoreCase) {
    return { type: "class", parts: parts, inverted: inverted, ignoreCase: ignoreCase };
  }

  function peg$endExpectation() {
    return { type: "end" };
  }

  function peg$otherExpectation(description) {
    return { type: "other", description: description };
  }

  function peg$computePosDetails(pos) {
    var details = peg$posDetailsCache[pos];
    var p;

    if (details) {
      return details;
    } else {
      p = pos - 1;
      while (!peg$posDetailsCache[p]) {
        p--;
      }

      details = peg$posDetailsCache[p];
      details = {
        line: details.line,
        column: details.column
      };

      while (p < pos) {
        if (input.charCodeAt(p) === 10) {
          details.line++;
          details.column = 1;
        } else {
          details.column++;
        }

        p++;
      }

      peg$posDetailsCache[pos] = details;

      return details;
    }
  }

  function peg$computeLocation(startPos, endPos) {
    var startPosDetails = peg$computePosDetails(startPos);
    var endPosDetails = peg$computePosDetails(endPos);

    return {
      source: peg$source,
      start: {
        offset: startPos,
        line: startPosDetails.line,
        column: startPosDetails.column
      },
      end: {
        offset: endPos,
        line: endPosDetails.line,
        column: endPosDetails.column
      }
    };
  }

  function peg$fail(expected) {
    if (peg$currPos < peg$maxFailPos) { return; }

    if (peg$currPos > peg$maxFailPos) {
      peg$maxFailPos = peg$currPos;
      peg$maxFailExpected = [];
    }

    peg$maxFailExpected.push(expected);
  }

  function peg$buildStructuredError(expected, found, location) {
    return new peg$SyntaxError(
      peg$SyntaxError.buildMessage(expected, found),
      expected,
      found,
      location
    );
  }

  function peg$parsestart() {
    var s0;

    s0 = peg$parsestatement();

    return s0;
  }

  function peg$parsenumber() {
    var s0, s2;

    peg$silentFails++;
    s0 = peg$currPos;
    peg$parseminus();
    s2 = peg$parseint();
    if (s2 !== peg$FAILED) {
      peg$parsefrac();
      peg$parseexp();
      peg$savedPos = s0;
      s0 = peg$f0();
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }
    peg$silentFails--;
    if (s0 === peg$FAILED) {
      if (peg$silentFails === 0) { peg$fail(peg$e0); }
    }

    return s0;
  }

  function peg$parsedecimal_point() {
    var s0;

    if (input.charCodeAt(peg$currPos) === 46) {
      s0 = peg$c0;
      peg$currPos++;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e1); }
    }

    return s0;
  }

  function peg$parsedigit1_9() {
    var s0;

    if (peg$r0.test(input.charAt(peg$currPos))) {
      s0 = input.charAt(peg$currPos);
      peg$currPos++;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e2); }
    }

    return s0;
  }

  function peg$parsee() {
    var s0;

    if (peg$r1.test(input.charAt(peg$currPos))) {
      s0 = input.charAt(peg$currPos);
      peg$currPos++;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e3); }
    }

    return s0;
  }

  function peg$parseexp() {
    var s0, s1, s2, s3, s4;

    s0 = peg$currPos;
    s1 = peg$parsee();
    if (s1 !== peg$FAILED) {
      s2 = peg$parseminus();
      if (s2 === peg$FAILED) {
        s2 = peg$parseplus();
      }
      if (s2 === peg$FAILED) {
        s2 = null;
      }
      s3 = [];
      s4 = peg$parseDIGIT();
      if (s4 !== peg$FAILED) {
        while (s4 !== peg$FAILED) {
          s3.push(s4);
          s4 = peg$parseDIGIT();
        }
      } else {
        s3 = peg$FAILED;
      }
      if (s3 !== peg$FAILED) {
        s1 = [s1, s2, s3];
        s0 = s1;
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parsefrac() {
    var s0, s1, s2, s3;

    s0 = peg$currPos;
    s1 = peg$parsedecimal_point();
    if (s1 !== peg$FAILED) {
      s2 = [];
      s3 = peg$parseDIGIT();
      if (s3 !== peg$FAILED) {
        while (s3 !== peg$FAILED) {
          s2.push(s3);
          s3 = peg$parseDIGIT();
        }
      } else {
        s2 = peg$FAILED;
      }
      if (s2 !== peg$FAILED) {
        s1 = [s1, s2];
        s0 = s1;
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parseint() {
    var s0, s1, s2, s3;

    s0 = peg$parsezero();
    if (s0 === peg$FAILED) {
      s0 = peg$currPos;
      s1 = peg$parsedigit1_9();
      if (s1 !== peg$FAILED) {
        s2 = [];
        s3 = peg$parseDIGIT();
        while (s3 !== peg$FAILED) {
          s2.push(s3);
          s3 = peg$parseDIGIT();
        }
        s1 = [s1, s2];
        s0 = s1;
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    }

    return s0;
  }

  function peg$parseminus() {
    var s0;

    if (input.charCodeAt(peg$currPos) === 45) {
      s0 = peg$c1;
      peg$currPos++;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e4); }
    }

    return s0;
  }

  function peg$parseplus() {
    var s0;

    if (input.charCodeAt(peg$currPos) === 43) {
      s0 = peg$c2;
      peg$currPos++;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e5); }
    }

    return s0;
  }

  function peg$parsezero() {
    var s0;

    if (input.charCodeAt(peg$currPos) === 48) {
      s0 = peg$c3;
      peg$currPos++;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e6); }
    }

    return s0;
  }

  function peg$parseDIGIT() {
    var s0;

    if (peg$r2.test(input.charAt(peg$currPos))) {
      s0 = input.charAt(peg$currPos);
      peg$currPos++;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e7); }
    }

    return s0;
  }

  function peg$parsews() {
    var s0, s1;

    peg$silentFails++;
    s0 = [];
    if (peg$r3.test(input.charAt(peg$currPos))) {
      s1 = input.charAt(peg$currPos);
      peg$currPos++;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e9); }
    }
    while (s1 !== peg$FAILED) {
      s0.push(s1);
      if (peg$r3.test(input.charAt(peg$currPos))) {
        s1 = input.charAt(peg$currPos);
        peg$currPos++;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$e9); }
      }
    }
    peg$silentFails--;
    s1 = peg$FAILED;
    if (peg$silentFails === 0) { peg$fail(peg$e8); }

    return s0;
  }

  function peg$parsecomma() {
    var s0, s1, s2, s3;

    s0 = peg$currPos;
    s1 = peg$parsews();
    if (input.charCodeAt(peg$currPos) === 44) {
      s2 = peg$c4;
      peg$currPos++;
    } else {
      s2 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e10); }
    }
    if (s2 !== peg$FAILED) {
      s3 = peg$parsews();
      s1 = [s1, s2, s3];
      s0 = s1;
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parsepipe() {
    var s0, s1, s2, s3;

    s0 = peg$currPos;
    s1 = peg$parsews();
    if (input.charCodeAt(peg$currPos) === 124) {
      s2 = peg$c5;
      peg$currPos++;
    } else {
      s2 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e11); }
    }
    if (s2 !== peg$FAILED) {
      s3 = peg$parsews();
      s1 = [s1, s2, s3];
      s0 = s1;
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parsequote() {
    var s0;

    if (input.charCodeAt(peg$currPos) === 34) {
      s0 = peg$c6;
      peg$currPos++;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e12); }
    }
    if (s0 === peg$FAILED) {
      if (input.charCodeAt(peg$currPos) === 39) {
        s0 = peg$c7;
        peg$currPos++;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$e13); }
      }
    }

    return s0;
  }

  function peg$parsestep_char() {
    var s0;

    if (peg$r4.test(input.charAt(peg$currPos))) {
      s0 = input.charAt(peg$currPos);
      peg$currPos++;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e14); }
    }
    if (s0 === peg$FAILED) {
      if (input.charCodeAt(peg$currPos) === 45) {
        s0 = peg$c1;
        peg$currPos++;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$e4); }
      }
      if (s0 === peg$FAILED) {
        if (input.charCodeAt(peg$currPos) === 35) {
          s0 = peg$c8;
          peg$currPos++;
        } else {
          s0 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$e15); }
        }
        if (s0 === peg$FAILED) {
          if (input.charCodeAt(peg$currPos) === 46) {
            s0 = peg$c0;
            peg$currPos++;
          } else {
            s0 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$e1); }
          }
          if (s0 === peg$FAILED) {
            if (input.charCodeAt(peg$currPos) === 94) {
              s0 = peg$c9;
              peg$currPos++;
            } else {
              s0 = peg$FAILED;
              if (peg$silentFails === 0) { peg$fail(peg$e16); }
            }
            if (s0 === peg$FAILED) {
              if (input.charCodeAt(peg$currPos) === 95) {
                s0 = peg$c10;
                peg$currPos++;
              } else {
                s0 = peg$FAILED;
                if (peg$silentFails === 0) { peg$fail(peg$e17); }
              }
              if (s0 === peg$FAILED) {
                if (input.charCodeAt(peg$currPos) === 58) {
                  s0 = peg$c11;
                  peg$currPos++;
                } else {
                  s0 = peg$FAILED;
                  if (peg$silentFails === 0) { peg$fail(peg$e18); }
                }
              }
            }
          }
        }
      }
    }

    return s0;
  }

  function peg$parsestep() {
    var s0, s2, s3;

    s0 = peg$currPos;
    peg$parsews();
    s2 = [];
    s3 = peg$parsestep_char();
    if (s3 !== peg$FAILED) {
      while (s3 !== peg$FAILED) {
        s2.push(s3);
        s3 = peg$parsestep_char();
      }
    } else {
      s2 = peg$FAILED;
    }
    if (s2 !== peg$FAILED) {
      s3 = peg$parsews();
      peg$savedPos = s0;
      s0 = peg$f1(s2);
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parsesub_cycle() {
    var s0, s2, s4, s6;

    s0 = peg$currPos;
    peg$parsews();
    if (input.charCodeAt(peg$currPos) === 91) {
      s2 = peg$c12;
      peg$currPos++;
    } else {
      s2 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e19); }
    }
    if (s2 !== peg$FAILED) {
      peg$parsews();
      s4 = peg$parsestack_or_choose();
      if (s4 !== peg$FAILED) {
        peg$parsews();
        if (input.charCodeAt(peg$currPos) === 93) {
          s6 = peg$c13;
          peg$currPos++;
        } else {
          s6 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$e20); }
        }
        if (s6 !== peg$FAILED) {
          peg$parsews();
          peg$savedPos = s0;
          s0 = peg$f2(s4);
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parsepolymeter() {
    var s0, s2, s4, s6, s7;

    s0 = peg$currPos;
    peg$parsews();
    if (input.charCodeAt(peg$currPos) === 123) {
      s2 = peg$c14;
      peg$currPos++;
    } else {
      s2 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e21); }
    }
    if (s2 !== peg$FAILED) {
      peg$parsews();
      s4 = peg$parsepolymeter_stack();
      if (s4 !== peg$FAILED) {
        peg$parsews();
        if (input.charCodeAt(peg$currPos) === 125) {
          s6 = peg$c15;
          peg$currPos++;
        } else {
          s6 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$e22); }
        }
        if (s6 !== peg$FAILED) {
          s7 = peg$parsepolymeter_steps();
          if (s7 === peg$FAILED) {
            s7 = null;
          }
          peg$parsews();
          peg$savedPos = s0;
          s0 = peg$f3(s4, s7);
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parsepolymeter_steps() {
    var s0, s1, s2;

    s0 = peg$currPos;
    if (input.charCodeAt(peg$currPos) === 37) {
      s1 = peg$c16;
      peg$currPos++;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e23); }
    }
    if (s1 !== peg$FAILED) {
      s2 = peg$parseslice();
      if (s2 !== peg$FAILED) {
        peg$savedPos = s0;
        s0 = peg$f4(s2);
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parseslow_sequence() {
    var s0, s2, s4, s6;

    s0 = peg$currPos;
    peg$parsews();
    if (input.charCodeAt(peg$currPos) === 60) {
      s2 = peg$c17;
      peg$currPos++;
    } else {
      s2 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e24); }
    }
    if (s2 !== peg$FAILED) {
      peg$parsews();
      s4 = peg$parsesequence();
      if (s4 !== peg$FAILED) {
        peg$parsews();
        if (input.charCodeAt(peg$currPos) === 62) {
          s6 = peg$c18;
          peg$currPos++;
        } else {
          s6 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$e25); }
        }
        if (s6 !== peg$FAILED) {
          peg$parsews();
          peg$savedPos = s0;
          s0 = peg$f5(s4);
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parseslice() {
    var s0;

    s0 = peg$parsestep();
    if (s0 === peg$FAILED) {
      s0 = peg$parsesub_cycle();
      if (s0 === peg$FAILED) {
        s0 = peg$parsepolymeter();
        if (s0 === peg$FAILED) {
          s0 = peg$parseslow_sequence();
        }
      }
    }

    return s0;
  }

  function peg$parseslice_modifier() {
    var s0;

    s0 = peg$parseslice_weight();
    if (s0 === peg$FAILED) {
      s0 = peg$parseslice_bjorklund();
      if (s0 === peg$FAILED) {
        s0 = peg$parseslice_slow();
        if (s0 === peg$FAILED) {
          s0 = peg$parseslice_fast();
          if (s0 === peg$FAILED) {
            s0 = peg$parseslice_replicate();
            if (s0 === peg$FAILED) {
              s0 = peg$parseslice_degrade();
            }
          }
        }
      }
    }

    return s0;
  }

  function peg$parseslice_weight() {
    var s0, s1, s2;

    s0 = peg$currPos;
    if (input.charCodeAt(peg$currPos) === 64) {
      s1 = peg$c19;
      peg$currPos++;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e26); }
    }
    if (s1 !== peg$FAILED) {
      s2 = peg$parsenumber();
      if (s2 !== peg$FAILED) {
        peg$savedPos = s0;
        s0 = peg$f6(s2);
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parseslice_replicate() {
    var s0, s1, s2;

    s0 = peg$currPos;
    if (input.charCodeAt(peg$currPos) === 33) {
      s1 = peg$c20;
      peg$currPos++;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e27); }
    }
    if (s1 !== peg$FAILED) {
      s2 = peg$parsenumber();
      if (s2 !== peg$FAILED) {
        peg$savedPos = s0;
        s0 = peg$f7(s2);
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parseslice_bjorklund() {
    var s0, s1, s3, s5, s7, s11, s13;

    s0 = peg$currPos;
    if (input.charCodeAt(peg$currPos) === 40) {
      s1 = peg$c21;
      peg$currPos++;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e28); }
    }
    if (s1 !== peg$FAILED) {
      peg$parsews();
      s3 = peg$parseslice_with_modifier();
      if (s3 !== peg$FAILED) {
        peg$parsews();
        s5 = peg$parsecomma();
        if (s5 !== peg$FAILED) {
          peg$parsews();
          s7 = peg$parseslice_with_modifier();
          if (s7 !== peg$FAILED) {
            peg$parsews();
            peg$parsecomma();
            peg$parsews();
            s11 = peg$parseslice_with_modifier();
            if (s11 === peg$FAILED) {
              s11 = null;
            }
            peg$parsews();
            if (input.charCodeAt(peg$currPos) === 41) {
              s13 = peg$c22;
              peg$currPos++;
            } else {
              s13 = peg$FAILED;
              if (peg$silentFails === 0) { peg$fail(peg$e29); }
            }
            if (s13 !== peg$FAILED) {
              peg$savedPos = s0;
              s0 = peg$f8(s3, s7, s11);
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parseslice_slow() {
    var s0, s1, s2;

    s0 = peg$currPos;
    if (input.charCodeAt(peg$currPos) === 47) {
      s1 = peg$c23;
      peg$currPos++;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e30); }
    }
    if (s1 !== peg$FAILED) {
      s2 = peg$parseslice();
      if (s2 !== peg$FAILED) {
        peg$savedPos = s0;
        s0 = peg$f9(s2);
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parseslice_fast() {
    var s0, s1, s2;

    s0 = peg$currPos;
    if (input.charCodeAt(peg$currPos) === 42) {
      s1 = peg$c24;
      peg$currPos++;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e31); }
    }
    if (s1 !== peg$FAILED) {
      s2 = peg$parseslice();
      if (s2 !== peg$FAILED) {
        peg$savedPos = s0;
        s0 = peg$f10(s2);
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parseslice_degrade() {
    var s0, s1, s2;

    s0 = peg$currPos;
    if (input.charCodeAt(peg$currPos) === 63) {
      s1 = peg$c25;
      peg$currPos++;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e32); }
    }
    if (s1 !== peg$FAILED) {
      s2 = peg$parsenumber();
      if (s2 === peg$FAILED) {
        s2 = null;
      }
      peg$savedPos = s0;
      s0 = peg$f11(s2);
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parseslice_with_modifier() {
    var s0, s1, s2;

    s0 = peg$currPos;
    s1 = peg$parseslice();
    if (s1 !== peg$FAILED) {
      s2 = peg$parseslice_modifier();
      if (s2 === peg$FAILED) {
        s2 = null;
      }
      peg$savedPos = s0;
      s0 = peg$f12(s1, s2);
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parsesequence() {
    var s0, s1, s2;

    s0 = peg$currPos;
    s1 = [];
    s2 = peg$parseslice_with_modifier();
    if (s2 !== peg$FAILED) {
      while (s2 !== peg$FAILED) {
        s1.push(s2);
        s2 = peg$parseslice_with_modifier();
      }
    } else {
      s1 = peg$FAILED;
    }
    if (s1 !== peg$FAILED) {
      peg$savedPos = s0;
      s1 = peg$f13(s1);
    }
    s0 = s1;

    return s0;
  }

  function peg$parsestack_tail() {
    var s0, s1, s2, s3, s4;

    s0 = peg$currPos;
    s1 = [];
    s2 = peg$currPos;
    s3 = peg$parsecomma();
    if (s3 !== peg$FAILED) {
      s4 = peg$parsesequence();
      if (s4 !== peg$FAILED) {
        s2 = s4;
      } else {
        peg$currPos = s2;
        s2 = peg$FAILED;
      }
    } else {
      peg$currPos = s2;
      s2 = peg$FAILED;
    }
    if (s2 !== peg$FAILED) {
      while (s2 !== peg$FAILED) {
        s1.push(s2);
        s2 = peg$currPos;
        s3 = peg$parsecomma();
        if (s3 !== peg$FAILED) {
          s4 = peg$parsesequence();
          if (s4 !== peg$FAILED) {
            s2 = s4;
          } else {
            peg$currPos = s2;
            s2 = peg$FAILED;
          }
        } else {
          peg$currPos = s2;
          s2 = peg$FAILED;
        }
      }
    } else {
      s1 = peg$FAILED;
    }
    if (s1 !== peg$FAILED) {
      peg$savedPos = s0;
      s1 = peg$f14(s1);
    }
    s0 = s1;

    return s0;
  }

  function peg$parsechoose_tail() {
    var s0, s1, s2, s3, s4;

    s0 = peg$currPos;
    s1 = [];
    s2 = peg$currPos;
    s3 = peg$parsepipe();
    if (s3 !== peg$FAILED) {
      s4 = peg$parsesequence();
      if (s4 !== peg$FAILED) {
        s2 = s4;
      } else {
        peg$currPos = s2;
        s2 = peg$FAILED;
      }
    } else {
      peg$currPos = s2;
      s2 = peg$FAILED;
    }
    if (s2 !== peg$FAILED) {
      while (s2 !== peg$FAILED) {
        s1.push(s2);
        s2 = peg$currPos;
        s3 = peg$parsepipe();
        if (s3 !== peg$FAILED) {
          s4 = peg$parsesequence();
          if (s4 !== peg$FAILED) {
            s2 = s4;
          } else {
            peg$currPos = s2;
            s2 = peg$FAILED;
          }
        } else {
          peg$currPos = s2;
          s2 = peg$FAILED;
        }
      }
    } else {
      s1 = peg$FAILED;
    }
    if (s1 !== peg$FAILED) {
      peg$savedPos = s0;
      s1 = peg$f15(s1);
    }
    s0 = s1;

    return s0;
  }

  function peg$parsestack_or_choose() {
    var s0, s1, s2;

    s0 = peg$currPos;
    s1 = peg$parsesequence();
    if (s1 !== peg$FAILED) {
      s2 = peg$parsestack_tail();
      if (s2 === peg$FAILED) {
        s2 = peg$parsechoose_tail();
      }
      if (s2 === peg$FAILED) {
        s2 = null;
      }
      peg$savedPos = s0;
      s0 = peg$f16(s1, s2);
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parsepolymeter_stack() {
    var s0, s1, s2;

    s0 = peg$currPos;
    s1 = peg$parsesequence();
    if (s1 !== peg$FAILED) {
      s2 = peg$parsestack_tail();
      if (s2 === peg$FAILED) {
        s2 = null;
      }
      peg$savedPos = s0;
      s0 = peg$f17(s1, s2);
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parsemini() {
    var s0, s2, s3, s4;

    s0 = peg$currPos;
    peg$parsews();
    s2 = peg$parsequote();
    if (s2 !== peg$FAILED) {
      s3 = peg$parsestack_or_choose();
      if (s3 !== peg$FAILED) {
        s4 = peg$parsequote();
        if (s4 !== peg$FAILED) {
          peg$savedPos = s0;
          s0 = peg$f18(s3);
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parseoperator() {
    var s0;

    s0 = peg$parsescale();
    if (s0 === peg$FAILED) {
      s0 = peg$parseslow();
      if (s0 === peg$FAILED) {
        s0 = peg$parsefast();
        if (s0 === peg$FAILED) {
          s0 = peg$parsetarget();
          if (s0 === peg$FAILED) {
            s0 = peg$parsebjorklund();
            if (s0 === peg$FAILED) {
              s0 = peg$parsestruct();
              if (s0 === peg$FAILED) {
                s0 = peg$parserotR();
                if (s0 === peg$FAILED) {
                  s0 = peg$parserotL();
                }
              }
            }
          }
        }
      }
    }

    return s0;
  }

  function peg$parsestruct() {
    var s0, s1, s3;

    s0 = peg$currPos;
    if (input.substr(peg$currPos, 6) === peg$c26) {
      s1 = peg$c26;
      peg$currPos += 6;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e33); }
    }
    if (s1 !== peg$FAILED) {
      peg$parsews();
      s3 = peg$parsemini_or_operator();
      if (s3 !== peg$FAILED) {
        peg$savedPos = s0;
        s0 = peg$f19(s3);
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parsetarget() {
    var s0, s1, s3, s4, s5;

    s0 = peg$currPos;
    if (input.substr(peg$currPos, 6) === peg$c27) {
      s1 = peg$c27;
      peg$currPos += 6;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e34); }
    }
    if (s1 !== peg$FAILED) {
      peg$parsews();
      s3 = peg$parsequote();
      if (s3 !== peg$FAILED) {
        s4 = peg$parsestep();
        if (s4 !== peg$FAILED) {
          s5 = peg$parsequote();
          if (s5 !== peg$FAILED) {
            peg$savedPos = s0;
            s0 = peg$f20(s4);
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parsebjorklund() {
    var s0, s1, s3, s5;

    s0 = peg$currPos;
    if (input.substr(peg$currPos, 6) === peg$c28) {
      s1 = peg$c28;
      peg$currPos += 6;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e35); }
    }
    if (s1 !== peg$FAILED) {
      peg$parsews();
      s3 = peg$parseint();
      if (s3 !== peg$FAILED) {
        peg$parsews();
        s5 = peg$parseint();
        if (s5 !== peg$FAILED) {
          peg$parsews();
          peg$parseint();
          peg$savedPos = s0;
          s0 = peg$f21(s3, s5);
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parseslow() {
    var s0, s1, s3;

    s0 = peg$currPos;
    if (input.substr(peg$currPos, 4) === peg$c29) {
      s1 = peg$c29;
      peg$currPos += 4;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e36); }
    }
    if (s1 !== peg$FAILED) {
      peg$parsews();
      s3 = peg$parsenumber();
      if (s3 !== peg$FAILED) {
        peg$savedPos = s0;
        s0 = peg$f22(s3);
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parserotL() {
    var s0, s1, s3;

    s0 = peg$currPos;
    if (input.substr(peg$currPos, 4) === peg$c30) {
      s1 = peg$c30;
      peg$currPos += 4;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e37); }
    }
    if (s1 !== peg$FAILED) {
      peg$parsews();
      s3 = peg$parsenumber();
      if (s3 !== peg$FAILED) {
        peg$savedPos = s0;
        s0 = peg$f23(s3);
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parserotR() {
    var s0, s1, s3;

    s0 = peg$currPos;
    if (input.substr(peg$currPos, 4) === peg$c31) {
      s1 = peg$c31;
      peg$currPos += 4;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e38); }
    }
    if (s1 !== peg$FAILED) {
      peg$parsews();
      s3 = peg$parsenumber();
      if (s3 !== peg$FAILED) {
        peg$savedPos = s0;
        s0 = peg$f24(s3);
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parsefast() {
    var s0, s1, s3;

    s0 = peg$currPos;
    if (input.substr(peg$currPos, 4) === peg$c32) {
      s1 = peg$c32;
      peg$currPos += 4;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e39); }
    }
    if (s1 !== peg$FAILED) {
      peg$parsews();
      s3 = peg$parsenumber();
      if (s3 !== peg$FAILED) {
        peg$savedPos = s0;
        s0 = peg$f25(s3);
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parsescale() {
    var s0, s1, s3, s4, s5;

    s0 = peg$currPos;
    if (input.substr(peg$currPos, 5) === peg$c33) {
      s1 = peg$c33;
      peg$currPos += 5;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e40); }
    }
    if (s1 !== peg$FAILED) {
      peg$parsews();
      s3 = peg$parsequote();
      if (s3 !== peg$FAILED) {
        s4 = [];
        s5 = peg$parsestep_char();
        if (s5 !== peg$FAILED) {
          while (s5 !== peg$FAILED) {
            s4.push(s5);
            s5 = peg$parsestep_char();
          }
        } else {
          s4 = peg$FAILED;
        }
        if (s4 !== peg$FAILED) {
          s5 = peg$parsequote();
          if (s5 !== peg$FAILED) {
            peg$savedPos = s0;
            s0 = peg$f26(s4);
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parsecomment() {
    var s0, s1, s2, s3;

    s0 = peg$currPos;
    if (input.substr(peg$currPos, 2) === peg$c34) {
      s1 = peg$c34;
      peg$currPos += 2;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e41); }
    }
    if (s1 !== peg$FAILED) {
      s2 = [];
      if (peg$r5.test(input.charAt(peg$currPos))) {
        s3 = input.charAt(peg$currPos);
        peg$currPos++;
      } else {
        s3 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$e42); }
      }
      while (s3 !== peg$FAILED) {
        s2.push(s3);
        if (peg$r5.test(input.charAt(peg$currPos))) {
          s3 = input.charAt(peg$currPos);
          peg$currPos++;
        } else {
          s3 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$e42); }
        }
      }
      s1 = [s1, s2];
      s0 = s1;
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parsecat() {
    var s0, s1, s3, s5, s6, s7, s8, s9;

    s0 = peg$currPos;
    if (input.substr(peg$currPos, 3) === peg$c35) {
      s1 = peg$c35;
      peg$currPos += 3;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e43); }
    }
    if (s1 !== peg$FAILED) {
      peg$parsews();
      if (input.charCodeAt(peg$currPos) === 91) {
        s3 = peg$c12;
        peg$currPos++;
      } else {
        s3 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$e19); }
      }
      if (s3 !== peg$FAILED) {
        peg$parsews();
        s5 = peg$parsemini_or_operator();
        if (s5 !== peg$FAILED) {
          s6 = [];
          s7 = peg$currPos;
          s8 = peg$parsecomma();
          if (s8 !== peg$FAILED) {
            s9 = peg$parsemini_or_operator();
            if (s9 !== peg$FAILED) {
              peg$savedPos = s7;
              s7 = peg$f27(s5, s9);
            } else {
              peg$currPos = s7;
              s7 = peg$FAILED;
            }
          } else {
            peg$currPos = s7;
            s7 = peg$FAILED;
          }
          while (s7 !== peg$FAILED) {
            s6.push(s7);
            s7 = peg$currPos;
            s8 = peg$parsecomma();
            if (s8 !== peg$FAILED) {
              s9 = peg$parsemini_or_operator();
              if (s9 !== peg$FAILED) {
                peg$savedPos = s7;
                s7 = peg$f27(s5, s9);
              } else {
                peg$currPos = s7;
                s7 = peg$FAILED;
              }
            } else {
              peg$currPos = s7;
              s7 = peg$FAILED;
            }
          }
          s7 = peg$parsews();
          if (input.charCodeAt(peg$currPos) === 93) {
            s8 = peg$c13;
            peg$currPos++;
          } else {
            s8 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$e20); }
          }
          if (s8 !== peg$FAILED) {
            peg$savedPos = s0;
            s0 = peg$f28(s5, s6);
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parsemini_or_group() {
    var s0;

    s0 = peg$parsecat();
    if (s0 === peg$FAILED) {
      s0 = peg$parsemini();
    }

    return s0;
  }

  function peg$parsemini_or_operator() {
    var s0, s1, s3, s4, s5;

    s0 = peg$currPos;
    s1 = peg$parsemini_or_group();
    if (s1 !== peg$FAILED) {
      peg$parsews();
      s3 = [];
      s4 = peg$parsecomment();
      while (s4 !== peg$FAILED) {
        s3.push(s4);
        s4 = peg$parsecomment();
      }
      peg$savedPos = s0;
      s0 = peg$f29(s1);
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }
    if (s0 === peg$FAILED) {
      s0 = peg$currPos;
      s1 = peg$parseoperator();
      if (s1 !== peg$FAILED) {
        peg$parsews();
        if (input.charCodeAt(peg$currPos) === 36) {
          s3 = peg$c36;
          peg$currPos++;
        } else {
          s3 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$e44); }
        }
        if (s3 !== peg$FAILED) {
          s4 = peg$parsews();
          s5 = peg$parsemini_or_operator();
          if (s5 !== peg$FAILED) {
            peg$savedPos = s0;
            s0 = peg$f30(s1, s5);
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    }

    return s0;
  }

  function peg$parsesequ_or_operator_or_comment() {
    var s0, s1;

    s0 = peg$currPos;
    s1 = peg$parsemini_or_operator();
    if (s1 !== peg$FAILED) {
      peg$savedPos = s0;
      s1 = peg$f31(s1);
    }
    s0 = s1;
    if (s0 === peg$FAILED) {
      s0 = peg$parsecomment();
    }

    return s0;
  }

  function peg$parsemini_definition() {
    var s0;

    s0 = peg$parsesequ_or_operator_or_comment();

    return s0;
  }

  function peg$parsecommand() {
    var s0, s2;

    s0 = peg$currPos;
    peg$parsews();
    s2 = peg$parsesetcps();
    if (s2 === peg$FAILED) {
      s2 = peg$parsesetbpm();
      if (s2 === peg$FAILED) {
        s2 = peg$parsehush();
      }
    }
    if (s2 !== peg$FAILED) {
      peg$parsews();
      peg$savedPos = s0;
      s0 = peg$f32(s2);
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parsesetcps() {
    var s0, s1, s3;

    s0 = peg$currPos;
    if (input.substr(peg$currPos, 6) === peg$c37) {
      s1 = peg$c37;
      peg$currPos += 6;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e45); }
    }
    if (s1 !== peg$FAILED) {
      peg$parsews();
      s3 = peg$parsenumber();
      if (s3 !== peg$FAILED) {
        peg$savedPos = s0;
        s0 = peg$f33(s3);
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parsesetbpm() {
    var s0, s1, s3;

    s0 = peg$currPos;
    if (input.substr(peg$currPos, 6) === peg$c38) {
      s1 = peg$c38;
      peg$currPos += 6;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e46); }
    }
    if (s1 !== peg$FAILED) {
      peg$parsews();
      s3 = peg$parsenumber();
      if (s3 !== peg$FAILED) {
        peg$savedPos = s0;
        s0 = peg$f34(s3);
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parsehush() {
    var s0, s1;

    s0 = peg$currPos;
    if (input.substr(peg$currPos, 4) === peg$c39) {
      s1 = peg$c39;
      peg$currPos += 4;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e47); }
    }
    if (s1 !== peg$FAILED) {
      peg$savedPos = s0;
      s1 = peg$f35();
    }
    s0 = s1;

    return s0;
  }

  function peg$parsestatement() {
    var s0;

    s0 = peg$parsemini_definition();
    if (s0 === peg$FAILED) {
      s0 = peg$parsecommand();
    }

    return s0;
  }


  var AtomStub = function(source)
  {
    this.type_ = "atom";
    this.source_ = source;
    this.location_ = location();
  };

  var PatternStub = function(source, alignment)
  {
    this.type_ = "pattern";
    this.arguments_ = { alignment : alignment};
    this.source_ = source;
  };

  var OperatorStub = function(name, args, source)
  {
    this.type_ = name;
    this.arguments_ = args;
    this.source_ = source;
  };

  var ElementStub = function(source, options)
  {
    this.type_ = "element";
    this.source_ = source;
    this.options_ = options;
    this.location_ = location();
  };

  var CommandStub = function(name, options)
  {
    this.type_ = "command";
    this.name_ = name;
    this.options_ = options;
  };


  peg$result = peg$startRuleFunction();

  if (peg$result !== peg$FAILED && peg$currPos === input.length) {
    return peg$result;
  } else {
    if (peg$result !== peg$FAILED && peg$currPos < input.length) {
      peg$fail(peg$endExpectation());
    }

    throw peg$buildStructuredError(
      peg$maxFailExpected,
      peg$maxFailPos < input.length ? input.charAt(peg$maxFailPos) : null,
      peg$maxFailPos < input.length
        ? peg$computeLocation(peg$maxFailPos, peg$maxFailPos + 1)
        : peg$computeLocation(peg$maxFailPos, peg$maxFailPos)
    );
  }
}

/*
mini.mjs - <short description TODO>
Copyright (C) 2022 Strudel contributors - see <https://github.com/tidalcycles/strudel/blob/main/packages/mini/mini.mjs>
This program is free software: you can redistribute it and/or modify it under the terms of the GNU Affero General Public License as published by the Free Software Foundation, either version 3 of the License, or (at your option) any later version. This program is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU Affero General Public License for more details. You should have received a copy of the GNU Affero General Public License along with this program.  If not, see <https://www.gnu.org/licenses/>.
*/

/* var _seedState = 0;
const randOffset = 0.0002;

function _nextSeed() {
  return _seedState++;
} */

const applyOptions = (parent, code) => (pat, i) => {
  const ast = parent.source_[i];
  const options = ast.options_;
  const operator = options?.operator;
  if (operator) {
    switch (operator.type_) {
      case 'stretch': {
        const legalTypes = ['fast', 'slow'];
        const { type, amount } = operator.arguments_;
        if (!legalTypes.includes(type)) {
          throw new Error(`mini: stretch: type must be one of ${legalTypes.join('|')} but got ${type}`);
        }
        return reify(pat)[type](patternifyAST(amount, code));
      }
      case 'bjorklund':
        if (operator.arguments_.rotation) {
          return pat.euclidRot(
            patternifyAST(operator.arguments_.pulse, code),
            patternifyAST(operator.arguments_.step, code),
            patternifyAST(operator.arguments_.rotation, code),
          );
        } else {
          return pat.euclid(
            patternifyAST(operator.arguments_.pulse, code),
            patternifyAST(operator.arguments_.step, code),
          );
        }
      case 'degradeBy':
        // TODO: find out what is right here
        // example:
        /*
           stack(
             s("hh*8").degrade(),
             s("[ht*8]?")
           )
        */
        // above example will only be in sync when _degradeBy is used...
        // it also seems that the nextSeed will create undeterministic behaviour
        // as it uses a global _seedState. This is probably the reason for
        // https://github.com/tidalcycles/strudel/issues/245

        // this is how it was:
        /* 
        return strudel.reify(pat)._degradeByWith(
          strudel.rand.early(randOffset * _nextSeed()).segment(1),
          operator.arguments_.amount ?? 0.5,
        ); 
        */
        return reify(pat).degradeBy(operator.arguments_.amount === null ? 0.5 : operator.arguments_.amount);
    }
    console.warn(`operator "${operator.type_}" not implemented`);
  }
  if (options?.weight) {
    // weight is handled by parent
    return pat;
  }
  // TODO: bjorklund e.g. "c3(5,8)"
  const unimplemented = Object.keys(options || {}).filter((key) => key !== 'operator');
  if (unimplemented.length) {
    console.warn(
      `option${unimplemented.length > 1 ? 's' : ''} ${unimplemented.map((o) => `"${o}"`).join(', ')} not implemented`,
    );
  }
  return pat;
};

function resolveReplications(ast) {
  ast.source_ = flatten(
    ast.source_.map((child) => {
      const { replicate, ...options } = child.options_ || {};
      if (!replicate) {
        return [child];
      }
      delete child.options_.replicate;
      return Array(replicate).fill(child);
    }),
  );
}

function patternifyAST(ast, code) {
  switch (ast.type_) {
    case 'pattern': {
      resolveReplications(ast);
      const children = ast.source_.map((child) => patternifyAST(child, code)).map(applyOptions(ast, code));
      const alignment = ast.arguments_.alignment;
      if (alignment === 'stack') {
        return stack(...children);
      }
      if (alignment === 'polymeter') {
        // polymeter
        const stepsPerCycle = ast.arguments_.stepsPerCycle
          ? patternifyAST(ast.arguments_.stepsPerCycle, code).fmap((x) => fraction(x))
          : pure(fraction(children.length > 0 ? children[0].__weight : 1));

        const aligned = children.map((child) => child.fast(stepsPerCycle.fmap((x) => x.div(child.__weight || 1))));
        return stack(...aligned);
      }
      if (alignment === 'rand') {
        // https://github.com/tidalcycles/strudel/issues/245#issuecomment-1345406422
        // return strudel.chooseInWith(strudel.rand.early(randOffset * _nextSeed()).segment(1), children);
        return chooseCycles(...children);
      }
      const weightedChildren = ast.source_.some((child) => !!child.options_?.weight);
      if (!weightedChildren && alignment === 'slowcat') {
        return slowcat(...children);
      }
      if (weightedChildren) {
        const weightSum = ast.source_.reduce((sum, child) => sum + (child.options_?.weight || 1), 0);
        const pat = timeCat(...ast.source_.map((child, i) => [child.options_?.weight || 1, children[i]]));
        if (alignment === 'slowcat') {
          return pat._slow(weightSum); // timecat + slow
        }
        pat.__weight = weightSum;
        return pat;
      }
      const pat = sequence(...children);
      pat.__weight = children.length;
      return pat;
    }
    case 'element': {
      return patternifyAST(ast.source_, code);
    }
    case 'atom': {
      if (ast.source_ === '~') {
        return silence;
      }
      if (!ast.location_) {
        console.warn('no location for', ast);
        return ast.source_;
      }
      const { start, end } = ast.location_;
      const value = !isNaN(Number(ast.source_)) ? Number(ast.source_) : ast.source_;
      // the following line expects the shapeshifter append .withMiniLocation
      // because location_ is only relative to the mini string, but we need it relative to whole code
      // make sure whitespaces are not part of the highlight:
      const actual = code?.split('').slice(start.offset, end.offset).join('');
      const [offsetStart = 0, offsetEnd = 0] = actual
        ? actual.split(ast.source_).map((p) => p.split('').filter((c) => c === ' ').length)
        : [];
      return pure(value)
        .withLocation(
          [start.line, start.column + offsetStart, start.offset + offsetStart],
          [start.line, end.column - offsetEnd, end.offset - offsetEnd],
        );
    }
    case 'stretch':
      return patternifyAST(ast.source_, code).slow(patternifyAST(ast.arguments_.amount, code));
    /* case 'scale':
      let [tonic, scale] = Scale.tokenize(ast.arguments_.scale);
      const intervals = Scale.get(scale).intervals;
      const pattern = patternifyAST(ast.source_);
      tonic = tonic || 'C4';
      // console.log('scale', ast, pattern, tonic, scale);
      console.log('tonic', tonic);
      return pattern.fmap((step: any) => {
        step = Number(step);
        if (isNaN(step)) {
          console.warn(`scale step "${step}" not a number`);
          return step;
        }
        const octaves = Math.floor(step / intervals.length);
        const mod = (n: number, m: number): number => (n < 0 ? mod(n + m, m) : n % m);
        const index = mod(step, intervals.length); // % with negative numbers. e.g. -1 % 3 = 2
        const interval = Interval.add(intervals[index], Interval.fromSemitones(octaves * 12));
        return Note.transpose(tonic, interval || '1P');
      }); */
    /* case 'struct':
      // TODO:
      return strudel.silence; */
    default:
      console.warn(`node type "${ast.type_}" not implemented -> returning silence`);
      return silence;
  }
}

// mini notation only (wraps in "")
const mini = (...strings) => {
  const pats = strings.map((str) => {
    const code = `"${str}"`;
    const ast = peg$parse(code);
    return patternifyAST(ast, code);
  });
  return sequence(...pats);
};

// includes haskell style (raw krill parsing)
const h = (string) => {
  const ast = peg$parse(string);
  // console.log('ast', ast);
  return patternifyAST(ast, string);
};

function minify(thing) {
  if (typeof thing === 'string') {
    return mini(thing);
  }
  return reify(thing);
}

/*
tonal.mjs - <short description TODO>
Copyright (C) 2022 Strudel contributors - see <https://github.com/tidalcycles/strudel/blob/main/packages/tonal/tonal.mjs>
This program is free software: you can redistribute it and/or modify it under the terms of the GNU Affero General Public License as published by the Free Software Foundation, either version 3 of the License, or (at your option) any later version. This program is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU Affero General Public License for more details. You should have received a copy of the GNU Affero General Public License along with this program.  If not, see <https://www.gnu.org/licenses/>.
*/

// transpose note inside scale by offset steps
// function scaleOffset(scale: string, offset: number, note: string) {
function scaleOffset(scale, offset, note) {
  let [tonic, scaleName] = Scale.tokenize(scale);
  let { notes } = Scale.get(`${tonic} ${scaleName}`);
  notes = notes.map((note) => Note.get(note).pc); // use only pc!
  offset = Number(offset);
  if (isNaN(offset)) {
    throw new Error(`scale offset "${offset}" not a number`);
  }
  const { pc: fromPc, oct = 3 } = Note.get(note);
  const noteIndex = notes.indexOf(fromPc);
  if (noteIndex === -1) {
    throw new Error(`note "${note}" is not in scale "${scale}"`);
  }
  let i = noteIndex,
    o = oct,
    n = fromPc;
  const direction = Math.sign(offset);
  // TODO: find way to do this smarter
  while (Math.abs(i - noteIndex) < Math.abs(offset)) {
    i += direction;
    const index = _mod(i, notes.length);
    if (direction < 0 && n[0] === 'C') {
      o += direction;
    }
    n = notes[index];
    if (direction > 0 && n[0] === 'C') {
      o += direction;
    }
  }
  return n + o;
}

// Pattern.prototype._transpose = function (intervalOrSemitones: string | number) {
/**
 * Change the pitch of each value by the given amount. Expects numbers or note strings as values.
 * The amount can be given as a number of semitones or as a string in interval short notation.
 * If you don't care about enharmonic correctness, just use numbers. Otherwise, pass the interval of
 * the form: ST where S is the degree number and T the type of interval with
 *
 * - M = major
 * - m = minor
 * - P = perfect
 * - A = augmented
 * - d = diminished
 *
 * Examples intervals:
 *
 * - 1P = unison
 * - 3M = major third
 * - 3m = minor third
 * - 4P = perfect fourth
 * - 4A = augmented fourth
 * - 5P = perfect fifth
 * - 5d = diminished fifth
 *
 * @param {string | number} amount Either number of semitones or interval string.
 * @returns Pattern
 * @memberof Pattern
 * @name transpose
 * @example
 * "c2 c3".fast(2).transpose("<0 -2 5 3>".slow(2)).note()
 * @example
 * "c2 c3".fast(2).transpose("<1P -2M 4P 3m>".slow(2)).note()
 */

const transpose = register('transpose', function (intervalOrSemitones, pat) {
  return pat.withHap((hap) => {
    const interval = !isNaN(Number(intervalOrSemitones))
      ? Interval.fromSemitones(intervalOrSemitones /*  as number */)
      : String(intervalOrSemitones);
    if (typeof hap.value === 'number') {
      const semitones = typeof interval === 'string' ? Interval.semitones(interval) || 0 : interval;
      return hap.withValue(() => hap.value + semitones);
    }
    // TODO: move simplify to player to preserve enharmonics
    // tone.js doesn't understand multiple sharps flats e.g. F##3 has to be turned into G3
    return hap.withValue(() => Note.simplify(Note.transpose(hap.value, interval)));
  });
});

// example: transpose(3).late(0.2) will be equivalent to compose(transpose(3), late(0.2))
// e.g. `stack(c3).superimpose(transpose(slowcat(7, 5)))` or
// or even `stack(c3).superimpose(transpose.slowcat(7, 5))` or

/**
 * Transposes notes inside the scale by the number of steps.
 * Expected to be called on a Pattern which already has a {@link Pattern#scale}
 *
 * @memberof Pattern
 * @name scaleTranspose
 * @param {offset} offset number of steps inside the scale
 * @returns Pattern
 * @example
 * "-8 [2,4,6]"
 * .scale('C4 bebop major')
 * .scaleTranspose("<0 -1 -2 -3 -4 -5 -6 -4>")
 * .note()
 */

const scaleTranspose = register('scaleTranspose', function (offset /* : number | string */, pat) {
  return pat.withHap((hap) => {
    if (!hap.context.scale) {
      throw new Error('can only use scaleTranspose after .scale');
    }
    if (typeof hap.value !== 'string') {
      throw new Error('can only use scaleTranspose with notes');
    }
    return hap.withValue(() => scaleOffset(hap.context.scale, Number(offset), hap.value));
  });
});

/**
 * Turns numbers into notes in the scale (zero indexed). Also sets scale for other scale operations, like {@link Pattern#scaleTranspose}.
 *
 * The scale name has the form "TO? N" wher
 *
 * - T = Tonic
 * - O = Octave (optional, defaults to 3)
 * - N = Name of scale, available names can be found [here](https://github.com/tonaljs/tonal/blob/main/packages/scale-type/data.ts).
 *
 * @memberof Pattern
 * @name scale
 * @param {string} scale Name of scale
 * @returns Pattern
 * @example
 * "0 2 4 6 4 2"
 * .scale(seq('C2 major', 'C2 minor').slow(2))
 * .note()
 */

const scale = register('scale', function (scale /* : string */, pat) {
  return pat.withHap((hap) => {
    const isObject = typeof hap.value === 'object';
    let note = isObject ? hap.value.n : hap.value;
    const asNumber = Number(note);
    if (!isNaN(asNumber)) {
      let [tonic, scaleName] = Scale.tokenize(scale);
      const { pc, oct = 3 } = Note.get(tonic);
      note = scaleOffset(pc + ' ' + scaleName, asNumber, pc + oct);
    }
    return hap.withValue(() => (isObject ? { ...hap.value, note } : note)).setContext({ ...hap.context, scale });
  });
});

/*
voicings.mjs - <short description TODO>
Copyright (C) 2022 Strudel contributors - see <https://github.com/tidalcycles/strudel/blob/main/packages/tonal/voicings.mjs>
This program is free software: you can redistribute it and/or modify it under the terms of the GNU Affero General Public License as published by the Free Software Foundation, either version 3 of the License, or (at your option) any later version. This program is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU Affero General Public License for more details. You should have received a copy of the GNU Affero General Public License along with this program.  If not, see <https://www.gnu.org/licenses/>.
*/
const { dictionaryVoicing, minTopNoteDiff, lefthand } = _voicings.default || _voicings; // parcel module resolution fuckup

const voicingRegistry = {
  lefthand: { dictionary: lefthand, range: ['F3', 'A4'] },
};
const setVoicingRange = (name, range) => addVoicings(name, voicingRegistry[name].dictionary, range);

/**
 * Adds a new custom voicing dictionary.
 *
 * @name addVoicings
 * @memberof Pattern
 * @param {string} name identifier for the voicing dictionary
 * @param {Object} dictionary maps chord symbol to possible voicings
 * @param {Array} range min, max note
 * @returns Pattern
 * @example
 * addVoicings('cookie', {
 *   7: ['3M 7m 9M 12P 15P', '7m 10M 13M 16M 19P'],
 *   '^7': ['3M 6M 9M 12P 14M', '7M 10M 13M 16M 19P'],
 *   m7: ['8P 11P 14m 17m 19P', '5P 8P 11P 14m 17m'],
 *   m7b5: ['3m 5d 8P 11P 14m', '5d 8P 11P 14m 17m'],
 *   o7: ['3m 6M 9M 11A 15P'],
 *   '7alt': ['3M 7m 10m 13m 15P'],
 *   '7#11': ['7m 10m 13m 15P 17m'],
 * }, ['C3', 'C6'])
 * "<C^7 A7 Dm7 G7>".voicings('cookie').note()
 */
const addVoicings = (name, dictionary, range = ['F3', 'A4']) => {
  Object.assign(voicingRegistry, { [name]: { dictionary, range } });
};

const getVoicing = (chord, dictionaryName, lastVoicing) => {
  const { dictionary, range } = voicingRegistry[dictionaryName];
  return dictionaryVoicing({
    chord,
    dictionary,
    range,
    picker: minTopNoteDiff,
    lastVoicing,
  });
};

/**
 * Turns chord symbols into voicings, using the smoothest voice leading possible.
 * Uses [chord-voicings package](https://github.com/felixroos/chord-voicings#chord-voicings).
 *
 * @name voicings
 * @memberof Pattern
 * @param {string} dictionary which voicing dictionary to use.
 * @returns Pattern
 * @example
 * stack("<C^7 A7 Dm7 G7>".voicings('lefthand'), "<C3 A2 D3 G2>").note()
 */

let lastVoicing; // this now has to be global until another solution is found :-/
// it used to be local to the voicings function at evaluation time
// but since register will patternify by default, means that
// the function is called over and over again, resetting the lastVoicing variables
const voicings = register('voicings', function (dictionary, pat) {
  return pat
    .fmap((value) => {
      lastVoicing = getVoicing(value, dictionary, lastVoicing);
      return stack(...lastVoicing);
    })
    .outerJoin();
});

/**
 * Maps the chords of the incoming pattern to root notes in the given octave.
 *
 * @name rootNotes
 * @memberof Pattern
 * @param {octave} octave octave to use
 * @returns Pattern
 * @example
 * "<C^7 A7 Dm7 G7>".rootNotes(2).note()
 */
const rootNotes = register('rootNotes', function (octave, pat) {
  return pat.fmap((value) => {
    const root = value.match(/^([a-gA-G][b#]?).*$/)[1];
    return root + octave;
  });
});

const tonalHelpers = /*#__PURE__*/Object.freeze(/*#__PURE__*/Object.defineProperty({
	__proto__: null,
	transpose,
	scaleTranspose,
	scale,
	voicingRegistry,
	setVoicingRange,
	addVoicings,
	voicings,
	rootNotes
}, Symbol.toStringTag, { value: 'Module' }));

/*
xen.mjs - <short description TODO>
Copyright (C) 2022 Strudel contributors - see <https://github.com/tidalcycles/strudel/blob/main/packages/xen/xen.mjs>
This program is free software: you can redistribute it and/or modify it under the terms of the GNU Affero General Public License as published by the Free Software Foundation, either version 3 of the License, or (at your option) any later version. This program is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU Affero General Public License for more details. You should have received a copy of the GNU Affero General Public License along with this program.  If not, see <https://www.gnu.org/licenses/>.
*/

function edo(name) {
  if (!/^[1-9]+[0-9]*edo$/.test(name)) {
    throw new Error('not an edo scale: "' + name + '"');
  }
  const [_, divisions] = name.match(/^([1-9]+[0-9]*)edo$/);
  return Array.from({ length: divisions }, (_, i) => Math.pow(2, i / divisions));
}

const presets = {
  '12ji': [1 / 1, 16 / 15, 9 / 8, 6 / 5, 5 / 4, 4 / 3, 45 / 32, 3 / 2, 8 / 5, 5 / 3, 16 / 9, 15 / 8],
};

function withBase(freq, scale) {
  return scale.map((r) => r * freq);
}

const defaultBase = 220;

function getXenScale(scale, indices) {
  if (typeof scale === 'string') {
    if (/^[1-9]+[0-9]*edo$/.test(scale)) {
      scale = edo(scale);
    } else if (presets[scale]) {
      scale = presets[scale];
    } else {
      throw new Error('unknown scale name: "' + scale + '"');
    }
  }
  scale = withBase(defaultBase, scale);
  if (!indices) {
    return scale;
  }
  return scale.filter((_, i) => indices.includes(i));
}

function xenOffset(xenScale, offset, index = 0) {
  const i = _mod(index + offset, xenScale.length);
  const oct = Math.floor(offset / xenScale.length);
  return xenScale[i] * Math.pow(2, oct);
}

// scaleNameOrRatios: string || number[], steps?: number
const xen = register('xen', function (scaleNameOrRatios, pat) {
  return pat.withHap((hap) => {
    const scale = getXenScale(scaleNameOrRatios);
    const frequency = xenOffset(scale, parseNumeral(hap.value));
    return hap.withValue(() => frequency);
  });
});

const tuning = register('tuning', function (ratios, pat) {
  return pat.withHap((hap) => {
    const frequency = xenOffset(ratios, parseNumeral(hap.value));
    return hap.withValue(() => frequency);
  });
});

// this file contains a runtime scope for testing all the tunes

class MockedNode {
  chain() {
    return this;
  }
  connect() {
    return this;
  }
  toDestination() {
    return this;
  }
  set() {
    return this;
  }
  start() {
    return this;
  }
}

const mockNode = () => new MockedNode();

const id = (x) => x;

const toneHelpersMocked = {
  FeedbackDelay: MockedNode,
  MembraneSynth: MockedNode,
  NoiseSynth: MockedNode,
  MetalSynth: MockedNode,
  Synth: MockedNode,
  PolySynth: MockedNode,
  Chorus: MockedNode,
  Freeverb: MockedNode,
  Gain: MockedNode,
  Reverb: MockedNode,
  vol: mockNode,
  out: id,
  osc: id,
  adsr: id,
  getDestination: id,
  players: mockNode,
  sampler: mockNode,
  synth: mockNode,
  piano: mockNode,
  polysynth: mockNode,
  fmsynth: mockNode,
  membrane: mockNode,
  noise: mockNode,
  metal: mockNode,
  lowpass: mockNode,
  highpass: mockNode,
};

Pattern$1.prototype.osc = function () {
  return this;
};
Pattern$1.prototype.csound = function () {
  return this;
};
Pattern$1.prototype.tone = function () {
  return this;
};
Pattern$1.prototype.webdirt = function () {
  return this;
};

// draw mock
Pattern$1.prototype.pianoroll = function () {
  return this;
};

// speak mock
Pattern$1.prototype.speak = function () {
  return this;
};

// webaudio mock
Pattern$1.prototype.wave = function () {
  return this;
};
Pattern$1.prototype.filter = function () {
  return this;
};
Pattern$1.prototype.adsr = function () {
  return this;
};
Pattern$1.prototype.out = function () {
  return this;
};
Pattern$1.prototype.soundfont = function () {
  return this;
};
// tune mock
Pattern$1.prototype.tune = function () {
  return this;
};

Pattern$1.prototype.midi = function () {
  return this;
};

const uiHelpersMocked = {
  backgroundImage: id,
};

const canvasCtx = {
  clearRect: () => {},
  fillText: () => {},
  fillRect: () => {},
  canvas: {
    width: 100,
    height: 100,
  },
};
const audioCtx = {
  currentTime: 1,
};
const getDrawContext = () => canvasCtx;
const getAudioContext = () => audioCtx;
const loadSoundfont = () => {};
const loadCsound = () => {};
const loadCSound = () => {};
const loadcsound = () => {};

// TODO: refactor to evalScope
evalScope(
  // Tone,
  strudel,
  toneHelpersMocked,
  uiHelpersMocked,
  controls,
  webaudio,
  tonalHelpers,
  /* controls,
  toneHelpers,
  voicingHelpers,
  drawHelpers,
  uiHelpers,
  */
  {
    // gist,
    // euclid,
    csound: id,
    loadOrc: id,
    mini,
    getDrawContext,
    getAudioContext,
    loadSoundfont,
    loadCSound,
    loadCsound,
    loadcsound,
    Clock: {}, // whatever
    // Tone,
  },
);

// fixed: https://strudel.tidalcycles.org/?DBp75NUfSxIn (missing .note())
// bug: https://strudel.tidalcycles.org/?xHaKTd1kTpCn + https://strudel.tidalcycles.org/?o5LLePbx8kiQ

async function get$1({ params, request }) {
  const patterns = await getMyPatterns();
  const { name } = params;
  const tune = patterns[name];
  const { pattern } = await evaluate(tune);
  const haps = pattern.queryArc(0, 4);
  const canvas = createCanvas(800, 800);
  const ctx = canvas.getContext('2d');
  pianoroll({ time: 4, haps, ctx, playhead: 1, fold: 1, background: 'transparent', playheadColor: 'transparent' });
  const buffer = canvas.toBuffer('image/png');
  return {
    body: buffer,
    encoding: 'binary',
  };
}
async function getStaticPaths$1() {
  const patterns = await getMyPatterns();
  return Object.keys(patterns).map((name) => ({
    params: {
      name,
    },
  }));
}

const _page15 = /*#__PURE__*/Object.freeze(/*#__PURE__*/Object.defineProperty({
	__proto__: null,
	get: get$1,
	getStaticPaths: getStaticPaths$1
}, Symbol.toStringTag, { value: 'Module' }));

const $$Astro$1 = createAstro("/Users/michaelgogins/cloud-music/strudel/website/src/pages/embed.astro", "https://strudel.tidalcycles.org/", "file:///Users/michaelgogins/cloud-music/strudel/website/");
const $$Embed = createComponent(async ($$result, $$props, $$slots) => {
  const Astro2 = $$result.createAstro($$Astro$1, $$props, $$slots);
  Astro2.self = $$Embed;
  return renderTemplate`<html>
  <head>
    ${renderComponent($$result, "HeadCommon", $$HeadCommon, {})}
    <title>Strudel REPL</title>
  ${renderHead($$result)}</head>
  <body>
    ${renderComponent($$result, "Repl", null, { "client:only": "react", "embedded": true, "client:component-hydration": "only", "client:component-path": "/Users/michaelgogins/cloud-music/strudel/website/src/repl/Repl.jsx", "client:component-export": "Repl" })}
  </body></html>`;
}, "/Users/michaelgogins/cloud-music/strudel/website/src/pages/embed.astro");

const $$file$1 = "/Users/michaelgogins/cloud-music/strudel/website/src/pages/embed.astro";
const $$url$1 = "/embed";

const _page16 = /*#__PURE__*/Object.freeze(/*#__PURE__*/Object.defineProperty({
	__proto__: null,
	default: $$Embed,
	file: $$file$1,
	url: $$url$1
}, Symbol.toStringTag, { value: 'Module' }));

var __freeze = Object.freeze;
var __defProp = Object.defineProperty;
var __template = (cooked, raw) => __freeze(__defProp(cooked, "raw", { value: __freeze(raw || cooked.slice()) }));
var _a;
const $$Astro = createAstro("/Users/michaelgogins/cloud-music/strudel/website/src/pages/learn/index.astro", "https://strudel.tidalcycles.org/", "file:///Users/michaelgogins/cloud-music/strudel/website/");
const $$Index = createComponent(async ($$result, $$props, $$slots) => {
  const Astro2 = $$result.createAstro($$Astro, $$props, $$slots);
  Astro2.self = $$Index;
  return renderTemplate(_a || (_a = __template(["<script>\n  window.location.pathname = `/learn/getting-started`;\n<\/script>\n"], ["<script>\n  window.location.pathname = \\`/learn/getting-started\\`;\n<\/script>\n"])));
}, "/Users/michaelgogins/cloud-music/strudel/website/src/pages/learn/index.astro");

const $$file = "/Users/michaelgogins/cloud-music/strudel/website/src/pages/learn/index.astro";
const $$url = "/learn";

const _page17 = /*#__PURE__*/Object.freeze(/*#__PURE__*/Object.defineProperty({
	__proto__: null,
	default: $$Index,
	file: $$file,
	url: $$url
}, Symbol.toStringTag, { value: 'Module' }));

const MDXLayout$c = async function ({
  children
}) {
  const Layout = (await import('./chunks/MainLayout.c7eab378.mjs')).default;
  const {
    layout,
    ...content
  } = frontmatter$c;
  content.file = file$c;
  content.url = url$c;
  content.astro = {};
  Object.defineProperty(content.astro, "headings", {
    get() {
      throw new Error('The "astro" property is no longer supported! To access "headings" from your layout, try using "Astro.props.headings."');
    }
  });
  Object.defineProperty(content.astro, "html", {
    get() {
      throw new Error('The "astro" property is no longer supported! To access "html" from your layout, try using "Astro.props.compiledContent()."');
    }
  });
  Object.defineProperty(content.astro, "source", {
    get() {
      throw new Error('The "astro" property is no longer supported! To access "source" from your layout, try using "Astro.props.rawContent()."');
    }
  });
  return createVNode(Layout, {
    file: file$c,
    url: url$c,
    content,
    frontmatter: content,
    headings: getHeadings$c(),
    "server:root": true,
    children
  });
};
const frontmatter$c = {
  "title": "Getting Started",
  "description": "Strudel Tutorial - Getting Started",
  "layout": "../../layouts/MainLayout.astro"
};
const _internal$c = {
  injectedFrontmatter: {}
};
function getHeadings$c() {
  return [{
    "depth": 1,
    "slug": "welcome",
    "text": "Welcome"
  }, {
    "depth": 1,
    "slug": "what-is-strudel",
    "text": "What is Strudel?"
  }, {
    "depth": 1,
    "slug": "strudel-repl-and-minirepl",
    "text": "Strudel REPL and MiniREPL"
  }, {
    "depth": 1,
    "slug": "show-me-some-demos",
    "text": "Show me some demos!"
  }, {
    "depth": 1,
    "slug": "strudel-is-a-work-in-progress",
    "text": "Strudel is a work in progress \u{1F6A7}"
  }, {
    "depth": 1,
    "slug": "whats-next",
    "text": "What\u2019s next?"
  }];
}
function _createMdxContent$c(props) {
  const _components = Object.assign({
    h1: "h1",
    a: "a",
    span: "span",
    p: "p",
    code: "code"
  }, props.components);
  return createVNode(Fragment, {
    children: [createVNode(_components.h1, {
      id: "welcome",
      children: [createVNode(_components.a, {
        "aria-hidden": "true",
        tabIndex: "-1",
        href: "#welcome",
        children: createVNode(_components.span, {
          className: "icon icon-link"
        })
      }), "Welcome"]
    }), "\n", createVNode(_components.p, {
      children: "Welcome to the Strudel documentation pages!"
    }), "\n", createVNode(_components.p, {
      children: ["These pages will introduce you to ", createVNode(_components.a, {
        href: "https://strudel.tidalcycles.org/",
        children: "Strudel"
      }), ", a web-based ", createVNode(_components.a, {
        href: "https://github.com/toplap/awesome-livecoding/",
        children: "live coding"
      }), " environment that implements the ", createVNode(_components.a, {
        href: "https://tidalcycles.org",
        children: "Tidal Cycles"
      }), " algorithmic pattern language."]
    }), "\n", createVNode(_components.h1, {
      id: "what-is-strudel",
      children: [createVNode(_components.a, {
        "aria-hidden": "true",
        tabIndex: "-1",
        href: "#what-is-strudel",
        children: createVNode(_components.span, {
          className: "icon icon-link"
        })
      }), "What is Strudel?"]
    }), "\n", createVNode(_components.p, {
      children: [createVNode(_components.a, {
        href: "https://strudel.tidalcycles.org/",
        children: "Strudel"
      }), " is a version of ", createVNode(_components.a, {
        href: "https://tidalcycles.org",
        children: "Tidal Cycles"
      }), " written in ", createVNode(_components.a, {
        href: "https://developer.mozilla.org/en-US/docs/Web/JavaScript",
        children: "JavaScript"
      }), ", initiated by ", createVNode(_components.a, {
        href: "https://slab.org",
        children: "Alex McLean"
      }), " and ", createVNode(_components.a, {
        href: "https://github.com/felixroos",
        children: "Felix Roos"
      }), " in 2022.\nTidal Cycles, also known as Tidal, is a language for ", createVNode(_components.a, {
        href: "https://algorithmicpattern.org",
        children: "algorithmic pattern"
      }), ", and though it is most commonly used for ", createVNode(_components.a, {
        href: "https://tidalcycles.org/docs/showcase",
        children: "making music"
      }), ", it can be used for any kind of pattern making activity, including ", createVNode(_components.a, {
        href: "https://www.youtube.com/watch?v=TfEmEsusXjU",
        children: "weaving"
      }), "."]
    }), "\n", createVNode(_components.p, {
      children: ["Tidal was first implemented as a library written in the ", createVNode(_components.a, {
        href: "https://www.haskell.org/",
        children: "Haskell"
      }), " functional programming language, and by itself it does not make any sound.\nTo make sound, it has to be connected to a sound engine, and by default this is a ", createVNode(_components.a, {
        href: "https://supercollider.github.io/",
        children: "SuperCollider"
      }), " plugin called ", createVNode(_components.a, {
        href: "https://github.com/musikinformatik/SuperDirt/",
        children: "SuperDirt"
      }), ".\nAs such, it can be difficult for first-time users to install both Tidal Cycles and SuperDirt, as there are many small details to get right.\nStrudel however runs directly in your web browser, does not require any custom software installation, and can make sound all by itself."]
    }), "\n", createVNode(_components.h1, {
      id: "strudel-repl-and-minirepl",
      children: [createVNode(_components.a, {
        "aria-hidden": "true",
        tabIndex: "-1",
        href: "#strudel-repl-and-minirepl",
        children: createVNode(_components.span, {
          className: "icon icon-link"
        })
      }), "Strudel REPL and MiniREPL"]
    }), "\n", createVNode(_components.p, {
      children: ["The main place to actually make music with Strudel is the ", createVNode(_components.a, {
        href: "https://strudel.tidalcycles.org/",
        children: "Strudel REPL"
      }), " (", createVNode(_components.a, {
        href: "https://en.wikipedia.org/wiki/Read%E2%80%93eval%E2%80%93print_loop",
        children: "what is a REPL?"
      }), "), but in these pages you will also encounter interactive \u201CMiniREPLs\u201D where you can listen to and edit Strudel patterns.\nTry clicking the play icon below:"]
    }), "\n", createVNode(MiniRepl, {
      "client:idle": true,
      tune: "s(\"bd sd\")",
      "client:component-path": "/Users/michaelgogins/cloud-music/strudel/website/src/docs/MiniRepl",
      "client:component-export": "MiniRepl",
      "client:component-hydration": true
    }), "\n", createVNode(_components.p, {
      children: ["Then edit the text so it reads ", createVNode(_components.code, {
        children: "s(\"bd sd cp hh\")"
      }), " and click the refresh icon.\nCongratulations, you have now live coded your first Strudel pattern!"]
    }), "\n", createVNode(_components.p, {
      children: "With Strudel, you can expressively write dynamic music pieces.\nYou don\u2019t need to know JavaScript or Tidal Cycles to make music with Strudel.\nThis interactive tutorial will guide you through the basics of Strudel."
    }), "\n", createVNode(_components.h1, {
      id: "show-me-some-demos",
      children: [createVNode(_components.a, {
        "aria-hidden": "true",
        tabIndex: "-1",
        href: "#show-me-some-demos",
        children: createVNode(_components.span, {
          className: "icon icon-link"
        })
      }), "Show me some demos!"]
    }), "\n", createVNode(_components.p, {
      children: ["To see and hear what Strudel can do, visit the ", createVNode(_components.a, {
        href: "https://strudel.tidalcycles.org/",
        children: "Strudel REPL"
      }), " and click the Shuffle icon in the top menu bar.\nYou can get a feel for Strudel by browsing and editing these examples and clicking the Refresh icon to update."]
    }), "\n", createVNode(_components.p, {
      children: ["You can also browse through the examples ", createVNode(_components.a, {
        href: "./examples",
        children: "here"
      }), "."]
    }), "\n", createVNode(_components.p, {
      children: "Alternatively, you can get a taste of what Strudel can do by clicking play on this track:"
    }), "\n", createVNode(MiniRepl, {
      "client:idle": true,
      tune: `samples({
  bd: ['bd/BT0AADA.wav','bd/BT0AAD0.wav','bd/BT0A0DA.wav','bd/BT0A0D3.wav','bd/BT0A0D0.wav','bd/BT0A0A7.wav'],
  sd: ['sd/rytm-01-classic.wav','sd/rytm-00-hard.wav'],
  hh: ['hh27/000_hh27closedhh.wav','hh/000_hh3closedhh.wav'],
}, 'github:tidalcycles/Dirt-Samples/master/');
stack(
s("bd,[~ <sd!3 sd(3,4,2)>],hh(3,4)") // drums
.speed(perlin.range(.7,.9)) // random sample speed variation
,"<a1 b1*2 a1(3,8) e2>" // bassline
.off(1/8,x=>x.add(12).degradeBy(.5)) // random octave jumps
.add(perlin.range(0,.5)) // random pitch variation
.superimpose(add(.05)) // add second, slightly detuned voice
.n() // wrap in "n"
.decay(.15).sustain(0) // make each note of equal length
.s('sawtooth') // waveform
.gain(.4) // turn down
.cutoff(sine.slow(7).range(300,5000)) // automate cutoff
,"<Am7!3 <Em7 E7b13 Em7 Ebm7b5>>".voicings('lefthand') // chords
.superimpose(x=>x.add(.04)) // add second, slightly detuned voice
.add(perlin.range(0,.5)) // random pitch variation
.n() // wrap in "n"
.s('sawtooth') // waveform
.gain(.16) // turn down
.cutoff(500) // fixed cutoff
.attack(1) // slowly fade in
)
.slow(3/2)`,
      "client:component-path": "/Users/michaelgogins/cloud-music/strudel/website/src/docs/MiniRepl",
      "client:component-export": "MiniRepl",
      "client:component-hydration": true
    }), "\n", createVNode(_components.h1, {
      id: "strudel-is-a-work-in-progress",
      children: [createVNode(_components.a, {
        "aria-hidden": "true",
        tabIndex: "-1",
        href: "#strudel-is-a-work-in-progress",
        children: createVNode(_components.span, {
          className: "icon icon-link"
        })
      }), "Strudel is a work in progress \u{1F6A7}"]
    }), "\n", createVNode(_components.p, {
      children: ["Please note that this project is still in its experimental state.\nIn the future, parts of it might change significantly.\nThis tutorial is also far from complete.\nYou can contribute to it clicking \u2018Edit this page\u2019 in the top right, or by visiting the ", createVNode(_components.a, {
        href: "https://github.com/tidalcycles/strudel/",
        children: "Strudel GitHub page"
      }), "."]
    }), "\n", createVNode(_components.h1, {
      id: "whats-next",
      children: [createVNode(_components.a, {
        "aria-hidden": "true",
        tabIndex: "-1",
        href: "#whats-next",
        children: createVNode(_components.span, {
          className: "icon icon-link"
        })
      }), "What\u2019s next?"]
    }), "\n", createVNode(_components.p, {
      children: ["Head on over to the ", createVNode(_components.a, {
        href: "/learn/notes",
        children: "Notes"
      }), " page."]
    }), "\n", createVNode("br", {})]
  });
}
function MDXContent$c(props = {}) {
  return createVNode(MDXLayout$c, {
    ...props,
    children: createVNode(_createMdxContent$c, {
      ...props
    })
  });
}

__astro_tag_component__(getHeadings$c, "astro:jsx");
__astro_tag_component__(MDXContent$c, "astro:jsx");
const url$c = "/learn/getting-started";
const file$c = "/Users/michaelgogins/cloud-music/strudel/website/src/pages/learn/getting-started.mdx";
function rawContent$c() { throw new Error("MDX does not support rawContent()! If you need to read the Markdown contents to calculate values (ex. reading time), we suggest injecting frontmatter via remark plugins. Learn more on our docs: https://docs.astro.build/en/guides/integrations-guide/mdx/#inject-frontmatter-via-remark-or-rehype-plugins") }function compiledContent$c() { throw new Error("MDX does not support compiledContent()! If you need to read the HTML contents to calculate values (ex. reading time), we suggest injecting frontmatter via rehype plugins. Learn more on our docs: https://docs.astro.build/en/guides/integrations-guide/mdx/#inject-frontmatter-via-remark-or-rehype-plugins") }const Content$c = (props = {}) => MDXContent$c({
											...props,
											components: { Fragment, ...props.components },
										});
Content$c[Symbol.for('astro.needsHeadRendering')] = !Boolean(frontmatter$c.layout);

const _page18 = /*#__PURE__*/Object.freeze(/*#__PURE__*/Object.defineProperty({
	__proto__: null,
	frontmatter: frontmatter$c,
	_internal: _internal$c,
	getHeadings: getHeadings$c,
	url: url$c,
	file: file$c,
	rawContent: rawContent$c,
	compiledContent: compiledContent$c,
	Content: Content$c,
	default: Content$c
}, Symbol.toStringTag, { value: 'Module' }));

const MDXLayout$b = async function ({
  children
}) {
  const Layout = (await import('./chunks/MainLayout.c7eab378.mjs')).default;
  const {
    layout,
    ...content
  } = frontmatter$b;
  content.file = file$b;
  content.url = url$b;
  content.astro = {};
  Object.defineProperty(content.astro, "headings", {
    get() {
      throw new Error('The "astro" property is no longer supported! To access "headings" from your layout, try using "Astro.props.headings."');
    }
  });
  Object.defineProperty(content.astro, "html", {
    get() {
      throw new Error('The "astro" property is no longer supported! To access "html" from your layout, try using "Astro.props.compiledContent()."');
    }
  });
  Object.defineProperty(content.astro, "source", {
    get() {
      throw new Error('The "astro" property is no longer supported! To access "source" from your layout, try using "Astro.props.rawContent()."');
    }
  });
  return createVNode(Layout, {
    file: file$b,
    url: url$b,
    content,
    frontmatter: content,
    headings: getHeadings$b(),
    "server:root": true,
    children
  });
};
const frontmatter$b = {
  "title": "Mini Notation",
  "layout": "../../layouts/MainLayout.astro"
};
const _internal$b = {
  injectedFrontmatter: {}
};
function getHeadings$b() {
  return [{
    "depth": 1,
    "slug": "mini-notation",
    "text": "Mini-notation"
  }, {
    "depth": 1,
    "slug": "sequences-of-events-in-a-cycle",
    "text": "Sequences of events in a cycle"
  }, {
    "depth": 1,
    "slug": "division",
    "text": "Division"
  }, {
    "depth": 1,
    "slug": "angle-brackets",
    "text": "Angle Brackets"
  }, {
    "depth": 1,
    "slug": "multiplication",
    "text": "Multiplication"
  }, {
    "depth": 1,
    "slug": "subdividing-time-with-bracket-nesting",
    "text": "Subdividing time with bracket nesting"
  }, {
    "depth": 1,
    "slug": "rests",
    "text": "Rests"
  }, {
    "depth": 1,
    "slug": "parallel--polyphony",
    "text": "Parallel / polyphony"
  }, {
    "depth": 1,
    "slug": "elongation",
    "text": "Elongation"
  }, {
    "depth": 1,
    "slug": "replication",
    "text": "Replication"
  }, {
    "depth": 1,
    "slug": "mini-notation-review",
    "text": "Mini-notation review"
  }, {
    "depth": 1,
    "slug": "euclidian-rhythms",
    "text": "Euclidian rhythms"
  }, {
    "depth": 2,
    "slug": "beats",
    "text": "Beats"
  }, {
    "depth": 2,
    "slug": "segments",
    "text": "Segments"
  }, {
    "depth": 2,
    "slug": "offsets",
    "text": "Offsets"
  }, {
    "depth": 1,
    "slug": "mini-notation-exercise",
    "text": "Mini-notation exercise"
  }];
}
function _createMdxContent$b(props) {
  const _components = Object.assign({
    h1: "h1",
    a: "a",
    span: "span",
    p: "p",
    code: "code",
    em: "em",
    h2: "h2"
  }, props.components);
  return createVNode(Fragment, {
    children: [createVNode(_components.h1, {
      id: "mini-notation",
      children: [createVNode(_components.a, {
        "aria-hidden": "true",
        tabIndex: "-1",
        href: "#mini-notation",
        children: createVNode(_components.span, {
          className: "icon icon-link"
        })
      }), "Mini-notation"]
    }), "\n", createVNode(_components.p, {
      children: ["Similar to ", createVNode(_components.a, {
        href: "https://tidalcycles.org/docs/",
        children: "Haskell Tidal Cycles"
      }), ", Strudel has an \u201Cembedded mini-notation\u201D (also called a ", createVNode(_components.a, {
        href: "https://en.wikipedia.org/wiki/Domain-specific_language",
        children: "domain-specific language, or DSL"
      }), ") that is designed for writing rhythmic patterns using little amounts of text.\nIf you\u2019ve seen any Tidal code before, you may have noticed the mini-notation and wondered what it\u2019s all about.\nIt\u2019s one of the main features of Tidal, and although it might look like a strange way to notate music and other patterns, you will soon see how powerful it can be."]
    }), "\n", createVNode(_components.p, {
      children: "Before diving deeper into the details, here is a flavour of how the mini-notation looks like:"
    }), "\n", createVNode(MiniRepl, {
      "client:idle": true,
      tune: `note(\`[
  [
    [e5 [b4 c5] d5 [c5 b4]]
    [a4 [a4 c5] e5 [d5 c5]]
    [b4 [~ c5] d5 e5]
    [c5 a4 a4 ~]
    [[~ d5] [~ f5] a5 [g5 f5]]
    [e5 [~ c5] e5 [d5 c5]]
    [b4 [b4 c5] d5 e5]
    [c5 a4 a4 ~]
  ],[
    [[e2 e3]*4]
    [[a2 a3]*4]
    [[g#2 g#3]*2 [e2 e3]*2]
    [a2 a3 a2 a3 a2 a3 b1 c2]
    [[d2 d3]*4]
    [[c2 c3]*4]
    [[b1 b2]*2 [e2 e3]*2]
    [[a1 a2]*4]
  ]
]/16\`)`,
      "client:component-path": "/Users/michaelgogins/cloud-music/strudel/website/src/docs/MiniRepl",
      "client:component-export": "MiniRepl",
      "client:component-hydration": true
    }), "\n", createVNode(_components.p, {
      children: "Note that the snippet above is enclosed in backticks (`), which allows you to write multi-line strings."
    }), "\n", createVNode(_components.p, {
      children: ["You can also use regular double quotes (", createVNode(_components.code, {
        children: "\""
      }), ") for single line mini-notation, as we have done already."]
    }), "\n", createVNode(_components.h1, {
      id: "sequences-of-events-in-a-cycle",
      children: [createVNode(_components.a, {
        "aria-hidden": "true",
        tabIndex: "-1",
        href: "#sequences-of-events-in-a-cycle",
        children: createVNode(_components.span, {
          className: "icon icon-link"
        })
      }), "Sequences of events in a cycle"]
    }), "\n", createVNode(_components.p, {
      children: "We can play more notes by separating them with spaces:"
    }), "\n", createVNode(MiniRepl, {
      "client:idle": true,
      tune: "note(\"e5 b4 d5 c5\")",
      withCanvas: true,
      "client:component-path": "/Users/michaelgogins/cloud-music/strudel/website/src/docs/MiniRepl",
      "client:component-export": "MiniRepl",
      "client:component-hydration": true
    }), "\n", createVNode(_components.p, {
      children: "Here, those four notes are squashed into one cycle, so each note is a quarter second long.\nTry adding or removing notes and notice how the tempo changes!"
    }), "\n", createVNode(MiniRepl, {
      "client:idle": true,
      tune: "note(\"e5 b4 d5 c5 e5 b4 d5 c5\")",
      withCanvas: true,
      "client:component-path": "/Users/michaelgogins/cloud-music/strudel/website/src/docs/MiniRepl",
      "client:component-export": "MiniRepl",
      "client:component-hydration": true
    }), "\n", createVNode(_components.p, {
      children: "Note that the overall duration of time does not change, and instead each note length descreases.\nThis is a key idea, as it illustrates the \u2018Cycle\u2019 in TidalCycles!"
    }), "\n", createVNode(_components.p, {
      children: ["Each space-separated note in this sequence is an ", createVNode(_components.em, {
        children: "event"
      }), ".\nThe time duration of each event is based on the speed or tempo of the cycle, and how many events are present.\nTaking the two examples above, we have four and eight events respectively, and since they have the same cycle duration, they each have to fit their events inside the same amount of time."]
    }), "\n", createVNode(_components.p, {
      children: "This is perhaps counter-intuitive if you are used to adding notes in a sequencer or piano roll and the overall length increasing.\nBut, it will begin to make sense as we go through more elements of mini-notation."
    }), "\n", createVNode(_components.h1, {
      id: "division",
      children: [createVNode(_components.a, {
        "aria-hidden": "true",
        tabIndex: "-1",
        href: "#division",
        children: createVNode(_components.span, {
          className: "icon icon-link"
        })
      }), "Division"]
    }), "\n", createVNode(_components.p, {
      children: ["We can slow the sequence down by enclosing it in brackets and dividing it by a number (", createVNode(_components.code, {
        children: "/2"
      }), "):"]
    }), "\n", createVNode(MiniRepl, {
      "client:idle": true,
      tune: "note(\"[e5 b4 d5 c5]/2\")",
      "client:component-path": "/Users/michaelgogins/cloud-music/strudel/website/src/docs/MiniRepl",
      "client:component-export": "MiniRepl",
      "client:component-hydration": true
    }), "\n", createVNode(_components.p, {
      children: ["The division by two means that the sequence will be played over the course of two cycles.\nYou can also use decimal numbers for any tempo you like (", createVNode(_components.code, {
        children: "/2.75"
      }), ")."]
    }), "\n", createVNode(MiniRepl, {
      "client:idle": true,
      tune: "note(\"[e5 b4 d5 c5]/2.75\")",
      "client:component-path": "/Users/michaelgogins/cloud-music/strudel/website/src/docs/MiniRepl",
      "client:component-export": "MiniRepl",
      "client:component-hydration": true
    }), "\n", createVNode(_components.h1, {
      id: "angle-brackets",
      children: [createVNode(_components.a, {
        "aria-hidden": "true",
        tabIndex: "-1",
        href: "#angle-brackets",
        children: createVNode(_components.span, {
          className: "icon icon-link"
        })
      }), "Angle Brackets"]
    }), "\n", createVNode(_components.p, {
      children: ["Using angle brackets ", createVNode(_components.code, {
        children: "<>"
      }), ", we can define the sequence length based on the number of events:"]
    }), "\n", createVNode(MiniRepl, {
      "client:idle": true,
      tune: "note(\"<e5 b4 d5 c5>\")",
      "client:component-path": "/Users/michaelgogins/cloud-music/strudel/website/src/docs/MiniRepl",
      "client:component-export": "MiniRepl",
      "client:component-hydration": true
    }), "\n", createVNode(_components.p, {
      children: "The above snippet is the same as:"
    }), "\n", createVNode(MiniRepl, {
      "client:idle": true,
      tune: "note(\"[e5 b4 d5 c5]/4\")",
      "client:component-path": "/Users/michaelgogins/cloud-music/strudel/website/src/docs/MiniRepl",
      "client:component-export": "MiniRepl",
      "client:component-hydration": true
    }), "\n", createVNode(_components.p, {
      children: "The advantage of the angle brackets, is that we can add more events without needing to change the number at the end."
    }), "\n", createVNode(MiniRepl, {
      "client:idle": true,
      tune: "note(\"<e5 b4 d5 c5 e5>\")",
      "client:component-path": "/Users/michaelgogins/cloud-music/strudel/website/src/docs/MiniRepl",
      "client:component-export": "MiniRepl",
      "client:component-hydration": true
    }), "\n", createVNode(MiniRepl, {
      "client:idle": true,
      tune: "note(\"<e5 b4 d5 c5 e5 b4>\")",
      "client:component-path": "/Users/michaelgogins/cloud-music/strudel/website/src/docs/MiniRepl",
      "client:component-export": "MiniRepl",
      "client:component-hydration": true
    }), "\n", createVNode(_components.p, {
      children: "This is more similar to traditional music sequencers and piano rolls, where adding a note increases the perceived overall duration."
    }), "\n", createVNode(_components.h1, {
      id: "multiplication",
      children: [createVNode(_components.a, {
        "aria-hidden": "true",
        tabIndex: "-1",
        href: "#multiplication",
        children: createVNode(_components.span, {
          className: "icon icon-link"
        })
      }), "Multiplication"]
    }), "\n", createVNode(_components.p, {
      children: ["Contrary to division, a sequence can be sped up by multiplying it by a number using the asterisk symbol (", createVNode(_components.code, {
        children: "*"
      }), "):"]
    }), "\n", createVNode(MiniRepl, {
      "client:idle": true,
      tune: "note(\"[e5 b4 d5 c5]*2\")",
      "client:component-path": "/Users/michaelgogins/cloud-music/strudel/website/src/docs/MiniRepl",
      "client:component-export": "MiniRepl",
      "client:component-hydration": true
    }), "\n", createVNode(_components.p, {
      children: "The multiplication by two here means that the sequence will play twice a cycle."
    }), "\n", createVNode(_components.p, {
      children: ["As with divisions, multiplications can be decimal (", createVNode(_components.code, {
        children: "*2.75"
      }), "):"]
    }), "\n", createVNode(MiniRepl, {
      "client:idle": true,
      tune: "note(\"[e5 b4 d5 c5]*2.75\")",
      "client:component-path": "/Users/michaelgogins/cloud-music/strudel/website/src/docs/MiniRepl",
      "client:component-export": "MiniRepl",
      "client:component-hydration": true
    }), "\n", createVNode(_components.p, {
      children: ["Actually, this is not true, but this will be ", createVNode(_components.a, {
        href: "https://github.com/tidalcycles/strudel/issues/314",
        children: "fixed"
      }), " :)"]
    }), "\n", createVNode(_components.h1, {
      id: "subdividing-time-with-bracket-nesting",
      children: [createVNode(_components.a, {
        "aria-hidden": "true",
        tabIndex: "-1",
        href: "#subdividing-time-with-bracket-nesting",
        children: createVNode(_components.span, {
          className: "icon icon-link"
        })
      }), "Subdividing time with bracket nesting"]
    }), "\n", createVNode(_components.p, {
      children: ["To create more interesting rhythms, you can ", createVNode(_components.em, {
        children: "nest"
      }), " or ", createVNode(_components.em, {
        children: "enclose"
      }), " sequences (put sequences inside sequences) with brackets ", createVNode(_components.code, {
        children: "[]"
      }), ", like this:"]
    }), "\n", createVNode(_components.p, {
      children: "Compare the difference between the following:"
    }), "\n", createVNode(MiniRepl, {
      "client:idle": true,
      tune: "note(\"e5 b4 c5 d5 c5 b4\")",
      "client:component-path": "/Users/michaelgogins/cloud-music/strudel/website/src/docs/MiniRepl",
      "client:component-export": "MiniRepl",
      "client:component-hydration": true
    }), "\n", createVNode(MiniRepl, {
      "client:idle": true,
      tune: "note(\"e5 [b4 c5] d5 c5 b4\")",
      "client:component-path": "/Users/michaelgogins/cloud-music/strudel/website/src/docs/MiniRepl",
      "client:component-export": "MiniRepl",
      "client:component-hydration": true
    }), "\n", createVNode(MiniRepl, {
      "client:idle": true,
      tune: "note(\"e5 [b4 c5] d5 [c5 b4]\")",
      "client:component-path": "/Users/michaelgogins/cloud-music/strudel/website/src/docs/MiniRepl",
      "client:component-export": "MiniRepl",
      "client:component-hydration": true
    }), "\n", createVNode(MiniRepl, {
      "client:idle": true,
      tune: "note(\"e5 [b4 c5] d5 [c5 b4 d5 e5]\")",
      "client:component-path": "/Users/michaelgogins/cloud-music/strudel/website/src/docs/MiniRepl",
      "client:component-export": "MiniRepl",
      "client:component-hydration": true
    }), "\n", createVNode(MiniRepl, {
      "client:idle": true,
      tune: "note(\"e5 [b4 c5] d5 [c5 b4 [d5 e5]]\")",
      "client:component-path": "/Users/michaelgogins/cloud-music/strudel/website/src/docs/MiniRepl",
      "client:component-export": "MiniRepl",
      "client:component-hydration": true
    }), "\n", createVNode(_components.p, {
      children: ["What\u2019s going on here? When we nest/enclose multiple events inside brackets (", createVNode(_components.code, {
        children: "[]"
      }), "), their duration becomes the length of one event in the outer sequence."]
    }), "\n", createVNode(_components.p, {
      children: "This is a very simple change to make, but it has profound consequences.\nRemember what we said earlier about how the cycles in tidal stay the same length, and the individual event lengths are divided up in this cycle?\nWell, what this means is that in TidalCycles, not only can you divide time any way you want, and you can also subdivide time any way you want!"
    }), "\n", createVNode(_components.h1, {
      id: "rests",
      children: [createVNode(_components.a, {
        "aria-hidden": "true",
        tabIndex: "-1",
        href: "#rests",
        children: createVNode(_components.span, {
          className: "icon icon-link"
        })
      }), "Rests"]
    }), "\n", createVNode(_components.p, {
      children: "The \u201D~\u201D represents a rest, and will create silence between other events:"
    }), "\n", createVNode(MiniRepl, {
      "client:idle": true,
      tune: "note(\"[b4 [~ c5] d5 e5]\")",
      "client:component-path": "/Users/michaelgogins/cloud-music/strudel/website/src/docs/MiniRepl",
      "client:component-export": "MiniRepl",
      "client:component-hydration": true
    }), "\n", createVNode(_components.h1, {
      id: "parallel--polyphony",
      children: [createVNode(_components.a, {
        "aria-hidden": "true",
        tabIndex: "-1",
        href: "#parallel--polyphony",
        children: createVNode(_components.span, {
          className: "icon icon-link"
        })
      }), "Parallel / polyphony"]
    }), "\n", createVNode(_components.p, {
      children: "Using commas, we can play chords.\nThe following are the same:"
    }), "\n", createVNode(MiniRepl, {
      "client:idle": true,
      tune: "note(\"[g3,b3,e4]\")",
      "client:component-path": "/Users/michaelgogins/cloud-music/strudel/website/src/docs/MiniRepl",
      "client:component-export": "MiniRepl",
      "client:component-hydration": true
    }), "\n", createVNode(MiniRepl, {
      "client:idle": true,
      tune: "note(\"g3,b3,e4\")",
      "client:component-path": "/Users/michaelgogins/cloud-music/strudel/website/src/docs/MiniRepl",
      "client:component-export": "MiniRepl",
      "client:component-hydration": true
    }), "\n", createVNode(_components.p, {
      children: "But to play multiple chords in a sequence, we have to wrap them in brackets:"
    }), "\n", createVNode(MiniRepl, {
      "client:idle": true,
      tune: "note(\"<[g3,b3,e4] [a3,c3,e4] [b3,d3,f#4] [b3,e4,g4]>\")",
      "client:component-path": "/Users/michaelgogins/cloud-music/strudel/website/src/docs/MiniRepl",
      "client:component-export": "MiniRepl",
      "client:component-hydration": true
    }), "\n", createVNode(_components.h1, {
      id: "elongation",
      children: [createVNode(_components.a, {
        "aria-hidden": "true",
        tabIndex: "-1",
        href: "#elongation",
        children: createVNode(_components.span, {
          className: "icon icon-link"
        })
      }), "Elongation"]
    }), "\n", createVNode(_components.p, {
      children: "With the \u201D@\u201D symbol, we can specify temporal \u201Cweight\u201D of a sequence child:"
    }), "\n", createVNode(MiniRepl, {
      "client:idle": true,
      tune: "note(\"<[g3,b3,e4]@2 [a3,c3,e4] [b3,d3,f#4]>\")",
      "client:component-path": "/Users/michaelgogins/cloud-music/strudel/website/src/docs/MiniRepl",
      "client:component-export": "MiniRepl",
      "client:component-hydration": true
    }), "\n", createVNode(_components.p, {
      children: "Here, the first chord has a weight of 2, making it twice the length of the other chords. The default weight is 1."
    }), "\n", createVNode(_components.h1, {
      id: "replication",
      children: [createVNode(_components.a, {
        "aria-hidden": "true",
        tabIndex: "-1",
        href: "#replication",
        children: createVNode(_components.span, {
          className: "icon icon-link"
        })
      }), "Replication"]
    }), "\n", createVNode(_components.p, {
      children: "Using \u201D!\u201D we can repeat without speeding up:"
    }), "\n", createVNode(MiniRepl, {
      "client:idle": true,
      tune: "note(\"<[g3,b3,e4]!2 [a3,c3,e4] [b3,d3,f#4]>\")",
      "client:component-path": "/Users/michaelgogins/cloud-music/strudel/website/src/docs/MiniRepl",
      "client:component-export": "MiniRepl",
      "client:component-hydration": true
    }), "\n", createVNode(_components.p, {
      children: ["In essence, the ", createVNode(_components.code, {
        children: "x!n"
      }), " is like a shortcut for ", createVNode(_components.code, {
        children: "[x*n]@n"
      }), "."]
    }), "\n", createVNode(_components.h1, {
      id: "mini-notation-review",
      children: [createVNode(_components.a, {
        "aria-hidden": "true",
        tabIndex: "-1",
        href: "#mini-notation-review",
        children: createVNode(_components.span, {
          className: "icon icon-link"
        })
      }), "Mini-notation review"]
    }), "\n", createVNode(_components.p, {
      children: "To recap what we\u2019ve learned so far, compare the following patterns:"
    }), "\n", createVNode(MiniRepl, {
      "client:idle": true,
      tune: "note(\"<g3 b3 e4 [a3,c3,e4] [b3,d3,f#4]>\")",
      "client:component-path": "/Users/michaelgogins/cloud-music/strudel/website/src/docs/MiniRepl",
      "client:component-export": "MiniRepl",
      "client:component-hydration": true
    }), "\n", createVNode(MiniRepl, {
      "client:idle": true,
      tune: "note(\"<[g3,b3,e4] [a3,c3,e4] [b3,d3,f#4]>\")",
      "client:component-path": "/Users/michaelgogins/cloud-music/strudel/website/src/docs/MiniRepl",
      "client:component-export": "MiniRepl",
      "client:component-hydration": true
    }), "\n", createVNode(MiniRepl, {
      "client:idle": true,
      tune: "note(\"<[g3,b3,e4]/2 [a3,c3,e4] [b3,d3,f#4]>\")",
      "client:component-path": "/Users/michaelgogins/cloud-music/strudel/website/src/docs/MiniRepl",
      "client:component-export": "MiniRepl",
      "client:component-hydration": true
    }), "\n", createVNode(MiniRepl, {
      "client:idle": true,
      tune: "note(\"<[g3,b3,e4]*2 [a3,c3,e4] [b3,d3,f#4]>\")",
      "client:component-path": "/Users/michaelgogins/cloud-music/strudel/website/src/docs/MiniRepl",
      "client:component-export": "MiniRepl",
      "client:component-hydration": true
    }), "\n", createVNode(MiniRepl, {
      "client:idle": true,
      tune: "note(\"<[g3,b3,e4] _ [a3,c3,e4] [b3,d3,f#4]>\")",
      "client:component-path": "/Users/michaelgogins/cloud-music/strudel/website/src/docs/MiniRepl",
      "client:component-export": "MiniRepl",
      "client:component-hydration": true
    }), "\n", createVNode(MiniRepl, {
      "client:idle": true,
      tune: "note(\"<[g3,b3,e4]@2 [a3,c3,e4] [b3,d3,f#4]>\")",
      "client:component-path": "/Users/michaelgogins/cloud-music/strudel/website/src/docs/MiniRepl",
      "client:component-export": "MiniRepl",
      "client:component-hydration": true
    }), "\n", createVNode(MiniRepl, {
      "client:idle": true,
      tune: "note(\"<[g3,b3,e4]!2 [a3,c3,e4] [b3,d3,f#4]>\")",
      "client:component-path": "/Users/michaelgogins/cloud-music/strudel/website/src/docs/MiniRepl",
      "client:component-export": "MiniRepl",
      "client:component-hydration": true
    }), "\n", createVNode(_components.h1, {
      id: "euclidian-rhythms",
      children: [createVNode(_components.a, {
        "aria-hidden": "true",
        tabIndex: "-1",
        href: "#euclidian-rhythms",
        children: createVNode(_components.span, {
          className: "icon icon-link"
        })
      }), "Euclidian rhythms"]
    }), "\n", createVNode(_components.p, {
      children: ["Using round brackets after an event, we can create rhythmical sub-divisions based on three parameters: ", createVNode(_components.code, {
        children: "beats"
      }), ", ", createVNode(_components.code, {
        children: "segments"
      }), " and ", createVNode(_components.code, {
        children: "offset"
      }), ".\nThis algorithm can be found in many different types of music software, and is often referred to as a ", createVNode(_components.a, {
        href: "https://en.wikipedia.org/wiki/Euclidean_rhythm",
        children: "Euclidean rhythm"
      }), " sequencer, after computer scientist Godfriend Toussaint.\nWhy is it interesting? Well, consider the following simple example:"]
    }), "\n", createVNode(MiniRepl, {
      "client:idle": true,
      tune: "s(\"bd(3,8,0)\")",
      "client:component-path": "/Users/michaelgogins/cloud-music/strudel/website/src/docs/MiniRepl",
      "client:component-export": "MiniRepl",
      "client:component-hydration": true
    }), "\n", createVNode(_components.p, {
      children: "Sound familiar?\nThis is a popular Euclidian rhythm going by various names, such as \u201CPop Clave\u201D.\nThese rhythms can be found in all musical cultures, and the Euclidian rhythm algorithm allows us to express them extremely easily.\nWriting this rhythm out in full require describing:"
    }), "\n", createVNode(MiniRepl, {
      "client:idle": true,
      tune: "s(\"bd ~ ~ bd ~ ~ bd ~\")",
      "client:component-path": "/Users/michaelgogins/cloud-music/strudel/website/src/docs/MiniRepl",
      "client:component-export": "MiniRepl",
      "client:component-hydration": true
    }), "\n", createVNode(_components.p, {
      children: "But using the Euclidian rhythm notation, we only need to express \u201C3 beats over 8 segments, starting on position 1\u201D."
    }), "\n", createVNode(_components.p, {
      children: "This makes it easy to write patterns with interesting rhythmic structures and variations that still sound familiar:"
    }), "\n", createVNode(MiniRepl, {
      "client:idle": true,
      tune: "note(\"e5(2,8) b4(3,8) d5(2,8) c5(3,8)\").slow(4)",
      "client:component-path": "/Users/michaelgogins/cloud-music/strudel/website/src/docs/MiniRepl",
      "client:component-export": "MiniRepl",
      "client:component-hydration": true
    }), "\n", createVNode(_components.p, {
      children: ["Note that since the example above does not use the third ", createVNode(_components.code, {
        children: "offset"
      }), " parameter, it can be written simply as ", createVNode(_components.code, {
        children: "\"(3,8)\""
      }), "."]
    }), "\n", createVNode(MiniRepl, {
      "client:idle": true,
      tune: "s(\"bd(3,8)\")",
      "client:component-path": "/Users/michaelgogins/cloud-music/strudel/website/src/docs/MiniRepl",
      "client:component-export": "MiniRepl",
      "client:component-hydration": true
    }), "\n", createVNode(_components.p, {
      children: "Let\u2019s look at those three parameters in detail."
    }), "\n", createVNode(_components.h2, {
      id: "beats",
      children: [createVNode(_components.a, {
        "aria-hidden": "true",
        tabIndex: "-1",
        href: "#beats",
        children: createVNode(_components.span, {
          className: "icon icon-link"
        })
      }), "Beats"]
    }), "\n", createVNode(_components.p, {
      children: [createVNode(_components.code, {
        children: "beats"
      }), ": the first parameter controls how may beats will be played.\nCompare these:"]
    }), "\n", createVNode(MiniRepl, {
      "client:idle": true,
      tune: "s(\"bd(2,8)\")",
      "client:component-path": "/Users/michaelgogins/cloud-music/strudel/website/src/docs/MiniRepl",
      "client:component-export": "MiniRepl",
      "client:component-hydration": true
    }), "\n", createVNode(MiniRepl, {
      "client:idle": true,
      tune: "s(\"bd(5,8)\")",
      "client:component-path": "/Users/michaelgogins/cloud-music/strudel/website/src/docs/MiniRepl",
      "client:component-export": "MiniRepl",
      "client:component-hydration": true
    }), "\n", createVNode(MiniRepl, {
      "client:idle": true,
      tune: "s(\"bd(7,8)\")",
      "client:component-path": "/Users/michaelgogins/cloud-music/strudel/website/src/docs/MiniRepl",
      "client:component-export": "MiniRepl",
      "client:component-hydration": true
    }), "\n", createVNode(_components.h2, {
      id: "segments",
      children: [createVNode(_components.a, {
        "aria-hidden": "true",
        tabIndex: "-1",
        href: "#segments",
        children: createVNode(_components.span, {
          className: "icon icon-link"
        })
      }), "Segments"]
    }), "\n", createVNode(_components.p, {
      children: [createVNode(_components.code, {
        children: "segments"
      }), ": the second parameter controls the total amount of segments the beats will be distributed over:"]
    }), "\n", createVNode(MiniRepl, {
      "client:idle": true,
      tune: "s(\"bd(3,4)\")",
      "client:component-path": "/Users/michaelgogins/cloud-music/strudel/website/src/docs/MiniRepl",
      "client:component-export": "MiniRepl",
      "client:component-hydration": true
    }), "\n", createVNode(MiniRepl, {
      "client:idle": true,
      tune: "s(\"bd(3,8)\")",
      "client:component-path": "/Users/michaelgogins/cloud-music/strudel/website/src/docs/MiniRepl",
      "client:component-export": "MiniRepl",
      "client:component-hydration": true
    }), "\n", createVNode(MiniRepl, {
      "client:idle": true,
      tune: "s(\"bd(3,13)\")",
      "client:component-path": "/Users/michaelgogins/cloud-music/strudel/website/src/docs/MiniRepl",
      "client:component-export": "MiniRepl",
      "client:component-hydration": true
    }), "\n", createVNode(_components.h2, {
      id: "offsets",
      children: [createVNode(_components.a, {
        "aria-hidden": "true",
        tabIndex: "-1",
        href: "#offsets",
        children: createVNode(_components.span, {
          className: "icon icon-link"
        })
      }), "Offsets"]
    }), "\n", createVNode(_components.p, {
      children: [createVNode(_components.code, {
        children: "offset"
      }), ": the third (optional) parameter controls the starting position for distributing the beats.\nWe need a secondary rhythm to hear the difference:"]
    }), "\n", createVNode(MiniRepl, {
      "client:idle": true,
      tune: "s(\"bd(3,8,0), hh cp\")",
      "client:component-path": "/Users/michaelgogins/cloud-music/strudel/website/src/docs/MiniRepl",
      "client:component-export": "MiniRepl",
      "client:component-hydration": true
    }), "\n", createVNode(MiniRepl, {
      "client:idle": true,
      tune: "s(\"bd(3,8,3), hh cp\")",
      "client:component-path": "/Users/michaelgogins/cloud-music/strudel/website/src/docs/MiniRepl",
      "client:component-export": "MiniRepl",
      "client:component-hydration": true
    }), "\n", createVNode(MiniRepl, {
      "client:idle": true,
      tune: "s(\"bd(3,8,5), hh cp\")",
      "client:component-path": "/Users/michaelgogins/cloud-music/strudel/website/src/docs/MiniRepl",
      "client:component-export": "MiniRepl",
      "client:component-hydration": true
    }), "\n", createVNode(_components.h1, {
      id: "mini-notation-exercise",
      children: [createVNode(_components.a, {
        "aria-hidden": "true",
        tabIndex: "-1",
        href: "#mini-notation-exercise",
        children: createVNode(_components.span, {
          className: "icon icon-link"
        })
      }), "Mini-notation exercise"]
    }), "\n", createVNode(_components.p, {
      children: "The most fun thing about the mini-notation, is that everything you have just learned can be combined in various ways!"
    }), "\n", createVNode(_components.p, {
      children: ["Starting with this one ", createVNode(_components.code, {
        children: "n"
      }), ", can you make a ", createVNode(_components.em, {
        children: "pattern string"
      }), " that uses every single mini-notation element above?"]
    }), "\n", createVNode(MiniRepl, {
      "client:idle": true,
      tune: "n(\"60\")",
      "client:component-path": "/Users/michaelgogins/cloud-music/strudel/website/src/docs/MiniRepl",
      "client:component-export": "MiniRepl",
      "client:component-hydration": true
    }), "\n", createVNode("br", {})]
  });
}
function MDXContent$b(props = {}) {
  return createVNode(MDXLayout$b, {
    ...props,
    children: createVNode(_createMdxContent$b, {
      ...props
    })
  });
}

__astro_tag_component__(getHeadings$b, "astro:jsx");
__astro_tag_component__(MDXContent$b, "astro:jsx");
const url$b = "/learn/mini-notation";
const file$b = "/Users/michaelgogins/cloud-music/strudel/website/src/pages/learn/mini-notation.mdx";
function rawContent$b() { throw new Error("MDX does not support rawContent()! If you need to read the Markdown contents to calculate values (ex. reading time), we suggest injecting frontmatter via remark plugins. Learn more on our docs: https://docs.astro.build/en/guides/integrations-guide/mdx/#inject-frontmatter-via-remark-or-rehype-plugins") }function compiledContent$b() { throw new Error("MDX does not support compiledContent()! If you need to read the HTML contents to calculate values (ex. reading time), we suggest injecting frontmatter via rehype plugins. Learn more on our docs: https://docs.astro.build/en/guides/integrations-guide/mdx/#inject-frontmatter-via-remark-or-rehype-plugins") }const Content$b = (props = {}) => MDXContent$b({
											...props,
											components: { Fragment, ...props.components },
										});
Content$b[Symbol.for('astro.needsHeadRendering')] = !Boolean(frontmatter$b.layout);

const _page19 = /*#__PURE__*/Object.freeze(/*#__PURE__*/Object.defineProperty({
	__proto__: null,
	frontmatter: frontmatter$b,
	_internal: _internal$b,
	getHeadings: getHeadings$b,
	url: url$b,
	file: file$b,
	rawContent: rawContent$b,
	compiledContent: compiledContent$b,
	Content: Content$b,
	default: Content$b
}, Symbol.toStringTag, { value: 'Module' }));

const MDXLayout$a = async function ({
  children
}) {
  const Layout = (await import('./chunks/MainLayout.c7eab378.mjs')).default;
  const {
    layout,
    ...content
  } = frontmatter$a;
  content.file = file$a;
  content.url = url$a;
  content.astro = {};
  Object.defineProperty(content.astro, "headings", {
    get() {
      throw new Error('The "astro" property is no longer supported! To access "headings" from your layout, try using "Astro.props.headings."');
    }
  });
  Object.defineProperty(content.astro, "html", {
    get() {
      throw new Error('The "astro" property is no longer supported! To access "html" from your layout, try using "Astro.props.compiledContent()."');
    }
  });
  Object.defineProperty(content.astro, "source", {
    get() {
      throw new Error('The "astro" property is no longer supported! To access "source" from your layout, try using "Astro.props.rawContent()."');
    }
  });
  return createVNode(Layout, {
    file: file$a,
    url: url$a,
    content,
    frontmatter: content,
    headings: getHeadings$a(),
    "server:root": true,
    children
  });
};
const frontmatter$a = {
  "title": "Other Outptuts",
  "description": "Strudel Tutorial",
  "layout": "../../layouts/MainLayout.astro"
};
const _internal$a = {
  injectedFrontmatter: {}
};
function getHeadings$a() {
  return [{
    "depth": 1,
    "slug": "midi-and-osc",
    "text": "MIDI and OSC"
  }, {
    "depth": 1,
    "slug": "midi-api",
    "text": "MIDI API"
  }, {
    "depth": 2,
    "slug": "midioutputname",
    "text": "midi(outputName?)"
  }, {
    "depth": 1,
    "slug": "superdirt-api",
    "text": "SuperDirt API"
  }, {
    "depth": 2,
    "slug": "prequisites",
    "text": "Prequisites"
  }, {
    "depth": 2,
    "slug": "usage",
    "text": "Usage"
  }, {
    "depth": 3,
    "slug": "patternosc",
    "text": "Pattern.osc"
  }, {
    "depth": 2,
    "slug": "superdirt-params",
    "text": "SuperDirt Params"
  }];
}
function _createMdxContent$a(props) {
  const _components = Object.assign({
    h1: "h1",
    a: "a",
    span: "span",
    p: "p",
    h2: "h2",
    code: "code",
    ol: "ol",
    li: "li",
    h3: "h3"
  }, props.components);
  return createVNode(Fragment, {
    children: [createVNode(_components.h1, {
      id: "midi-and-osc",
      children: [createVNode(_components.a, {
        "aria-hidden": "true",
        tabIndex: "-1",
        href: "#midi-and-osc",
        children: createVNode(_components.span, {
          className: "icon icon-link"
        })
      }), "MIDI and OSC"]
    }), "\n", createVNode(_components.p, {
      children: ["The default audio output of Strudel uses the ", createVNode(_components.a, {
        href: "https://developer.mozilla.org/en-US/docs/Web/API/Web_Audio_API",
        children: "Web Audio API"
      }), ".\nIt is also possible to use Strudel with MIDI and OSC / ", createVNode(_components.a, {
        href: "https://github.com/musikinformatik/SuperDirt/",
        children: "SuperDirt"
      }), " instead."]
    }), "\n", createVNode(_components.h1, {
      id: "midi-api",
      children: [createVNode(_components.a, {
        "aria-hidden": "true",
        tabIndex: "-1",
        href: "#midi-api",
        children: createVNode(_components.span, {
          className: "icon icon-link"
        })
      }), "MIDI API"]
    }), "\n", createVNode(_components.p, {
      children: ["Strudel also supports midi via ", createVNode(_components.a, {
        href: "https://npmjs.com/package/webmidi",
        children: "webmidi"
      }), "."]
    }), "\n", createVNode(_components.h2, {
      id: "midioutputname",
      children: [createVNode(_components.a, {
        "aria-hidden": "true",
        tabIndex: "-1",
        href: "#midioutputname",
        children: createVNode(_components.span, {
          className: "icon icon-link"
        })
      }), "midi(outputName?)"]
    }), "\n", createVNode(_components.p, {
      children: "Either connect a midi device or use the IAC Driver (Mac) or Midi Through Port (Linux) for internal midi messages.\nIf no outputName is given, it uses the first midi output it finds."
    }), "\n", createVNode(MiniRepl, {
      "client:idle": true,
      tune: `stack("<C^7 A7 Dm7 G7>".voicings('lefthand'), "<C3 A2 D3 G2>")
  .midi()`,
      "client:component-path": "/Users/michaelgogins/cloud-music/strudel/website/src/docs/MiniRepl",
      "client:component-export": "MiniRepl",
      "client:component-hydration": true
    }), "\n", createVNode(_components.p, {
      children: ["In the console, you will see a log of the available MIDI devices as soon as you run the code, e.g. ", createVNode(_components.code, {
        children: "Midi connected! Using \"Midi Through Port-0\"."
      })]
    }), "\n", createVNode(_components.h1, {
      id: "superdirt-api",
      children: [createVNode(_components.a, {
        "aria-hidden": "true",
        tabIndex: "-1",
        href: "#superdirt-api",
        children: createVNode(_components.span, {
          className: "icon icon-link"
        })
      }), "SuperDirt API"]
    }), "\n", createVNode(_components.p, {
      children: ["In mainline tidal, the actual sound is generated via ", createVNode(_components.a, {
        href: "https://github.com/musikinformatik/SuperDirt/",
        children: "SuperDirt"
      }), ", which runs inside SuperCollider.\nStrudel also supports using ", createVNode(_components.a, {
        href: "https://github.com/musikinformatik/SuperDirt/",
        children: "SuperDirt"
      }), " as a backend, although it requires some developer tooling to run."]
    }), "\n", createVNode(_components.h2, {
      id: "prequisites",
      children: [createVNode(_components.a, {
        "aria-hidden": "true",
        tabIndex: "-1",
        href: "#prequisites",
        children: createVNode(_components.span, {
          className: "icon icon-link"
        })
      }), "Prequisites"]
    }), "\n", createVNode(_components.p, {
      children: ["Getting ", createVNode(_components.a, {
        href: "https://github.com/musikinformatik/SuperDirt/",
        children: "SuperDirt"
      }), " to work with Strudel, you need to"]
    }), "\n", createVNode(_components.ol, {
      children: ["\n", createVNode(_components.li, {
        children: ["install SuperCollider + sc3 plugins, see ", createVNode(_components.a, {
          href: "https://tidalcycles.org/docs/",
          children: "Tidal Docs"
        }), " (Install Tidal) for more info."]
      }), "\n", createVNode(_components.li, {
        children: ["install ", createVNode(_components.a, {
          href: "https://nodejs.org/en/",
          children: "node.js"
        })]
      }), "\n", createVNode(_components.li, {
        children: ["download ", createVNode(_components.a, {
          href: "https://github.com/tidalcycles/strudel/",
          children: "Strudel Repo"
        }), " (or git clone, if you have git installed)"]
      }), "\n", createVNode(_components.li, {
        children: ["run ", createVNode(_components.code, {
          children: "npm i"
        }), " in the strudel directory"]
      }), "\n", createVNode(_components.li, {
        children: ["run ", createVNode(_components.code, {
          children: "npm run osc"
        }), " to start the osc server, which forwards OSC messages from Strudel REPL to SuperCollider"]
      }), "\n"]
    }), "\n", createVNode(_components.p, {
      children: "Now you\u2019re all set!"
    }), "\n", createVNode(_components.h2, {
      id: "usage",
      children: [createVNode(_components.a, {
        "aria-hidden": "true",
        tabIndex: "-1",
        href: "#usage",
        children: createVNode(_components.span, {
          className: "icon icon-link"
        })
      }), "Usage"]
    }), "\n", createVNode(_components.ol, {
      children: ["\n", createVNode(_components.li, {
        children: ["Start SuperCollider, either using SuperCollider IDE or by running ", createVNode(_components.code, {
          children: "sclang"
        }), " in a terminal"]
      }), "\n", createVNode(_components.li, {
        children: ["Open the ", createVNode(_components.a, {
          href: "https://strudel.tidalcycles.org/#cygiYmQgc2QiKS5vc2MoKQ%3D%3D",
          children: "Strudel REPL"
        })]
      }), "\n"]
    }), "\n", createVNode(_components.p, {
      children: "\u2026or test it here:"
    }), "\n", createVNode("astro-client-only", {
      "client:only": "react",
      tune: "s(\"bd sd\").osc()",
      "client:display-name": "MiniRepl",
      "client:component-path": "/Users/michaelgogins/cloud-music/strudel/website/src/docs/MiniRepl",
      "client:component-export": "MiniRepl",
      "client:component-hydration": true
    }), "\n", createVNode(_components.p, {
      children: ["If you now hear sound, congratulations! If not, you can get help on the ", createVNode(_components.a, {
        href: "https://discord.com/invite/HGEdXmRkzT",
        children: "#strudel channel in the TidalCycles discord"
      }), "."]
    }), "\n", createVNode(_components.h3, {
      id: "patternosc",
      children: [createVNode(_components.a, {
        "aria-hidden": "true",
        tabIndex: "-1",
        href: "#patternosc",
        children: createVNode(_components.span, {
          className: "icon icon-link"
        })
      }), "Pattern.osc"]
    }), "\n", createVNode(JsDoc, {
      "client:idle": true,
      name: "Pattern.osc",
      h: 0,
      "client:component-path": "/Users/michaelgogins/cloud-music/strudel/website/src/docs/JsDoc",
      "client:component-export": "JsDoc",
      "client:component-hydration": true
    }), "\n", createVNode(_components.h2, {
      id: "superdirt-params",
      children: [createVNode(_components.a, {
        "aria-hidden": "true",
        tabIndex: "-1",
        href: "#superdirt-params",
        children: createVNode(_components.span, {
          className: "icon icon-link"
        })
      }), "SuperDirt Params"]
    }), "\n", createVNode(_components.p, {
      children: ["The following functions can be used with ", createVNode(_components.a, {
        href: "https://github.com/musikinformatik/SuperDirt/",
        children: "SuperDirt"
      }), ":"]
    }), "\n", createVNode(_components.p, {
      children: createVNode(_components.code, {
        children: "s n note freq channel orbit cutoff resonance hcutoff hresonance bandf bandq djf vowel cut begin end loop fadeTime speed unitA gain amp accelerate crush coarse delay lock leslie lrate lsize pan panspan pansplay room size dry shape squiz waveloss attack decay octave detune tremolodepth"
      })
    }), "\n", createVNode(_components.p, {
      children: ["Please refer to ", createVNode(_components.a, {
        href: "https://tidalcycles.org/",
        children: "Tidal Docs"
      }), " for more info."]
    }), "\n", createVNode("br", {})]
  });
}
function MDXContent$a(props = {}) {
  return createVNode(MDXLayout$a, {
    ...props,
    children: createVNode(_createMdxContent$a, {
      ...props
    })
  });
}

__astro_tag_component__(getHeadings$a, "astro:jsx");
__astro_tag_component__(MDXContent$a, "astro:jsx");
const url$a = "/learn/input-output";
const file$a = "/Users/michaelgogins/cloud-music/strudel/website/src/pages/learn/input-output.mdx";
function rawContent$a() { throw new Error("MDX does not support rawContent()! If you need to read the Markdown contents to calculate values (ex. reading time), we suggest injecting frontmatter via remark plugins. Learn more on our docs: https://docs.astro.build/en/guides/integrations-guide/mdx/#inject-frontmatter-via-remark-or-rehype-plugins") }function compiledContent$a() { throw new Error("MDX does not support compiledContent()! If you need to read the HTML contents to calculate values (ex. reading time), we suggest injecting frontmatter via rehype plugins. Learn more on our docs: https://docs.astro.build/en/guides/integrations-guide/mdx/#inject-frontmatter-via-remark-or-rehype-plugins") }const Content$a = (props = {}) => MDXContent$a({
											...props,
											components: { Fragment, ...props.components },
										});
Content$a[Symbol.for('astro.needsHeadRendering')] = !Boolean(frontmatter$a.layout);

const _page20 = /*#__PURE__*/Object.freeze(/*#__PURE__*/Object.defineProperty({
	__proto__: null,
	frontmatter: frontmatter$a,
	_internal: _internal$a,
	getHeadings: getHeadings$a,
	url: url$a,
	file: file$a,
	rawContent: rawContent$a,
	compiledContent: compiledContent$a,
	Content: Content$a,
	default: Content$a
}, Symbol.toStringTag, { value: 'Module' }));

const MDXLayout$9 = async function ({
  children
}) {
  const Layout = (await import('./chunks/MainLayout.c7eab378.mjs')).default;
  const {
    layout,
    ...content
  } = frontmatter$9;
  content.file = file$9;
  content.url = url$9;
  content.astro = {};
  Object.defineProperty(content.astro, "headings", {
    get() {
      throw new Error('The "astro" property is no longer supported! To access "headings" from your layout, try using "Astro.props.headings."');
    }
  });
  Object.defineProperty(content.astro, "html", {
    get() {
      throw new Error('The "astro" property is no longer supported! To access "html" from your layout, try using "Astro.props.compiledContent()."');
    }
  });
  Object.defineProperty(content.astro, "source", {
    get() {
      throw new Error('The "astro" property is no longer supported! To access "source" from your layout, try using "Astro.props.rawContent()."');
    }
  });
  return createVNode(Layout, {
    file: file$9,
    url: url$9,
    content,
    frontmatter: content,
    headings: getHeadings$9(),
    "server:root": true,
    children
  });
};
const frontmatter$9 = {
  "title": "What is Strudel?",
  "description": "Strudel Tutorial",
  "layout": "../../layouts/MainLayout.astro"
};
const _internal$9 = {
  injectedFrontmatter: {}
};
function getHeadings$9() {
  return [{
    "depth": 1,
    "slug": "functional-javascript-api",
    "text": "Functional JavaScript API"
  }, {
    "depth": 2,
    "slug": "limits-of-mini-notation",
    "text": "Limits of Mini Notation"
  }, {
    "depth": 2,
    "slug": "notes",
    "text": "Notes"
  }, {
    "depth": 2,
    "slug": "alternative-syntax",
    "text": "Alternative Syntax"
  }, {
    "depth": 2,
    "slug": "pattern-factories",
    "text": "Pattern Factories"
  }, {
    "depth": 3,
    "slug": "cat",
    "text": "cat"
  }, {
    "depth": 3,
    "slug": "seq",
    "text": "seq"
  }, {
    "depth": 3,
    "slug": "stack",
    "text": "stack"
  }, {
    "depth": 3,
    "slug": "timecat",
    "text": "timeCat"
  }, {
    "depth": 2,
    "slug": "combining-patterns",
    "text": "Combining Patterns"
  }, {
    "depth": 2,
    "slug": "time-modifiers",
    "text": "Time Modifiers"
  }, {
    "depth": 3,
    "slug": "patternslow",
    "text": "Pattern.slow"
  }, {
    "depth": 3,
    "slug": "patternfast",
    "text": "Pattern.fast"
  }, {
    "depth": 3,
    "slug": "patternearly",
    "text": "Pattern.early"
  }, {
    "depth": 3,
    "slug": "patternlate",
    "text": "Pattern.late"
  }, {
    "depth": 3,
    "slug": "patternlegato",
    "text": "Pattern.legato"
  }, {
    "depth": 3,
    "slug": "patternstruct",
    "text": "Pattern.struct"
  }, {
    "depth": 3,
    "slug": "patterneuclid",
    "text": "Pattern.euclid"
  }, {
    "depth": 3,
    "slug": "patterneuclidlegato",
    "text": "Pattern.euclidLegato"
  }, {
    "depth": 3,
    "slug": "patternrev",
    "text": "Pattern.rev"
  }, {
    "depth": 3,
    "slug": "patterniter",
    "text": "Pattern.iter"
  }, {
    "depth": 3,
    "slug": "patterniterback",
    "text": "Pattern.iterBack"
  }, {
    "depth": 2,
    "slug": "conditional-modifiers",
    "text": "Conditional Modifiers"
  }, {
    "depth": 3,
    "slug": "patternevery",
    "text": "Pattern.every"
  }, {
    "depth": 3,
    "slug": "patternwhen",
    "text": "Pattern.when"
  }, {
    "depth": 2,
    "slug": "accumulation-modifiers",
    "text": "Accumulation Modifiers"
  }, {
    "depth": 3,
    "slug": "patternstack",
    "text": "Pattern.stack"
  }, {
    "depth": 3,
    "slug": "patternsuperimpose",
    "text": "Pattern.superimpose"
  }, {
    "depth": 3,
    "slug": "patternlayer",
    "text": "Pattern.layer"
  }, {
    "depth": 3,
    "slug": "patternoff",
    "text": "Pattern.off"
  }, {
    "depth": 3,
    "slug": "patternecho",
    "text": "Pattern.echo"
  }, {
    "depth": 3,
    "slug": "patternechowith",
    "text": "Pattern.echoWith"
  }, {
    "depth": 2,
    "slug": "concat-modifiers",
    "text": "Concat Modifiers"
  }, {
    "depth": 3,
    "slug": "patternseq",
    "text": "Pattern.seq"
  }, {
    "depth": 3,
    "slug": "patterncat",
    "text": "Pattern.cat"
  }, {
    "depth": 2,
    "slug": "value-modifiers",
    "text": "Value Modifiers"
  }, {
    "depth": 3,
    "slug": "patternadd",
    "text": "Pattern.add"
  }, {
    "depth": 3,
    "slug": "patternsub",
    "text": "Pattern.sub"
  }, {
    "depth": 3,
    "slug": "patternmul",
    "text": "Pattern.mul"
  }, {
    "depth": 3,
    "slug": "patterndiv",
    "text": "Pattern.div"
  }, {
    "depth": 3,
    "slug": "patternround",
    "text": "Pattern.round"
  }, {
    "depth": 3,
    "slug": "patternapply",
    "text": "Pattern.apply"
  }, {
    "depth": 3,
    "slug": "patternrange",
    "text": "Pattern.range"
  }, {
    "depth": 3,
    "slug": "patternchunk",
    "text": "Pattern.chunk"
  }, {
    "depth": 3,
    "slug": "patternchunkback",
    "text": "Pattern.chunkBack"
  }];
}
function _createMdxContent$9(props) {
  const _components = Object.assign({
    h1: "h1",
    a: "a",
    span: "span",
    p: "p",
    h2: "h2",
    code: "code",
    h3: "h3"
  }, props.components);
  return createVNode(Fragment, {
    children: [createVNode(_components.h1, {
      id: "functional-javascript-api",
      children: [createVNode(_components.a, {
        "aria-hidden": "true",
        tabIndex: "-1",
        href: "#functional-javascript-api",
        children: createVNode(_components.span, {
          className: "icon icon-link"
        })
      }), "Functional JavaScript API"]
    }), "\n", createVNode(_components.p, {
      children: "While the mini notation is powerful on its own, there is much more to discover.\nInternally, the mini notation will expand to use the actual functional JavaScript API."
    }), "\n", createVNode(_components.p, {
      children: "For example, this Pattern in Mini Notation:"
    }), "\n", createVNode("astro-client-only", {
      "client:only": "react",
      tune: "note(\"c3 eb3 g3\")",
      "client:display-name": "MiniRepl",
      "client:component-path": "/Users/michaelgogins/cloud-music/strudel/website/src/docs/MiniRepl",
      "client:component-export": "MiniRepl",
      "client:component-hydration": true
    }), "\n", createVNode(_components.p, {
      children: "is equivalent to this Pattern without Mini Notation:"
    }), "\n", createVNode("astro-client-only", {
      "client:only": "react",
      tune: "note(seq(c3, eb3, g3))",
      "client:display-name": "MiniRepl",
      "client:component-path": "/Users/michaelgogins/cloud-music/strudel/website/src/docs/MiniRepl",
      "client:component-export": "MiniRepl",
      "client:component-hydration": true
    }), "\n", createVNode(_components.p, {
      children: "Similarly, there is an equivalent function for every aspect of the mini notation."
    }), "\n", createVNode(_components.p, {
      children: "Which representation to use is a matter of context. As a rule of thumb, you can think of the JavaScript API\nto fit better for the larger context, while mini notation is more practical for individiual rhythms."
    }), "\n", createVNode(_components.h2, {
      id: "limits-of-mini-notation",
      children: [createVNode(_components.a, {
        "aria-hidden": "true",
        tabIndex: "-1",
        href: "#limits-of-mini-notation",
        children: createVNode(_components.span, {
          className: "icon icon-link"
        })
      }), "Limits of Mini Notation"]
    }), "\n", createVNode(_components.p, {
      children: "While the Mini Notation is a powerful way to write rhythms shortly, it also has its limits. Take this example:"
    }), "\n", createVNode(MiniRepl, {
      "client:idle": true,
      tune: `stack(
  note("c2 eb2(3,8)").s('sawtooth').cutoff(800),
  s("bd,~ sd,hh*4")
)`,
      "client:component-path": "/Users/michaelgogins/cloud-music/strudel/website/src/docs/MiniRepl",
      "client:component-export": "MiniRepl",
      "client:component-hydration": true
    }), "\n", createVNode(_components.p, {
      children: ["Here, we are using mini notation for the individual rhythms, while using the function ", createVNode(_components.code, {
        children: "stack"
      }), " to mix them.\nWhile stack is also available as ", createVNode(_components.code, {
        children: ","
      }), " in mini notation, we cannot use it here, because we have different types of sounds."]
    }), "\n", createVNode(_components.h2, {
      id: "notes",
      children: [createVNode(_components.a, {
        "aria-hidden": "true",
        tabIndex: "-1",
        href: "#notes",
        children: createVNode(_components.span, {
          className: "icon icon-link"
        })
      }), "Notes"]
    }), "\n", createVNode(_components.p, {
      children: "Notes are automatically available as variables:"
    }), "\n", createVNode("astro-client-only", {
      "client:only": "react",
      tune: "note(seq(d4, fs4, a4)) // note(\"d4 f#4 a4\")",
      "client:display-name": "MiniRepl",
      "client:component-path": "/Users/michaelgogins/cloud-music/strudel/website/src/docs/MiniRepl",
      "client:component-export": "MiniRepl",
      "client:component-hydration": true
    }), "\n", createVNode(_components.p, {
      children: "An important difference to the mini notation:\nFor sharp notes, the letter \u201Cs\u201D is used instead of \u201D#\u201D, because JavaScript does not support \u201D#\u201D in a variable name."
    }), "\n", createVNode(_components.p, {
      children: "The above is the same as:"
    }), "\n", createVNode("astro-client-only", {
      "client:only": "react",
      tune: "note(seq('d4', 'f#4', 'a4'))",
      "client:display-name": "MiniRepl",
      "client:component-path": "/Users/michaelgogins/cloud-music/strudel/website/src/docs/MiniRepl",
      "client:component-export": "MiniRepl",
      "client:component-hydration": true
    }), "\n", createVNode(_components.p, {
      children: "Using strings, you can also use \u201D#\u201C."
    }), "\n", createVNode(_components.h2, {
      id: "alternative-syntax",
      children: [createVNode(_components.a, {
        "aria-hidden": "true",
        tabIndex: "-1",
        href: "#alternative-syntax",
        children: createVNode(_components.span, {
          className: "icon icon-link"
        })
      }), "Alternative Syntax"]
    }), "\n", createVNode(_components.p, {
      children: "In the above example, we are nesting a function inside a function, which makes reading the parens a little more difficult.\nTo avoid getting to many nested parens, there is an alternative syntax to add a type to a pattern:"
    }), "\n", createVNode("astro-client-only", {
      "client:only": "react",
      tune: "seq(d4, fs4, a4).note()",
      "client:display-name": "MiniRepl",
      "client:component-path": "/Users/michaelgogins/cloud-music/strudel/website/src/docs/MiniRepl",
      "client:component-export": "MiniRepl",
      "client:component-hydration": true
    }), "\n", createVNode(_components.p, {
      children: ["You can use this with any function that declares a type (like ", createVNode(_components.code, {
        children: "n"
      }), ", ", createVNode(_components.code, {
        children: "s"
      }), ", ", createVNode(_components.code, {
        children: "note"
      }), ", ", createVNode(_components.code, {
        children: "freq"
      }), " etc), just make sure to leave the parens empty!"]
    }), "\n", createVNode(_components.h2, {
      id: "pattern-factories",
      children: [createVNode(_components.a, {
        "aria-hidden": "true",
        tabIndex: "-1",
        href: "#pattern-factories",
        children: createVNode(_components.span, {
          className: "icon icon-link"
        })
      }), "Pattern Factories"]
    }), "\n", createVNode(_components.p, {
      children: "The following functions will return a pattern."
    }), "\n", createVNode(_components.h3, {
      id: "cat",
      children: [createVNode(_components.a, {
        "aria-hidden": "true",
        tabIndex: "-1",
        href: "#cat",
        children: createVNode(_components.span, {
          className: "icon icon-link"
        })
      }), "cat"]
    }), "\n", createVNode(JsDoc, {
      "client:idle": true,
      name: "cat",
      h: 0,
      "client:component-path": "/Users/michaelgogins/cloud-music/strudel/website/src/docs/JsDoc",
      "client:component-export": "JsDoc",
      "client:component-hydration": true
    }), "\n", createVNode(_components.h3, {
      id: "seq",
      children: [createVNode(_components.a, {
        "aria-hidden": "true",
        tabIndex: "-1",
        href: "#seq",
        children: createVNode(_components.span, {
          className: "icon icon-link"
        })
      }), "seq"]
    }), "\n", createVNode(JsDoc, {
      "client:idle": true,
      name: "seq",
      h: 0,
      "client:component-path": "/Users/michaelgogins/cloud-music/strudel/website/src/docs/JsDoc",
      "client:component-export": "JsDoc",
      "client:component-hydration": true
    }), "\n", createVNode(_components.h3, {
      id: "stack",
      children: [createVNode(_components.a, {
        "aria-hidden": "true",
        tabIndex: "-1",
        href: "#stack",
        children: createVNode(_components.span, {
          className: "icon icon-link"
        })
      }), "stack"]
    }), "\n", createVNode(JsDoc, {
      "client:idle": true,
      name: "stack",
      h: 0,
      "client:component-path": "/Users/michaelgogins/cloud-music/strudel/website/src/docs/JsDoc",
      "client:component-export": "JsDoc",
      "client:component-hydration": true
    }), "\n", createVNode(_components.h3, {
      id: "timecat",
      children: [createVNode(_components.a, {
        "aria-hidden": "true",
        tabIndex: "-1",
        href: "#timecat",
        children: createVNode(_components.span, {
          className: "icon icon-link"
        })
      }), "timeCat"]
    }), "\n", createVNode(JsDoc, {
      "client:idle": true,
      name: "timeCat",
      h: 0,
      "client:component-path": "/Users/michaelgogins/cloud-music/strudel/website/src/docs/JsDoc",
      "client:component-export": "JsDoc",
      "client:component-hydration": true
    }), "\n", createVNode(_components.h2, {
      id: "combining-patterns",
      children: [createVNode(_components.a, {
        "aria-hidden": "true",
        tabIndex: "-1",
        href: "#combining-patterns",
        children: createVNode(_components.span, {
          className: "icon icon-link"
        })
      }), "Combining Patterns"]
    }), "\n", createVNode(_components.p, {
      children: "You can freely mix JS patterns, mini patterns and values! For example, this pattern:"
    }), "\n", createVNode(MiniRepl, {
      "client:idle": true,
      tune: `cat(
  stack(g3,b3,e4),
  stack(a3,c3,e4),
  stack(b3,d3,fs4),
  stack(b3,e4,g4)
).note()`,
      "client:component-path": "/Users/michaelgogins/cloud-music/strudel/website/src/docs/MiniRepl",
      "client:component-export": "MiniRepl",
      "client:component-hydration": true
    }), "\n", createVNode(_components.p, {
      children: "\u2026is equivalent to:"
    }), "\n", createVNode(MiniRepl, {
      "client:idle": true,
      tune: `cat(
  "g3,b3,e4",
  "a3,c3,e4",
  "b3,d3,f#4",
  "b3,e4,g4"
).note()`,
      "client:component-path": "/Users/michaelgogins/cloud-music/strudel/website/src/docs/MiniRepl",
      "client:component-export": "MiniRepl",
      "client:component-hydration": true
    }), "\n", createVNode(_components.p, {
      children: "\u2026 as well as:"
    }), "\n", createVNode("astro-client-only", {
      "client:only": "react",
      tune: "note(\"<[g3,b3,e4] [a3,c3,e4] [b3,d3,f#4] [b3,e4,g4]>\")",
      "client:display-name": "MiniRepl",
      "client:component-path": "/Users/michaelgogins/cloud-music/strudel/website/src/docs/MiniRepl",
      "client:component-export": "MiniRepl",
      "client:component-hydration": true
    }), "\n", createVNode(_components.p, {
      children: "While mini notation is almost always shorter, it only has a handful of modifiers: * / ! @.\nWhen using JS patterns, there is a lot more you can do."
    }), "\n", createVNode(_components.h2, {
      id: "time-modifiers",
      children: [createVNode(_components.a, {
        "aria-hidden": "true",
        tabIndex: "-1",
        href: "#time-modifiers",
        children: createVNode(_components.span, {
          className: "icon icon-link"
        })
      }), "Time Modifiers"]
    }), "\n", createVNode(_components.p, {
      children: "The following functions modify a pattern temporal structure in some way."
    }), "\n", createVNode(_components.h3, {
      id: "patternslow",
      children: [createVNode(_components.a, {
        "aria-hidden": "true",
        tabIndex: "-1",
        href: "#patternslow",
        children: createVNode(_components.span, {
          className: "icon icon-link"
        })
      }), "Pattern.slow"]
    }), "\n", createVNode(JsDoc, {
      "client:idle": true,
      name: "Pattern.slow",
      h: 0,
      "client:component-path": "/Users/michaelgogins/cloud-music/strudel/website/src/docs/JsDoc",
      "client:component-export": "JsDoc",
      "client:component-hydration": true
    }), "\n", createVNode(_components.h3, {
      id: "patternfast",
      children: [createVNode(_components.a, {
        "aria-hidden": "true",
        tabIndex: "-1",
        href: "#patternfast",
        children: createVNode(_components.span, {
          className: "icon icon-link"
        })
      }), "Pattern.fast"]
    }), "\n", createVNode(JsDoc, {
      "client:idle": true,
      name: "Pattern.fast",
      h: 0,
      "client:component-path": "/Users/michaelgogins/cloud-music/strudel/website/src/docs/JsDoc",
      "client:component-export": "JsDoc",
      "client:component-hydration": true
    }), "\n", createVNode(_components.h3, {
      id: "patternearly",
      children: [createVNode(_components.a, {
        "aria-hidden": "true",
        tabIndex: "-1",
        href: "#patternearly",
        children: createVNode(_components.span, {
          className: "icon icon-link"
        })
      }), "Pattern.early"]
    }), "\n", createVNode(JsDoc, {
      "client:idle": true,
      name: "Pattern.early",
      h: 0,
      "client:component-path": "/Users/michaelgogins/cloud-music/strudel/website/src/docs/JsDoc",
      "client:component-export": "JsDoc",
      "client:component-hydration": true
    }), "\n", createVNode(_components.h3, {
      id: "patternlate",
      children: [createVNode(_components.a, {
        "aria-hidden": "true",
        tabIndex: "-1",
        href: "#patternlate",
        children: createVNode(_components.span, {
          className: "icon icon-link"
        })
      }), "Pattern.late"]
    }), "\n", createVNode(JsDoc, {
      "client:idle": true,
      name: "Pattern.late",
      h: 0,
      "client:component-path": "/Users/michaelgogins/cloud-music/strudel/website/src/docs/JsDoc",
      "client:component-export": "JsDoc",
      "client:component-hydration": true
    }), "\n", createVNode(_components.h3, {
      id: "patternlegato",
      children: [createVNode(_components.a, {
        "aria-hidden": "true",
        tabIndex: "-1",
        href: "#patternlegato",
        children: createVNode(_components.span, {
          className: "icon icon-link"
        })
      }), "Pattern.legato"]
    }), "\n", createVNode(JsDoc, {
      "client:idle": true,
      name: "Pattern.legato",
      h: 0,
      "client:component-path": "/Users/michaelgogins/cloud-music/strudel/website/src/docs/JsDoc",
      "client:component-export": "JsDoc",
      "client:component-hydration": true
    }), "\n", createVNode(_components.h3, {
      id: "patternstruct",
      children: [createVNode(_components.a, {
        "aria-hidden": "true",
        tabIndex: "-1",
        href: "#patternstruct",
        children: createVNode(_components.span, {
          className: "icon icon-link"
        })
      }), "Pattern.struct"]
    }), "\n", createVNode(JsDoc, {
      "client:idle": true,
      name: "Pattern.struct",
      h: 0,
      "client:component-path": "/Users/michaelgogins/cloud-music/strudel/website/src/docs/JsDoc",
      "client:component-export": "JsDoc",
      "client:component-hydration": true
    }), "\n", createVNode(_components.h3, {
      id: "patterneuclid",
      children: [createVNode(_components.a, {
        "aria-hidden": "true",
        tabIndex: "-1",
        href: "#patterneuclid",
        children: createVNode(_components.span, {
          className: "icon icon-link"
        })
      }), "Pattern.euclid"]
    }), "\n", createVNode(JsDoc, {
      "client:idle": true,
      name: "Pattern.euclid",
      h: 0,
      "client:component-path": "/Users/michaelgogins/cloud-music/strudel/website/src/docs/JsDoc",
      "client:component-export": "JsDoc",
      "client:component-hydration": true
    }), "\n", createVNode(_components.h3, {
      id: "patterneuclidlegato",
      children: [createVNode(_components.a, {
        "aria-hidden": "true",
        tabIndex: "-1",
        href: "#patterneuclidlegato",
        children: createVNode(_components.span, {
          className: "icon icon-link"
        })
      }), "Pattern.euclidLegato"]
    }), "\n", createVNode(JsDoc, {
      "client:idle": true,
      name: "Pattern.euclidLegato",
      h: 0,
      "client:component-path": "/Users/michaelgogins/cloud-music/strudel/website/src/docs/JsDoc",
      "client:component-export": "JsDoc",
      "client:component-hydration": true
    }), "\n", createVNode(_components.h3, {
      id: "patternrev",
      children: [createVNode(_components.a, {
        "aria-hidden": "true",
        tabIndex: "-1",
        href: "#patternrev",
        children: createVNode(_components.span, {
          className: "icon icon-link"
        })
      }), "Pattern.rev"]
    }), "\n", createVNode(JsDoc, {
      "client:idle": true,
      name: "Pattern.rev",
      h: 0,
      "client:component-path": "/Users/michaelgogins/cloud-music/strudel/website/src/docs/JsDoc",
      "client:component-export": "JsDoc",
      "client:component-hydration": true
    }), "\n", createVNode(_components.h3, {
      id: "patterniter",
      children: [createVNode(_components.a, {
        "aria-hidden": "true",
        tabIndex: "-1",
        href: "#patterniter",
        children: createVNode(_components.span, {
          className: "icon icon-link"
        })
      }), "Pattern.iter"]
    }), "\n", createVNode(JsDoc, {
      "client:idle": true,
      name: "Pattern.iter",
      h: 0,
      "client:component-path": "/Users/michaelgogins/cloud-music/strudel/website/src/docs/JsDoc",
      "client:component-export": "JsDoc",
      "client:component-hydration": true
    }), "\n", createVNode(_components.h3, {
      id: "patterniterback",
      children: [createVNode(_components.a, {
        "aria-hidden": "true",
        tabIndex: "-1",
        href: "#patterniterback",
        children: createVNode(_components.span, {
          className: "icon icon-link"
        })
      }), "Pattern.iterBack"]
    }), "\n", createVNode(JsDoc, {
      "client:idle": true,
      name: "Pattern.iterBack",
      h: 0,
      "client:component-path": "/Users/michaelgogins/cloud-music/strudel/website/src/docs/JsDoc",
      "client:component-export": "JsDoc",
      "client:component-hydration": true
    }), "\n", createVNode(_components.h2, {
      id: "conditional-modifiers",
      children: [createVNode(_components.a, {
        "aria-hidden": "true",
        tabIndex: "-1",
        href: "#conditional-modifiers",
        children: createVNode(_components.span, {
          className: "icon icon-link"
        })
      }), "Conditional Modifiers"]
    }), "\n", createVNode(_components.h3, {
      id: "patternevery",
      children: [createVNode(_components.a, {
        "aria-hidden": "true",
        tabIndex: "-1",
        href: "#patternevery",
        children: createVNode(_components.span, {
          className: "icon icon-link"
        })
      }), "Pattern.every"]
    }), "\n", createVNode(JsDoc, {
      "client:idle": true,
      name: "Pattern.every",
      h: 0,
      "client:component-path": "/Users/michaelgogins/cloud-music/strudel/website/src/docs/JsDoc",
      "client:component-export": "JsDoc",
      "client:component-hydration": true
    }), "\n", createVNode(_components.h3, {
      id: "patternwhen",
      children: [createVNode(_components.a, {
        "aria-hidden": "true",
        tabIndex: "-1",
        href: "#patternwhen",
        children: createVNode(_components.span, {
          className: "icon icon-link"
        })
      }), "Pattern.when"]
    }), "\n", createVNode(JsDoc, {
      "client:idle": true,
      name: "Pattern.when",
      h: 0,
      "client:component-path": "/Users/michaelgogins/cloud-music/strudel/website/src/docs/JsDoc",
      "client:component-export": "JsDoc",
      "client:component-hydration": true
    }), "\n", createVNode(_components.h2, {
      id: "accumulation-modifiers",
      children: [createVNode(_components.a, {
        "aria-hidden": "true",
        tabIndex: "-1",
        href: "#accumulation-modifiers",
        children: createVNode(_components.span, {
          className: "icon icon-link"
        })
      }), "Accumulation Modifiers"]
    }), "\n", createVNode(_components.h3, {
      id: "patternstack",
      children: [createVNode(_components.a, {
        "aria-hidden": "true",
        tabIndex: "-1",
        href: "#patternstack",
        children: createVNode(_components.span, {
          className: "icon icon-link"
        })
      }), "Pattern.stack"]
    }), "\n", createVNode(JsDoc, {
      "client:idle": true,
      name: "Pattern.stack",
      h: 0,
      "client:component-path": "/Users/michaelgogins/cloud-music/strudel/website/src/docs/JsDoc",
      "client:component-export": "JsDoc",
      "client:component-hydration": true
    }), "\n", createVNode(_components.h3, {
      id: "patternsuperimpose",
      children: [createVNode(_components.a, {
        "aria-hidden": "true",
        tabIndex: "-1",
        href: "#patternsuperimpose",
        children: createVNode(_components.span, {
          className: "icon icon-link"
        })
      }), "Pattern.superimpose"]
    }), "\n", createVNode(JsDoc, {
      "client:idle": true,
      name: "Pattern.superimpose",
      h: 0,
      "client:component-path": "/Users/michaelgogins/cloud-music/strudel/website/src/docs/JsDoc",
      "client:component-export": "JsDoc",
      "client:component-hydration": true
    }), "\n", createVNode(_components.h3, {
      id: "patternlayer",
      children: [createVNode(_components.a, {
        "aria-hidden": "true",
        tabIndex: "-1",
        href: "#patternlayer",
        children: createVNode(_components.span, {
          className: "icon icon-link"
        })
      }), "Pattern.layer"]
    }), "\n", createVNode(JsDoc, {
      "client:idle": true,
      name: "Pattern.layer",
      h: 0,
      "client:component-path": "/Users/michaelgogins/cloud-music/strudel/website/src/docs/JsDoc",
      "client:component-export": "JsDoc",
      "client:component-hydration": true
    }), "\n", createVNode(_components.h3, {
      id: "patternoff",
      children: [createVNode(_components.a, {
        "aria-hidden": "true",
        tabIndex: "-1",
        href: "#patternoff",
        children: createVNode(_components.span, {
          className: "icon icon-link"
        })
      }), "Pattern.off"]
    }), "\n", createVNode(JsDoc, {
      "client:idle": true,
      name: "Pattern.off",
      h: 0,
      "client:component-path": "/Users/michaelgogins/cloud-music/strudel/website/src/docs/JsDoc",
      "client:component-export": "JsDoc",
      "client:component-hydration": true
    }), "\n", createVNode(_components.h3, {
      id: "patternecho",
      children: [createVNode(_components.a, {
        "aria-hidden": "true",
        tabIndex: "-1",
        href: "#patternecho",
        children: createVNode(_components.span, {
          className: "icon icon-link"
        })
      }), "Pattern.echo"]
    }), "\n", createVNode(JsDoc, {
      "client:idle": true,
      name: "Pattern.echo",
      h: 0,
      "client:component-path": "/Users/michaelgogins/cloud-music/strudel/website/src/docs/JsDoc",
      "client:component-export": "JsDoc",
      "client:component-hydration": true
    }), "\n", createVNode(_components.h3, {
      id: "patternechowith",
      children: [createVNode(_components.a, {
        "aria-hidden": "true",
        tabIndex: "-1",
        href: "#patternechowith",
        children: createVNode(_components.span, {
          className: "icon icon-link"
        })
      }), "Pattern.echoWith"]
    }), "\n", createVNode(JsDoc, {
      "client:idle": true,
      name: "Pattern.echoWith",
      h: 0,
      "client:component-path": "/Users/michaelgogins/cloud-music/strudel/website/src/docs/JsDoc",
      "client:component-export": "JsDoc",
      "client:component-hydration": true
    }), "\n", createVNode(_components.h2, {
      id: "concat-modifiers",
      children: [createVNode(_components.a, {
        "aria-hidden": "true",
        tabIndex: "-1",
        href: "#concat-modifiers",
        children: createVNode(_components.span, {
          className: "icon icon-link"
        })
      }), "Concat Modifiers"]
    }), "\n", createVNode(_components.h3, {
      id: "patternseq",
      children: [createVNode(_components.a, {
        "aria-hidden": "true",
        tabIndex: "-1",
        href: "#patternseq",
        children: createVNode(_components.span, {
          className: "icon icon-link"
        })
      }), "Pattern.seq"]
    }), "\n", createVNode(JsDoc, {
      "client:idle": true,
      name: "Pattern.seq",
      h: 0,
      "client:component-path": "/Users/michaelgogins/cloud-music/strudel/website/src/docs/JsDoc",
      "client:component-export": "JsDoc",
      "client:component-hydration": true
    }), "\n", createVNode(_components.h3, {
      id: "patterncat",
      children: [createVNode(_components.a, {
        "aria-hidden": "true",
        tabIndex: "-1",
        href: "#patterncat",
        children: createVNode(_components.span, {
          className: "icon icon-link"
        })
      }), "Pattern.cat"]
    }), "\n", createVNode(JsDoc, {
      "client:idle": true,
      name: "Pattern.cat",
      h: 0,
      "client:component-path": "/Users/michaelgogins/cloud-music/strudel/website/src/docs/JsDoc",
      "client:component-export": "JsDoc",
      "client:component-hydration": true
    }), "\n", createVNode(_components.h2, {
      id: "value-modifiers",
      children: [createVNode(_components.a, {
        "aria-hidden": "true",
        tabIndex: "-1",
        href: "#value-modifiers",
        children: createVNode(_components.span, {
          className: "icon icon-link"
        })
      }), "Value Modifiers"]
    }), "\n", createVNode(_components.h3, {
      id: "patternadd",
      children: [createVNode(_components.a, {
        "aria-hidden": "true",
        tabIndex: "-1",
        href: "#patternadd",
        children: createVNode(_components.span, {
          className: "icon icon-link"
        })
      }), "Pattern.add"]
    }), "\n", createVNode(JsDoc, {
      "client:idle": true,
      name: "Pattern.add",
      h: 0,
      "client:component-path": "/Users/michaelgogins/cloud-music/strudel/website/src/docs/JsDoc",
      "client:component-export": "JsDoc",
      "client:component-hydration": true
    }), "\n", createVNode(_components.h3, {
      id: "patternsub",
      children: [createVNode(_components.a, {
        "aria-hidden": "true",
        tabIndex: "-1",
        href: "#patternsub",
        children: createVNode(_components.span, {
          className: "icon icon-link"
        })
      }), "Pattern.sub"]
    }), "\n", createVNode(JsDoc, {
      "client:idle": true,
      name: "Pattern.sub",
      h: 0,
      "client:component-path": "/Users/michaelgogins/cloud-music/strudel/website/src/docs/JsDoc",
      "client:component-export": "JsDoc",
      "client:component-hydration": true
    }), "\n", createVNode(_components.h3, {
      id: "patternmul",
      children: [createVNode(_components.a, {
        "aria-hidden": "true",
        tabIndex: "-1",
        href: "#patternmul",
        children: createVNode(_components.span, {
          className: "icon icon-link"
        })
      }), "Pattern.mul"]
    }), "\n", createVNode(JsDoc, {
      "client:idle": true,
      name: "Pattern.mul",
      h: 0,
      "client:component-path": "/Users/michaelgogins/cloud-music/strudel/website/src/docs/JsDoc",
      "client:component-export": "JsDoc",
      "client:component-hydration": true
    }), "\n", createVNode(_components.h3, {
      id: "patterndiv",
      children: [createVNode(_components.a, {
        "aria-hidden": "true",
        tabIndex: "-1",
        href: "#patterndiv",
        children: createVNode(_components.span, {
          className: "icon icon-link"
        })
      }), "Pattern.div"]
    }), "\n", createVNode(JsDoc, {
      "client:idle": true,
      name: "Pattern.div",
      h: 0,
      "client:component-path": "/Users/michaelgogins/cloud-music/strudel/website/src/docs/JsDoc",
      "client:component-export": "JsDoc",
      "client:component-hydration": true
    }), "\n", createVNode(_components.h3, {
      id: "patternround",
      children: [createVNode(_components.a, {
        "aria-hidden": "true",
        tabIndex: "-1",
        href: "#patternround",
        children: createVNode(_components.span, {
          className: "icon icon-link"
        })
      }), "Pattern.round"]
    }), "\n", createVNode(JsDoc, {
      "client:idle": true,
      name: "Pattern.round",
      h: 0,
      "client:component-path": "/Users/michaelgogins/cloud-music/strudel/website/src/docs/JsDoc",
      "client:component-export": "JsDoc",
      "client:component-hydration": true
    }), "\n", createVNode(_components.h3, {
      id: "patternapply",
      children: [createVNode(_components.a, {
        "aria-hidden": "true",
        tabIndex: "-1",
        href: "#patternapply",
        children: createVNode(_components.span, {
          className: "icon icon-link"
        })
      }), "Pattern.apply"]
    }), "\n", createVNode(JsDoc, {
      "client:idle": true,
      name: "Pattern.apply",
      h: 0,
      "client:component-path": "/Users/michaelgogins/cloud-music/strudel/website/src/docs/JsDoc",
      "client:component-export": "JsDoc",
      "client:component-hydration": true
    }), "\n", createVNode(_components.h3, {
      id: "patternrange",
      children: [createVNode(_components.a, {
        "aria-hidden": "true",
        tabIndex: "-1",
        href: "#patternrange",
        children: createVNode(_components.span, {
          className: "icon icon-link"
        })
      }), "Pattern.range"]
    }), "\n", createVNode(JsDoc, {
      "client:idle": true,
      name: "Pattern.range",
      h: 0,
      "client:component-path": "/Users/michaelgogins/cloud-music/strudel/website/src/docs/JsDoc",
      "client:component-export": "JsDoc",
      "client:component-hydration": true
    }), "\n", createVNode(_components.h3, {
      id: "patternchunk",
      children: [createVNode(_components.a, {
        "aria-hidden": "true",
        tabIndex: "-1",
        href: "#patternchunk",
        children: createVNode(_components.span, {
          className: "icon icon-link"
        })
      }), "Pattern.chunk"]
    }), "\n", createVNode(JsDoc, {
      "client:idle": true,
      name: "Pattern.chunk",
      h: 0,
      "client:component-path": "/Users/michaelgogins/cloud-music/strudel/website/src/docs/JsDoc",
      "client:component-export": "JsDoc",
      "client:component-hydration": true
    }), "\n", createVNode(_components.h3, {
      id: "patternchunkback",
      children: [createVNode(_components.a, {
        "aria-hidden": "true",
        tabIndex: "-1",
        href: "#patternchunkback",
        children: createVNode(_components.span, {
          className: "icon icon-link"
        })
      }), "Pattern.chunkBack"]
    }), "\n", createVNode(JsDoc, {
      "client:idle": true,
      name: "Pattern.chunkBack",
      h: 0,
      "client:component-path": "/Users/michaelgogins/cloud-music/strudel/website/src/docs/JsDoc",
      "client:component-export": "JsDoc",
      "client:component-hydration": true
    })]
  });
}
function MDXContent$9(props = {}) {
  return createVNode(MDXLayout$9, {
    ...props,
    children: createVNode(_createMdxContent$9, {
      ...props
    })
  });
}

__astro_tag_component__(getHeadings$9, "astro:jsx");
__astro_tag_component__(MDXContent$9, "astro:jsx");
const url$9 = "/learn/functions";
const file$9 = "/Users/michaelgogins/cloud-music/strudel/website/src/pages/learn/functions.mdx";
function rawContent$9() { throw new Error("MDX does not support rawContent()! If you need to read the Markdown contents to calculate values (ex. reading time), we suggest injecting frontmatter via remark plugins. Learn more on our docs: https://docs.astro.build/en/guides/integrations-guide/mdx/#inject-frontmatter-via-remark-or-rehype-plugins") }function compiledContent$9() { throw new Error("MDX does not support compiledContent()! If you need to read the HTML contents to calculate values (ex. reading time), we suggest injecting frontmatter via rehype plugins. Learn more on our docs: https://docs.astro.build/en/guides/integrations-guide/mdx/#inject-frontmatter-via-remark-or-rehype-plugins") }const Content$9 = (props = {}) => MDXContent$9({
											...props,
											components: { Fragment, ...props.components },
										});
Content$9[Symbol.for('astro.needsHeadRendering')] = !Boolean(frontmatter$9.layout);

const _page21 = /*#__PURE__*/Object.freeze(/*#__PURE__*/Object.defineProperty({
	__proto__: null,
	frontmatter: frontmatter$9,
	_internal: _internal$9,
	getHeadings: getHeadings$9,
	url: url$9,
	file: file$9,
	rawContent: rawContent$9,
	compiledContent: compiledContent$9,
	Content: Content$9,
	default: Content$9
}, Symbol.toStringTag, { value: 'Module' }));

const MDXLayout$8 = async function ({
  children
}) {
  const Layout = (await import('./chunks/MainLayout.c7eab378.mjs')).default;
  const {
    layout,
    ...content
  } = frontmatter$8;
  content.file = file$8;
  content.url = url$8;
  content.astro = {};
  Object.defineProperty(content.astro, "headings", {
    get() {
      throw new Error('The "astro" property is no longer supported! To access "headings" from your layout, try using "Astro.props.headings."');
    }
  });
  Object.defineProperty(content.astro, "html", {
    get() {
      throw new Error('The "astro" property is no longer supported! To access "html" from your layout, try using "Astro.props.compiledContent()."');
    }
  });
  Object.defineProperty(content.astro, "source", {
    get() {
      throw new Error('The "astro" property is no longer supported! To access "source" from your layout, try using "Astro.props.rawContent()."');
    }
  });
  return createVNode(Layout, {
    file: file$8,
    url: url$8,
    content,
    frontmatter: content,
    headings: getHeadings$8(),
    "server:root": true,
    children
  });
};
const frontmatter$8 = {
  "title": "Audio effects",
  "description": "Strudel Tutorial - Audio effects",
  "layout": "../../layouts/MainLayout.astro"
};
const _internal$8 = {
  injectedFrontmatter: {}
};
function getHeadings$8() {
  return [{
    "depth": 1,
    "slug": "audio-effects",
    "text": "Audio Effects"
  }, {
    "depth": 1,
    "slug": "bandf",
    "text": "bandf"
  }, {
    "depth": 1,
    "slug": "bandq",
    "text": "bandq"
  }, {
    "depth": 1,
    "slug": "coarse",
    "text": "coarse"
  }, {
    "depth": 1,
    "slug": "crush",
    "text": "crush"
  }, {
    "depth": 1,
    "slug": "cutoff",
    "text": "cutoff"
  }, {
    "depth": 1,
    "slug": "gain",
    "text": "gain"
  }, {
    "depth": 1,
    "slug": "hcutoff",
    "text": "hcutoff"
  }, {
    "depth": 1,
    "slug": "hresonance",
    "text": "hresonance"
  }, {
    "depth": 1,
    "slug": "pan",
    "text": "pan"
  }, {
    "depth": 1,
    "slug": "resonance",
    "text": "resonance"
  }, {
    "depth": 1,
    "slug": "shape",
    "text": "shape"
  }, {
    "depth": 1,
    "slug": "velocity",
    "text": "velocity"
  }, {
    "depth": 1,
    "slug": "vowel",
    "text": "vowel"
  }];
}
function _createMdxContent$8(props) {
  const _components = Object.assign({
    h1: "h1",
    a: "a",
    span: "span",
    p: "p"
  }, props.components);
  return createVNode(Fragment, {
    children: [createVNode(_components.h1, {
      id: "audio-effects",
      children: [createVNode(_components.a, {
        "aria-hidden": "true",
        tabIndex: "-1",
        href: "#audio-effects",
        children: createVNode(_components.span, {
          className: "icon icon-link"
        })
      }), "Audio Effects"]
    }), "\n", createVNode(_components.p, {
      children: "Wether you\u2019re using a synth or a sample, you can apply any of the following built-in audio effects.\nAs you might suspect, the effects can be chained together, and they accept a pattern string as their argument."
    }), "\n", createVNode(_components.h1, {
      id: "bandf",
      children: [createVNode(_components.a, {
        "aria-hidden": "true",
        tabIndex: "-1",
        href: "#bandf",
        children: createVNode(_components.span, {
          className: "icon icon-link"
        })
      }), "bandf"]
    }), "\n", createVNode(JsDoc, {
      "client:idle": true,
      name: "bandf",
      h: 0,
      "client:component-path": "/Users/michaelgogins/cloud-music/strudel/website/src/docs/JsDoc",
      "client:component-export": "JsDoc",
      "client:component-hydration": true
    }), "\n", createVNode(_components.h1, {
      id: "bandq",
      children: [createVNode(_components.a, {
        "aria-hidden": "true",
        tabIndex: "-1",
        href: "#bandq",
        children: createVNode(_components.span, {
          className: "icon icon-link"
        })
      }), "bandq"]
    }), "\n", createVNode(JsDoc, {
      "client:idle": true,
      name: "bandq",
      h: 0,
      "client:component-path": "/Users/michaelgogins/cloud-music/strudel/website/src/docs/JsDoc",
      "client:component-export": "JsDoc",
      "client:component-hydration": true
    }), "\n", createVNode(_components.h1, {
      id: "coarse",
      children: [createVNode(_components.a, {
        "aria-hidden": "true",
        tabIndex: "-1",
        href: "#coarse",
        children: createVNode(_components.span, {
          className: "icon icon-link"
        })
      }), "coarse"]
    }), "\n", createVNode(JsDoc, {
      "client:idle": true,
      name: "coarse",
      h: 0,
      "client:component-path": "/Users/michaelgogins/cloud-music/strudel/website/src/docs/JsDoc",
      "client:component-export": "JsDoc",
      "client:component-hydration": true
    }), "\n", createVNode(_components.h1, {
      id: "crush",
      children: [createVNode(_components.a, {
        "aria-hidden": "true",
        tabIndex: "-1",
        href: "#crush",
        children: createVNode(_components.span, {
          className: "icon icon-link"
        })
      }), "crush"]
    }), "\n", createVNode(JsDoc, {
      "client:idle": true,
      name: "crush",
      h: 0,
      "client:component-path": "/Users/michaelgogins/cloud-music/strudel/website/src/docs/JsDoc",
      "client:component-export": "JsDoc",
      "client:component-hydration": true
    }), "\n", createVNode(_components.h1, {
      id: "cutoff",
      children: [createVNode(_components.a, {
        "aria-hidden": "true",
        tabIndex: "-1",
        href: "#cutoff",
        children: createVNode(_components.span, {
          className: "icon icon-link"
        })
      }), "cutoff"]
    }), "\n", createVNode(JsDoc, {
      "client:idle": true,
      name: "cutoff",
      h: 0,
      "client:component-path": "/Users/michaelgogins/cloud-music/strudel/website/src/docs/JsDoc",
      "client:component-export": "JsDoc",
      "client:component-hydration": true
    }), "\n", createVNode(_components.h1, {
      id: "gain",
      children: [createVNode(_components.a, {
        "aria-hidden": "true",
        tabIndex: "-1",
        href: "#gain",
        children: createVNode(_components.span, {
          className: "icon icon-link"
        })
      }), "gain"]
    }), "\n", createVNode(JsDoc, {
      "client:idle": true,
      name: "gain",
      h: 0,
      "client:component-path": "/Users/michaelgogins/cloud-music/strudel/website/src/docs/JsDoc",
      "client:component-export": "JsDoc",
      "client:component-hydration": true
    }), "\n", createVNode(_components.h1, {
      id: "hcutoff",
      children: [createVNode(_components.a, {
        "aria-hidden": "true",
        tabIndex: "-1",
        href: "#hcutoff",
        children: createVNode(_components.span, {
          className: "icon icon-link"
        })
      }), "hcutoff"]
    }), "\n", createVNode(JsDoc, {
      "client:idle": true,
      name: "hcutoff",
      h: 0,
      "client:component-path": "/Users/michaelgogins/cloud-music/strudel/website/src/docs/JsDoc",
      "client:component-export": "JsDoc",
      "client:component-hydration": true
    }), "\n", createVNode(_components.h1, {
      id: "hresonance",
      children: [createVNode(_components.a, {
        "aria-hidden": "true",
        tabIndex: "-1",
        href: "#hresonance",
        children: createVNode(_components.span, {
          className: "icon icon-link"
        })
      }), "hresonance"]
    }), "\n", createVNode(JsDoc, {
      "client:idle": true,
      name: "hresonance",
      h: 0,
      "client:component-path": "/Users/michaelgogins/cloud-music/strudel/website/src/docs/JsDoc",
      "client:component-export": "JsDoc",
      "client:component-hydration": true
    }), "\n", createVNode(_components.h1, {
      id: "pan",
      children: [createVNode(_components.a, {
        "aria-hidden": "true",
        tabIndex: "-1",
        href: "#pan",
        children: createVNode(_components.span, {
          className: "icon icon-link"
        })
      }), "pan"]
    }), "\n", createVNode(JsDoc, {
      "client:idle": true,
      name: "pan",
      h: 0,
      "client:component-path": "/Users/michaelgogins/cloud-music/strudel/website/src/docs/JsDoc",
      "client:component-export": "JsDoc",
      "client:component-hydration": true
    }), "\n", createVNode(_components.h1, {
      id: "resonance",
      children: [createVNode(_components.a, {
        "aria-hidden": "true",
        tabIndex: "-1",
        href: "#resonance",
        children: createVNode(_components.span, {
          className: "icon icon-link"
        })
      }), "resonance"]
    }), "\n", createVNode(JsDoc, {
      "client:idle": true,
      name: "resonance",
      h: 0,
      "client:component-path": "/Users/michaelgogins/cloud-music/strudel/website/src/docs/JsDoc",
      "client:component-export": "JsDoc",
      "client:component-hydration": true
    }), "\n", createVNode(_components.h1, {
      id: "shape",
      children: [createVNode(_components.a, {
        "aria-hidden": "true",
        tabIndex: "-1",
        href: "#shape",
        children: createVNode(_components.span, {
          className: "icon icon-link"
        })
      }), "shape"]
    }), "\n", createVNode(JsDoc, {
      "client:idle": true,
      name: "shape",
      h: 0,
      "client:component-path": "/Users/michaelgogins/cloud-music/strudel/website/src/docs/JsDoc",
      "client:component-export": "JsDoc",
      "client:component-hydration": true
    }), "\n", createVNode(_components.h1, {
      id: "velocity",
      children: [createVNode(_components.a, {
        "aria-hidden": "true",
        tabIndex: "-1",
        href: "#velocity",
        children: createVNode(_components.span, {
          className: "icon icon-link"
        })
      }), "velocity"]
    }), "\n", createVNode(JsDoc, {
      "client:idle": true,
      name: "velocity",
      h: 0,
      "client:component-path": "/Users/michaelgogins/cloud-music/strudel/website/src/docs/JsDoc",
      "client:component-export": "JsDoc",
      "client:component-hydration": true
    }), "\n", createVNode(_components.h1, {
      id: "vowel",
      children: [createVNode(_components.a, {
        "aria-hidden": "true",
        tabIndex: "-1",
        href: "#vowel",
        children: createVNode(_components.span, {
          className: "icon icon-link"
        })
      }), "vowel"]
    }), "\n", createVNode(JsDoc, {
      "client:idle": true,
      name: "vowel",
      h: 0,
      "client:component-path": "/Users/michaelgogins/cloud-music/strudel/website/src/docs/JsDoc",
      "client:component-export": "JsDoc",
      "client:component-hydration": true
    })]
  });
}
function MDXContent$8(props = {}) {
  return createVNode(MDXLayout$8, {
    ...props,
    children: createVNode(_createMdxContent$8, {
      ...props
    })
  });
}

__astro_tag_component__(getHeadings$8, "astro:jsx");
__astro_tag_component__(MDXContent$8, "astro:jsx");
const url$8 = "/learn/effects";
const file$8 = "/Users/michaelgogins/cloud-music/strudel/website/src/pages/learn/effects.mdx";
function rawContent$8() { throw new Error("MDX does not support rawContent()! If you need to read the Markdown contents to calculate values (ex. reading time), we suggest injecting frontmatter via remark plugins. Learn more on our docs: https://docs.astro.build/en/guides/integrations-guide/mdx/#inject-frontmatter-via-remark-or-rehype-plugins") }function compiledContent$8() { throw new Error("MDX does not support compiledContent()! If you need to read the HTML contents to calculate values (ex. reading time), we suggest injecting frontmatter via rehype plugins. Learn more on our docs: https://docs.astro.build/en/guides/integrations-guide/mdx/#inject-frontmatter-via-remark-or-rehype-plugins") }const Content$8 = (props = {}) => MDXContent$8({
											...props,
											components: { Fragment, ...props.components },
										});
Content$8[Symbol.for('astro.needsHeadRendering')] = !Boolean(frontmatter$8.layout);

const _page22 = /*#__PURE__*/Object.freeze(/*#__PURE__*/Object.defineProperty({
	__proto__: null,
	frontmatter: frontmatter$8,
	_internal: _internal$8,
	getHeadings: getHeadings$8,
	url: url$8,
	file: file$8,
	rawContent: rawContent$8,
	compiledContent: compiledContent$8,
	Content: Content$8,
	default: Content$8
}, Symbol.toStringTag, { value: 'Module' }));

const MDXLayout$7 = async function ({
  children
}) {
  const Layout = (await import('./chunks/MainLayout.c7eab378.mjs')).default;
  const {
    layout,
    ...content
  } = frontmatter$7;
  content.file = file$7;
  content.url = url$7;
  content.astro = {};
  Object.defineProperty(content.astro, "headings", {
    get() {
      throw new Error('The "astro" property is no longer supported! To access "headings" from your layout, try using "Astro.props.headings."');
    }
  });
  Object.defineProperty(content.astro, "html", {
    get() {
      throw new Error('The "astro" property is no longer supported! To access "html" from your layout, try using "Astro.props.compiledContent()."');
    }
  });
  Object.defineProperty(content.astro, "source", {
    get() {
      throw new Error('The "astro" property is no longer supported! To access "source" from your layout, try using "Astro.props.rawContent()."');
    }
  });
  return createVNode(Layout, {
    file: file$7,
    url: url$7,
    content,
    frontmatter: content,
    headings: getHeadings$7(),
    "server:root": true,
    children
  });
};
const frontmatter$7 = {
  "title": "Notes",
  "description": "Strudel Tutorial - Notes",
  "layout": "../../layouts/MainLayout.astro"
};
const _internal$7 = {
  injectedFrontmatter: {}
};
function getHeadings$7() {
  return [{
    "depth": 1,
    "slug": "samples",
    "text": "Samples"
  }, {
    "depth": 1,
    "slug": "default-sample-map",
    "text": "Default Sample Map"
  }, {
    "depth": 1,
    "slug": "custom-sample-maps",
    "text": "Custom Sample Maps"
  }, {
    "depth": 1,
    "slug": "loading-custom-samples",
    "text": "Loading Custom Samples"
  }, {
    "depth": 1,
    "slug": "loading-multiple-samples-per-sound",
    "text": "Loading Multiple Samples per Sound"
  }, {
    "depth": 1,
    "slug": "pitched-sounds",
    "text": "Pitched Sounds"
  }, {
    "depth": 1,
    "slug": "base-pitch",
    "text": "Base Pitch"
  }, {
    "depth": 1,
    "slug": "sampler-effects",
    "text": "Sampler Effects"
  }, {
    "depth": 3,
    "slug": "begin",
    "text": "begin"
  }, {
    "depth": 3,
    "slug": "end",
    "text": "end"
  }, {
    "depth": 3,
    "slug": "loopat",
    "text": "loopAt"
  }, {
    "depth": 3,
    "slug": "chop",
    "text": "chop"
  }];
}
function _createMdxContent$7(props) {
  const _components = Object.assign({
    h1: "h1",
    a: "a",
    span: "span",
    p: "p",
    code: "code",
    ul: "ul",
    li: "li",
    strong: "strong",
    h3: "h3"
  }, props.components);
  return createVNode(Fragment, {
    children: [createVNode(_components.h1, {
      id: "samples",
      children: [createVNode(_components.a, {
        "aria-hidden": "true",
        tabIndex: "-1",
        href: "#samples",
        children: createVNode(_components.span, {
          className: "icon icon-link"
        })
      }), "Samples"]
    }), "\n", createVNode(_components.h1, {
      id: "default-sample-map",
      children: [createVNode(_components.a, {
        "aria-hidden": "true",
        tabIndex: "-1",
        href: "#default-sample-map",
        children: createVNode(_components.span, {
          className: "icon icon-link"
        })
      }), "Default Sample Map"]
    }), "\n", createVNode(_components.p, {
      children: ["As we have seen, ", createVNode(_components.code, {
        children: "s"
      }), " can play back audio samples:"]
    }), "\n", createVNode(MiniRepl, {
      "client:idle": true,
      "client:idle": true,
      tune: "s(\"bd sd,hh*8,misc/2\")",
      "client:component-path": "/Users/michaelgogins/cloud-music/strudel/website/src/docs/MiniRepl",
      "client:component-export": "MiniRepl",
      "client:component-hydration": true
    }), "\n", createVNode(_components.p, {
      children: ["These sounds come from Strudels in-built default \u201Csample map\u201D.\nTo know which sounds are available, open the ", createVNode(_components.a, {
        href: "https://strudel.tidalcycles.org/EmuSP12.json",
        children: "default sample map"
      }), "."]
    }), "\n", createVNode(_components.h1, {
      id: "custom-sample-maps",
      children: [createVNode(_components.a, {
        "aria-hidden": "true",
        tabIndex: "-1",
        href: "#custom-sample-maps",
        children: createVNode(_components.span, {
          className: "icon icon-link"
        })
      }), "Custom Sample Maps"]
    }), "\n", createVNode(_components.p, {
      children: ["You can load your own sample map using the ", createVNode(_components.code, {
        children: "samples"
      }), " function.\nIn this example we create a map using sounds from the default sample map:"]
    }), "\n", createVNode(MiniRepl, {
      "client:idle": true,
      tune: `samples({
  bd: 'bd/BT0AADA.wav',
  sd: 'sd/rytm-01-classic.wav',
  hh: 'hh27/000_hh27closedhh.wav',
}, 'https://raw.githubusercontent.com/tidalcycles/Dirt-Samples/master/');
s("bd sd,hh*8")`,
      "client:component-path": "/Users/michaelgogins/cloud-music/strudel/website/src/docs/MiniRepl",
      "client:component-export": "MiniRepl",
      "client:component-hydration": true
    }), "\n", createVNode(_components.p, {
      children: ["When you load your own samples, you can choose the names that you will then refer to in your pattern string inside the ", createVNode(_components.code, {
        children: "s"
      }), " function.\nCompare with this example which uses the same samples, but with different names."]
    }), "\n", createVNode(MiniRepl, {
      "client:idle": true,
      tune: `samples({
  bassdrum: 'bd/BT0AADA.wav',
  snaredrum: 'sd/rytm-01-classic.wav',
  hihat: 'hh27/000_hh27closedhh.wav',
}, 'https://raw.githubusercontent.com/tidalcycles/Dirt-Samples/master/');
s("bassdrum snaredrum, hihat*8")`,
      "client:component-path": "/Users/michaelgogins/cloud-music/strudel/website/src/docs/MiniRepl",
      "client:component-export": "MiniRepl",
      "client:component-hydration": true
    }), "\n", createVNode(_components.p, {
      children: "Here we have changed the \u201Cmap\u201D to include longer sample names."
    }), "\n", createVNode(_components.h1, {
      id: "loading-custom-samples",
      children: [createVNode(_components.a, {
        "aria-hidden": "true",
        tabIndex: "-1",
        href: "#loading-custom-samples",
        children: createVNode(_components.span, {
          className: "icon icon-link"
        })
      }), "Loading Custom Samples"]
    }), "\n", createVNode(_components.p, {
      children: ["The ", createVNode(_components.code, {
        children: "samples"
      }), " function has two arguments:"]
    }), "\n", createVNode(_components.ul, {
      children: ["\n", createVNode(_components.li, {
        children: ["A ", createVNode(_components.a, {
          href: "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object",
          children: "JavaScript object"
        }), " that maps sound names to audio file paths."]
      }), "\n", createVNode(_components.li, {
        children: ["A base URL that comes before each path describing where the sample folder can be found online.\n", createVNode(_components.ul, {
          children: ["\n", createVNode(_components.li, {
            children: ["Make sure your base URL ends with a slash, while your sample paths do ", createVNode(_components.strong, {
              children: "not"
            }), " begin with one!"]
          }), "\n"]
        }), "\n"]
      }), "\n"]
    }), "\n", createVNode(_components.p, {
      children: ["To see how this looks in practice, compare the ", createVNode(_components.a, {
        href: "https://github.com/tidalcycles/Dirt-Samples",
        children: "DirtSamples GitHub repo"
      }), " with the previous sample map example."]
    }), "\n", createVNode(_components.p, {
      children: "Because GitHub is a popular place for uploading open source samples, it has its own shortcut:"
    }), "\n", createVNode(MiniRepl, {
      "client:idle": true,
      tune: `samples({
  bd: 'bd/BT0AADA.wav',
  sd: 'sd/rytm-01-classic.wav',
  hh: 'hh27/000_hh27closedhh.wav',
}, 'github:tidalcycles/Dirt-Samples/master/');
s("bd sd,hh*8")`,
      "client:component-path": "/Users/michaelgogins/cloud-music/strudel/website/src/docs/MiniRepl",
      "client:component-export": "MiniRepl",
      "client:component-hydration": true
    }), "\n", createVNode(_components.p, {
      children: ["The format is ", createVNode(_components.code, {
        children: "github:user/repo/branch/"
      }), "."]
    }), "\n", createVNode(_components.p, {
      children: ["Let\u2019s see another example, this time based on the following GitHub repo: ", createVNode(_components.a, {
        href: "https://github.com/jarmitage/jarmitage.github.io",
        children: "https://github.com/jarmitage/jarmitage.github.io"
      }), ".\nWe can see there are some guitar samples inside the ", createVNode(_components.code, {
        children: "/samples"
      }), " folder, so let\u2019s try to load them:"]
    }), "\n", createVNode(MiniRepl, {
      "client:idle": true,
      tune: `samples({
  g0: 'samples/guitar/guitar_0.wav',
  g1: 'samples/guitar/guitar_1.wav',
  g2: 'samples/guitar/guitar_2.wav',
  g3: 'samples/guitar/guitar_3.wav',
  g4: 'samples/guitar/guitar_4.wav'
}, 'github:jarmitage/jarmitage.github.io/master/');
s("[g0 g1 g2 g3 g4]/5")`,
      "client:component-path": "/Users/michaelgogins/cloud-music/strudel/website/src/docs/MiniRepl",
      "client:component-export": "MiniRepl",
      "client:component-hydration": true
    }), "\n", createVNode(_components.h1, {
      id: "loading-multiple-samples-per-sound",
      children: [createVNode(_components.a, {
        "aria-hidden": "true",
        tabIndex: "-1",
        href: "#loading-multiple-samples-per-sound",
        children: createVNode(_components.span, {
          className: "icon icon-link"
        })
      }), "Loading Multiple Samples per Sound"]
    }), "\n", createVNode(_components.p, {
      children: "It is also possible, to declare multiple files for one sound, using the array notation:"
    }), "\n", createVNode(MiniRepl, {
      "client:idle": true,
      tune: `samples({
  bd: ['bd/BT0AADA.wav','bd/BT0AAD0.wav'],
  sd: ['sd/rytm-01-classic.wav','sd/rytm-00-hard.wav'],
  hh: ['hh27/000_hh27closedhh.wav','hh/000_hh3closedhh.wav'],
}, 'github:tidalcycles/Dirt-Samples/master/');
s("<bd:0 bd:1>,~ <sd:0 sd:1>,[hh:0 hh:1]*2")`,
      "client:component-path": "/Users/michaelgogins/cloud-music/strudel/website/src/docs/MiniRepl",
      "client:component-export": "MiniRepl",
      "client:component-hydration": true
    }), "\n", createVNode(_components.p, {
      children: ["The ", createVNode(_components.code, {
        children: ":0"
      }), " ", createVNode(_components.code, {
        children: ":1"
      }), " etc. are the indices of the array.\nThe sample number can also be set using ", createVNode(_components.code, {
        children: "n"
      }), ":"]
    }), "\n", createVNode(MiniRepl, {
      "client:idle": true,
      tune: `samples({
  bd: ['bd/BT0AADA.wav','bd/BT0AAD0.wav'],
  sd: ['sd/rytm-01-classic.wav','sd/rytm-00-hard.wav'],
  hh: ['hh27/000_hh27closedhh.wav','hh/000_hh3closedhh.wav'],
}, 'github:tidalcycles/Dirt-Samples/master/');
s("bd,~ sd,hh*4").n("<0 1>")`,
      "client:component-path": "/Users/michaelgogins/cloud-music/strudel/website/src/docs/MiniRepl",
      "client:component-export": "MiniRepl",
      "client:component-hydration": true
    }), "\n", createVNode(_components.p, {
      children: "In that case, we might load our guitar sample map a different way:"
    }), "\n", createVNode(MiniRepl, {
      "client:idle": true,
      tune: `samples({
  guitar: [
    'samples/guitar/guitar_0.wav', 
    'samples/guitar/guitar_1.wav', 
    'samples/guitar/guitar_2.wav', 
    'samples/guitar/guitar_3.wav', 
    'samples/guitar/guitar_4.wav'
  ]
}, 'github:jarmitage/jarmitage.github.io/master/');
s("[guitar:0 guitar:1 guitar:2 guitar:3 guitar:4]/5")`,
      "client:component-path": "/Users/michaelgogins/cloud-music/strudel/website/src/docs/MiniRepl",
      "client:component-export": "MiniRepl",
      "client:component-hydration": true
    }), "\n", createVNode(_components.p, {
      children: ["And as above, we can choose the sample number using ", createVNode(_components.code, {
        children: "n"
      }), " for even more flexibility:"]
    }), "\n", createVNode(MiniRepl, {
      "client:idle": true,
      tune: `samples({
  guitar: [
    'samples/guitar/guitar_0.wav', 
    'samples/guitar/guitar_1.wav', 
    'samples/guitar/guitar_2.wav', 
    'samples/guitar/guitar_3.wav', 
    'samples/guitar/guitar_4.wav'
  ]
}, 'github:jarmitage/jarmitage.github.io/master/');
n("<0 1 2 3 4>").s("guitar")`,
      "client:component-path": "/Users/michaelgogins/cloud-music/strudel/website/src/docs/MiniRepl",
      "client:component-export": "MiniRepl",
      "client:component-hydration": true
    }), "\n", createVNode(_components.h1, {
      id: "pitched-sounds",
      children: [createVNode(_components.a, {
        "aria-hidden": "true",
        tabIndex: "-1",
        href: "#pitched-sounds",
        children: createVNode(_components.span, {
          className: "icon icon-link"
        })
      }), "Pitched Sounds"]
    }), "\n", createVNode(_components.p, {
      children: ["For pitched sounds, you can use ", createVNode(_components.code, {
        children: "note"
      }), ", just like with synths:"]
    }), "\n", createVNode(MiniRepl, {
      "client:idle": true,
      tune: `samples({
  'gtr': 'gtr/0001_cleanC.wav',
}, 'github:tidalcycles/Dirt-Samples/master/');
note("g3 [bb3 c4] <g4 f4 eb4 f3>@2").s('gtr').gain(.5)`,
      "client:component-path": "/Users/michaelgogins/cloud-music/strudel/website/src/docs/MiniRepl",
      "client:component-export": "MiniRepl",
      "client:component-hydration": true
    }), "\n", createVNode(_components.p, {
      children: ["Here, the guitar samples will overlap, because they always play till the end.\nIf we want them to behave more like a synth, we can add ", createVNode(_components.code, {
        children: "clip(1)"
      }), ":"]
    }), "\n", createVNode(MiniRepl, {
      "client:idle": true,
      tune: `samples({
  'gtr': 'gtr/0001_cleanC.wav',
}, 'github:tidalcycles/Dirt-Samples/master/');
note("g3 [bb3 c4] <g4 f4 eb4 f3>@2").s('gtr').clip(1)
  .gain(.5)`,
      "client:component-path": "/Users/michaelgogins/cloud-music/strudel/website/src/docs/MiniRepl",
      "client:component-export": "MiniRepl",
      "client:component-hydration": true
    }), "\n", createVNode(_components.h1, {
      id: "base-pitch",
      children: [createVNode(_components.a, {
        "aria-hidden": "true",
        tabIndex: "-1",
        href: "#base-pitch",
        children: createVNode(_components.span, {
          className: "icon icon-link"
        })
      }), "Base Pitch"]
    }), "\n", createVNode(_components.p, {
      children: "If we have 2 samples with different base pitches, we can make them in tune by specifying the pitch like this:"
    }), "\n", createVNode(MiniRepl, {
      "client:idle": true,
      tune: `samples({
  'gtr': 'gtr/0001_cleanC.wav',
  'moog': { 'g3': 'moog/005_Mighty%20Moog%20G3.wav' },
}, 'github:tidalcycles/Dirt-Samples/master/');
note("g3 [bb3 c4] <g4 f4 eb4 f3>@2").s("gtr,moog").clip(1)
  .gain(.5)`,
      "client:component-path": "/Users/michaelgogins/cloud-music/strudel/website/src/docs/MiniRepl",
      "client:component-export": "MiniRepl",
      "client:component-hydration": true
    }), "\n", createVNode(_components.p, {
      children: ["If a sample has no pitch set, ", createVNode(_components.code, {
        children: "c3"
      }), " is the default."]
    }), "\n", createVNode(_components.p, {
      children: "We can also declare different samples for different regions of the keyboard:"
    }), "\n", createVNode(MiniRepl, {
      "client:idle": true,
      tune: `samples({
  'moog': {
    'g2': 'moog/004_Mighty%20Moog%20G2.wav',
    'g3': 'moog/005_Mighty%20Moog%20G3.wav',
    'g4': 'moog/006_Mighty%20Moog%20G4.wav',
  }}, 'github:tidalcycles/Dirt-Samples/master/');
note("g2!2 <bb2 c3>!2, <c4@3 [<eb4 bb3> g4 f4]>")
  .s('moog').clip(1)
  .gain(.5)`,
      "client:component-path": "/Users/michaelgogins/cloud-music/strudel/website/src/docs/MiniRepl",
      "client:component-export": "MiniRepl",
      "client:component-hydration": true
    }), "\n", createVNode(_components.p, {
      children: "The sampler will always pick the closest matching sample for the current note!"
    }), "\n", createVNode(_components.h1, {
      id: "sampler-effects",
      children: [createVNode(_components.a, {
        "aria-hidden": "true",
        tabIndex: "-1",
        href: "#sampler-effects",
        children: createVNode(_components.span, {
          className: "icon icon-link"
        })
      }), "Sampler Effects"]
    }), "\n", createVNode(_components.p, {
      children: "Below are four different examples of sampler \u201Ceffects\u201D which are functions that can be used to change the behaviour of sample playback.\nNote that most of what you\u2019ve learned already about Tidal mini-notation can be used with these functions too.\nAlmost everything in Tidal can be patterned using strings!"
    }), "\n", createVNode(_components.h3, {
      id: "begin",
      children: [createVNode(_components.a, {
        "aria-hidden": "true",
        tabIndex: "-1",
        href: "#begin",
        children: createVNode(_components.span, {
          className: "icon icon-link"
        })
      }), createVNode(_components.code, {
        children: "begin"
      })]
    }), "\n", createVNode(JsDoc, {
      "client:idle": true,
      name: "Pattern.begin",
      h: 0,
      "client:component-path": "/Users/michaelgogins/cloud-music/strudel/website/src/docs/JsDoc",
      "client:component-export": "JsDoc",
      "client:component-hydration": true
    }), "\n", createVNode(_components.h3, {
      id: "end",
      children: [createVNode(_components.a, {
        "aria-hidden": "true",
        tabIndex: "-1",
        href: "#end",
        children: createVNode(_components.span, {
          className: "icon icon-link"
        })
      }), createVNode(_components.code, {
        children: "end"
      })]
    }), "\n", createVNode(JsDoc, {
      "client:idle": true,
      name: "Pattern.end",
      h: 0,
      "client:component-path": "/Users/michaelgogins/cloud-music/strudel/website/src/docs/JsDoc",
      "client:component-export": "JsDoc",
      "client:component-hydration": true
    }), "\n", createVNode(_components.h3, {
      id: "loopat",
      children: [createVNode(_components.a, {
        "aria-hidden": "true",
        tabIndex: "-1",
        href: "#loopat",
        children: createVNode(_components.span, {
          className: "icon icon-link"
        })
      }), createVNode(_components.code, {
        children: "loopAt"
      })]
    }), "\n", createVNode(JsDoc, {
      "client:idle": true,
      name: "Pattern.loopAt",
      h: 0,
      "client:component-path": "/Users/michaelgogins/cloud-music/strudel/website/src/docs/JsDoc",
      "client:component-export": "JsDoc",
      "client:component-hydration": true
    }), "\n", createVNode(_components.h3, {
      id: "chop",
      children: [createVNode(_components.a, {
        "aria-hidden": "true",
        tabIndex: "-1",
        href: "#chop",
        children: createVNode(_components.span, {
          className: "icon icon-link"
        })
      }), createVNode(_components.code, {
        children: "chop"
      })]
    }), "\n", createVNode(JsDoc, {
      "client:idle": true,
      name: "Pattern.chop",
      h: 0,
      "client:component-path": "/Users/michaelgogins/cloud-music/strudel/website/src/docs/JsDoc",
      "client:component-export": "JsDoc",
      "client:component-hydration": true
    }), "\n", createVNode("br", {})]
  });
}
function MDXContent$7(props = {}) {
  return createVNode(MDXLayout$7, {
    ...props,
    children: createVNode(_createMdxContent$7, {
      ...props
    })
  });
}

__astro_tag_component__(getHeadings$7, "astro:jsx");
__astro_tag_component__(MDXContent$7, "astro:jsx");
const url$7 = "/learn/samples";
const file$7 = "/Users/michaelgogins/cloud-music/strudel/website/src/pages/learn/samples.mdx";
function rawContent$7() { throw new Error("MDX does not support rawContent()! If you need to read the Markdown contents to calculate values (ex. reading time), we suggest injecting frontmatter via remark plugins. Learn more on our docs: https://docs.astro.build/en/guides/integrations-guide/mdx/#inject-frontmatter-via-remark-or-rehype-plugins") }function compiledContent$7() { throw new Error("MDX does not support compiledContent()! If you need to read the HTML contents to calculate values (ex. reading time), we suggest injecting frontmatter via rehype plugins. Learn more on our docs: https://docs.astro.build/en/guides/integrations-guide/mdx/#inject-frontmatter-via-remark-or-rehype-plugins") }const Content$7 = (props = {}) => MDXContent$7({
											...props,
											components: { Fragment, ...props.components },
										});
Content$7[Symbol.for('astro.needsHeadRendering')] = !Boolean(frontmatter$7.layout);

const _page23 = /*#__PURE__*/Object.freeze(/*#__PURE__*/Object.defineProperty({
	__proto__: null,
	frontmatter: frontmatter$7,
	_internal: _internal$7,
	getHeadings: getHeadings$7,
	url: url$7,
	file: file$7,
	rawContent: rawContent$7,
	compiledContent: compiledContent$7,
	Content: Content$7,
	default: Content$7
}, Symbol.toStringTag, { value: 'Module' }));

const MDXLayout$6 = async function ({
  children
}) {
  const Layout = (await import('./chunks/MainLayout.c7eab378.mjs')).default;
  const {
    layout,
    ...content
  } = frontmatter$6;
  content.file = file$6;
  content.url = url$6;
  content.astro = {};
  Object.defineProperty(content.astro, "headings", {
    get() {
      throw new Error('The "astro" property is no longer supported! To access "headings" from your layout, try using "Astro.props.headings."');
    }
  });
  Object.defineProperty(content.astro, "html", {
    get() {
      throw new Error('The "astro" property is no longer supported! To access "html" from your layout, try using "Astro.props.compiledContent()."');
    }
  });
  Object.defineProperty(content.astro, "source", {
    get() {
      throw new Error('The "astro" property is no longer supported! To access "source" from your layout, try using "Astro.props.rawContent()."');
    }
  });
  return createVNode(Layout, {
    file: file$6,
    url: url$6,
    content,
    frontmatter: content,
    headings: getHeadings$6(),
    "server:root": true,
    children
  });
};
const frontmatter$6 = {
  "title": "What is Strudel?",
  "description": "Strudel Tutorial",
  "layout": "../../layouts/MainLayout.astro"
};
const _internal$6 = {
  injectedFrontmatter: {}
};
function getHeadings$6() {
  return [{
    "depth": 1,
    "slug": "continuous-signals",
    "text": "Continuous Signals"
  }, {
    "depth": 2,
    "slug": "saw",
    "text": "saw"
  }, {
    "depth": 2,
    "slug": "sine",
    "text": "sine"
  }, {
    "depth": 2,
    "slug": "cosine",
    "text": "cosine"
  }, {
    "depth": 2,
    "slug": "tri",
    "text": "tri"
  }, {
    "depth": 2,
    "slug": "square",
    "text": "square"
  }, {
    "depth": 2,
    "slug": "ranges-from--1-to-1",
    "text": "Ranges from -1 to 1"
  }, {
    "depth": 2,
    "slug": "rand",
    "text": "rand"
  }, {
    "depth": 2,
    "slug": "perlin",
    "text": "perlin"
  }, {
    "depth": 2,
    "slug": "irand",
    "text": "irand"
  }, {
    "depth": 1,
    "slug": "random-modifiers",
    "text": "Random Modifiers"
  }, {
    "depth": 2,
    "slug": "choosecycles",
    "text": "chooseCycles"
  }, {
    "depth": 2,
    "slug": "patterndegradeby",
    "text": "Pattern.degradeBy"
  }, {
    "depth": 2,
    "slug": "patterndegrade",
    "text": "Pattern.degrade"
  }, {
    "depth": 2,
    "slug": "patternundegradeby",
    "text": "Pattern.undegradeBy"
  }, {
    "depth": 2,
    "slug": "patternsometimesby",
    "text": "Pattern.sometimesBy"
  }, {
    "depth": 2,
    "slug": "patternsometimes",
    "text": "Pattern.sometimes"
  }, {
    "depth": 2,
    "slug": "patternsomecyclesby",
    "text": "Pattern.someCyclesBy"
  }, {
    "depth": 2,
    "slug": "patternsomecycles",
    "text": "Pattern.someCycles"
  }, {
    "depth": 2,
    "slug": "patternoften",
    "text": "Pattern.often"
  }, {
    "depth": 2,
    "slug": "patternrarely",
    "text": "Pattern.rarely"
  }, {
    "depth": 2,
    "slug": "patternalmostnever",
    "text": "Pattern.almostNever"
  }, {
    "depth": 2,
    "slug": "patternalmostalways",
    "text": "Pattern.almostAlways"
  }, {
    "depth": 2,
    "slug": "patternnever",
    "text": "Pattern.never"
  }, {
    "depth": 2,
    "slug": "patternalways",
    "text": "Pattern.always"
  }];
}
function _createMdxContent$6(props) {
  const _components = Object.assign({
    h1: "h1",
    a: "a",
    span: "span",
    p: "p",
    h2: "h2",
    code: "code"
  }, props.components);
  return createVNode(Fragment, {
    children: [createVNode(_components.h1, {
      id: "continuous-signals",
      children: [createVNode(_components.a, {
        "aria-hidden": "true",
        tabIndex: "-1",
        href: "#continuous-signals",
        children: createVNode(_components.span, {
          className: "icon icon-link"
        })
      }), "Continuous Signals"]
    }), "\n", createVNode(_components.p, {
      children: "Signals are patterns with continuous values, meaning they have theoretically infinite steps.\nThey can provide streams of numbers that can be sampled at discrete points in time."
    }), "\n", createVNode(_components.h2, {
      id: "saw",
      children: [createVNode(_components.a, {
        "aria-hidden": "true",
        tabIndex: "-1",
        href: "#saw",
        children: createVNode(_components.span, {
          className: "icon icon-link"
        })
      }), "saw"]
    }), "\n", createVNode(JsDoc, {
      "client:idle": true,
      name: "saw",
      h: 0,
      "client:component-path": "/Users/michaelgogins/cloud-music/strudel/website/src/docs/JsDoc",
      "client:component-export": "JsDoc",
      "client:component-hydration": true
    }), "\n", createVNode(_components.h2, {
      id: "sine",
      children: [createVNode(_components.a, {
        "aria-hidden": "true",
        tabIndex: "-1",
        href: "#sine",
        children: createVNode(_components.span, {
          className: "icon icon-link"
        })
      }), "sine"]
    }), "\n", createVNode(JsDoc, {
      "client:idle": true,
      name: "sine",
      h: 0,
      "client:component-path": "/Users/michaelgogins/cloud-music/strudel/website/src/docs/JsDoc",
      "client:component-export": "JsDoc",
      "client:component-hydration": true
    }), "\n", createVNode(_components.h2, {
      id: "cosine",
      children: [createVNode(_components.a, {
        "aria-hidden": "true",
        tabIndex: "-1",
        href: "#cosine",
        children: createVNode(_components.span, {
          className: "icon icon-link"
        })
      }), "cosine"]
    }), "\n", createVNode(JsDoc, {
      "client:idle": true,
      name: "cosine",
      h: 0,
      "client:component-path": "/Users/michaelgogins/cloud-music/strudel/website/src/docs/JsDoc",
      "client:component-export": "JsDoc",
      "client:component-hydration": true
    }), "\n", createVNode(_components.h2, {
      id: "tri",
      children: [createVNode(_components.a, {
        "aria-hidden": "true",
        tabIndex: "-1",
        href: "#tri",
        children: createVNode(_components.span, {
          className: "icon icon-link"
        })
      }), "tri"]
    }), "\n", createVNode(JsDoc, {
      "client:idle": true,
      name: "tri",
      h: 0,
      "client:component-path": "/Users/michaelgogins/cloud-music/strudel/website/src/docs/JsDoc",
      "client:component-export": "JsDoc",
      "client:component-hydration": true
    }), "\n", createVNode(_components.h2, {
      id: "square",
      children: [createVNode(_components.a, {
        "aria-hidden": "true",
        tabIndex: "-1",
        href: "#square",
        children: createVNode(_components.span, {
          className: "icon icon-link"
        })
      }), "square"]
    }), "\n", createVNode(JsDoc, {
      "client:idle": true,
      name: "square",
      h: 0,
      "client:component-path": "/Users/michaelgogins/cloud-music/strudel/website/src/docs/JsDoc",
      "client:component-export": "JsDoc",
      "client:component-hydration": true
    }), "\n", createVNode(_components.h2, {
      id: "ranges-from--1-to-1",
      children: [createVNode(_components.a, {
        "aria-hidden": "true",
        tabIndex: "-1",
        href: "#ranges-from--1-to-1",
        children: createVNode(_components.span, {
          className: "icon icon-link"
        })
      }), "Ranges from -1 to 1"]
    }), "\n", createVNode(_components.p, {
      children: ["There is also ", createVNode(_components.code, {
        children: "saw2"
      }), ", ", createVNode(_components.code, {
        children: "sine2"
      }), ", ", createVNode(_components.code, {
        children: "cosine2"
      }), ", ", createVNode(_components.code, {
        children: "tri2"
      }), " and ", createVNode(_components.code, {
        children: "square2"
      }), " which have a range from -1 to 1!"]
    }), "\n", createVNode(_components.h2, {
      id: "rand",
      children: [createVNode(_components.a, {
        "aria-hidden": "true",
        tabIndex: "-1",
        href: "#rand",
        children: createVNode(_components.span, {
          className: "icon icon-link"
        })
      }), "rand"]
    }), "\n", createVNode(JsDoc, {
      "client:idle": true,
      name: "rand",
      h: 0,
      "client:component-path": "/Users/michaelgogins/cloud-music/strudel/website/src/docs/JsDoc",
      "client:component-export": "JsDoc",
      "client:component-hydration": true
    }), "\n", createVNode(_components.h2, {
      id: "perlin",
      children: [createVNode(_components.a, {
        "aria-hidden": "true",
        tabIndex: "-1",
        href: "#perlin",
        children: createVNode(_components.span, {
          className: "icon icon-link"
        })
      }), "perlin"]
    }), "\n", createVNode(JsDoc, {
      "client:idle": true,
      name: "perlin",
      h: 0,
      "client:component-path": "/Users/michaelgogins/cloud-music/strudel/website/src/docs/JsDoc",
      "client:component-export": "JsDoc",
      "client:component-hydration": true
    }), "\n", createVNode(_components.h2, {
      id: "irand",
      children: [createVNode(_components.a, {
        "aria-hidden": "true",
        tabIndex: "-1",
        href: "#irand",
        children: createVNode(_components.span, {
          className: "icon icon-link"
        })
      }), "irand"]
    }), "\n", createVNode(JsDoc, {
      "client:idle": true,
      name: "irand",
      h: 0,
      "client:component-path": "/Users/michaelgogins/cloud-music/strudel/website/src/docs/JsDoc",
      "client:component-export": "JsDoc",
      "client:component-hydration": true
    }), "\n", createVNode(_components.h1, {
      id: "random-modifiers",
      children: [createVNode(_components.a, {
        "aria-hidden": "true",
        tabIndex: "-1",
        href: "#random-modifiers",
        children: createVNode(_components.span, {
          className: "icon icon-link"
        })
      }), "Random Modifiers"]
    }), "\n", createVNode(_components.p, {
      children: "These methods add random behavior to your Patterns."
    }), "\n", createVNode(_components.h2, {
      id: "choosecycles",
      children: [createVNode(_components.a, {
        "aria-hidden": "true",
        tabIndex: "-1",
        href: "#choosecycles",
        children: createVNode(_components.span, {
          className: "icon icon-link"
        })
      }), "chooseCycles"]
    }), "\n", createVNode(JsDoc, {
      "client:idle": true,
      name: "chooseCycles",
      h: 0,
      "client:component-path": "/Users/michaelgogins/cloud-music/strudel/website/src/docs/JsDoc",
      "client:component-export": "JsDoc",
      "client:component-hydration": true
    }), "\n", createVNode(_components.h2, {
      id: "patterndegradeby",
      children: [createVNode(_components.a, {
        "aria-hidden": "true",
        tabIndex: "-1",
        href: "#patterndegradeby",
        children: createVNode(_components.span, {
          className: "icon icon-link"
        })
      }), "Pattern.degradeBy"]
    }), "\n", createVNode(JsDoc, {
      "client:idle": true,
      name: "Pattern.degradeBy",
      h: 0,
      "client:component-path": "/Users/michaelgogins/cloud-music/strudel/website/src/docs/JsDoc",
      "client:component-export": "JsDoc",
      "client:component-hydration": true
    }), "\n", createVNode(_components.h2, {
      id: "patterndegrade",
      children: [createVNode(_components.a, {
        "aria-hidden": "true",
        tabIndex: "-1",
        href: "#patterndegrade",
        children: createVNode(_components.span, {
          className: "icon icon-link"
        })
      }), "Pattern.degrade"]
    }), "\n", createVNode(JsDoc, {
      "client:idle": true,
      name: "Pattern.degrade",
      h: 0,
      "client:component-path": "/Users/michaelgogins/cloud-music/strudel/website/src/docs/JsDoc",
      "client:component-export": "JsDoc",
      "client:component-hydration": true
    }), "\n", createVNode(_components.h2, {
      id: "patternundegradeby",
      children: [createVNode(_components.a, {
        "aria-hidden": "true",
        tabIndex: "-1",
        href: "#patternundegradeby",
        children: createVNode(_components.span, {
          className: "icon icon-link"
        })
      }), "Pattern.undegradeBy"]
    }), "\n", createVNode(JsDoc, {
      "client:idle": true,
      name: "Pattern.undegradeBy",
      h: 0,
      "client:component-path": "/Users/michaelgogins/cloud-music/strudel/website/src/docs/JsDoc",
      "client:component-export": "JsDoc",
      "client:component-hydration": true
    }), "\n", createVNode(_components.h2, {
      id: "patternsometimesby",
      children: [createVNode(_components.a, {
        "aria-hidden": "true",
        tabIndex: "-1",
        href: "#patternsometimesby",
        children: createVNode(_components.span, {
          className: "icon icon-link"
        })
      }), "Pattern.sometimesBy"]
    }), "\n", createVNode(JsDoc, {
      "client:idle": true,
      name: "Pattern.sometimesBy",
      h: 0,
      "client:component-path": "/Users/michaelgogins/cloud-music/strudel/website/src/docs/JsDoc",
      "client:component-export": "JsDoc",
      "client:component-hydration": true
    }), "\n", createVNode(_components.h2, {
      id: "patternsometimes",
      children: [createVNode(_components.a, {
        "aria-hidden": "true",
        tabIndex: "-1",
        href: "#patternsometimes",
        children: createVNode(_components.span, {
          className: "icon icon-link"
        })
      }), "Pattern.sometimes"]
    }), "\n", createVNode(JsDoc, {
      "client:idle": true,
      name: "Pattern.sometimes",
      h: 0,
      "client:component-path": "/Users/michaelgogins/cloud-music/strudel/website/src/docs/JsDoc",
      "client:component-export": "JsDoc",
      "client:component-hydration": true
    }), "\n", createVNode(_components.h2, {
      id: "patternsomecyclesby",
      children: [createVNode(_components.a, {
        "aria-hidden": "true",
        tabIndex: "-1",
        href: "#patternsomecyclesby",
        children: createVNode(_components.span, {
          className: "icon icon-link"
        })
      }), "Pattern.someCyclesBy"]
    }), "\n", createVNode(JsDoc, {
      "client:idle": true,
      name: "Pattern.someCyclesBy",
      h: 0,
      "client:component-path": "/Users/michaelgogins/cloud-music/strudel/website/src/docs/JsDoc",
      "client:component-export": "JsDoc",
      "client:component-hydration": true
    }), "\n", createVNode(_components.h2, {
      id: "patternsomecycles",
      children: [createVNode(_components.a, {
        "aria-hidden": "true",
        tabIndex: "-1",
        href: "#patternsomecycles",
        children: createVNode(_components.span, {
          className: "icon icon-link"
        })
      }), "Pattern.someCycles"]
    }), "\n", createVNode(JsDoc, {
      "client:idle": true,
      name: "Pattern.someCycles",
      h: 0,
      "client:component-path": "/Users/michaelgogins/cloud-music/strudel/website/src/docs/JsDoc",
      "client:component-export": "JsDoc",
      "client:component-hydration": true
    }), "\n", createVNode(_components.h2, {
      id: "patternoften",
      children: [createVNode(_components.a, {
        "aria-hidden": "true",
        tabIndex: "-1",
        href: "#patternoften",
        children: createVNode(_components.span, {
          className: "icon icon-link"
        })
      }), "Pattern.often"]
    }), "\n", createVNode(JsDoc, {
      "client:idle": true,
      name: "Pattern.often",
      h: 0,
      "client:component-path": "/Users/michaelgogins/cloud-music/strudel/website/src/docs/JsDoc",
      "client:component-export": "JsDoc",
      "client:component-hydration": true
    }), "\n", createVNode(_components.h2, {
      id: "patternrarely",
      children: [createVNode(_components.a, {
        "aria-hidden": "true",
        tabIndex: "-1",
        href: "#patternrarely",
        children: createVNode(_components.span, {
          className: "icon icon-link"
        })
      }), "Pattern.rarely"]
    }), "\n", createVNode(JsDoc, {
      "client:idle": true,
      name: "Pattern.rarely",
      h: 0,
      "client:component-path": "/Users/michaelgogins/cloud-music/strudel/website/src/docs/JsDoc",
      "client:component-export": "JsDoc",
      "client:component-hydration": true
    }), "\n", createVNode(_components.h2, {
      id: "patternalmostnever",
      children: [createVNode(_components.a, {
        "aria-hidden": "true",
        tabIndex: "-1",
        href: "#patternalmostnever",
        children: createVNode(_components.span, {
          className: "icon icon-link"
        })
      }), "Pattern.almostNever"]
    }), "\n", createVNode(JsDoc, {
      "client:idle": true,
      name: "Pattern.almostNever",
      h: 0,
      "client:component-path": "/Users/michaelgogins/cloud-music/strudel/website/src/docs/JsDoc",
      "client:component-export": "JsDoc",
      "client:component-hydration": true
    }), "\n", createVNode(_components.h2, {
      id: "patternalmostalways",
      children: [createVNode(_components.a, {
        "aria-hidden": "true",
        tabIndex: "-1",
        href: "#patternalmostalways",
        children: createVNode(_components.span, {
          className: "icon icon-link"
        })
      }), "Pattern.almostAlways"]
    }), "\n", createVNode(JsDoc, {
      "client:idle": true,
      name: "Pattern.almostAlways",
      h: 0,
      "client:component-path": "/Users/michaelgogins/cloud-music/strudel/website/src/docs/JsDoc",
      "client:component-export": "JsDoc",
      "client:component-hydration": true
    }), "\n", createVNode(_components.h2, {
      id: "patternnever",
      children: [createVNode(_components.a, {
        "aria-hidden": "true",
        tabIndex: "-1",
        href: "#patternnever",
        children: createVNode(_components.span, {
          className: "icon icon-link"
        })
      }), "Pattern.never"]
    }), "\n", createVNode(JsDoc, {
      "client:idle": true,
      name: "Pattern.never",
      h: 0,
      "client:component-path": "/Users/michaelgogins/cloud-music/strudel/website/src/docs/JsDoc",
      "client:component-export": "JsDoc",
      "client:component-hydration": true
    }), "\n", createVNode(_components.h2, {
      id: "patternalways",
      children: [createVNode(_components.a, {
        "aria-hidden": "true",
        tabIndex: "-1",
        href: "#patternalways",
        children: createVNode(_components.span, {
          className: "icon icon-link"
        })
      }), "Pattern.always"]
    }), "\n", createVNode(JsDoc, {
      "client:idle": true,
      name: "Pattern.always",
      h: 0,
      "client:component-path": "/Users/michaelgogins/cloud-music/strudel/website/src/docs/JsDoc",
      "client:component-export": "JsDoc",
      "client:component-hydration": true
    })]
  });
}
function MDXContent$6(props = {}) {
  return createVNode(MDXLayout$6, {
    ...props,
    children: createVNode(_createMdxContent$6, {
      ...props
    })
  });
}

__astro_tag_component__(getHeadings$6, "astro:jsx");
__astro_tag_component__(MDXContent$6, "astro:jsx");
const url$6 = "/learn/signals";
const file$6 = "/Users/michaelgogins/cloud-music/strudel/website/src/pages/learn/signals.mdx";
function rawContent$6() { throw new Error("MDX does not support rawContent()! If you need to read the Markdown contents to calculate values (ex. reading time), we suggest injecting frontmatter via remark plugins. Learn more on our docs: https://docs.astro.build/en/guides/integrations-guide/mdx/#inject-frontmatter-via-remark-or-rehype-plugins") }function compiledContent$6() { throw new Error("MDX does not support compiledContent()! If you need to read the HTML contents to calculate values (ex. reading time), we suggest injecting frontmatter via rehype plugins. Learn more on our docs: https://docs.astro.build/en/guides/integrations-guide/mdx/#inject-frontmatter-via-remark-or-rehype-plugins") }const Content$6 = (props = {}) => MDXContent$6({
											...props,
											components: { Fragment, ...props.components },
										});
Content$6[Symbol.for('astro.needsHeadRendering')] = !Boolean(frontmatter$6.layout);

const _page24 = /*#__PURE__*/Object.freeze(/*#__PURE__*/Object.defineProperty({
	__proto__: null,
	frontmatter: frontmatter$6,
	_internal: _internal$6,
	getHeadings: getHeadings$6,
	url: url$6,
	file: file$6,
	rawContent: rawContent$6,
	compiledContent: compiledContent$6,
	Content: Content$6,
	default: Content$6
}, Symbol.toStringTag, { value: 'Module' }));

const colorMap = {
  aliceblue: '#f0f8ff',
  antiquewhite: '#faebd7',
  aqua: '#00ffff',
  aquamarine: '#7fffd4',
  azure: '#f0ffff',
  beige: '#f5f5dc',
  bisque: '#ffe4c4',
  black: '#000000',
  blanchedalmond: '#ffebcd',
  blue: '#0000ff',
  blueviolet: '#8a2be2',
  brown: '#a52a2a',
  burlywood: '#deb887',
  cadetblue: '#5f9ea0',
  chartreuse: '#7fff00',
  chocolate: '#d2691e',
  coral: '#ff7f50',
  cornflowerblue: '#6495ed',
  cornsilk: '#fff8dc',
  crimson: '#dc143c',
  cyan: '#00ffff',
  darkblue: '#00008b',
  darkcyan: '#008b8b',
  darkgoldenrod: '#b8860b',
  darkgray: '#a9a9a9',
  darkgreen: '#006400',
  darkgrey: '#a9a9a9',
  darkkhaki: '#bdb76b',
  darkmagenta: '#8b008b',
  darkolivegreen: '#556b2f',
  darkorange: '#ff8c00',
  darkorchid: '#9932cc',
  darkred: '#8b0000',
  darksalmon: '#e9967a',
  darkseagreen: '#8fbc8f',
  darkslateblue: '#483d8b',
  darkslategray: '#2f4f4f',
  darkslategrey: '#2f4f4f',
  darkturquoise: '#00ced1',
  darkviolet: '#9400d3',
  deeppink: '#ff1493',
  deepskyblue: '#00bfff',
  dimgray: '#696969',
  dimgrey: '#696969',
  dodgerblue: '#1e90ff',
  firebrick: '#b22222',
  floralwhite: '#fffaf0',
  forestgreen: '#228b22',
  fuchsia: '#ff00ff',
  gainsboro: '#dcdcdc',
  ghostwhite: '#f8f8ff',
  gold: '#ffd700',
  goldenrod: '#daa520',
  gray: '#808080',
  green: '#008000',
  greenyellow: '#adff2f',
  grey: '#808080',
  honeydew: '#f0fff0',
  hotpink: '#ff69b4',
  indianred: '#cd5c5c',
  indigo: '#4b0082',
  ivory: '#fffff0',
  khaki: '#f0e68c',
  lavender: '#e6e6fa',
  lavenderblush: '#fff0f5',
  lawngreen: '#7cfc00',
  lemonchiffon: '#fffacd',
  lightblue: '#add8e6',
  lightcoral: '#f08080',
  lightcyan: '#e0ffff',
  lightgoldenrodyellow: '#fafad2',
  lightgray: '#d3d3d3',
  lightgreen: '#90ee90',
  lightgrey: '#d3d3d3',
  lightpink: '#ffb6c1',
  lightsalmon: '#ffa07a',
  lightseagreen: '#20b2aa',
  lightskyblue: '#87cefa',
  lightslategray: '#778899',
  lightslategrey: '#778899',
  lightsteelblue: '#b0c4de',
  lightyellow: '#ffffe0',
  lime: '#00ff00',
  limegreen: '#32cd32',
  linen: '#faf0e6',
  magenta: '#ff00ff',
  maroon: '#800000',
  mediumaquamarine: '#66cdaa',
  mediumblue: '#0000cd',
  mediumorchid: '#ba55d3',
  mediumpurple: '#9370db',
  mediumseagreen: '#3cb371',
  mediumslateblue: '#7b68ee',
  mediumspringgreen: '#00fa9a',
  mediumturquoise: '#48d1cc',
  mediumvioletred: '#c71585',
  midnightblue: '#191970',
  mintcream: '#f5fffa',
  mistyrose: '#ffe4e1',
  moccasin: '#ffe4b5',
  navajowhite: '#ffdead',
  navy: '#000080',
  oldlace: '#fdf5e6',
  olive: '#808000',
  olivedrab: '#6b8e23',
  orange: '#ffa500',
  orangered: '#ff4500',
  orchid: '#da70d6',
  palegoldenrod: '#eee8aa',
  palegreen: '#98fb98',
  paleturquoise: '#afeeee',
  palevioletred: '#db7093',
  papayawhip: '#ffefd5',
  peachpuff: '#ffdab9',
  peru: '#cd853f',
  pink: '#ffc0cb',
  plum: '#dda0dd',
  powderblue: '#b0e0e6',
  purple: '#800080',
  red: '#ff0000',
  rosybrown: '#bc8f8f',
  royalblue: '#4169e1',
  saddlebrown: '#8b4513',
  salmon: '#fa8072',
  sandybrown: '#f4a460',
  seagreen: '#2e8b57',
  seashell: '#fff5ee',
  sienna: '#a0522d',
  silver: '#c0c0c0',
  skyblue: '#87ceeb',
  slateblue: '#6a5acd',
  slategray: '#708090',
  slategrey: '#708090',
  snow: '#fffafa',
  springgreen: '#00ff7f',
  steelblue: '#4682b4',
  tan: '#d2b48c',
  teal: '#008080',
  thistle: '#d8bfd8',
  tomato: '#ff6347',
  turquoise: '#40e0d0',
  violet: '#ee82ee',
  wheat: '#f5deb3',
  white: '#ffffff',
  whitesmoke: '#f5f5f5',
  yellow: '#ffff00',
  yellowgreen: '#9acd32',
};

const Colors = () => {
  return /* @__PURE__ */ jsx("div", {
    children: Object.entries(colorMap).map(([name, hex]) => /* @__PURE__ */ jsx("div", {
      className: "py-1",
      children: /* @__PURE__ */ jsxs("div", {
        className: "grid gap-2 grid-cols-3",
        children: [/* @__PURE__ */ jsx("div", {
          children: name
        }), /* @__PURE__ */ jsx("div", {
          style: {
            backgroundColor: hex
          }
        }), /* @__PURE__ */ jsx("div", {
          style: {
            backgroundColor: name,
            color: hex
          },
          children: name
        })]
      })
    }, name))
  });
};
__astro_tag_component__(Colors, "@astrojs/react");

const MDXLayout$5 = async function ({
  children
}) {
  const Layout = (await import('./chunks/MainLayout.c7eab378.mjs')).default;
  const {
    layout,
    ...content
  } = frontmatter$5;
  content.file = file$5;
  content.url = url$5;
  content.astro = {};
  Object.defineProperty(content.astro, "headings", {
    get() {
      throw new Error('The "astro" property is no longer supported! To access "headings" from your layout, try using "Astro.props.headings."');
    }
  });
  Object.defineProperty(content.astro, "html", {
    get() {
      throw new Error('The "astro" property is no longer supported! To access "html" from your layout, try using "Astro.props.compiledContent()."');
    }
  });
  Object.defineProperty(content.astro, "source", {
    get() {
      throw new Error('The "astro" property is no longer supported! To access "source" from your layout, try using "Astro.props.rawContent()."');
    }
  });
  return createVNode(Layout, {
    file: file$5,
    url: url$5,
    content,
    frontmatter: content,
    headings: getHeadings$5(),
    "server:root": true,
    children
  });
};
const frontmatter$5 = {
  "title": "Colors",
  "layout": "../../layouts/MainLayout.astro"
};
const _internal$5 = {
  injectedFrontmatter: {}
};
function getHeadings$5() {
  return [{
    "depth": 1,
    "slug": "colors",
    "text": "Colors"
  }];
}
function _createMdxContent$5(props) {
  const _components = Object.assign({
    h1: "h1",
    a: "a",
    span: "span"
  }, props.components);
  return createVNode(Fragment, {
    children: [createVNode(_components.h1, {
      id: "colors",
      children: [createVNode(_components.a, {
        "aria-hidden": "true",
        tabIndex: "-1",
        href: "#colors",
        children: createVNode(_components.span, {
          className: "icon icon-link"
        })
      }), "Colors"]
    }), "\n", createVNode(Colors, {})]
  });
}
function MDXContent$5(props = {}) {
  return createVNode(MDXLayout$5, {
    ...props,
    children: createVNode(_createMdxContent$5, {
      ...props
    })
  });
}

__astro_tag_component__(getHeadings$5, "astro:jsx");
__astro_tag_component__(MDXContent$5, "astro:jsx");
const url$5 = "/learn/colors";
const file$5 = "/Users/michaelgogins/cloud-music/strudel/website/src/pages/learn/colors.mdx";
function rawContent$5() { throw new Error("MDX does not support rawContent()! If you need to read the Markdown contents to calculate values (ex. reading time), we suggest injecting frontmatter via remark plugins. Learn more on our docs: https://docs.astro.build/en/guides/integrations-guide/mdx/#inject-frontmatter-via-remark-or-rehype-plugins") }function compiledContent$5() { throw new Error("MDX does not support compiledContent()! If you need to read the HTML contents to calculate values (ex. reading time), we suggest injecting frontmatter via rehype plugins. Learn more on our docs: https://docs.astro.build/en/guides/integrations-guide/mdx/#inject-frontmatter-via-remark-or-rehype-plugins") }const Content$5 = (props = {}) => MDXContent$5({
											...props,
											components: { Fragment, ...props.components },
										});
Content$5[Symbol.for('astro.needsHeadRendering')] = !Boolean(frontmatter$5.layout);

const _page25 = /*#__PURE__*/Object.freeze(/*#__PURE__*/Object.defineProperty({
	__proto__: null,
	frontmatter: frontmatter$5,
	_internal: _internal$5,
	getHeadings: getHeadings$5,
	url: url$5,
	file: file$5,
	rawContent: rawContent$5,
	compiledContent: compiledContent$5,
	Content: Content$5,
	default: Content$5
}, Symbol.toStringTag, { value: 'Module' }));

const MDXLayout$4 = async function ({
  children
}) {
  const Layout = (await import('./chunks/MainLayout.c7eab378.mjs')).default;
  const {
    layout,
    ...content
  } = frontmatter$4;
  content.file = file$4;
  content.url = url$4;
  content.astro = {};
  Object.defineProperty(content.astro, "headings", {
    get() {
      throw new Error('The "astro" property is no longer supported! To access "headings" from your layout, try using "Astro.props.headings."');
    }
  });
  Object.defineProperty(content.astro, "html", {
    get() {
      throw new Error('The "astro" property is no longer supported! To access "html" from your layout, try using "Astro.props.compiledContent()."');
    }
  });
  Object.defineProperty(content.astro, "source", {
    get() {
      throw new Error('The "astro" property is no longer supported! To access "source" from your layout, try using "Astro.props.rawContent()."');
    }
  });
  return createVNode(Layout, {
    file: file$4,
    url: url$4,
    content,
    frontmatter: content,
    headings: getHeadings$4(),
    "server:root": true,
    children
  });
};
const frontmatter$4 = {
  "title": "Sounds",
  "description": "Strudel Tutorial - Sounds",
  "layout": "../../layouts/MainLayout.astro"
};
const _internal$4 = {
  injectedFrontmatter: {}
};
function getHeadings$4() {
  return [{
    "depth": 1,
    "slug": "sounds",
    "text": "Sounds"
  }, {
    "depth": 1,
    "slug": "combining-notes-and-sounds",
    "text": "Combining notes and sounds"
  }];
}
function _createMdxContent$4(props) {
  const _components = Object.assign({
    h1: "h1",
    a: "a",
    span: "span",
    p: "p",
    code: "code",
    ul: "ul",
    li: "li",
    em: "em"
  }, props.components);
  return createVNode(Fragment, {
    children: [createVNode(_components.h1, {
      id: "sounds",
      children: [createVNode(_components.a, {
        "aria-hidden": "true",
        tabIndex: "-1",
        href: "#sounds",
        children: createVNode(_components.span, {
          className: "icon icon-link"
        })
      }), "Sounds"]
    }), "\n", createVNode(_components.p, {
      children: ["We can play sounds with ", createVNode(_components.code, {
        children: "s"
      }), ", in two different ways:"]
    }), "\n", createVNode(_components.ul, {
      children: ["\n", createVNode(_components.li, {
        children: [createVNode(_components.code, {
          children: "s"
        }), " can trigger audio samples, where a sound file is loaded in the background and played back:\n", createVNode(MiniRepl, {
          "client:idle": true,
          tune: "s(\"bd hh sd hh\")",
          "client:component-path": "/Users/michaelgogins/cloud-music/strudel/website/src/docs/MiniRepl",
          "client:component-export": "MiniRepl",
          "client:component-hydration": true
        }), "\n"]
      }), "\n", createVNode(_components.li, {
        children: [createVNode(_components.code, {
          children: "s"
        }), " can trigger audio synthesisers, which are synthesised in real-time using code also running in the background:\n", createVNode(MiniRepl, {
          "client:idle": true,
          tune: "s(\"sawtooth square triangle sine\")",
          "client:component-path": "/Users/michaelgogins/cloud-music/strudel/website/src/docs/MiniRepl",
          "client:component-export": "MiniRepl",
          "client:component-hydration": true
        }), "\n"]
      }), "\n"]
    }), "\n", createVNode(_components.p, {
      children: ["You can learn more about both of these approaches in the pages ", createVNode(_components.a, {
        href: "/learn/synths",
        children: "Synths"
      }), " and ", createVNode(_components.a, {
        href: "/learn/samples",
        children: "Samples"
      }), "."]
    }), "\n", createVNode(_components.h1, {
      id: "combining-notes-and-sounds",
      children: [createVNode(_components.a, {
        "aria-hidden": "true",
        tabIndex: "-1",
        href: "#combining-notes-and-sounds",
        children: createVNode(_components.span, {
          className: "icon icon-link"
        })
      }), "Combining notes and sounds"]
    }), "\n", createVNode(_components.p, {
      children: ["In both of the above cases, we are no longer directly controlling the ", createVNode(_components.code, {
        children: "note"
      }), "/", createVNode(_components.code, {
        children: "n"
      }), "/", createVNode(_components.code, {
        children: "freq"
      }), " of the sound heard via ", createVNode(_components.code, {
        children: "s"
      }), ", as we were in the ", createVNode(_components.a, {
        href: "/strudel/notes",
        children: "Notes"
      }), " page."]
    }), "\n", createVNode(_components.p, {
      children: ["So how can we both control the sound and the pitch? We can ", createVNode(_components.em, {
        children: "combine"
      }), " ", createVNode(_components.code, {
        children: "note"
      }), "/", createVNode(_components.code, {
        children: "n"
      }), "/", createVNode(_components.code, {
        children: "freq"
      }), " with ", createVNode(_components.code, {
        children: "s"
      }), " to change the sound of our pitches:"]
    }), "\n", createVNode(MiniRepl, {
      "client:idle": true,
      tune: "note(\"a3 c#4 e4 a4\").s(\"sawtooth\")",
      "client:component-path": "/Users/michaelgogins/cloud-music/strudel/website/src/docs/MiniRepl",
      "client:component-export": "MiniRepl",
      "client:component-hydration": true
    }), "\n", createVNode(MiniRepl, {
      "client:idle": true,
      tune: "n(\"57 61 64 69\").s(\"triangle\")",
      "client:component-path": "/Users/michaelgogins/cloud-music/strudel/website/src/docs/MiniRepl",
      "client:component-export": "MiniRepl",
      "client:component-hydration": true
    }), "\n", createVNode(MiniRepl, {
      "client:idle": true,
      tune: "freq(\"220 275 330 440\").s(\"sine\")",
      "client:component-path": "/Users/michaelgogins/cloud-music/strudel/website/src/docs/MiniRepl",
      "client:component-export": "MiniRepl",
      "client:component-hydration": true
    }), "\n", createVNode(_components.p, {
      children: "What about combining different notes with different sounds at the same time?"
    }), "\n", createVNode(MiniRepl, {
      "client:idle": true,
      tune: "freq(\"220 275 330 440 550\").s(\"triangle sawtooth sine\")",
      "client:component-path": "/Users/michaelgogins/cloud-music/strudel/website/src/docs/MiniRepl",
      "client:component-export": "MiniRepl",
      "client:component-hydration": true
    }), "\n", createVNode(_components.p, {
      children: "Hmm, something interesting is going on there, related to there being five notes and three sounds."
    }), "\n", createVNode(_components.p, {
      children: ["Let\u2019s now take a step back and think about the Strudel ", createVNode(_components.a, {
        href: "/learn/code",
        children: "Code"
      }), " we\u2019ve been hearing so far."]
    }), "\n", createVNode("br", {})]
  });
}
function MDXContent$4(props = {}) {
  return createVNode(MDXLayout$4, {
    ...props,
    children: createVNode(_createMdxContent$4, {
      ...props
    })
  });
}

__astro_tag_component__(getHeadings$4, "astro:jsx");
__astro_tag_component__(MDXContent$4, "astro:jsx");
const url$4 = "/learn/sounds";
const file$4 = "/Users/michaelgogins/cloud-music/strudel/website/src/pages/learn/sounds.mdx";
function rawContent$4() { throw new Error("MDX does not support rawContent()! If you need to read the Markdown contents to calculate values (ex. reading time), we suggest injecting frontmatter via remark plugins. Learn more on our docs: https://docs.astro.build/en/guides/integrations-guide/mdx/#inject-frontmatter-via-remark-or-rehype-plugins") }function compiledContent$4() { throw new Error("MDX does not support compiledContent()! If you need to read the HTML contents to calculate values (ex. reading time), we suggest injecting frontmatter via rehype plugins. Learn more on our docs: https://docs.astro.build/en/guides/integrations-guide/mdx/#inject-frontmatter-via-remark-or-rehype-plugins") }const Content$4 = (props = {}) => MDXContent$4({
											...props,
											components: { Fragment, ...props.components },
										});
Content$4[Symbol.for('astro.needsHeadRendering')] = !Boolean(frontmatter$4.layout);

const _page26 = /*#__PURE__*/Object.freeze(/*#__PURE__*/Object.defineProperty({
	__proto__: null,
	frontmatter: frontmatter$4,
	_internal: _internal$4,
	getHeadings: getHeadings$4,
	url: url$4,
	file: file$4,
	rawContent: rawContent$4,
	compiledContent: compiledContent$4,
	Content: Content$4,
	default: Content$4
}, Symbol.toStringTag, { value: 'Module' }));

const MDXLayout$3 = async function ({
  children
}) {
  const Layout = (await import('./chunks/MainLayout.c7eab378.mjs')).default;
  const {
    layout,
    ...content
  } = frontmatter$3;
  content.file = file$3;
  content.url = url$3;
  content.astro = {};
  Object.defineProperty(content.astro, "headings", {
    get() {
      throw new Error('The "astro" property is no longer supported! To access "headings" from your layout, try using "Astro.props.headings."');
    }
  });
  Object.defineProperty(content.astro, "html", {
    get() {
      throw new Error('The "astro" property is no longer supported! To access "html" from your layout, try using "Astro.props.compiledContent()."');
    }
  });
  Object.defineProperty(content.astro, "source", {
    get() {
      throw new Error('The "astro" property is no longer supported! To access "source" from your layout, try using "Astro.props.rawContent()."');
    }
  });
  return createVNode(Layout, {
    file: file$3,
    url: url$3,
    content,
    frontmatter: content,
    headings: getHeadings$3(),
    "server:root": true,
    children
  });
};
const frontmatter$3 = {
  "title": "Synths",
  "description": "Strudel Tutorial - Synths",
  "layout": "../../layouts/MainLayout.astro"
};
const _internal$3 = {
  injectedFrontmatter: {}
};
function getHeadings$3() {
  return [{
    "depth": 1,
    "slug": "synths",
    "text": "Synths"
  }, {
    "depth": 2,
    "slug": "playing-synths-with-s",
    "text": "Playing synths with s"
  }, {
    "depth": 2,
    "slug": "ampltude-envelope",
    "text": "Ampltude Envelope"
  }];
}
function _createMdxContent$3(props) {
  const _components = Object.assign({
    h1: "h1",
    a: "a",
    span: "span",
    p: "p",
    h2: "h2",
    code: "code",
    em: "em"
  }, props.components);
  return createVNode(Fragment, {
    children: [createVNode(_components.h1, {
      id: "synths",
      children: [createVNode(_components.a, {
        "aria-hidden": "true",
        tabIndex: "-1",
        href: "#synths",
        children: createVNode(_components.span, {
          className: "icon icon-link"
        })
      }), "Synths"]
    }), "\n", createVNode(_components.p, {
      children: ["For now, ", createVNode(_components.a, {
        href: "/learn/samples",
        children: "samples"
      }), " are the main way to play with Strudel.\nIn future, more powerful synthesis capabilities will be added.\nIf in the meantime you want to dive deeper into audio synthesis with Tidal, you will need to ", createVNode(_components.a, {
        href: "https://tidalcycles.org/docs/",
        children: "install SuperCollider and SuperDirt"
      }), "."]
    }), "\n", createVNode(_components.h2, {
      id: "playing-synths-with-s",
      children: [createVNode(_components.a, {
        "aria-hidden": "true",
        tabIndex: "-1",
        href: "#playing-synths-with-s",
        children: createVNode(_components.span, {
          className: "icon icon-link"
        })
      }), "Playing synths with ", createVNode(_components.code, {
        children: "s"
      })]
    }), "\n", createVNode(_components.p, {
      children: ["We can change the sound, using the ", createVNode(_components.code, {
        children: "s"
      }), " function:"]
    }), "\n", createVNode(MiniRepl, {
      "client:idle": true,
      tune: `note("c2 <eb2 <g2 g1>>").s('sawtooth')`,
      "client:component-path": "/Users/michaelgogins/cloud-music/strudel/website/src/docs/MiniRepl",
      "client:component-export": "MiniRepl",
      "client:component-hydration": true
    }), "\n", createVNode(_components.p, {
      children: ["Here, we are wrapping our notes inside ", createVNode(_components.code, {
        children: "note"
      }), " and set the sound using ", createVNode(_components.code, {
        children: "s"
      }), ", connected by a dot."]
    }), "\n", createVNode(_components.p, {
      children: ["Those functions are only 2 of many ways to alter the properties, or ", createVNode(_components.em, {
        children: "params"
      }), " of a sound.\nThe power of patterns allows us to sequence any ", createVNode(_components.em, {
        children: "param"
      }), " independently:"]
    }), "\n", createVNode(MiniRepl, {
      "client:idle": true,
      tune: "note(\"c2 <eb2 <g2 g1>>\").s(\"<sawtooth square triangle>\")",
      "client:component-path": "/Users/michaelgogins/cloud-music/strudel/website/src/docs/MiniRepl",
      "client:component-export": "MiniRepl",
      "client:component-hydration": true
    }), "\n", createVNode(_components.p, {
      children: ["Now we not only pattern the notes, but the sound as well!\n", createVNode(_components.code, {
        children: "sawtooth"
      }), " ", createVNode(_components.code, {
        children: "square"
      }), " and ", createVNode(_components.code, {
        children: "triangle"
      }), " are the basic waveforms available in ", createVNode(_components.code, {
        children: "s"
      }), "."]
    }), "\n", createVNode(_components.h2, {
      id: "ampltude-envelope",
      children: [createVNode(_components.a, {
        "aria-hidden": "true",
        tabIndex: "-1",
        href: "#ampltude-envelope",
        children: createVNode(_components.span, {
          className: "icon icon-link"
        })
      }), "Ampltude Envelope"]
    }), "\n", createVNode(_components.p, {
      children: ["You can control the envelope of a synth using the ", createVNode(_components.code, {
        children: "attack"
      }), ", ", createVNode(_components.code, {
        children: "decay"
      }), ", ", createVNode(_components.code, {
        children: "sustain"
      }), " and ", createVNode(_components.code, {
        children: "release"
      }), " functions:"]
    }), "\n", createVNode(MiniRepl, {
      "client:idle": true,
      tune: `note("c2 <eb2 <g2 g1>>").s('sawtooth')
  .attack(.1).decay(.1).sustain(.2).release(.1)`,
      "client:component-path": "/Users/michaelgogins/cloud-music/strudel/website/src/docs/MiniRepl",
      "client:component-export": "MiniRepl",
      "client:component-hydration": true
    }), "\n", createVNode("br", {})]
  });
}
function MDXContent$3(props = {}) {
  return createVNode(MDXLayout$3, {
    ...props,
    children: createVNode(_createMdxContent$3, {
      ...props
    })
  });
}

__astro_tag_component__(getHeadings$3, "astro:jsx");
__astro_tag_component__(MDXContent$3, "astro:jsx");
const url$3 = "/learn/synths";
const file$3 = "/Users/michaelgogins/cloud-music/strudel/website/src/pages/learn/synths.mdx";
function rawContent$3() { throw new Error("MDX does not support rawContent()! If you need to read the Markdown contents to calculate values (ex. reading time), we suggest injecting frontmatter via remark plugins. Learn more on our docs: https://docs.astro.build/en/guides/integrations-guide/mdx/#inject-frontmatter-via-remark-or-rehype-plugins") }function compiledContent$3() { throw new Error("MDX does not support compiledContent()! If you need to read the HTML contents to calculate values (ex. reading time), we suggest injecting frontmatter via rehype plugins. Learn more on our docs: https://docs.astro.build/en/guides/integrations-guide/mdx/#inject-frontmatter-via-remark-or-rehype-plugins") }const Content$3 = (props = {}) => MDXContent$3({
											...props,
											components: { Fragment, ...props.components },
										});
Content$3[Symbol.for('astro.needsHeadRendering')] = !Boolean(frontmatter$3.layout);

const _page27 = /*#__PURE__*/Object.freeze(/*#__PURE__*/Object.defineProperty({
	__proto__: null,
	frontmatter: frontmatter$3,
	_internal: _internal$3,
	getHeadings: getHeadings$3,
	url: url$3,
	file: file$3,
	rawContent: rawContent$3,
	compiledContent: compiledContent$3,
	Content: Content$3,
	default: Content$3
}, Symbol.toStringTag, { value: 'Module' }));

const MDXLayout$2 = async function ({
  children
}) {
  const Layout = (await import('./chunks/MainLayout.c7eab378.mjs')).default;
  const {
    layout,
    ...content
  } = frontmatter$2;
  content.file = file$2;
  content.url = url$2;
  content.astro = {};
  Object.defineProperty(content.astro, "headings", {
    get() {
      throw new Error('The "astro" property is no longer supported! To access "headings" from your layout, try using "Astro.props.headings."');
    }
  });
  Object.defineProperty(content.astro, "html", {
    get() {
      throw new Error('The "astro" property is no longer supported! To access "html" from your layout, try using "Astro.props.compiledContent()."');
    }
  });
  Object.defineProperty(content.astro, "source", {
    get() {
      throw new Error('The "astro" property is no longer supported! To access "source" from your layout, try using "Astro.props.rawContent()."');
    }
  });
  return createVNode(Layout, {
    file: file$2,
    url: url$2,
    content,
    frontmatter: content,
    headings: getHeadings$2(),
    "server:root": true,
    children
  });
};
const frontmatter$2 = {
  "title": "Notes",
  "description": "Strudel Tutorial - Notes",
  "layout": "../../layouts/MainLayout.astro"
};
const _internal$2 = {
  injectedFrontmatter: {}
};
function getHeadings$2() {
  return [{
    "depth": 1,
    "slug": "notes",
    "text": "Notes"
  }, {
    "depth": 1,
    "slug": "note",
    "text": "note"
  }, {
    "depth": 1,
    "slug": "n",
    "text": "n"
  }, {
    "depth": 1,
    "slug": "freq",
    "text": "freq"
  }, {
    "depth": 2,
    "slug": "hearing-and-frequency",
    "text": "Hearing and frequency"
  }, {
    "depth": 1,
    "slug": "from-notes-to-sounds",
    "text": "From notes to sounds"
  }];
}
function _createMdxContent$2(props) {
  const _components = Object.assign({
    h1: "h1",
    a: "a",
    span: "span",
    p: "p",
    code: "code",
    ul: "ul",
    li: "li",
    h2: "h2"
  }, props.components);
  return createVNode(Fragment, {
    children: [createVNode(_components.h1, {
      id: "notes",
      children: [createVNode(_components.a, {
        "aria-hidden": "true",
        tabIndex: "-1",
        href: "#notes",
        children: createVNode(_components.span, {
          className: "icon icon-link"
        })
      }), "Notes"]
    }), "\n", createVNode(_components.p, {
      children: ["Pitches are an essential building block for music.\nIn Strudel, there are three different ways to express a pitch, ", createVNode(_components.code, {
        children: "note"
      }), ", ", createVNode(_components.code, {
        children: "n"
      }), " and ", createVNode(_components.code, {
        children: "freq"
      }), ".\nHere\u2019s the same pattern written in three different ways:"]
    }), "\n", createVNode(_components.ul, {
      children: ["\n", createVNode(_components.li, {
        children: ["\n", createVNode(_components.p, {
          children: [createVNode(_components.code, {
            children: "note"
          }), ": letter notation, good for those who are familiar with western music theory:"]
        }), "\n", createVNode(MiniRepl, {
          "client:idle": true,
          tune: "note(\"a3 c#4 e4 a4\")",
          "client:component-path": "/Users/michaelgogins/cloud-music/strudel/website/src/docs/MiniRepl",
          "client:component-export": "MiniRepl",
          "client:component-hydration": true
        }), "\n"]
      }), "\n", createVNode(_components.li, {
        children: ["\n", createVNode(_components.p, {
          children: [createVNode(_components.code, {
            children: "n"
          }), ": number notation, good for those who want to use recognisable pitches, but don\u2019t care about music theory:"]
        }), "\n", createVNode(MiniRepl, {
          "client:idle": true,
          tune: "n(\"57 61 64 69\")",
          "client:component-path": "/Users/michaelgogins/cloud-music/strudel/website/src/docs/MiniRepl",
          "client:component-export": "MiniRepl",
          "client:component-hydration": true
        }), "\n"]
      }), "\n", createVNode(_components.li, {
        children: ["\n", createVNode(_components.p, {
          children: [createVNode(_components.code, {
            children: "freq"
          }), ": frequency notation, good for those who want to go beyond standardised tuning systems:"]
        }), "\n", createVNode(MiniRepl, {
          "client:idle": true,
          tune: "freq(\"220 275 330 440\")",
          "client:component-path": "/Users/michaelgogins/cloud-music/strudel/website/src/docs/MiniRepl",
          "client:component-export": "MiniRepl",
          "client:component-hydration": true
        }), "\n"]
      }), "\n"]
    }), "\n", createVNode(_components.p, {
      children: ["Let\u2019s look at ", createVNode(_components.code, {
        children: "note"
      }), ", ", createVNode(_components.code, {
        children: "n"
      }), " and ", createVNode(_components.code, {
        children: "freq"
      }), " in more detail\u2026"]
    }), "\n", createVNode(_components.h1, {
      id: "note",
      children: [createVNode(_components.a, {
        "aria-hidden": "true",
        tabIndex: "-1",
        href: "#note",
        children: createVNode(_components.span, {
          className: "icon icon-link"
        })
      }), createVNode(_components.code, {
        children: "note"
      })]
    }), "\n", createVNode(_components.p, {
      children: ["Notes are notated with the note letter, followed by the octave number. You can notate flats with ", createVNode(_components.code, {
        children: "b"
      }), " and sharps with ", createVNode(_components.code, {
        children: "#"
      }), "."]
    }), "\n", createVNode(MiniRepl, {
      "client:idle": true,
      tune: "note(\"a3 c#4 e4 a4\")",
      "client:component-path": "/Users/michaelgogins/cloud-music/strudel/website/src/docs/MiniRepl",
      "client:component-export": "MiniRepl",
      "client:component-hydration": true
    }), "\n", createVNode(_components.p, {
      children: "By the way, you can edit the contents of the player, and press \u201Cupdate\u201D to hear your change!\nYou can also press \u201Cplay\u201D on the next player without needing to stop the last one."
    }), "\n", createVNode(_components.h1, {
      id: "n",
      children: [createVNode(_components.a, {
        "aria-hidden": "true",
        tabIndex: "-1",
        href: "#n",
        children: createVNode(_components.span, {
          className: "icon icon-link"
        })
      }), createVNode(_components.code, {
        children: "n"
      })]
    }), "\n", createVNode(_components.p, {
      children: ["If you prefer, you can also use numbers with ", createVNode(_components.code, {
        children: "n"
      }), " instead:"]
    }), "\n", createVNode(MiniRepl, {
      "client:idle": true,
      tune: "n(\"57 61 64 69\")",
      "client:component-path": "/Users/michaelgogins/cloud-music/strudel/website/src/docs/MiniRepl",
      "client:component-export": "MiniRepl",
      "client:component-hydration": true
    }), "\n", createVNode(_components.p, {
      children: ["These numbers are interpreted as so called ", createVNode(_components.a, {
        href: "https://www.inspiredacoustics.com/en/MIDI_note_numbers_and_center_frequencies",
        children: "MIDI numbers"
      }), ", where adjacent whole numbers are one \u2018semitone\u2019 apart."]
    }), "\n", createVNode(_components.p, {
      children: "You could also write decimal numbers to get \u2018microtonal\u2019 pitches (in between the black and white piano notes):"
    }), "\n", createVNode(MiniRepl, {
      "client:idle": true,
      tune: "n(\"74.5 75 75.5 76\")",
      "client:component-path": "/Users/michaelgogins/cloud-music/strudel/website/src/docs/MiniRepl",
      "client:component-export": "MiniRepl",
      "client:component-hydration": true
    }), "\n", createVNode(_components.h1, {
      id: "freq",
      children: [createVNode(_components.a, {
        "aria-hidden": "true",
        tabIndex: "-1",
        href: "#freq",
        children: createVNode(_components.span, {
          className: "icon icon-link"
        })
      }), createVNode(_components.code, {
        children: "freq"
      })]
    }), "\n", createVNode(_components.p, {
      children: ["To get maximum freedom, you can also use ", createVNode(_components.code, {
        children: "freq"
      }), " to directly control the frequency:"]
    }), "\n", createVNode(MiniRepl, {
      "client:idle": true,
      tune: "freq(\"220 275 330 440\")",
      "client:component-path": "/Users/michaelgogins/cloud-music/strudel/website/src/docs/MiniRepl",
      "client:component-export": "MiniRepl",
      "client:component-hydration": true
    }), "\n", createVNode(_components.h2, {
      id: "hearing-and-frequency",
      children: [createVNode(_components.a, {
        "aria-hidden": "true",
        tabIndex: "-1",
        href: "#hearing-and-frequency",
        children: createVNode(_components.span, {
          className: "icon icon-link"
        })
      }), "Hearing and frequency"]
    }), "\n", createVNode(_components.p, {
      children: "In the above example, we play A3 (220Hz), C#4 natural (275Hz), E4 (330Hz) and A4 (440Hz), mirroring our previous examples."
    }), "\n", createVNode(_components.p, {
      children: "But can you hear the difference between these individual frequencies?"
    }), "\n", createVNode(MiniRepl, {
      "client:idle": true,
      tune: "freq(\"220 221 223 224\")",
      "client:component-path": "/Users/michaelgogins/cloud-music/strudel/website/src/docs/MiniRepl",
      "client:component-export": "MiniRepl",
      "client:component-hydration": true
    }), "\n", createVNode(_components.p, {
      children: "How about these?"
    }), "\n", createVNode(MiniRepl, {
      "client:idle": true,
      tune: "freq(\"2020 2021 2023 2024\")",
      "client:component-path": "/Users/michaelgogins/cloud-music/strudel/website/src/docs/MiniRepl",
      "client:component-export": "MiniRepl",
      "client:component-hydration": true
    }), "\n", createVNode(_components.p, {
      children: "The higher we go up\u2026"
    }), "\n", createVNode(MiniRepl, {
      "client:idle": true,
      tune: "freq(\"5020 5021 5023 5024\")",
      "client:component-path": "/Users/michaelgogins/cloud-music/strudel/website/src/docs/MiniRepl",
      "client:component-export": "MiniRepl",
      "client:component-hydration": true
    }), "\n", createVNode(_components.p, {
      children: "The less distance we can hear between the frequencies!"
    }), "\n", createVNode(MiniRepl, {
      "client:idle": true,
      tune: "freq(\"10020 10021 10023 10024\")",
      "client:component-path": "/Users/michaelgogins/cloud-music/strudel/website/src/docs/MiniRepl",
      "client:component-export": "MiniRepl",
      "client:component-hydration": true
    }), "\n", createVNode(_components.p, {
      children: ["Why is this? ", createVNode(_components.a, {
        href: "https://www.audiocheck.net/soundtests_nonlinear.php",
        children: "Human hearing operates logarithmically"
      }), "."]
    }), "\n", createVNode(_components.h1, {
      id: "from-notes-to-sounds",
      children: [createVNode(_components.a, {
        "aria-hidden": "true",
        tabIndex: "-1",
        href: "#from-notes-to-sounds",
        children: createVNode(_components.span, {
          className: "icon icon-link"
        })
      }), "From notes to sounds"]
    }), "\n", createVNode(_components.p, {
      children: "In this page, when we played a pattern of notes like this:"
    }), "\n", createVNode(MiniRepl, {
      "client:idle": true,
      tune: "note(\"a3 c#4 e4 a4\")",
      "client:component-path": "/Users/michaelgogins/cloud-music/strudel/website/src/docs/MiniRepl",
      "client:component-export": "MiniRepl",
      "client:component-hydration": true
    }), "\n", createVNode(_components.p, {
      children: ["We heard a simple synthesised sound, in fact we heard a ", createVNode(_components.a, {
        href: "https://en.wikipedia.org/wiki/Square_wave",
        children: "square wave oscillator"
      }), "."]
    }), "\n", createVNode(_components.p, {
      children: "This is the default synthesiser used by Strudel, but how do we then make different sounds in Strudel?"
    }), "\n", createVNode(_components.p, {
      children: ["Let\u2019s find out in the next page on ", createVNode(_components.a, {
        href: "/learn/sounds",
        children: "Sounds"
      }), "."]
    }), "\n", createVNode("br", {})]
  });
}
function MDXContent$2(props = {}) {
  return createVNode(MDXLayout$2, {
    ...props,
    children: createVNode(_createMdxContent$2, {
      ...props
    })
  });
}

__astro_tag_component__(getHeadings$2, "astro:jsx");
__astro_tag_component__(MDXContent$2, "astro:jsx");
const url$2 = "/learn/notes";
const file$2 = "/Users/michaelgogins/cloud-music/strudel/website/src/pages/learn/notes.mdx";
function rawContent$2() { throw new Error("MDX does not support rawContent()! If you need to read the Markdown contents to calculate values (ex. reading time), we suggest injecting frontmatter via remark plugins. Learn more on our docs: https://docs.astro.build/en/guides/integrations-guide/mdx/#inject-frontmatter-via-remark-or-rehype-plugins") }function compiledContent$2() { throw new Error("MDX does not support compiledContent()! If you need to read the HTML contents to calculate values (ex. reading time), we suggest injecting frontmatter via rehype plugins. Learn more on our docs: https://docs.astro.build/en/guides/integrations-guide/mdx/#inject-frontmatter-via-remark-or-rehype-plugins") }const Content$2 = (props = {}) => MDXContent$2({
											...props,
											components: { Fragment, ...props.components },
										});
Content$2[Symbol.for('astro.needsHeadRendering')] = !Boolean(frontmatter$2.layout);

const _page28 = /*#__PURE__*/Object.freeze(/*#__PURE__*/Object.defineProperty({
	__proto__: null,
	frontmatter: frontmatter$2,
	_internal: _internal$2,
	getHeadings: getHeadings$2,
	url: url$2,
	file: file$2,
	rawContent: rawContent$2,
	compiledContent: compiledContent$2,
	Content: Content$2,
	default: Content$2
}, Symbol.toStringTag, { value: 'Module' }));

const MDXLayout$1 = async function ({
  children
}) {
  const Layout = (await import('./chunks/MainLayout.c7eab378.mjs')).default;
  const {
    layout,
    ...content
  } = frontmatter$1;
  content.file = file$1;
  content.url = url$1;
  content.astro = {};
  Object.defineProperty(content.astro, "headings", {
    get() {
      throw new Error('The "astro" property is no longer supported! To access "headings" from your layout, try using "Astro.props.headings."');
    }
  });
  Object.defineProperty(content.astro, "html", {
    get() {
      throw new Error('The "astro" property is no longer supported! To access "html" from your layout, try using "Astro.props.compiledContent()."');
    }
  });
  Object.defineProperty(content.astro, "source", {
    get() {
      throw new Error('The "astro" property is no longer supported! To access "source" from your layout, try using "Astro.props.rawContent()."');
    }
  });
  return createVNode(Layout, {
    file: file$1,
    url: url$1,
    content,
    frontmatter: content,
    headings: getHeadings$1(),
    "server:root": true,
    children
  });
};
const frontmatter$1 = {
  "title": "Tonal API",
  "layout": "../../layouts/MainLayout.astro"
};
const _internal$1 = {
  injectedFrontmatter: {}
};
function getHeadings$1() {
  return [{
    "depth": 1,
    "slug": "tonal-api",
    "text": "Tonal API"
  }, {
    "depth": 3,
    "slug": "transposesemitones",
    "text": "transpose(semitones)"
  }, {
    "depth": 3,
    "slug": "scalename",
    "text": "scale(name)"
  }, {
    "depth": 3,
    "slug": "scaletransposesteps",
    "text": "scaleTranspose(steps)"
  }, {
    "depth": 3,
    "slug": "voicingsrange",
    "text": "voicings(range?)"
  }, {
    "depth": 3,
    "slug": "rootnotesoctave--2",
    "text": "rootNotes(octave = 2)"
  }];
}
function _createMdxContent$1(props) {
  const _components = Object.assign({
    h1: "h1",
    a: "a",
    span: "span",
    p: "p",
    h3: "h3"
  }, props.components);
  return createVNode(Fragment, {
    children: [createVNode(_components.h1, {
      id: "tonal-api",
      children: [createVNode(_components.a, {
        "aria-hidden": "true",
        tabIndex: "-1",
        href: "#tonal-api",
        children: createVNode(_components.span, {
          className: "icon icon-link"
        })
      }), "Tonal API"]
    }), "\n", createVNode(_components.p, {
      children: ["The Tonal API, uses ", createVNode(_components.a, {
        href: "https://github.com/tonaljs/tonal",
        children: "tonaljs"
      }), " to provide helpers for musical operations."]
    }), "\n", createVNode(_components.h3, {
      id: "transposesemitones",
      children: [createVNode(_components.a, {
        "aria-hidden": "true",
        tabIndex: "-1",
        href: "#transposesemitones",
        children: createVNode(_components.span, {
          className: "icon icon-link"
        })
      }), "transpose(semitones)"]
    }), "\n", createVNode(_components.p, {
      children: "Transposes all notes to the given number of semitones:"
    }), "\n", createVNode("astro-client-only", {
      "client:only": "react",
      tune: "\"c2 c3\".fast(2).transpose(\"<0 -2 5 3>\".slow(2)).note()",
      "client:display-name": "MiniRepl",
      "client:component-path": "/Users/michaelgogins/cloud-music/strudel/website/src/docs/MiniRepl",
      "client:component-export": "MiniRepl",
      "client:component-hydration": true
    }), "\n", createVNode(_components.p, {
      children: "This method gets really exciting when we use it with a pattern as above."
    }), "\n", createVNode(_components.p, {
      children: "Instead of numbers, scientific interval notation can be used as well:"
    }), "\n", createVNode("astro-client-only", {
      "client:only": "react",
      tune: "\"c2 c3\".fast(2).transpose(\"<1P -2M 4P 3m>\".slow(2)).note()",
      "client:display-name": "MiniRepl",
      "client:component-path": "/Users/michaelgogins/cloud-music/strudel/website/src/docs/MiniRepl",
      "client:component-export": "MiniRepl",
      "client:component-hydration": true
    }), "\n", createVNode(_components.h3, {
      id: "scalename",
      children: [createVNode(_components.a, {
        "aria-hidden": "true",
        tabIndex: "-1",
        href: "#scalename",
        children: createVNode(_components.span, {
          className: "icon icon-link"
        })
      }), "scale(name)"]
    }), "\n", createVNode(_components.p, {
      children: "Turns numbers into notes in the scale (zero indexed). Also sets scale for other scale operations, like scaleTranpose."
    }), "\n", createVNode(MiniRepl, {
      "client:idle": true,
      tune: `"0 2 4 6 4 2"
.scale(seq('C2 major', 'C2 minor').slow(2))
.note()`,
      "client:component-path": "/Users/michaelgogins/cloud-music/strudel/website/src/docs/MiniRepl",
      "client:component-export": "MiniRepl",
      "client:component-hydration": true
    }), "\n", createVNode(_components.p, {
      children: "Note that the scale root is octaved here. You can also omit the octave, then index zero will default to octave 3."
    }), "\n", createVNode(_components.p, {
      children: ["All the available scale names can be found ", createVNode(_components.a, {
        href: "https://github.com/tonaljs/tonal/blob/main/packages/scale-type/data.ts",
        children: "here"
      }), "."]
    }), "\n", createVNode(_components.h3, {
      id: "scaletransposesteps",
      children: [createVNode(_components.a, {
        "aria-hidden": "true",
        tabIndex: "-1",
        href: "#scaletransposesteps",
        children: createVNode(_components.span, {
          className: "icon icon-link"
        })
      }), "scaleTranspose(steps)"]
    }), "\n", createVNode(_components.p, {
      children: "Transposes notes inside the scale by the number of steps:"
    }), "\n", createVNode(MiniRepl, {
      "client:idle": true,
      tune: `"-8 [2,4,6]"
.scale('C4 bebop major')
.scaleTranspose("<0 -1 -2 -3 -4 -5 -6 -4>")
.note()`,
      "client:component-path": "/Users/michaelgogins/cloud-music/strudel/website/src/docs/MiniRepl",
      "client:component-export": "MiniRepl",
      "client:component-hydration": true
    }), "\n", createVNode(_components.h3, {
      id: "voicingsrange",
      children: [createVNode(_components.a, {
        "aria-hidden": "true",
        tabIndex: "-1",
        href: "#voicingsrange",
        children: createVNode(_components.span, {
          className: "icon icon-link"
        })
      }), "voicings(range?)"]
    }), "\n", createVNode(_components.p, {
      children: "Turns chord symbols into voicings, using the smoothest voice leading possible:"
    }), "\n", createVNode("astro-client-only", {
      "client:only": "react",
      tune: `stack("<C^7 A7 Dm7 G7>".voicings('lefthand'), "<C3 A2 D3 G2>").note()`,
      "client:display-name": "MiniRepl",
      "client:component-path": "/Users/michaelgogins/cloud-music/strudel/website/src/docs/MiniRepl",
      "client:component-export": "MiniRepl",
      "client:component-hydration": true
    }), "\n", createVNode(_components.h3, {
      id: "rootnotesoctave--2",
      children: [createVNode(_components.a, {
        "aria-hidden": "true",
        tabIndex: "-1",
        href: "#rootnotesoctave--2",
        children: createVNode(_components.span, {
          className: "icon icon-link"
        })
      }), "rootNotes(octave = 2)"]
    }), "\n", createVNode(_components.p, {
      children: "Turns chord symbols into root notes of chords in given octave."
    }), "\n", createVNode("astro-client-only", {
      "client:only": "react",
      tune: "\"<C^7 A7b13 Dm7 G7>\".rootNotes(3).note()",
      "client:display-name": "MiniRepl",
      "client:component-path": "/Users/michaelgogins/cloud-music/strudel/website/src/docs/MiniRepl",
      "client:component-export": "MiniRepl",
      "client:component-hydration": true
    }), "\n", createVNode(_components.p, {
      children: "Together with layer, struct and voicings, this can be used to create a basic backing track:"
    }), "\n", createVNode(MiniRepl, {
      "client:idle": true,
      tune: `"<C^7 A7b13 Dm7 G7>".layer(
  x => x.voicings('lefthand').struct("~ x").note(),
  x => x.rootNotes(2).note().s('sawtooth').cutoff(800)
)`,
      "client:component-path": "/Users/michaelgogins/cloud-music/strudel/website/src/docs/MiniRepl",
      "client:component-export": "MiniRepl",
      "client:component-hydration": true
    })]
  });
}
function MDXContent$1(props = {}) {
  return createVNode(MDXLayout$1, {
    ...props,
    children: createVNode(_createMdxContent$1, {
      ...props
    })
  });
}

__astro_tag_component__(getHeadings$1, "astro:jsx");
__astro_tag_component__(MDXContent$1, "astro:jsx");
const url$1 = "/learn/tonal";
const file$1 = "/Users/michaelgogins/cloud-music/strudel/website/src/pages/learn/tonal.mdx";
function rawContent$1() { throw new Error("MDX does not support rawContent()! If you need to read the Markdown contents to calculate values (ex. reading time), we suggest injecting frontmatter via remark plugins. Learn more on our docs: https://docs.astro.build/en/guides/integrations-guide/mdx/#inject-frontmatter-via-remark-or-rehype-plugins") }function compiledContent$1() { throw new Error("MDX does not support compiledContent()! If you need to read the HTML contents to calculate values (ex. reading time), we suggest injecting frontmatter via rehype plugins. Learn more on our docs: https://docs.astro.build/en/guides/integrations-guide/mdx/#inject-frontmatter-via-remark-or-rehype-plugins") }const Content$1 = (props = {}) => MDXContent$1({
											...props,
											components: { Fragment, ...props.components },
										});
Content$1[Symbol.for('astro.needsHeadRendering')] = !Boolean(frontmatter$1.layout);

const _page29 = /*#__PURE__*/Object.freeze(/*#__PURE__*/Object.defineProperty({
	__proto__: null,
	frontmatter: frontmatter$1,
	_internal: _internal$1,
	getHeadings: getHeadings$1,
	url: url$1,
	file: file$1,
	rawContent: rawContent$1,
	compiledContent: compiledContent$1,
	Content: Content$1,
	default: Content$1
}, Symbol.toStringTag, { value: 'Module' }));

const MDXLayout = async function ({
  children
}) {
  const Layout = (await import('./chunks/MainLayout.c7eab378.mjs')).default;
  const {
    layout,
    ...content
  } = frontmatter;
  content.file = file;
  content.url = url;
  content.astro = {};
  Object.defineProperty(content.astro, "headings", {
    get() {
      throw new Error('The "astro" property is no longer supported! To access "headings" from your layout, try using "Astro.props.headings."');
    }
  });
  Object.defineProperty(content.astro, "html", {
    get() {
      throw new Error('The "astro" property is no longer supported! To access "html" from your layout, try using "Astro.props.compiledContent()."');
    }
  });
  Object.defineProperty(content.astro, "source", {
    get() {
      throw new Error('The "astro" property is no longer supported! To access "source" from your layout, try using "Astro.props.rawContent()."');
    }
  });
  return createVNode(Layout, {
    file,
    url,
    content,
    frontmatter: content,
    headings: getHeadings(),
    "server:root": true,
    children
  });
};
const frontmatter = {
  "title": "Coding syntax",
  "description": "Strudel Tutorial - Coding syntax",
  "layout": "../../layouts/MainLayout.astro"
};
const _internal = {
  injectedFrontmatter: {}
};
function getHeadings() {
  return [{
    "depth": 1,
    "slug": "strudel-code",
    "text": "Strudel Code"
  }, {
    "depth": 1,
    "slug": "functions-arguments-and-chaining",
    "text": "Functions, arguments and chaining"
  }, {
    "depth": 1,
    "slug": "comments",
    "text": "Comments"
  }, {
    "depth": 1,
    "slug": "strings",
    "text": "Strings"
  }];
}
function _createMdxContent(props) {
  const _components = Object.assign({
    h1: "h1",
    a: "a",
    span: "span",
    p: "p",
    em: "em",
    ul: "ul",
    li: "li",
    code: "code",
    pre: "pre"
  }, props.components);
  return createVNode(Fragment, {
    children: [createVNode(_components.h1, {
      id: "strudel-code",
      children: [createVNode(_components.a, {
        "aria-hidden": "true",
        tabIndex: "-1",
        href: "#strudel-code",
        children: createVNode(_components.span, {
          className: "icon icon-link"
        })
      }), "Strudel Code"]
    }), "\n", createVNode(_components.p, {
      children: ["Now that we have played some notes using different sounds, let\u2019s take a step back and look how we actually achieved this using ", createVNode(_components.em, {
        children: "code"
      }), "."]
    }), "\n", createVNode(_components.p, {
      children: "Let\u2019s look at this simple example again. What do we notice?"
    }), "\n", createVNode(MiniRepl, {
      "client:idle": true,
      tune: "freq(\"220 275 330 440\").s(\"sine\")",
      "client:component-path": "/Users/michaelgogins/cloud-music/strudel/website/src/docs/MiniRepl",
      "client:component-export": "MiniRepl",
      "client:component-hydration": true
    }), "\n", createVNode(_components.ul, {
      children: ["\n", createVNode(_components.li, {
        children: ["We have a word ", createVNode(_components.code, {
          children: "freq"
        }), " which is followed by some brackets ", createVNode(_components.code, {
          children: "()"
        }), " with some words/letters/numbers inside, surrounded by quotes ", createVNode(_components.code, {
          children: "\"a3 c#4 e4 a4\""
        }), "."]
      }), "\n", createVNode(_components.li, {
        children: ["Then we have a dot ", createVNode(_components.code, {
          children: "."
        }), " followed by another similar piece of code ", createVNode(_components.code, {
          children: "s(\"sawtooth\")"
        }), "."]
      }), "\n", createVNode(_components.li, {
        children: ["We can also see these texts are ", createVNode(_components.em, {
          children: "highlighted"
        }), " using colours: word ", createVNode(_components.code, {
          children: "freq"
        }), " is purple, the brackets ", createVNode(_components.code, {
          children: "()"
        }), " are grey, and the content inside the ", createVNode(_components.code, {
          children: "\"\""
        }), " are green."]
      }), "\n"]
    }), "\n", createVNode(_components.p, {
      children: "What happens if we try to \u2018break\u2019 this pattern in different ways?"
    }), "\n", createVNode(MiniRepl, {
      "client:idle": true,
      tune: "freq(220 275 330 440).s(sine)",
      "client:component-path": "/Users/michaelgogins/cloud-music/strudel/website/src/docs/MiniRepl",
      "client:component-export": "MiniRepl",
      "client:component-hydration": true
    }), "\n", createVNode(MiniRepl, {
      "client:idle": true,
      tune: "freq(\"220 275 330 440\")s(\"sine\")",
      "client:component-path": "/Users/michaelgogins/cloud-music/strudel/website/src/docs/MiniRepl",
      "client:component-export": "MiniRepl",
      "client:component-hydration": true
    }), "\n", createVNode(MiniRepl, {
      "client:idle": true,
      tune: "freq[\"220 275 330 440\"].s{\"sine\"}",
      "client:component-path": "/Users/michaelgogins/cloud-music/strudel/website/src/docs/MiniRepl",
      "client:component-export": "MiniRepl",
      "client:component-hydration": true
    }), "\n", createVNode(_components.p, {
      children: "Ok, none of these seem to work\u2026"
    }), "\n", createVNode(MiniRepl, {
      "client:idle": true,
      tune: "s(\"sine\").freq(\"220 275 330 440\")",
      "client:component-path": "/Users/michaelgogins/cloud-music/strudel/website/src/docs/MiniRepl",
      "client:component-export": "MiniRepl",
      "client:component-hydration": true
    }), "\n", createVNode(_components.p, {
      children: "This one does work, but now we can\u2019t hear the four different events and frequencies anymore."
    }), "\n", createVNode(_components.p, {
      children: "So what is going on here?"
    }), "\n", createVNode(_components.h1, {
      id: "functions-arguments-and-chaining",
      children: [createVNode(_components.a, {
        "aria-hidden": "true",
        tabIndex: "-1",
        href: "#functions-arguments-and-chaining",
        children: createVNode(_components.span, {
          className: "icon icon-link"
        })
      }), "Functions, arguments and chaining"]
    }), "\n", createVNode(_components.p, {
      children: "So far, we\u2019ve seen the following syntax:"
    }), "\n", createVNode(_components.pre, {
      className: "astro-code",
      style: {
        backgroundColor: "#0d1117",
        overflowX: "auto"
      },
      children: createVNode(_components.code, {
        children: createVNode(_components.span, {
          className: "line",
          children: createVNode(_components.span, {
            style: {
              color: "#c9d1d9"
            },
            children: "xxx(\"foo\").yyy(\"bar\")"
          })
        })
      })
    }), "\n", createVNode(_components.p, {
      children: ["Generally, ", createVNode(_components.code, {
        children: "xxx"
      }), " and ", createVNode(_components.code, {
        children: "yyy"
      }), " are called ", createVNode(_components.a, {
        href: "https://en.wikipedia.org/wiki/Function_(computer_programming)",
        children: createVNode(_components.em, {
          children: "functions"
        })
      }), ", while ", createVNode(_components.code, {
        children: "foo"
      }), " and ", createVNode(_components.code, {
        children: "bar"
      }), " are called function ", createVNode(_components.a, {
        href: "https://en.wikipedia.org/wiki/Parameter_(computer_programming)",
        children: [createVNode(_components.em, {
          children: "arguments"
        }), " or ", createVNode(_components.em, {
          children: "parameters"
        })]
      }), ".\nSo far, we\u2019ve used the functions to declare which aspect of the sound we want to control, and their arguments for the actual data.\nThe ", createVNode(_components.code, {
        children: "yyy"
      }), " function is called a ", createVNode(_components.a, {
        href: "https://en.wikipedia.org/wiki/Method_chaining",
        children: [createVNode(_components.em, {
          children: "chained"
        }), " function"]
      }), ", because it is appended with a dot (", createVNode(_components.code, {
        children: "."
      }), ")."]
    }), "\n", createVNode(_components.p, {
      children: ["Generally, the idea with chaining is that code such as ", createVNode(_components.code, {
        children: "a(\"this\").b(\"that\").c(\"other\")"
      }), " allows ", createVNode(_components.code, {
        children: "a"
      }), ", ", createVNode(_components.code, {
        children: "b"
      }), " and ", createVNode(_components.code, {
        children: "c"
      }), " functions to happen in a specified order, without needing to write them as three separate lines of code.\nYou can think of this as being similar to chaining audio effects together using guitar pedals or digital audio effects."]
    }), "\n", createVNode(_components.p, {
      children: "Strudel makes heavy use of chained functions. Here is a more sophisticated example:"
    }), "\n", createVNode(MiniRepl, {
      "client:idle": true,
      tune: `note("a3 c#4 e4 a4")
.s("sawtooth")
.cutoff(500)
//.delay(0.5)
.room(0.5)`,
      "client:component-path": "/Users/michaelgogins/cloud-music/strudel/website/src/docs/MiniRepl",
      "client:component-export": "MiniRepl",
      "client:component-hydration": true
    }), "\n", createVNode(_components.h1, {
      id: "comments",
      children: [createVNode(_components.a, {
        "aria-hidden": "true",
        tabIndex: "-1",
        href: "#comments",
        children: createVNode(_components.span, {
          className: "icon icon-link"
        })
      }), "Comments"]
    }), "\n", createVNode(_components.p, {
      children: ["The ", createVNode(_components.code, {
        children: "//"
      }), " in the example above is a line comment, resulting in the ", createVNode(_components.code, {
        children: "delay"
      }), " function being ignored.\nIt is a handy way to quickly turn code on and off.\nTry uncommenting this line by deleting ", createVNode(_components.code, {
        children: "//"
      }), " and refreshing the pattern.\nYou can also use the keyboard shortcut ", createVNode(_components.code, {
        children: "cmd-/"
      }), " to toggle comments on and off."]
    }), "\n", createVNode(_components.h1, {
      id: "strings",
      children: [createVNode(_components.a, {
        "aria-hidden": "true",
        tabIndex: "-1",
        href: "#strings",
        children: createVNode(_components.span, {
          className: "icon icon-link"
        })
      }), "Strings"]
    }), "\n", createVNode(_components.p, {
      children: ["Ok, so what about the content inside the quotes (e.g. ", createVNode(_components.code, {
        children: "\"a3 c#4 e4 a4\""
      }), ")?\nIn JavaScript, as in most programming languages, this content is referred to as being a ", createVNode(_components.a, {
        href: "https://en.wikipedia.org/wiki/String_(computer_science)",
        children: createVNode(_components.em, {
          children: "string"
        })
      }), ".\nA string is simply a sequence of individual characters.\nIn TidalCycles, strings are used to write ", createVNode(_components.em, {
        children: "patterns"
      }), " using the mini-notation, and you may hear the phrase ", createVNode(_components.em, {
        children: "pattern string"
      }), " from time to time."]
    }), "\n", createVNode(_components.p, {
      children: "The good news is, that this covers 99% of the JavaScript syntax needed for Strudel!"
    }), "\n", createVNode(_components.p, {
      children: ["Let\u2019s now look at the way we can express ", createVNode(_components.a, {
        href: "/learn/mini-notation",
        children: "Rhythms"
      }), "\u2026"]
    }), "\n", createVNode("br", {})]
  });
}
function MDXContent(props = {}) {
  return createVNode(MDXLayout, {
    ...props,
    children: createVNode(_createMdxContent, {
      ...props
    })
  });
}

__astro_tag_component__(getHeadings, "astro:jsx");
__astro_tag_component__(MDXContent, "astro:jsx");
const url = "/learn/code";
const file = "/Users/michaelgogins/cloud-music/strudel/website/src/pages/learn/code.mdx";
function rawContent() { throw new Error("MDX does not support rawContent()! If you need to read the Markdown contents to calculate values (ex. reading time), we suggest injecting frontmatter via remark plugins. Learn more on our docs: https://docs.astro.build/en/guides/integrations-guide/mdx/#inject-frontmatter-via-remark-or-rehype-plugins") }function compiledContent() { throw new Error("MDX does not support compiledContent()! If you need to read the HTML contents to calculate values (ex. reading time), we suggest injecting frontmatter via rehype plugins. Learn more on our docs: https://docs.astro.build/en/guides/integrations-guide/mdx/#inject-frontmatter-via-remark-or-rehype-plugins") }const Content = (props = {}) => MDXContent({
											...props,
											components: { Fragment, ...props.components },
										});
Content[Symbol.for('astro.needsHeadRendering')] = !Boolean(frontmatter.layout);

const _page30 = /*#__PURE__*/Object.freeze(/*#__PURE__*/Object.defineProperty({
	__proto__: null,
	frontmatter,
	_internal,
	getHeadings,
	url,
	file,
	rawContent,
	compiledContent,
	Content,
	default: Content
}, Symbol.toStringTag, { value: 'Module' }));

async function get({ params, request }) {
  const { name } = params;
  const tune = tunes[name];
  const { pattern } = await evaluate(tune);
  const haps = pattern.queryArc(0, 4);
  const canvas = createCanvas(800, 800);
  const ctx = canvas.getContext('2d');
  pianoroll({ time: 4, haps, ctx, playhead: 1, fold: 1, background: 'transparent', playheadColor: 'transparent' });
  const buffer = canvas.toBuffer('image/png');
  return {
    body: buffer,
    encoding: 'binary',
  };
}
function getStaticPaths() {
  return Object.keys(tunes).map((name) => ({
    params: {
      name,
    },
  }));
}

const _page31 = /*#__PURE__*/Object.freeze(/*#__PURE__*/Object.defineProperty({
	__proto__: null,
	get,
	getStaticPaths
}, Symbol.toStringTag, { value: 'Module' }));

const pageMap = new Map([['src/pages/index.astro', _page0],['src/pages/technical-manual/alignment.mdx', _page1],['src/pages/technical-manual/packages.mdx', _page2],['src/pages/technical-manual/patterns.mdx', _page3],['src/pages/technical-manual/testing.mdx', _page4],['src/pages/technical-manual/about.mdx', _page5],['src/pages/technical-manual/docs.mdx', _page6],['src/pages/technical-manual/repl.mdx', _page7],['src/pages/examples/index.astro', _page8],['src/pages/tutorial/index.astro', _page9],['src/pages/recipes/microrhythms.mdx', _page10],['src/pages/recipes/arpeggios.mdx', _page11],['src/pages/recipes/rhythms.mdx', _page12],['src/pages/swatch/index.astro', _page13],['src/pages/swatch/list.json.js', _page14],['src/pages/swatch/[name].png.js', _page15],['src/pages/embed.astro', _page16],['src/pages/learn/index.astro', _page17],['src/pages/learn/getting-started.mdx', _page18],['src/pages/learn/mini-notation.mdx', _page19],['src/pages/learn/input-output.mdx', _page20],['src/pages/learn/functions.mdx', _page21],['src/pages/learn/effects.mdx', _page22],['src/pages/learn/samples.mdx', _page23],['src/pages/learn/signals.mdx', _page24],['src/pages/learn/colors.mdx', _page25],['src/pages/learn/sounds.mdx', _page26],['src/pages/learn/synths.mdx', _page27],['src/pages/learn/notes.mdx', _page28],['src/pages/learn/tonal.mdx', _page29],['src/pages/learn/code.mdx', _page30],['src/pages/img/example-[name].png.js', _page31],]);
const renderers = [Object.assign({"name":"astro:jsx","serverEntrypoint":"astro/jsx/server.js","jsxImportSource":"astro"}, { ssr: server_default }),Object.assign({"name":"@astrojs/preact","clientEntrypoint":"@astrojs/preact/client.js","serverEntrypoint":"@astrojs/preact/server.js","jsxImportSource":"preact"}, { ssr: server_default$1 }),Object.assign({"name":"@astrojs/react","clientEntrypoint":"@astrojs/react/client.js","serverEntrypoint":"@astrojs/react/server.js","jsxImportSource":"react"}, { ssr: _renderer2 }),];

export { $$HeadCommon as $, webaudioOutput as A, pianoroll as B, Pattern$1 as P, __astro_tag_component__ as _, createComponent as a, addAttribute as b, createAstro as c, renderComponent as d, renderSlot as e, renderHead as f, mini as g, h, minify as i, peg$SyntaxError as j, peg$parse as k, logger as l, maybeRenderHead as m, isPattern as n, getPlayableNoteValue as o, patternifyAST as p, pageMap, isNote as q, renderTemplate as r, renderers, getAudioContext$1 as s, register as t, edo as u, tuning as v, parseNumeral as w, xen as x, repl as y, transpiler as z };
